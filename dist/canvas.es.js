function Mb(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var fD = { exports: {} }, S_ = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var sI = Symbol.for("react.transitional.element"), rI = Symbol.for("react.fragment");
function hD(n, t, e) {
  var i = null;
  if (e !== void 0 && (i = "" + e), t.key !== void 0 && (i = "" + t.key), "key" in t) {
    e = {};
    for (var a in t)
      a !== "key" && (e[a] = t[a]);
  } else e = t;
  return t = e.ref, {
    $$typeof: sI,
    type: n,
    key: i,
    ref: t !== void 0 ? t : null,
    props: e
  };
}
S_.Fragment = rI;
S_.jsx = hD;
S_.jsxs = hD;
fD.exports = S_;
var en = fD.exports, dD = { exports: {} }, Se = {};
/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var bb = Symbol.for("react.transitional.element"), oI = Symbol.for("react.portal"), lI = Symbol.for("react.fragment"), uI = Symbol.for("react.strict_mode"), cI = Symbol.for("react.profiler"), fI = Symbol.for("react.consumer"), hI = Symbol.for("react.context"), dI = Symbol.for("react.forward_ref"), pI = Symbol.for("react.suspense"), mI = Symbol.for("react.memo"), pD = Symbol.for("react.lazy"), k2 = Symbol.iterator;
function gI(n) {
  return n === null || typeof n != "object" ? null : (n = k2 && n[k2] || n["@@iterator"], typeof n == "function" ? n : null);
}
var mD = {
  isMounted: function() {
    return !1;
  },
  enqueueForceUpdate: function() {
  },
  enqueueReplaceState: function() {
  },
  enqueueSetState: function() {
  }
}, gD = Object.assign, vD = {};
function ph(n, t, e) {
  this.props = n, this.context = t, this.refs = vD, this.updater = e || mD;
}
ph.prototype.isReactComponent = {};
ph.prototype.setState = function(n, t) {
  if (typeof n != "object" && typeof n != "function" && n != null)
    throw Error(
      "takes an object of state variables to update or a function which returns an object of state variables."
    );
  this.updater.enqueueSetState(this, n, t, "setState");
};
ph.prototype.forceUpdate = function(n) {
  this.updater.enqueueForceUpdate(this, n, "forceUpdate");
};
function _D() {
}
_D.prototype = ph.prototype;
function Eb(n, t, e) {
  this.props = n, this.context = t, this.refs = vD, this.updater = e || mD;
}
var Tb = Eb.prototype = new _D();
Tb.constructor = Eb;
gD(Tb, ph.prototype);
Tb.isPureReactComponent = !0;
var W2 = Array.isArray, yn = { H: null, A: null, T: null, S: null, V: null }, yD = Object.prototype.hasOwnProperty;
function Ab(n, t, e, i, a, s) {
  return e = s.ref, {
    $$typeof: bb,
    type: n,
    key: t,
    ref: e !== void 0 ? e : null,
    props: s
  };
}
function vI(n, t) {
  return Ab(
    n.type,
    t,
    void 0,
    void 0,
    void 0,
    n.props
  );
}
function Rb(n) {
  return typeof n == "object" && n !== null && n.$$typeof === bb;
}
function _I(n) {
  var t = { "=": "=0", ":": "=2" };
  return "$" + n.replace(/[=:]/g, function(e) {
    return t[e];
  });
}
var Z2 = /\/+/g;
function Zx(n, t) {
  return typeof n == "object" && n !== null && n.key != null ? _I("" + n.key) : t.toString(36);
}
function j2() {
}
function yI(n) {
  switch (n.status) {
    case "fulfilled":
      return n.value;
    case "rejected":
      throw n.reason;
    default:
      switch (typeof n.status == "string" ? n.then(j2, j2) : (n.status = "pending", n.then(
        function(t) {
          n.status === "pending" && (n.status = "fulfilled", n.value = t);
        },
        function(t) {
          n.status === "pending" && (n.status = "rejected", n.reason = t);
        }
      )), n.status) {
        case "fulfilled":
          return n.value;
        case "rejected":
          throw n.reason;
      }
  }
  throw n;
}
function af(n, t, e, i, a) {
  var s = typeof n;
  (s === "undefined" || s === "boolean") && (n = null);
  var r = !1;
  if (n === null) r = !0;
  else
    switch (s) {
      case "bigint":
      case "string":
      case "number":
        r = !0;
        break;
      case "object":
        switch (n.$$typeof) {
          case bb:
          case oI:
            r = !0;
            break;
          case pD:
            return r = n._init, af(
              r(n._payload),
              t,
              e,
              i,
              a
            );
        }
    }
  if (r)
    return a = a(n), r = i === "" ? "." + Zx(n, 0) : i, W2(a) ? (e = "", r != null && (e = r.replace(Z2, "$&/") + "/"), af(a, t, e, "", function(f) {
      return f;
    })) : a != null && (Rb(a) && (a = vI(
      a,
      e + (a.key == null || n && n.key === a.key ? "" : ("" + a.key).replace(
        Z2,
        "$&/"
      ) + "/") + r
    )), t.push(a)), 1;
  r = 0;
  var l = i === "" ? "." : i + ":";
  if (W2(n))
    for (var c = 0; c < n.length; c++)
      i = n[c], s = l + Zx(i, c), r += af(
        i,
        t,
        e,
        s,
        a
      );
  else if (c = gI(n), typeof c == "function")
    for (n = c.call(n), c = 0; !(i = n.next()).done; )
      i = i.value, s = l + Zx(i, c++), r += af(
        i,
        t,
        e,
        s,
        a
      );
  else if (s === "object") {
    if (typeof n.then == "function")
      return af(
        yI(n),
        t,
        e,
        i,
        a
      );
    throw t = String(n), Error(
      "Objects are not valid as a React child (found: " + (t === "[object Object]" ? "object with keys {" + Object.keys(n).join(", ") + "}" : t) + "). If you meant to render a collection of children, use an array instead."
    );
  }
  return r;
}
function dg(n, t, e) {
  if (n == null) return n;
  var i = [], a = 0;
  return af(n, i, "", "", function(s) {
    return t.call(e, s, a++);
  }), i;
}
function xI(n) {
  if (n._status === -1) {
    var t = n._result;
    t = t(), t.then(
      function(e) {
        (n._status === 0 || n._status === -1) && (n._status = 1, n._result = e);
      },
      function(e) {
        (n._status === 0 || n._status === -1) && (n._status = 2, n._result = e);
      }
    ), n._status === -1 && (n._status = 0, n._result = t);
  }
  if (n._status === 1) return n._result.default;
  throw n._result;
}
var Q2 = typeof reportError == "function" ? reportError : function(n) {
  if (typeof window == "object" && typeof window.ErrorEvent == "function") {
    var t = new window.ErrorEvent("error", {
      bubbles: !0,
      cancelable: !0,
      message: typeof n == "object" && n !== null && typeof n.message == "string" ? String(n.message) : String(n),
      error: n
    });
    if (!window.dispatchEvent(t)) return;
  } else if (typeof process == "object" && typeof process.emit == "function") {
    process.emit("uncaughtException", n);
    return;
  }
  console.error(n);
};
function SI() {
}
Se.Children = {
  map: dg,
  forEach: function(n, t, e) {
    dg(
      n,
      function() {
        t.apply(this, arguments);
      },
      e
    );
  },
  count: function(n) {
    var t = 0;
    return dg(n, function() {
      t++;
    }), t;
  },
  toArray: function(n) {
    return dg(n, function(t) {
      return t;
    }) || [];
  },
  only: function(n) {
    if (!Rb(n))
      throw Error(
        "React.Children.only expected to receive a single React element child."
      );
    return n;
  }
};
Se.Component = ph;
Se.Fragment = lI;
Se.Profiler = cI;
Se.PureComponent = Eb;
Se.StrictMode = uI;
Se.Suspense = pI;
Se.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = yn;
Se.__COMPILER_RUNTIME = {
  __proto__: null,
  c: function(n) {
    return yn.H.useMemoCache(n);
  }
};
Se.cache = function(n) {
  return function() {
    return n.apply(null, arguments);
  };
};
Se.cloneElement = function(n, t, e) {
  if (n == null)
    throw Error(
      "The argument must be a React element, but you passed " + n + "."
    );
  var i = gD({}, n.props), a = n.key, s = void 0;
  if (t != null)
    for (r in t.ref !== void 0 && (s = void 0), t.key !== void 0 && (a = "" + t.key), t)
      !yD.call(t, r) || r === "key" || r === "__self" || r === "__source" || r === "ref" && t.ref === void 0 || (i[r] = t[r]);
  var r = arguments.length - 2;
  if (r === 1) i.children = e;
  else if (1 < r) {
    for (var l = Array(r), c = 0; c < r; c++)
      l[c] = arguments[c + 2];
    i.children = l;
  }
  return Ab(n.type, a, void 0, void 0, s, i);
};
Se.createContext = function(n) {
  return n = {
    $$typeof: hI,
    _currentValue: n,
    _currentValue2: n,
    _threadCount: 0,
    Provider: null,
    Consumer: null
  }, n.Provider = n, n.Consumer = {
    $$typeof: fI,
    _context: n
  }, n;
};
Se.createElement = function(n, t, e) {
  var i, a = {}, s = null;
  if (t != null)
    for (i in t.key !== void 0 && (s = "" + t.key), t)
      yD.call(t, i) && i !== "key" && i !== "__self" && i !== "__source" && (a[i] = t[i]);
  var r = arguments.length - 2;
  if (r === 1) a.children = e;
  else if (1 < r) {
    for (var l = Array(r), c = 0; c < r; c++)
      l[c] = arguments[c + 2];
    a.children = l;
  }
  if (n && n.defaultProps)
    for (i in r = n.defaultProps, r)
      a[i] === void 0 && (a[i] = r[i]);
  return Ab(n, s, void 0, void 0, null, a);
};
Se.createRef = function() {
  return { current: null };
};
Se.forwardRef = function(n) {
  return { $$typeof: dI, render: n };
};
Se.isValidElement = Rb;
Se.lazy = function(n) {
  return {
    $$typeof: pD,
    _payload: { _status: -1, _result: n },
    _init: xI
  };
};
Se.memo = function(n, t) {
  return {
    $$typeof: mI,
    type: n,
    compare: t === void 0 ? null : t
  };
};
Se.startTransition = function(n) {
  var t = yn.T, e = {};
  yn.T = e;
  try {
    var i = n(), a = yn.S;
    a !== null && a(e, i), typeof i == "object" && i !== null && typeof i.then == "function" && i.then(SI, Q2);
  } catch (s) {
    Q2(s);
  } finally {
    yn.T = t;
  }
};
Se.unstable_useCacheRefresh = function() {
  return yn.H.useCacheRefresh();
};
Se.use = function(n) {
  return yn.H.use(n);
};
Se.useActionState = function(n, t, e) {
  return yn.H.useActionState(n, t, e);
};
Se.useCallback = function(n, t) {
  return yn.H.useCallback(n, t);
};
Se.useContext = function(n) {
  return yn.H.useContext(n);
};
Se.useDebugValue = function() {
};
Se.useDeferredValue = function(n, t) {
  return yn.H.useDeferredValue(n, t);
};
Se.useEffect = function(n, t, e) {
  var i = yn.H;
  if (typeof e == "function")
    throw Error(
      "useEffect CRUD overload is not enabled in this build of React."
    );
  return i.useEffect(n, t);
};
Se.useId = function() {
  return yn.H.useId();
};
Se.useImperativeHandle = function(n, t, e) {
  return yn.H.useImperativeHandle(n, t, e);
};
Se.useInsertionEffect = function(n, t) {
  return yn.H.useInsertionEffect(n, t);
};
Se.useLayoutEffect = function(n, t) {
  return yn.H.useLayoutEffect(n, t);
};
Se.useMemo = function(n, t) {
  return yn.H.useMemo(n, t);
};
Se.useOptimistic = function(n, t) {
  return yn.H.useOptimistic(n, t);
};
Se.useReducer = function(n, t, e) {
  return yn.H.useReducer(n, t, e);
};
Se.useRef = function(n) {
  return yn.H.useRef(n);
};
Se.useState = function(n) {
  return yn.H.useState(n);
};
Se.useSyncExternalStore = function(n, t, e) {
  return yn.H.useSyncExternalStore(
    n,
    t,
    e
  );
};
Se.useTransition = function() {
  return yn.H.useTransition();
};
Se.version = "19.1.0";
dD.exports = Se;
var Tt = dD.exports;
const MI = /* @__PURE__ */ Mb(Tt);
var xD = { exports: {} }, M_ = {}, SD = { exports: {} }, MD = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(n) {
  function t(P, q) {
    var G = P.length;
    P.push(q);
    t: for (; 0 < G; ) {
      var it = G - 1 >>> 1, lt = P[it];
      if (0 < a(lt, q))
        P[it] = q, P[G] = lt, G = it;
      else break t;
    }
  }
  function e(P) {
    return P.length === 0 ? null : P[0];
  }
  function i(P) {
    if (P.length === 0) return null;
    var q = P[0], G = P.pop();
    if (G !== q) {
      P[0] = G;
      t: for (var it = 0, lt = P.length, mt = lt >>> 1; it < mt; ) {
        var Rt = 2 * (it + 1) - 1, Qt = P[Rt], $ = Rt + 1, ht = P[$];
        if (0 > a(Qt, G))
          $ < lt && 0 > a(ht, Qt) ? (P[it] = ht, P[$] = G, it = $) : (P[it] = Qt, P[Rt] = G, it = Rt);
        else if ($ < lt && 0 > a(ht, G))
          P[it] = ht, P[$] = G, it = $;
        else break t;
      }
    }
    return q;
  }
  function a(P, q) {
    var G = P.sortIndex - q.sortIndex;
    return G !== 0 ? G : P.id - q.id;
  }
  if (n.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
    var s = performance;
    n.unstable_now = function() {
      return s.now();
    };
  } else {
    var r = Date, l = r.now();
    n.unstable_now = function() {
      return r.now() - l;
    };
  }
  var c = [], f = [], d = 1, p = null, m = 3, g = !1, y = !1, x = !1, M = !1, v = typeof setTimeout == "function" ? setTimeout : null, S = typeof clearTimeout == "function" ? clearTimeout : null, E = typeof setImmediate < "u" ? setImmediate : null;
  function T(P) {
    for (var q = e(f); q !== null; ) {
      if (q.callback === null) i(f);
      else if (q.startTime <= P)
        i(f), q.sortIndex = q.expirationTime, t(c, q);
      else break;
      q = e(f);
    }
  }
  function w(P) {
    if (x = !1, T(P), !y)
      if (e(c) !== null)
        y = !0, D || (D = !0, Y());
      else {
        var q = e(f);
        q !== null && J(w, q.startTime - P);
      }
  }
  var D = !1, U = -1, O = 5, R = -1;
  function C() {
    return M ? !0 : !(n.unstable_now() - R < O);
  }
  function B() {
    if (M = !1, D) {
      var P = n.unstable_now();
      R = P;
      var q = !0;
      try {
        t: {
          y = !1, x && (x = !1, S(U), U = -1), g = !0;
          var G = m;
          try {
            e: {
              for (T(P), p = e(c); p !== null && !(p.expirationTime > P && C()); ) {
                var it = p.callback;
                if (typeof it == "function") {
                  p.callback = null, m = p.priorityLevel;
                  var lt = it(
                    p.expirationTime <= P
                  );
                  if (P = n.unstable_now(), typeof lt == "function") {
                    p.callback = lt, T(P), q = !0;
                    break e;
                  }
                  p === e(c) && i(c), T(P);
                } else i(c);
                p = e(c);
              }
              if (p !== null) q = !0;
              else {
                var mt = e(f);
                mt !== null && J(
                  w,
                  mt.startTime - P
                ), q = !1;
              }
            }
            break t;
          } finally {
            p = null, m = G, g = !1;
          }
          q = void 0;
        }
      } finally {
        q ? Y() : D = !1;
      }
    }
  }
  var Y;
  if (typeof E == "function")
    Y = function() {
      E(B);
    };
  else if (typeof MessageChannel < "u") {
    var V = new MessageChannel(), Q = V.port2;
    V.port1.onmessage = B, Y = function() {
      Q.postMessage(null);
    };
  } else
    Y = function() {
      v(B, 0);
    };
  function J(P, q) {
    U = v(function() {
      P(n.unstable_now());
    }, q);
  }
  n.unstable_IdlePriority = 5, n.unstable_ImmediatePriority = 1, n.unstable_LowPriority = 4, n.unstable_NormalPriority = 3, n.unstable_Profiling = null, n.unstable_UserBlockingPriority = 2, n.unstable_cancelCallback = function(P) {
    P.callback = null;
  }, n.unstable_forceFrameRate = function(P) {
    0 > P || 125 < P ? console.error(
      "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
    ) : O = 0 < P ? Math.floor(1e3 / P) : 5;
  }, n.unstable_getCurrentPriorityLevel = function() {
    return m;
  }, n.unstable_next = function(P) {
    switch (m) {
      case 1:
      case 2:
      case 3:
        var q = 3;
        break;
      default:
        q = m;
    }
    var G = m;
    m = q;
    try {
      return P();
    } finally {
      m = G;
    }
  }, n.unstable_requestPaint = function() {
    M = !0;
  }, n.unstable_runWithPriority = function(P, q) {
    switch (P) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        P = 3;
    }
    var G = m;
    m = P;
    try {
      return q();
    } finally {
      m = G;
    }
  }, n.unstable_scheduleCallback = function(P, q, G) {
    var it = n.unstable_now();
    switch (typeof G == "object" && G !== null ? (G = G.delay, G = typeof G == "number" && 0 < G ? it + G : it) : G = it, P) {
      case 1:
        var lt = -1;
        break;
      case 2:
        lt = 250;
        break;
      case 5:
        lt = 1073741823;
        break;
      case 4:
        lt = 1e4;
        break;
      default:
        lt = 5e3;
    }
    return lt = G + lt, P = {
      id: d++,
      callback: q,
      priorityLevel: P,
      startTime: G,
      expirationTime: lt,
      sortIndex: -1
    }, G > it ? (P.sortIndex = G, t(f, P), e(c) === null && P === e(f) && (x ? (S(U), U = -1) : x = !0, J(w, G - it))) : (P.sortIndex = lt, t(c, P), y || g || (y = !0, D || (D = !0, Y()))), P;
  }, n.unstable_shouldYield = C, n.unstable_wrapCallback = function(P) {
    var q = m;
    return function() {
      var G = m;
      m = q;
      try {
        return P.apply(this, arguments);
      } finally {
        m = G;
      }
    };
  };
})(MD);
SD.exports = MD;
var bI = SD.exports, bD = { exports: {} }, Ji = {};
/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var EI = Tt;
function ED(n) {
  var t = "https://react.dev/errors/" + n;
  if (1 < arguments.length) {
    t += "?args[]=" + encodeURIComponent(arguments[1]);
    for (var e = 2; e < arguments.length; e++)
      t += "&args[]=" + encodeURIComponent(arguments[e]);
  }
  return "Minified React error #" + n + "; visit " + t + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
function Co() {
}
var Qi = {
  d: {
    f: Co,
    r: function() {
      throw Error(ED(522));
    },
    D: Co,
    C: Co,
    L: Co,
    m: Co,
    X: Co,
    S: Co,
    M: Co
  },
  p: 0,
  findDOMNode: null
}, TI = Symbol.for("react.portal");
function AI(n, t, e) {
  var i = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
  return {
    $$typeof: TI,
    key: i == null ? null : "" + i,
    children: n,
    containerInfo: t,
    implementation: e
  };
}
var Id = EI.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
function b_(n, t) {
  if (n === "font") return "";
  if (typeof t == "string")
    return t === "use-credentials" ? t : "";
}
Ji.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Qi;
Ji.createPortal = function(n, t) {
  var e = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
  if (!t || t.nodeType !== 1 && t.nodeType !== 9 && t.nodeType !== 11)
    throw Error(ED(299));
  return AI(n, t, null, e);
};
Ji.flushSync = function(n) {
  var t = Id.T, e = Qi.p;
  try {
    if (Id.T = null, Qi.p = 2, n) return n();
  } finally {
    Id.T = t, Qi.p = e, Qi.d.f();
  }
};
Ji.preconnect = function(n, t) {
  typeof n == "string" && (t ? (t = t.crossOrigin, t = typeof t == "string" ? t === "use-credentials" ? t : "" : void 0) : t = null, Qi.d.C(n, t));
};
Ji.prefetchDNS = function(n) {
  typeof n == "string" && Qi.d.D(n);
};
Ji.preinit = function(n, t) {
  if (typeof n == "string" && t && typeof t.as == "string") {
    var e = t.as, i = b_(e, t.crossOrigin), a = typeof t.integrity == "string" ? t.integrity : void 0, s = typeof t.fetchPriority == "string" ? t.fetchPriority : void 0;
    e === "style" ? Qi.d.S(
      n,
      typeof t.precedence == "string" ? t.precedence : void 0,
      {
        crossOrigin: i,
        integrity: a,
        fetchPriority: s
      }
    ) : e === "script" && Qi.d.X(n, {
      crossOrigin: i,
      integrity: a,
      fetchPriority: s,
      nonce: typeof t.nonce == "string" ? t.nonce : void 0
    });
  }
};
Ji.preinitModule = function(n, t) {
  if (typeof n == "string")
    if (typeof t == "object" && t !== null) {
      if (t.as == null || t.as === "script") {
        var e = b_(
          t.as,
          t.crossOrigin
        );
        Qi.d.M(n, {
          crossOrigin: e,
          integrity: typeof t.integrity == "string" ? t.integrity : void 0,
          nonce: typeof t.nonce == "string" ? t.nonce : void 0
        });
      }
    } else t == null && Qi.d.M(n);
};
Ji.preload = function(n, t) {
  if (typeof n == "string" && typeof t == "object" && t !== null && typeof t.as == "string") {
    var e = t.as, i = b_(e, t.crossOrigin);
    Qi.d.L(n, e, {
      crossOrigin: i,
      integrity: typeof t.integrity == "string" ? t.integrity : void 0,
      nonce: typeof t.nonce == "string" ? t.nonce : void 0,
      type: typeof t.type == "string" ? t.type : void 0,
      fetchPriority: typeof t.fetchPriority == "string" ? t.fetchPriority : void 0,
      referrerPolicy: typeof t.referrerPolicy == "string" ? t.referrerPolicy : void 0,
      imageSrcSet: typeof t.imageSrcSet == "string" ? t.imageSrcSet : void 0,
      imageSizes: typeof t.imageSizes == "string" ? t.imageSizes : void 0,
      media: typeof t.media == "string" ? t.media : void 0
    });
  }
};
Ji.preloadModule = function(n, t) {
  if (typeof n == "string")
    if (t) {
      var e = b_(t.as, t.crossOrigin);
      Qi.d.m(n, {
        as: typeof t.as == "string" && t.as !== "script" ? t.as : void 0,
        crossOrigin: e,
        integrity: typeof t.integrity == "string" ? t.integrity : void 0
      });
    } else Qi.d.m(n);
};
Ji.requestFormReset = function(n) {
  Qi.d.r(n);
};
Ji.unstable_batchedUpdates = function(n, t) {
  return n(t);
};
Ji.useFormState = function(n, t, e) {
  return Id.H.useFormState(n, t, e);
};
Ji.useFormStatus = function() {
  return Id.H.useHostTransitionStatus();
};
Ji.version = "19.1.0";
function TD() {
  if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(TD);
    } catch (n) {
      console.error(n);
    }
}
TD(), bD.exports = Ji;
var RI = bD.exports;
/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var $n = bI, AD = Tt, CI = RI;
function vt(n) {
  var t = "https://react.dev/errors/" + n;
  if (1 < arguments.length) {
    t += "?args[]=" + encodeURIComponent(arguments[1]);
    for (var e = 2; e < arguments.length; e++)
      t += "&args[]=" + encodeURIComponent(arguments[e]);
  }
  return "Minified React error #" + n + "; visit " + t + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
function RD(n) {
  return !(!n || n.nodeType !== 1 && n.nodeType !== 9 && n.nodeType !== 11);
}
function $p(n) {
  var t = n, e = n;
  if (n.alternate) for (; t.return; ) t = t.return;
  else {
    n = t;
    do
      t = n, t.flags & 4098 && (e = t.return), n = t.return;
    while (n);
  }
  return t.tag === 3 ? e : null;
}
function CD(n) {
  if (n.tag === 13) {
    var t = n.memoizedState;
    if (t === null && (n = n.alternate, n !== null && (t = n.memoizedState)), t !== null) return t.dehydrated;
  }
  return null;
}
function K2(n) {
  if ($p(n) !== n)
    throw Error(vt(188));
}
function wI(n) {
  var t = n.alternate;
  if (!t) {
    if (t = $p(n), t === null) throw Error(vt(188));
    return t !== n ? null : n;
  }
  for (var e = n, i = t; ; ) {
    var a = e.return;
    if (a === null) break;
    var s = a.alternate;
    if (s === null) {
      if (i = a.return, i !== null) {
        e = i;
        continue;
      }
      break;
    }
    if (a.child === s.child) {
      for (s = a.child; s; ) {
        if (s === e) return K2(a), n;
        if (s === i) return K2(a), t;
        s = s.sibling;
      }
      throw Error(vt(188));
    }
    if (e.return !== i.return) e = a, i = s;
    else {
      for (var r = !1, l = a.child; l; ) {
        if (l === e) {
          r = !0, e = a, i = s;
          break;
        }
        if (l === i) {
          r = !0, i = a, e = s;
          break;
        }
        l = l.sibling;
      }
      if (!r) {
        for (l = s.child; l; ) {
          if (l === e) {
            r = !0, e = s, i = a;
            break;
          }
          if (l === i) {
            r = !0, i = s, e = a;
            break;
          }
          l = l.sibling;
        }
        if (!r) throw Error(vt(189));
      }
    }
    if (e.alternate !== i) throw Error(vt(190));
  }
  if (e.tag !== 3) throw Error(vt(188));
  return e.stateNode.current === e ? n : t;
}
function wD(n) {
  var t = n.tag;
  if (t === 5 || t === 26 || t === 27 || t === 6) return n;
  for (n = n.child; n !== null; ) {
    if (t = wD(n), t !== null) return t;
    n = n.sibling;
  }
  return null;
}
var mn = Object.assign, DI = Symbol.for("react.element"), pg = Symbol.for("react.transitional.element"), wd = Symbol.for("react.portal"), lf = Symbol.for("react.fragment"), DD = Symbol.for("react.strict_mode"), B1 = Symbol.for("react.profiler"), UI = Symbol.for("react.provider"), UD = Symbol.for("react.consumer"), qr = Symbol.for("react.context"), Cb = Symbol.for("react.forward_ref"), P1 = Symbol.for("react.suspense"), I1 = Symbol.for("react.suspense_list"), wb = Symbol.for("react.memo"), Io = Symbol.for("react.lazy"), H1 = Symbol.for("react.activity"), OI = Symbol.for("react.memo_cache_sentinel"), J2 = Symbol.iterator;
function nd(n) {
  return n === null || typeof n != "object" ? null : (n = J2 && n[J2] || n["@@iterator"], typeof n == "function" ? n : null);
}
var NI = Symbol.for("react.client.reference");
function F1(n) {
  if (n == null) return null;
  if (typeof n == "function")
    return n.$$typeof === NI ? null : n.displayName || n.name || null;
  if (typeof n == "string") return n;
  switch (n) {
    case lf:
      return "Fragment";
    case B1:
      return "Profiler";
    case DD:
      return "StrictMode";
    case P1:
      return "Suspense";
    case I1:
      return "SuspenseList";
    case H1:
      return "Activity";
  }
  if (typeof n == "object")
    switch (n.$$typeof) {
      case wd:
        return "Portal";
      case qr:
        return (n.displayName || "Context") + ".Provider";
      case UD:
        return (n._context.displayName || "Context") + ".Consumer";
      case Cb:
        var t = n.render;
        return n = n.displayName, n || (n = t.displayName || t.name || "", n = n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef"), n;
      case wb:
        return t = n.displayName || null, t !== null ? t : F1(n.type) || "Memo";
      case Io:
        t = n._payload, n = n._init;
        try {
          return F1(n(t));
        } catch {
        }
    }
  return null;
}
var Dd = Array.isArray, ue = AD.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, We = CI.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, Eu = {
  pending: !1,
  data: null,
  method: null,
  action: null
}, V1 = [], uf = -1;
function pr(n) {
  return { current: n };
}
function ci(n) {
  0 > uf || (n.current = V1[uf], V1[uf] = null, uf--);
}
function xn(n, t) {
  uf++, V1[uf] = n.current, n.current = t;
}
var rr = pr(null), pp = pr(null), el = pr(null), k0 = pr(null);
function W0(n, t) {
  switch (xn(el, t), xn(pp, n), xn(rr, null), t.nodeType) {
    case 9:
    case 11:
      n = (n = t.documentElement) && (n = n.namespaceURI) ? iC(n) : 0;
      break;
    default:
      if (n = t.tagName, t = t.namespaceURI)
        t = iC(t), n = ZO(t, n);
      else
        switch (n) {
          case "svg":
            n = 1;
            break;
          case "math":
            n = 2;
            break;
          default:
            n = 0;
        }
  }
  ci(rr), xn(rr, n);
}
function Ff() {
  ci(rr), ci(pp), ci(el);
}
function G1(n) {
  n.memoizedState !== null && xn(k0, n);
  var t = rr.current, e = ZO(t, n.type);
  t !== e && (xn(pp, n), xn(rr, e));
}
function Z0(n) {
  pp.current === n && (ci(rr), ci(pp)), k0.current === n && (ci(k0), Ep._currentValue = Eu);
}
var X1 = Object.prototype.hasOwnProperty, Db = $n.unstable_scheduleCallback, jx = $n.unstable_cancelCallback, LI = $n.unstable_shouldYield, zI = $n.unstable_requestPaint, or = $n.unstable_now, BI = $n.unstable_getCurrentPriorityLevel, OD = $n.unstable_ImmediatePriority, ND = $n.unstable_UserBlockingPriority, j0 = $n.unstable_NormalPriority, PI = $n.unstable_LowPriority, LD = $n.unstable_IdlePriority, II = $n.log, HI = $n.unstable_setDisableYieldValue, tm = null, Fa = null;
function Wo(n) {
  if (typeof II == "function" && HI(n), Fa && typeof Fa.setStrictMode == "function")
    try {
      Fa.setStrictMode(tm, n);
    } catch {
    }
}
var Va = Math.clz32 ? Math.clz32 : GI, FI = Math.log, VI = Math.LN2;
function GI(n) {
  return n >>>= 0, n === 0 ? 32 : 31 - (FI(n) / VI | 0) | 0;
}
var mg = 256, gg = 4194304;
function cu(n) {
  var t = n & 42;
  if (t !== 0) return t;
  switch (n & -n) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
      return 64;
    case 128:
      return 128;
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return n & 4194048;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
      return n & 62914560;
    case 67108864:
      return 67108864;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 0;
    default:
      return n;
  }
}
function E_(n, t, e) {
  var i = n.pendingLanes;
  if (i === 0) return 0;
  var a = 0, s = n.suspendedLanes, r = n.pingedLanes;
  n = n.warmLanes;
  var l = i & 134217727;
  return l !== 0 ? (i = l & ~s, i !== 0 ? a = cu(i) : (r &= l, r !== 0 ? a = cu(r) : e || (e = l & ~n, e !== 0 && (a = cu(e))))) : (l = i & ~s, l !== 0 ? a = cu(l) : r !== 0 ? a = cu(r) : e || (e = i & ~n, e !== 0 && (a = cu(e)))), a === 0 ? 0 : t !== 0 && t !== a && !(t & s) && (s = a & -a, e = t & -t, s >= e || s === 32 && (e & 4194048) !== 0) ? t : a;
}
function em(n, t) {
  return (n.pendingLanes & ~(n.suspendedLanes & ~n.pingedLanes) & t) === 0;
}
function XI(n, t) {
  switch (n) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 64:
      return t + 250;
    case 16:
    case 32:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return t + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
      return -1;
    case 67108864:
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function zD() {
  var n = mg;
  return mg <<= 1, !(mg & 4194048) && (mg = 256), n;
}
function BD() {
  var n = gg;
  return gg <<= 1, !(gg & 62914560) && (gg = 4194304), n;
}
function Qx(n) {
  for (var t = [], e = 0; 31 > e; e++) t.push(n);
  return t;
}
function nm(n, t) {
  n.pendingLanes |= t, t !== 268435456 && (n.suspendedLanes = 0, n.pingedLanes = 0, n.warmLanes = 0);
}
function qI(n, t, e, i, a, s) {
  var r = n.pendingLanes;
  n.pendingLanes = e, n.suspendedLanes = 0, n.pingedLanes = 0, n.warmLanes = 0, n.expiredLanes &= e, n.entangledLanes &= e, n.errorRecoveryDisabledLanes &= e, n.shellSuspendCounter = 0;
  var l = n.entanglements, c = n.expirationTimes, f = n.hiddenUpdates;
  for (e = r & ~e; 0 < e; ) {
    var d = 31 - Va(e), p = 1 << d;
    l[d] = 0, c[d] = -1;
    var m = f[d];
    if (m !== null)
      for (f[d] = null, d = 0; d < m.length; d++) {
        var g = m[d];
        g !== null && (g.lane &= -536870913);
      }
    e &= ~p;
  }
  i !== 0 && PD(n, i, 0), s !== 0 && a === 0 && n.tag !== 0 && (n.suspendedLanes |= s & ~(r & ~t));
}
function PD(n, t, e) {
  n.pendingLanes |= t, n.suspendedLanes &= ~t;
  var i = 31 - Va(t);
  n.entangledLanes |= t, n.entanglements[i] = n.entanglements[i] | 1073741824 | e & 4194090;
}
function ID(n, t) {
  var e = n.entangledLanes |= t;
  for (n = n.entanglements; e; ) {
    var i = 31 - Va(e), a = 1 << i;
    a & t | n[i] & t && (n[i] |= t), e &= ~a;
  }
}
function Ub(n) {
  switch (n) {
    case 2:
      n = 1;
      break;
    case 8:
      n = 4;
      break;
    case 32:
      n = 16;
      break;
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
      n = 128;
      break;
    case 268435456:
      n = 134217728;
      break;
    default:
      n = 0;
  }
  return n;
}
function Ob(n) {
  return n &= -n, 2 < n ? 8 < n ? n & 134217727 ? 32 : 268435456 : 8 : 2;
}
function HD() {
  var n = We.p;
  return n !== 0 ? n : (n = window.event, n === void 0 ? 32 : aN(n.type));
}
function YI(n, t) {
  var e = We.p;
  try {
    return We.p = n, t();
  } finally {
    We.p = e;
  }
}
var yl = Math.random().toString(36).slice(2), Oi = "__reactFiber$" + yl, ga = "__reactProps$" + yl, mh = "__reactContainer$" + yl, q1 = "__reactEvents$" + yl, kI = "__reactListeners$" + yl, WI = "__reactHandles$" + yl, $2 = "__reactResources$" + yl, im = "__reactMarker$" + yl;
function Nb(n) {
  delete n[Oi], delete n[ga], delete n[q1], delete n[kI], delete n[WI];
}
function cf(n) {
  var t = n[Oi];
  if (t) return t;
  for (var e = n.parentNode; e; ) {
    if (t = e[mh] || e[Oi]) {
      if (e = t.alternate, t.child !== null || e !== null && e.child !== null)
        for (n = rC(n); n !== null; ) {
          if (e = n[Oi]) return e;
          n = rC(n);
        }
      return t;
    }
    n = e, e = n.parentNode;
  }
  return null;
}
function gh(n) {
  if (n = n[Oi] || n[mh]) {
    var t = n.tag;
    if (t === 5 || t === 6 || t === 13 || t === 26 || t === 27 || t === 3)
      return n;
  }
  return null;
}
function Ud(n) {
  var t = n.tag;
  if (t === 5 || t === 26 || t === 27 || t === 6) return n.stateNode;
  throw Error(vt(33));
}
function Af(n) {
  var t = n[$2];
  return t || (t = n[$2] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() }), t;
}
function oi(n) {
  n[im] = !0;
}
var FD = /* @__PURE__ */ new Set(), VD = {};
function ju(n, t) {
  Vf(n, t), Vf(n + "Capture", t);
}
function Vf(n, t) {
  for (VD[n] = t, n = 0; n < t.length; n++)
    FD.add(t[n]);
}
var ZI = RegExp(
  "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
), tR = {}, eR = {};
function jI(n) {
  return X1.call(eR, n) ? !0 : X1.call(tR, n) ? !1 : ZI.test(n) ? eR[n] = !0 : (tR[n] = !0, !1);
}
function T0(n, t, e) {
  if (jI(t))
    if (e === null) n.removeAttribute(t);
    else {
      switch (typeof e) {
        case "undefined":
        case "function":
        case "symbol":
          n.removeAttribute(t);
          return;
        case "boolean":
          var i = t.toLowerCase().slice(0, 5);
          if (i !== "data-" && i !== "aria-") {
            n.removeAttribute(t);
            return;
          }
      }
      n.setAttribute(t, "" + e);
    }
}
function vg(n, t, e) {
  if (e === null) n.removeAttribute(t);
  else {
    switch (typeof e) {
      case "undefined":
      case "function":
      case "symbol":
      case "boolean":
        n.removeAttribute(t);
        return;
    }
    n.setAttribute(t, "" + e);
  }
}
function wr(n, t, e, i) {
  if (i === null) n.removeAttribute(e);
  else {
    switch (typeof i) {
      case "undefined":
      case "function":
      case "symbol":
      case "boolean":
        n.removeAttribute(e);
        return;
    }
    n.setAttributeNS(t, e, "" + i);
  }
}
var Kx, nR;
function sf(n) {
  if (Kx === void 0)
    try {
      throw Error();
    } catch (e) {
      var t = e.stack.trim().match(/\n( *(at )?)/);
      Kx = t && t[1] || "", nR = -1 < e.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < e.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
  return `
` + Kx + n + nR;
}
var Jx = !1;
function $x(n, t) {
  if (!n || Jx) return "";
  Jx = !0;
  var e = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    var i = {
      DetermineComponentFrameRoot: function() {
        try {
          if (t) {
            var p = function() {
              throw Error();
            };
            if (Object.defineProperty(p.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(p, []);
              } catch (g) {
                var m = g;
              }
              Reflect.construct(n, [], p);
            } else {
              try {
                p.call();
              } catch (g) {
                m = g;
              }
              n.call(p.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (g) {
              m = g;
            }
            (p = n()) && typeof p.catch == "function" && p.catch(function() {
            });
          }
        } catch (g) {
          if (g && m && typeof g.stack == "string")
            return [g.stack, m.stack];
        }
        return [null, null];
      }
    };
    i.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
    var a = Object.getOwnPropertyDescriptor(
      i.DetermineComponentFrameRoot,
      "name"
    );
    a && a.configurable && Object.defineProperty(
      i.DetermineComponentFrameRoot,
      "name",
      { value: "DetermineComponentFrameRoot" }
    );
    var s = i.DetermineComponentFrameRoot(), r = s[0], l = s[1];
    if (r && l) {
      var c = r.split(`
`), f = l.split(`
`);
      for (a = i = 0; i < c.length && !c[i].includes("DetermineComponentFrameRoot"); )
        i++;
      for (; a < f.length && !f[a].includes(
        "DetermineComponentFrameRoot"
      ); )
        a++;
      if (i === c.length || a === f.length)
        for (i = c.length - 1, a = f.length - 1; 1 <= i && 0 <= a && c[i] !== f[a]; )
          a--;
      for (; 1 <= i && 0 <= a; i--, a--)
        if (c[i] !== f[a]) {
          if (i !== 1 || a !== 1)
            do
              if (i--, a--, 0 > a || c[i] !== f[a]) {
                var d = `
` + c[i].replace(" at new ", " at ");
                return n.displayName && d.includes("<anonymous>") && (d = d.replace("<anonymous>", n.displayName)), d;
              }
            while (1 <= i && 0 <= a);
          break;
        }
    }
  } finally {
    Jx = !1, Error.prepareStackTrace = e;
  }
  return (e = n ? n.displayName || n.name : "") ? sf(e) : "";
}
function QI(n) {
  switch (n.tag) {
    case 26:
    case 27:
    case 5:
      return sf(n.type);
    case 16:
      return sf("Lazy");
    case 13:
      return sf("Suspense");
    case 19:
      return sf("SuspenseList");
    case 0:
    case 15:
      return $x(n.type, !1);
    case 11:
      return $x(n.type.render, !1);
    case 1:
      return $x(n.type, !0);
    case 31:
      return sf("Activity");
    default:
      return "";
  }
}
function iR(n) {
  try {
    var t = "";
    do
      t += QI(n), n = n.return;
    while (n);
    return t;
  } catch (e) {
    return `
Error generating stack: ` + e.message + `
` + e.stack;
  }
}
function us(n) {
  switch (typeof n) {
    case "bigint":
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return n;
    case "object":
      return n;
    default:
      return "";
  }
}
function GD(n) {
  var t = n.type;
  return (n = n.nodeName) && n.toLowerCase() === "input" && (t === "checkbox" || t === "radio");
}
function KI(n) {
  var t = GD(n) ? "checked" : "value", e = Object.getOwnPropertyDescriptor(
    n.constructor.prototype,
    t
  ), i = "" + n[t];
  if (!n.hasOwnProperty(t) && typeof e < "u" && typeof e.get == "function" && typeof e.set == "function") {
    var a = e.get, s = e.set;
    return Object.defineProperty(n, t, {
      configurable: !0,
      get: function() {
        return a.call(this);
      },
      set: function(r) {
        i = "" + r, s.call(this, r);
      }
    }), Object.defineProperty(n, t, {
      enumerable: e.enumerable
    }), {
      getValue: function() {
        return i;
      },
      setValue: function(r) {
        i = "" + r;
      },
      stopTracking: function() {
        n._valueTracker = null, delete n[t];
      }
    };
  }
}
function Q0(n) {
  n._valueTracker || (n._valueTracker = KI(n));
}
function XD(n) {
  if (!n) return !1;
  var t = n._valueTracker;
  if (!t) return !0;
  var e = t.getValue(), i = "";
  return n && (i = GD(n) ? n.checked ? "true" : "false" : n.value), n = i, n !== e ? (t.setValue(n), !0) : !1;
}
function K0(n) {
  if (n = n || (typeof document < "u" ? document : void 0), typeof n > "u") return null;
  try {
    return n.activeElement || n.body;
  } catch {
    return n.body;
  }
}
var JI = /[\n"\\]/g;
function hs(n) {
  return n.replace(
    JI,
    function(t) {
      return "\\" + t.charCodeAt(0).toString(16) + " ";
    }
  );
}
function Y1(n, t, e, i, a, s, r, l) {
  n.name = "", r != null && typeof r != "function" && typeof r != "symbol" && typeof r != "boolean" ? n.type = r : n.removeAttribute("type"), t != null ? r === "number" ? (t === 0 && n.value === "" || n.value != t) && (n.value = "" + us(t)) : n.value !== "" + us(t) && (n.value = "" + us(t)) : r !== "submit" && r !== "reset" || n.removeAttribute("value"), t != null ? k1(n, r, us(t)) : e != null ? k1(n, r, us(e)) : i != null && n.removeAttribute("value"), a == null && s != null && (n.defaultChecked = !!s), a != null && (n.checked = a && typeof a != "function" && typeof a != "symbol"), l != null && typeof l != "function" && typeof l != "symbol" && typeof l != "boolean" ? n.name = "" + us(l) : n.removeAttribute("name");
}
function qD(n, t, e, i, a, s, r, l) {
  if (s != null && typeof s != "function" && typeof s != "symbol" && typeof s != "boolean" && (n.type = s), t != null || e != null) {
    if (!(s !== "submit" && s !== "reset" || t != null))
      return;
    e = e != null ? "" + us(e) : "", t = t != null ? "" + us(t) : e, l || t === n.value || (n.value = t), n.defaultValue = t;
  }
  i = i ?? a, i = typeof i != "function" && typeof i != "symbol" && !!i, n.checked = l ? n.checked : !!i, n.defaultChecked = !!i, r != null && typeof r != "function" && typeof r != "symbol" && typeof r != "boolean" && (n.name = r);
}
function k1(n, t, e) {
  t === "number" && K0(n.ownerDocument) === n || n.defaultValue === "" + e || (n.defaultValue = "" + e);
}
function Rf(n, t, e, i) {
  if (n = n.options, t) {
    t = {};
    for (var a = 0; a < e.length; a++)
      t["$" + e[a]] = !0;
    for (e = 0; e < n.length; e++)
      a = t.hasOwnProperty("$" + n[e].value), n[e].selected !== a && (n[e].selected = a), a && i && (n[e].defaultSelected = !0);
  } else {
    for (e = "" + us(e), t = null, a = 0; a < n.length; a++) {
      if (n[a].value === e) {
        n[a].selected = !0, i && (n[a].defaultSelected = !0);
        return;
      }
      t !== null || n[a].disabled || (t = n[a]);
    }
    t !== null && (t.selected = !0);
  }
}
function YD(n, t, e) {
  if (t != null && (t = "" + us(t), t !== n.value && (n.value = t), e == null)) {
    n.defaultValue !== t && (n.defaultValue = t);
    return;
  }
  n.defaultValue = e != null ? "" + us(e) : "";
}
function kD(n, t, e, i) {
  if (t == null) {
    if (i != null) {
      if (e != null) throw Error(vt(92));
      if (Dd(i)) {
        if (1 < i.length) throw Error(vt(93));
        i = i[0];
      }
      e = i;
    }
    e == null && (e = ""), t = e;
  }
  e = us(t), n.defaultValue = e, i = n.textContent, i === e && i !== "" && i !== null && (n.value = i);
}
function Gf(n, t) {
  if (t) {
    var e = n.firstChild;
    if (e && e === n.lastChild && e.nodeType === 3) {
      e.nodeValue = t;
      return;
    }
  }
  n.textContent = t;
}
var $I = new Set(
  "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
    " "
  )
);
function aR(n, t, e) {
  var i = t.indexOf("--") === 0;
  e == null || typeof e == "boolean" || e === "" ? i ? n.setProperty(t, "") : t === "float" ? n.cssFloat = "" : n[t] = "" : i ? n.setProperty(t, e) : typeof e != "number" || e === 0 || $I.has(t) ? t === "float" ? n.cssFloat = e : n[t] = ("" + e).trim() : n[t] = e + "px";
}
function WD(n, t, e) {
  if (t != null && typeof t != "object")
    throw Error(vt(62));
  if (n = n.style, e != null) {
    for (var i in e)
      !e.hasOwnProperty(i) || t != null && t.hasOwnProperty(i) || (i.indexOf("--") === 0 ? n.setProperty(i, "") : i === "float" ? n.cssFloat = "" : n[i] = "");
    for (var a in t)
      i = t[a], t.hasOwnProperty(a) && e[a] !== i && aR(n, a, i);
  } else
    for (var s in t)
      t.hasOwnProperty(s) && aR(n, s, t[s]);
}
function Lb(n) {
  if (n.indexOf("-") === -1) return !1;
  switch (n) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;
    default:
      return !0;
  }
}
var t5 = /* @__PURE__ */ new Map([
  ["acceptCharset", "accept-charset"],
  ["htmlFor", "for"],
  ["httpEquiv", "http-equiv"],
  ["crossOrigin", "crossorigin"],
  ["accentHeight", "accent-height"],
  ["alignmentBaseline", "alignment-baseline"],
  ["arabicForm", "arabic-form"],
  ["baselineShift", "baseline-shift"],
  ["capHeight", "cap-height"],
  ["clipPath", "clip-path"],
  ["clipRule", "clip-rule"],
  ["colorInterpolation", "color-interpolation"],
  ["colorInterpolationFilters", "color-interpolation-filters"],
  ["colorProfile", "color-profile"],
  ["colorRendering", "color-rendering"],
  ["dominantBaseline", "dominant-baseline"],
  ["enableBackground", "enable-background"],
  ["fillOpacity", "fill-opacity"],
  ["fillRule", "fill-rule"],
  ["floodColor", "flood-color"],
  ["floodOpacity", "flood-opacity"],
  ["fontFamily", "font-family"],
  ["fontSize", "font-size"],
  ["fontSizeAdjust", "font-size-adjust"],
  ["fontStretch", "font-stretch"],
  ["fontStyle", "font-style"],
  ["fontVariant", "font-variant"],
  ["fontWeight", "font-weight"],
  ["glyphName", "glyph-name"],
  ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
  ["glyphOrientationVertical", "glyph-orientation-vertical"],
  ["horizAdvX", "horiz-adv-x"],
  ["horizOriginX", "horiz-origin-x"],
  ["imageRendering", "image-rendering"],
  ["letterSpacing", "letter-spacing"],
  ["lightingColor", "lighting-color"],
  ["markerEnd", "marker-end"],
  ["markerMid", "marker-mid"],
  ["markerStart", "marker-start"],
  ["overlinePosition", "overline-position"],
  ["overlineThickness", "overline-thickness"],
  ["paintOrder", "paint-order"],
  ["panose-1", "panose-1"],
  ["pointerEvents", "pointer-events"],
  ["renderingIntent", "rendering-intent"],
  ["shapeRendering", "shape-rendering"],
  ["stopColor", "stop-color"],
  ["stopOpacity", "stop-opacity"],
  ["strikethroughPosition", "strikethrough-position"],
  ["strikethroughThickness", "strikethrough-thickness"],
  ["strokeDasharray", "stroke-dasharray"],
  ["strokeDashoffset", "stroke-dashoffset"],
  ["strokeLinecap", "stroke-linecap"],
  ["strokeLinejoin", "stroke-linejoin"],
  ["strokeMiterlimit", "stroke-miterlimit"],
  ["strokeOpacity", "stroke-opacity"],
  ["strokeWidth", "stroke-width"],
  ["textAnchor", "text-anchor"],
  ["textDecoration", "text-decoration"],
  ["textRendering", "text-rendering"],
  ["transformOrigin", "transform-origin"],
  ["underlinePosition", "underline-position"],
  ["underlineThickness", "underline-thickness"],
  ["unicodeBidi", "unicode-bidi"],
  ["unicodeRange", "unicode-range"],
  ["unitsPerEm", "units-per-em"],
  ["vAlphabetic", "v-alphabetic"],
  ["vHanging", "v-hanging"],
  ["vIdeographic", "v-ideographic"],
  ["vMathematical", "v-mathematical"],
  ["vectorEffect", "vector-effect"],
  ["vertAdvY", "vert-adv-y"],
  ["vertOriginX", "vert-origin-x"],
  ["vertOriginY", "vert-origin-y"],
  ["wordSpacing", "word-spacing"],
  ["writingMode", "writing-mode"],
  ["xmlnsXlink", "xmlns:xlink"],
  ["xHeight", "x-height"]
]), e5 = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
function A0(n) {
  return e5.test("" + n) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : n;
}
var W1 = null;
function zb(n) {
  return n = n.target || n.srcElement || window, n.correspondingUseElement && (n = n.correspondingUseElement), n.nodeType === 3 ? n.parentNode : n;
}
var ff = null, Cf = null;
function sR(n) {
  var t = gh(n);
  if (t && (n = t.stateNode)) {
    var e = n[ga] || null;
    t: switch (n = t.stateNode, t.type) {
      case "input":
        if (Y1(
          n,
          e.value,
          e.defaultValue,
          e.defaultValue,
          e.checked,
          e.defaultChecked,
          e.type,
          e.name
        ), t = e.name, e.type === "radio" && t != null) {
          for (e = n; e.parentNode; ) e = e.parentNode;
          for (e = e.querySelectorAll(
            'input[name="' + hs(
              "" + t
            ) + '"][type="radio"]'
          ), t = 0; t < e.length; t++) {
            var i = e[t];
            if (i !== n && i.form === n.form) {
              var a = i[ga] || null;
              if (!a) throw Error(vt(90));
              Y1(
                i,
                a.value,
                a.defaultValue,
                a.defaultValue,
                a.checked,
                a.defaultChecked,
                a.type,
                a.name
              );
            }
          }
          for (t = 0; t < e.length; t++)
            i = e[t], i.form === n.form && XD(i);
        }
        break t;
      case "textarea":
        YD(n, e.value, e.defaultValue);
        break t;
      case "select":
        t = e.value, t != null && Rf(n, !!e.multiple, t, !1);
    }
  }
}
var tS = !1;
function ZD(n, t, e) {
  if (tS) return n(t, e);
  tS = !0;
  try {
    var i = n(t);
    return i;
  } finally {
    if (tS = !1, (ff !== null || Cf !== null) && (L_(), ff && (t = ff, n = Cf, Cf = ff = null, sR(t), n)))
      for (t = 0; t < n.length; t++) sR(n[t]);
  }
}
function mp(n, t) {
  var e = n.stateNode;
  if (e === null) return null;
  var i = e[ga] || null;
  if (i === null) return null;
  e = i[t];
  t: switch (t) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
      (i = !i.disabled) || (n = n.type, i = !(n === "button" || n === "input" || n === "select" || n === "textarea")), n = !i;
      break t;
    default:
      n = !1;
  }
  if (n) return null;
  if (e && typeof e != "function")
    throw Error(
      vt(231, t, typeof e)
    );
  return e;
}
var to = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u"), Z1 = !1;
if (to)
  try {
    var id = {};
    Object.defineProperty(id, "passive", {
      get: function() {
        Z1 = !0;
      }
    }), window.addEventListener("test", id, id), window.removeEventListener("test", id, id);
  } catch {
    Z1 = !1;
  }
var Zo = null, Bb = null, R0 = null;
function jD() {
  if (R0) return R0;
  var n, t = Bb, e = t.length, i, a = "value" in Zo ? Zo.value : Zo.textContent, s = a.length;
  for (n = 0; n < e && t[n] === a[n]; n++) ;
  var r = e - n;
  for (i = 1; i <= r && t[e - i] === a[s - i]; i++) ;
  return R0 = a.slice(n, 1 < i ? 1 - i : void 0);
}
function C0(n) {
  var t = n.keyCode;
  return "charCode" in n ? (n = n.charCode, n === 0 && t === 13 && (n = 13)) : n = t, n === 10 && (n = 13), 32 <= n || n === 13 ? n : 0;
}
function _g() {
  return !0;
}
function rR() {
  return !1;
}
function ya(n) {
  function t(e, i, a, s, r) {
    this._reactName = e, this._targetInst = a, this.type = i, this.nativeEvent = s, this.target = r, this.currentTarget = null;
    for (var l in n)
      n.hasOwnProperty(l) && (e = n[l], this[l] = e ? e(s) : s[l]);
    return this.isDefaultPrevented = (s.defaultPrevented != null ? s.defaultPrevented : s.returnValue === !1) ? _g : rR, this.isPropagationStopped = rR, this;
  }
  return mn(t.prototype, {
    preventDefault: function() {
      this.defaultPrevented = !0;
      var e = this.nativeEvent;
      e && (e.preventDefault ? e.preventDefault() : typeof e.returnValue != "unknown" && (e.returnValue = !1), this.isDefaultPrevented = _g);
    },
    stopPropagation: function() {
      var e = this.nativeEvent;
      e && (e.stopPropagation ? e.stopPropagation() : typeof e.cancelBubble != "unknown" && (e.cancelBubble = !0), this.isPropagationStopped = _g);
    },
    persist: function() {
    },
    isPersistent: _g
  }), t;
}
var Qu = {
  eventPhase: 0,
  bubbles: 0,
  cancelable: 0,
  timeStamp: function(n) {
    return n.timeStamp || Date.now();
  },
  defaultPrevented: 0,
  isTrusted: 0
}, T_ = ya(Qu), am = mn({}, Qu, { view: 0, detail: 0 }), n5 = ya(am), eS, nS, ad, A_ = mn({}, am, {
  screenX: 0,
  screenY: 0,
  clientX: 0,
  clientY: 0,
  pageX: 0,
  pageY: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  getModifierState: Pb,
  button: 0,
  buttons: 0,
  relatedTarget: function(n) {
    return n.relatedTarget === void 0 ? n.fromElement === n.srcElement ? n.toElement : n.fromElement : n.relatedTarget;
  },
  movementX: function(n) {
    return "movementX" in n ? n.movementX : (n !== ad && (ad && n.type === "mousemove" ? (eS = n.screenX - ad.screenX, nS = n.screenY - ad.screenY) : nS = eS = 0, ad = n), eS);
  },
  movementY: function(n) {
    return "movementY" in n ? n.movementY : nS;
  }
}), oR = ya(A_), i5 = mn({}, A_, { dataTransfer: 0 }), a5 = ya(i5), s5 = mn({}, am, { relatedTarget: 0 }), iS = ya(s5), r5 = mn({}, Qu, {
  animationName: 0,
  elapsedTime: 0,
  pseudoElement: 0
}), o5 = ya(r5), l5 = mn({}, Qu, {
  clipboardData: function(n) {
    return "clipboardData" in n ? n.clipboardData : window.clipboardData;
  }
}), u5 = ya(l5), c5 = mn({}, Qu, { data: 0 }), lR = ya(c5), f5 = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, h5 = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, d5 = {
  Alt: "altKey",
  Control: "ctrlKey",
  Meta: "metaKey",
  Shift: "shiftKey"
};
function p5(n) {
  var t = this.nativeEvent;
  return t.getModifierState ? t.getModifierState(n) : (n = d5[n]) ? !!t[n] : !1;
}
function Pb() {
  return p5;
}
var m5 = mn({}, am, {
  key: function(n) {
    if (n.key) {
      var t = f5[n.key] || n.key;
      if (t !== "Unidentified") return t;
    }
    return n.type === "keypress" ? (n = C0(n), n === 13 ? "Enter" : String.fromCharCode(n)) : n.type === "keydown" || n.type === "keyup" ? h5[n.keyCode] || "Unidentified" : "";
  },
  code: 0,
  location: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  repeat: 0,
  locale: 0,
  getModifierState: Pb,
  charCode: function(n) {
    return n.type === "keypress" ? C0(n) : 0;
  },
  keyCode: function(n) {
    return n.type === "keydown" || n.type === "keyup" ? n.keyCode : 0;
  },
  which: function(n) {
    return n.type === "keypress" ? C0(n) : n.type === "keydown" || n.type === "keyup" ? n.keyCode : 0;
  }
}), g5 = ya(m5), v5 = mn({}, A_, {
  pointerId: 0,
  width: 0,
  height: 0,
  pressure: 0,
  tangentialPressure: 0,
  tiltX: 0,
  tiltY: 0,
  twist: 0,
  pointerType: 0,
  isPrimary: 0
}), uR = ya(v5), _5 = mn({}, am, {
  touches: 0,
  targetTouches: 0,
  changedTouches: 0,
  altKey: 0,
  metaKey: 0,
  ctrlKey: 0,
  shiftKey: 0,
  getModifierState: Pb
}), y5 = ya(_5), x5 = mn({}, Qu, {
  propertyName: 0,
  elapsedTime: 0,
  pseudoElement: 0
}), S5 = ya(x5), M5 = mn({}, A_, {
  deltaX: function(n) {
    return "deltaX" in n ? n.deltaX : "wheelDeltaX" in n ? -n.wheelDeltaX : 0;
  },
  deltaY: function(n) {
    return "deltaY" in n ? n.deltaY : "wheelDeltaY" in n ? -n.wheelDeltaY : "wheelDelta" in n ? -n.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), b5 = ya(M5), E5 = mn({}, Qu, {
  newState: 0,
  oldState: 0
}), T5 = ya(E5), A5 = [9, 13, 27, 32], Ib = to && "CompositionEvent" in window, Hd = null;
to && "documentMode" in document && (Hd = document.documentMode);
var R5 = to && "TextEvent" in window && !Hd, QD = to && (!Ib || Hd && 8 < Hd && 11 >= Hd), cR = " ", fR = !1;
function KD(n, t) {
  switch (n) {
    case "keyup":
      return A5.indexOf(t.keyCode) !== -1;
    case "keydown":
      return t.keyCode !== 229;
    case "keypress":
    case "mousedown":
    case "focusout":
      return !0;
    default:
      return !1;
  }
}
function JD(n) {
  return n = n.detail, typeof n == "object" && "data" in n ? n.data : null;
}
var hf = !1;
function C5(n, t) {
  switch (n) {
    case "compositionend":
      return JD(t);
    case "keypress":
      return t.which !== 32 ? null : (fR = !0, cR);
    case "textInput":
      return n = t.data, n === cR && fR ? null : n;
    default:
      return null;
  }
}
function w5(n, t) {
  if (hf)
    return n === "compositionend" || !Ib && KD(n, t) ? (n = jD(), R0 = Bb = Zo = null, hf = !1, n) : null;
  switch (n) {
    case "paste":
      return null;
    case "keypress":
      if (!(t.ctrlKey || t.altKey || t.metaKey) || t.ctrlKey && t.altKey) {
        if (t.char && 1 < t.char.length)
          return t.char;
        if (t.which) return String.fromCharCode(t.which);
      }
      return null;
    case "compositionend":
      return QD && t.locale !== "ko" ? null : t.data;
    default:
      return null;
  }
}
var D5 = {
  color: !0,
  date: !0,
  datetime: !0,
  "datetime-local": !0,
  email: !0,
  month: !0,
  number: !0,
  password: !0,
  range: !0,
  search: !0,
  tel: !0,
  text: !0,
  time: !0,
  url: !0,
  week: !0
};
function hR(n) {
  var t = n && n.nodeName && n.nodeName.toLowerCase();
  return t === "input" ? !!D5[n.type] : t === "textarea";
}
function $D(n, t, e, i) {
  ff ? Cf ? Cf.push(i) : Cf = [i] : ff = i, t = mv(t, "onChange"), 0 < t.length && (e = new T_(
    "onChange",
    "change",
    null,
    e,
    i
  ), n.push({ event: e, listeners: t }));
}
var Fd = null, gp = null;
function U5(n) {
  YO(n, 0);
}
function R_(n) {
  var t = Ud(n);
  if (XD(t)) return n;
}
function dR(n, t) {
  if (n === "change") return t;
}
var tU = !1;
if (to) {
  var aS;
  if (to) {
    var sS = "oninput" in document;
    if (!sS) {
      var pR = document.createElement("div");
      pR.setAttribute("oninput", "return;"), sS = typeof pR.oninput == "function";
    }
    aS = sS;
  } else aS = !1;
  tU = aS && (!document.documentMode || 9 < document.documentMode);
}
function mR() {
  Fd && (Fd.detachEvent("onpropertychange", eU), gp = Fd = null);
}
function eU(n) {
  if (n.propertyName === "value" && R_(gp)) {
    var t = [];
    $D(
      t,
      gp,
      n,
      zb(n)
    ), ZD(U5, t);
  }
}
function O5(n, t, e) {
  n === "focusin" ? (mR(), Fd = t, gp = e, Fd.attachEvent("onpropertychange", eU)) : n === "focusout" && mR();
}
function N5(n) {
  if (n === "selectionchange" || n === "keyup" || n === "keydown")
    return R_(gp);
}
function L5(n, t) {
  if (n === "click") return R_(t);
}
function z5(n, t) {
  if (n === "input" || n === "change")
    return R_(t);
}
function B5(n, t) {
  return n === t && (n !== 0 || 1 / n === 1 / t) || n !== n && t !== t;
}
var ka = typeof Object.is == "function" ? Object.is : B5;
function vp(n, t) {
  if (ka(n, t)) return !0;
  if (typeof n != "object" || n === null || typeof t != "object" || t === null)
    return !1;
  var e = Object.keys(n), i = Object.keys(t);
  if (e.length !== i.length) return !1;
  for (i = 0; i < e.length; i++) {
    var a = e[i];
    if (!X1.call(t, a) || !ka(n[a], t[a]))
      return !1;
  }
  return !0;
}
function gR(n) {
  for (; n && n.firstChild; ) n = n.firstChild;
  return n;
}
function vR(n, t) {
  var e = gR(n);
  n = 0;
  for (var i; e; ) {
    if (e.nodeType === 3) {
      if (i = n + e.textContent.length, n <= t && i >= t)
        return { node: e, offset: t - n };
      n = i;
    }
    t: {
      for (; e; ) {
        if (e.nextSibling) {
          e = e.nextSibling;
          break t;
        }
        e = e.parentNode;
      }
      e = void 0;
    }
    e = gR(e);
  }
}
function nU(n, t) {
  return n && t ? n === t ? !0 : n && n.nodeType === 3 ? !1 : t && t.nodeType === 3 ? nU(n, t.parentNode) : "contains" in n ? n.contains(t) : n.compareDocumentPosition ? !!(n.compareDocumentPosition(t) & 16) : !1 : !1;
}
function iU(n) {
  n = n != null && n.ownerDocument != null && n.ownerDocument.defaultView != null ? n.ownerDocument.defaultView : window;
  for (var t = K0(n.document); t instanceof n.HTMLIFrameElement; ) {
    try {
      var e = typeof t.contentWindow.location.href == "string";
    } catch {
      e = !1;
    }
    if (e) n = t.contentWindow;
    else break;
    t = K0(n.document);
  }
  return t;
}
function Hb(n) {
  var t = n && n.nodeName && n.nodeName.toLowerCase();
  return t && (t === "input" && (n.type === "text" || n.type === "search" || n.type === "tel" || n.type === "url" || n.type === "password") || t === "textarea" || n.contentEditable === "true");
}
var P5 = to && "documentMode" in document && 11 >= document.documentMode, df = null, j1 = null, Vd = null, Q1 = !1;
function _R(n, t, e) {
  var i = e.window === e ? e.document : e.nodeType === 9 ? e : e.ownerDocument;
  Q1 || df == null || df !== K0(i) || (i = df, "selectionStart" in i && Hb(i) ? i = { start: i.selectionStart, end: i.selectionEnd } : (i = (i.ownerDocument && i.ownerDocument.defaultView || window).getSelection(), i = {
    anchorNode: i.anchorNode,
    anchorOffset: i.anchorOffset,
    focusNode: i.focusNode,
    focusOffset: i.focusOffset
  }), Vd && vp(Vd, i) || (Vd = i, i = mv(j1, "onSelect"), 0 < i.length && (t = new T_(
    "onSelect",
    "select",
    null,
    t,
    e
  ), n.push({ event: t, listeners: i }), t.target = df)));
}
function kl(n, t) {
  var e = {};
  return e[n.toLowerCase()] = t.toLowerCase(), e["Webkit" + n] = "webkit" + t, e["Moz" + n] = "moz" + t, e;
}
var pf = {
  animationend: kl("Animation", "AnimationEnd"),
  animationiteration: kl("Animation", "AnimationIteration"),
  animationstart: kl("Animation", "AnimationStart"),
  transitionrun: kl("Transition", "TransitionRun"),
  transitionstart: kl("Transition", "TransitionStart"),
  transitioncancel: kl("Transition", "TransitionCancel"),
  transitionend: kl("Transition", "TransitionEnd")
}, rS = {}, aU = {};
to && (aU = document.createElement("div").style, "AnimationEvent" in window || (delete pf.animationend.animation, delete pf.animationiteration.animation, delete pf.animationstart.animation), "TransitionEvent" in window || delete pf.transitionend.transition);
function Ku(n) {
  if (rS[n]) return rS[n];
  if (!pf[n]) return n;
  var t = pf[n], e;
  for (e in t)
    if (t.hasOwnProperty(e) && e in aU)
      return rS[n] = t[e];
  return n;
}
var sU = Ku("animationend"), rU = Ku("animationiteration"), oU = Ku("animationstart"), I5 = Ku("transitionrun"), H5 = Ku("transitionstart"), F5 = Ku("transitioncancel"), lU = Ku("transitionend"), uU = /* @__PURE__ */ new Map(), K1 = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
  " "
);
K1.push("scrollEnd");
function Vs(n, t) {
  uU.set(n, t), ju(t, [n]);
}
var yR = /* @__PURE__ */ new WeakMap();
function ds(n, t) {
  if (typeof n == "object" && n !== null) {
    var e = yR.get(n);
    return e !== void 0 ? e : (t = {
      value: n,
      source: t,
      stack: iR(t)
    }, yR.set(n, t), t);
  }
  return {
    value: n,
    source: t,
    stack: iR(t)
  };
}
var ls = [], mf = 0, Fb = 0;
function C_() {
  for (var n = mf, t = Fb = mf = 0; t < n; ) {
    var e = ls[t];
    ls[t++] = null;
    var i = ls[t];
    ls[t++] = null;
    var a = ls[t];
    ls[t++] = null;
    var s = ls[t];
    if (ls[t++] = null, i !== null && a !== null) {
      var r = i.pending;
      r === null ? a.next = a : (a.next = r.next, r.next = a), i.pending = a;
    }
    s !== 0 && cU(e, a, s);
  }
}
function w_(n, t, e, i) {
  ls[mf++] = n, ls[mf++] = t, ls[mf++] = e, ls[mf++] = i, Fb |= i, n.lanes |= i, n = n.alternate, n !== null && (n.lanes |= i);
}
function Vb(n, t, e, i) {
  return w_(n, t, e, i), J0(n);
}
function vh(n, t) {
  return w_(n, null, null, t), J0(n);
}
function cU(n, t, e) {
  n.lanes |= e;
  var i = n.alternate;
  i !== null && (i.lanes |= e);
  for (var a = !1, s = n.return; s !== null; )
    s.childLanes |= e, i = s.alternate, i !== null && (i.childLanes |= e), s.tag === 22 && (n = s.stateNode, n === null || n._visibility & 1 || (a = !0)), n = s, s = s.return;
  return n.tag === 3 ? (s = n.stateNode, a && t !== null && (a = 31 - Va(e), n = s.hiddenUpdates, i = n[a], i === null ? n[a] = [t] : i.push(t), t.lane = e | 536870912), s) : null;
}
function J0(n) {
  if (50 < Kd)
    throw Kd = 0, _M = null, Error(vt(185));
  for (var t = n.return; t !== null; )
    n = t, t = n.return;
  return n.tag === 3 ? n.stateNode : null;
}
var gf = {};
function V5(n, t, e, i) {
  this.tag = n, this.key = e, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = t, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = i, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
}
function Pa(n, t, e, i) {
  return new V5(n, t, e, i);
}
function Gb(n) {
  return n = n.prototype, !(!n || !n.isReactComponent);
}
function Qr(n, t) {
  var e = n.alternate;
  return e === null ? (e = Pa(
    n.tag,
    t,
    n.key,
    n.mode
  ), e.elementType = n.elementType, e.type = n.type, e.stateNode = n.stateNode, e.alternate = n, n.alternate = e) : (e.pendingProps = t, e.type = n.type, e.flags = 0, e.subtreeFlags = 0, e.deletions = null), e.flags = n.flags & 65011712, e.childLanes = n.childLanes, e.lanes = n.lanes, e.child = n.child, e.memoizedProps = n.memoizedProps, e.memoizedState = n.memoizedState, e.updateQueue = n.updateQueue, t = n.dependencies, e.dependencies = t === null ? null : { lanes: t.lanes, firstContext: t.firstContext }, e.sibling = n.sibling, e.index = n.index, e.ref = n.ref, e.refCleanup = n.refCleanup, e;
}
function fU(n, t) {
  n.flags &= 65011714;
  var e = n.alternate;
  return e === null ? (n.childLanes = 0, n.lanes = t, n.child = null, n.subtreeFlags = 0, n.memoizedProps = null, n.memoizedState = null, n.updateQueue = null, n.dependencies = null, n.stateNode = null) : (n.childLanes = e.childLanes, n.lanes = e.lanes, n.child = e.child, n.subtreeFlags = 0, n.deletions = null, n.memoizedProps = e.memoizedProps, n.memoizedState = e.memoizedState, n.updateQueue = e.updateQueue, n.type = e.type, t = e.dependencies, n.dependencies = t === null ? null : {
    lanes: t.lanes,
    firstContext: t.firstContext
  }), n;
}
function w0(n, t, e, i, a, s) {
  var r = 0;
  if (i = n, typeof n == "function") Gb(n) && (r = 1);
  else if (typeof n == "string")
    r = XH(
      n,
      e,
      rr.current
    ) ? 26 : n === "html" || n === "head" || n === "body" ? 27 : 5;
  else
    t: switch (n) {
      case H1:
        return n = Pa(31, e, t, a), n.elementType = H1, n.lanes = s, n;
      case lf:
        return Tu(e.children, a, s, t);
      case DD:
        r = 8, a |= 24;
        break;
      case B1:
        return n = Pa(12, e, t, a | 2), n.elementType = B1, n.lanes = s, n;
      case P1:
        return n = Pa(13, e, t, a), n.elementType = P1, n.lanes = s, n;
      case I1:
        return n = Pa(19, e, t, a), n.elementType = I1, n.lanes = s, n;
      default:
        if (typeof n == "object" && n !== null)
          switch (n.$$typeof) {
            case UI:
            case qr:
              r = 10;
              break t;
            case UD:
              r = 9;
              break t;
            case Cb:
              r = 11;
              break t;
            case wb:
              r = 14;
              break t;
            case Io:
              r = 16, i = null;
              break t;
          }
        r = 29, e = Error(
          vt(130, n === null ? "null" : typeof n, "")
        ), i = null;
    }
  return t = Pa(r, e, t, a), t.elementType = n, t.type = i, t.lanes = s, t;
}
function Tu(n, t, e, i) {
  return n = Pa(7, n, i, t), n.lanes = e, n;
}
function oS(n, t, e) {
  return n = Pa(6, n, null, t), n.lanes = e, n;
}
function lS(n, t, e) {
  return t = Pa(
    4,
    n.children !== null ? n.children : [],
    n.key,
    t
  ), t.lanes = e, t.stateNode = {
    containerInfo: n.containerInfo,
    pendingChildren: null,
    implementation: n.implementation
  }, t;
}
var vf = [], _f = 0, $0 = null, tv = 0, cs = [], fs = 0, Au = null, Yr = 1, kr = "";
function fu(n, t) {
  vf[_f++] = tv, vf[_f++] = $0, $0 = n, tv = t;
}
function hU(n, t, e) {
  cs[fs++] = Yr, cs[fs++] = kr, cs[fs++] = Au, Au = n;
  var i = Yr;
  n = kr;
  var a = 32 - Va(i) - 1;
  i &= ~(1 << a), e += 1;
  var s = 32 - Va(t) + a;
  if (30 < s) {
    var r = a - a % 5;
    s = (i & (1 << r) - 1).toString(32), i >>= r, a -= r, Yr = 1 << 32 - Va(t) + a | e << a | i, kr = s + n;
  } else
    Yr = 1 << s | e << a | i, kr = n;
}
function Xb(n) {
  n.return !== null && (fu(n, 1), hU(n, 1, 0));
}
function qb(n) {
  for (; n === $0; )
    $0 = vf[--_f], vf[_f] = null, tv = vf[--_f], vf[_f] = null;
  for (; n === Au; )
    Au = cs[--fs], cs[fs] = null, kr = cs[--fs], cs[fs] = null, Yr = cs[--fs], cs[fs] = null;
}
var Wi = null, Un = null, ke = !1, Ru = null, tr = !1, J1 = Error(vt(519));
function Iu(n) {
  var t = Error(vt(418, ""));
  throw _p(ds(t, n)), J1;
}
function xR(n) {
  var t = n.stateNode, e = n.type, i = n.memoizedProps;
  switch (t[Oi] = n, t[ga] = i, e) {
    case "dialog":
      Ce("cancel", t), Ce("close", t);
      break;
    case "iframe":
    case "object":
    case "embed":
      Ce("load", t);
      break;
    case "video":
    case "audio":
      for (e = 0; e < Sp.length; e++)
        Ce(Sp[e], t);
      break;
    case "source":
      Ce("error", t);
      break;
    case "img":
    case "image":
    case "link":
      Ce("error", t), Ce("load", t);
      break;
    case "details":
      Ce("toggle", t);
      break;
    case "input":
      Ce("invalid", t), qD(
        t,
        i.value,
        i.defaultValue,
        i.checked,
        i.defaultChecked,
        i.type,
        i.name,
        !0
      ), Q0(t);
      break;
    case "select":
      Ce("invalid", t);
      break;
    case "textarea":
      Ce("invalid", t), kD(t, i.value, i.defaultValue, i.children), Q0(t);
  }
  e = i.children, typeof e != "string" && typeof e != "number" && typeof e != "bigint" || t.textContent === "" + e || i.suppressHydrationWarning === !0 || WO(t.textContent, e) ? (i.popover != null && (Ce("beforetoggle", t), Ce("toggle", t)), i.onScroll != null && Ce("scroll", t), i.onScrollEnd != null && Ce("scrollend", t), i.onClick != null && (t.onclick = P_), t = !0) : t = !1, t || Iu(n);
}
function SR(n) {
  for (Wi = n.return; Wi; )
    switch (Wi.tag) {
      case 5:
      case 13:
        tr = !1;
        return;
      case 27:
      case 3:
        tr = !0;
        return;
      default:
        Wi = Wi.return;
    }
}
function sd(n) {
  if (n !== Wi) return !1;
  if (!ke) return SR(n), ke = !0, !1;
  var t = n.tag, e;
  if ((e = t !== 3 && t !== 27) && ((e = t === 5) && (e = n.type, e = !(e !== "form" && e !== "button") || EM(n.type, n.memoizedProps)), e = !e), e && Un && Iu(n), SR(n), t === 13) {
    if (n = n.memoizedState, n = n !== null ? n.dehydrated : null, !n) throw Error(vt(317));
    t: {
      for (n = n.nextSibling, t = 0; n; ) {
        if (n.nodeType === 8)
          if (e = n.data, e === "/$") {
            if (t === 0) {
              Un = Hs(n.nextSibling);
              break t;
            }
            t--;
          } else
            e !== "$" && e !== "$!" && e !== "$?" || t++;
        n = n.nextSibling;
      }
      Un = null;
    }
  } else
    t === 27 ? (t = Un, xl(n.type) ? (n = RM, RM = null, Un = n) : Un = t) : Un = Wi ? Hs(n.stateNode.nextSibling) : null;
  return !0;
}
function sm() {
  Un = Wi = null, ke = !1;
}
function MR() {
  var n = Ru;
  return n !== null && (ua === null ? ua = n : ua.push.apply(
    ua,
    n
  ), Ru = null), n;
}
function _p(n) {
  Ru === null ? Ru = [n] : Ru.push(n);
}
var $1 = pr(null), Ju = null, Wr = null;
function Vo(n, t, e) {
  xn($1, t._currentValue), t._currentValue = e;
}
function Kr(n) {
  n._currentValue = $1.current, ci($1);
}
function tM(n, t, e) {
  for (; n !== null; ) {
    var i = n.alternate;
    if ((n.childLanes & t) !== t ? (n.childLanes |= t, i !== null && (i.childLanes |= t)) : i !== null && (i.childLanes & t) !== t && (i.childLanes |= t), n === e) break;
    n = n.return;
  }
}
function eM(n, t, e, i) {
  var a = n.child;
  for (a !== null && (a.return = n); a !== null; ) {
    var s = a.dependencies;
    if (s !== null) {
      var r = a.child;
      s = s.firstContext;
      t: for (; s !== null; ) {
        var l = s;
        s = a;
        for (var c = 0; c < t.length; c++)
          if (l.context === t[c]) {
            s.lanes |= e, l = s.alternate, l !== null && (l.lanes |= e), tM(
              s.return,
              e,
              n
            ), i || (r = null);
            break t;
          }
        s = l.next;
      }
    } else if (a.tag === 18) {
      if (r = a.return, r === null) throw Error(vt(341));
      r.lanes |= e, s = r.alternate, s !== null && (s.lanes |= e), tM(r, e, n), r = null;
    } else r = a.child;
    if (r !== null) r.return = a;
    else
      for (r = a; r !== null; ) {
        if (r === n) {
          r = null;
          break;
        }
        if (a = r.sibling, a !== null) {
          a.return = r.return, r = a;
          break;
        }
        r = r.return;
      }
    a = r;
  }
}
function rm(n, t, e, i) {
  n = null;
  for (var a = t, s = !1; a !== null; ) {
    if (!s) {
      if (a.flags & 524288) s = !0;
      else if (a.flags & 262144) break;
    }
    if (a.tag === 10) {
      var r = a.alternate;
      if (r === null) throw Error(vt(387));
      if (r = r.memoizedProps, r !== null) {
        var l = a.type;
        ka(a.pendingProps.value, r.value) || (n !== null ? n.push(l) : n = [l]);
      }
    } else if (a === k0.current) {
      if (r = a.alternate, r === null) throw Error(vt(387));
      r.memoizedState.memoizedState !== a.memoizedState.memoizedState && (n !== null ? n.push(Ep) : n = [Ep]);
    }
    a = a.return;
  }
  n !== null && eM(
    t,
    n,
    e,
    i
  ), t.flags |= 262144;
}
function ev(n) {
  for (n = n.firstContext; n !== null; ) {
    if (!ka(
      n.context._currentValue,
      n.memoizedValue
    ))
      return !0;
    n = n.next;
  }
  return !1;
}
function Hu(n) {
  Ju = n, Wr = null, n = n.dependencies, n !== null && (n.firstContext = null);
}
function Ni(n) {
  return dU(Ju, n);
}
function yg(n, t) {
  return Ju === null && Hu(n), dU(n, t);
}
function dU(n, t) {
  var e = t._currentValue;
  if (t = { context: t, memoizedValue: e, next: null }, Wr === null) {
    if (n === null) throw Error(vt(308));
    Wr = t, n.dependencies = { lanes: 0, firstContext: t }, n.flags |= 524288;
  } else Wr = Wr.next = t;
  return e;
}
var G5 = typeof AbortController < "u" ? AbortController : function() {
  var n = [], t = this.signal = {
    aborted: !1,
    addEventListener: function(e, i) {
      n.push(i);
    }
  };
  this.abort = function() {
    t.aborted = !0, n.forEach(function(e) {
      return e();
    });
  };
}, X5 = $n.unstable_scheduleCallback, q5 = $n.unstable_NormalPriority, Zn = {
  $$typeof: qr,
  Consumer: null,
  Provider: null,
  _currentValue: null,
  _currentValue2: null,
  _threadCount: 0
};
function Yb() {
  return {
    controller: new G5(),
    data: /* @__PURE__ */ new Map(),
    refCount: 0
  };
}
function om(n) {
  n.refCount--, n.refCount === 0 && X5(q5, function() {
    n.controller.abort();
  });
}
var Gd = null, nM = 0, Xf = 0, wf = null;
function Y5(n, t) {
  if (Gd === null) {
    var e = Gd = [];
    nM = 0, Xf = pE(), wf = {
      status: "pending",
      value: void 0,
      then: function(i) {
        e.push(i);
      }
    };
  }
  return nM++, t.then(bR, bR), t;
}
function bR() {
  if (--nM === 0 && Gd !== null) {
    wf !== null && (wf.status = "fulfilled");
    var n = Gd;
    Gd = null, Xf = 0, wf = null;
    for (var t = 0; t < n.length; t++) (0, n[t])();
  }
}
function k5(n, t) {
  var e = [], i = {
    status: "pending",
    value: null,
    reason: null,
    then: function(a) {
      e.push(a);
    }
  };
  return n.then(
    function() {
      i.status = "fulfilled", i.value = t;
      for (var a = 0; a < e.length; a++) (0, e[a])(t);
    },
    function(a) {
      for (i.status = "rejected", i.reason = a, a = 0; a < e.length; a++)
        (0, e[a])(void 0);
    }
  ), i;
}
var ER = ue.S;
ue.S = function(n, t) {
  typeof t == "object" && t !== null && typeof t.then == "function" && Y5(n, t), ER !== null && ER(n, t);
};
var Cu = pr(null);
function kb() {
  var n = Cu.current;
  return n !== null ? n : dn.pooledCache;
}
function D0(n, t) {
  t === null ? xn(Cu, Cu.current) : xn(Cu, t.pool);
}
function pU() {
  var n = kb();
  return n === null ? null : { parent: Zn._currentValue, pool: n };
}
var lm = Error(vt(460)), mU = Error(vt(474)), D_ = Error(vt(542)), iM = { then: function() {
} };
function TR(n) {
  return n = n.status, n === "fulfilled" || n === "rejected";
}
function xg() {
}
function gU(n, t, e) {
  switch (e = n[e], e === void 0 ? n.push(t) : e !== t && (t.then(xg, xg), t = e), t.status) {
    case "fulfilled":
      return t.value;
    case "rejected":
      throw n = t.reason, RR(n), n;
    default:
      if (typeof t.status == "string") t.then(xg, xg);
      else {
        if (n = dn, n !== null && 100 < n.shellSuspendCounter)
          throw Error(vt(482));
        n = t, n.status = "pending", n.then(
          function(i) {
            if (t.status === "pending") {
              var a = t;
              a.status = "fulfilled", a.value = i;
            }
          },
          function(i) {
            if (t.status === "pending") {
              var a = t;
              a.status = "rejected", a.reason = i;
            }
          }
        );
      }
      switch (t.status) {
        case "fulfilled":
          return t.value;
        case "rejected":
          throw n = t.reason, RR(n), n;
      }
      throw Xd = t, lm;
  }
}
var Xd = null;
function AR() {
  if (Xd === null) throw Error(vt(459));
  var n = Xd;
  return Xd = null, n;
}
function RR(n) {
  if (n === lm || n === D_)
    throw Error(vt(483));
}
var Ho = !1;
function Wb(n) {
  n.updateQueue = {
    baseState: n.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: { pending: null, lanes: 0, hiddenCallbacks: null },
    callbacks: null
  };
}
function aM(n, t) {
  n = n.updateQueue, t.updateQueue === n && (t.updateQueue = {
    baseState: n.baseState,
    firstBaseUpdate: n.firstBaseUpdate,
    lastBaseUpdate: n.lastBaseUpdate,
    shared: n.shared,
    callbacks: null
  });
}
function nl(n) {
  return { lane: n, tag: 0, payload: null, callback: null, next: null };
}
function il(n, t, e) {
  var i = n.updateQueue;
  if (i === null) return null;
  if (i = i.shared, Ke & 2) {
    var a = i.pending;
    return a === null ? t.next = t : (t.next = a.next, a.next = t), i.pending = t, t = J0(n), cU(n, null, e), t;
  }
  return w_(n, i, t, e), J0(n);
}
function qd(n, t, e) {
  if (t = t.updateQueue, t !== null && (t = t.shared, (e & 4194048) !== 0)) {
    var i = t.lanes;
    i &= n.pendingLanes, e |= i, t.lanes = e, ID(n, e);
  }
}
function uS(n, t) {
  var e = n.updateQueue, i = n.alternate;
  if (i !== null && (i = i.updateQueue, e === i)) {
    var a = null, s = null;
    if (e = e.firstBaseUpdate, e !== null) {
      do {
        var r = {
          lane: e.lane,
          tag: e.tag,
          payload: e.payload,
          callback: null,
          next: null
        };
        s === null ? a = s = r : s = s.next = r, e = e.next;
      } while (e !== null);
      s === null ? a = s = t : s = s.next = t;
    } else a = s = t;
    e = {
      baseState: i.baseState,
      firstBaseUpdate: a,
      lastBaseUpdate: s,
      shared: i.shared,
      callbacks: i.callbacks
    }, n.updateQueue = e;
    return;
  }
  n = e.lastBaseUpdate, n === null ? e.firstBaseUpdate = t : n.next = t, e.lastBaseUpdate = t;
}
var sM = !1;
function Yd() {
  if (sM) {
    var n = wf;
    if (n !== null) throw n;
  }
}
function kd(n, t, e, i) {
  sM = !1;
  var a = n.updateQueue;
  Ho = !1;
  var s = a.firstBaseUpdate, r = a.lastBaseUpdate, l = a.shared.pending;
  if (l !== null) {
    a.shared.pending = null;
    var c = l, f = c.next;
    c.next = null, r === null ? s = f : r.next = f, r = c;
    var d = n.alternate;
    d !== null && (d = d.updateQueue, l = d.lastBaseUpdate, l !== r && (l === null ? d.firstBaseUpdate = f : l.next = f, d.lastBaseUpdate = c));
  }
  if (s !== null) {
    var p = a.baseState;
    r = 0, d = f = c = null, l = s;
    do {
      var m = l.lane & -536870913, g = m !== l.lane;
      if (g ? (Be & m) === m : (i & m) === m) {
        m !== 0 && m === Xf && (sM = !0), d !== null && (d = d.next = {
          lane: 0,
          tag: l.tag,
          payload: l.payload,
          callback: null,
          next: null
        });
        t: {
          var y = n, x = l;
          m = t;
          var M = e;
          switch (x.tag) {
            case 1:
              if (y = x.payload, typeof y == "function") {
                p = y.call(M, p, m);
                break t;
              }
              p = y;
              break t;
            case 3:
              y.flags = y.flags & -65537 | 128;
            case 0:
              if (y = x.payload, m = typeof y == "function" ? y.call(M, p, m) : y, m == null) break t;
              p = mn({}, p, m);
              break t;
            case 2:
              Ho = !0;
          }
        }
        m = l.callback, m !== null && (n.flags |= 64, g && (n.flags |= 8192), g = a.callbacks, g === null ? a.callbacks = [m] : g.push(m));
      } else
        g = {
          lane: m,
          tag: l.tag,
          payload: l.payload,
          callback: l.callback,
          next: null
        }, d === null ? (f = d = g, c = p) : d = d.next = g, r |= m;
      if (l = l.next, l === null) {
        if (l = a.shared.pending, l === null)
          break;
        g = l, l = g.next, g.next = null, a.lastBaseUpdate = g, a.shared.pending = null;
      }
    } while (!0);
    d === null && (c = p), a.baseState = c, a.firstBaseUpdate = f, a.lastBaseUpdate = d, s === null && (a.shared.lanes = 0), dl |= r, n.lanes = r, n.memoizedState = p;
  }
}
function vU(n, t) {
  if (typeof n != "function")
    throw Error(vt(191, n));
  n.call(t);
}
function _U(n, t) {
  var e = n.callbacks;
  if (e !== null)
    for (n.callbacks = null, n = 0; n < e.length; n++)
      vU(e[n], t);
}
var qf = pr(null), nv = pr(0);
function CR(n, t) {
  n = io, xn(nv, n), xn(qf, t), io = n | t.baseLanes;
}
function rM() {
  xn(nv, io), xn(qf, qf.current);
}
function Zb() {
  io = nv.current, ci(qf), ci(nv);
}
var fl = 0, Ee = null, nn = null, Gn = null, iv = !1, Df = !1, Fu = !1, av = 0, yp = 0, Uf = null, W5 = 0;
function Ln() {
  throw Error(vt(321));
}
function jb(n, t) {
  if (t === null) return !1;
  for (var e = 0; e < t.length && e < n.length; e++)
    if (!ka(n[e], t[e])) return !1;
  return !0;
}
function Qb(n, t, e, i, a, s) {
  return fl = s, Ee = t, t.memoizedState = null, t.updateQueue = null, t.lanes = 0, ue.H = n === null || n.memoizedState === null ? jU : QU, Fu = !1, s = e(i, a), Fu = !1, Df && (s = xU(
    t,
    e,
    i,
    a
  )), yU(n), s;
}
function yU(n) {
  ue.H = sv;
  var t = nn !== null && nn.next !== null;
  if (fl = 0, Gn = nn = Ee = null, iv = !1, yp = 0, Uf = null, t) throw Error(vt(300));
  n === null || ui || (n = n.dependencies, n !== null && ev(n) && (ui = !0));
}
function xU(n, t, e, i) {
  Ee = n;
  var a = 0;
  do {
    if (Df && (Uf = null), yp = 0, Df = !1, 25 <= a) throw Error(vt(301));
    if (a += 1, Gn = nn = null, n.updateQueue != null) {
      var s = n.updateQueue;
      s.lastEffect = null, s.events = null, s.stores = null, s.memoCache != null && (s.memoCache.index = 0);
    }
    ue.H = tH, s = t(e, i);
  } while (Df);
  return s;
}
function Z5() {
  var n = ue.H, t = n.useState()[0];
  return t = typeof t.then == "function" ? um(t) : t, n = n.useState()[0], (nn !== null ? nn.memoizedState : null) !== n && (Ee.flags |= 1024), t;
}
function Kb() {
  var n = av !== 0;
  return av = 0, n;
}
function Jb(n, t, e) {
  t.updateQueue = n.updateQueue, t.flags &= -2053, n.lanes &= ~e;
}
function $b(n) {
  if (iv) {
    for (n = n.memoizedState; n !== null; ) {
      var t = n.queue;
      t !== null && (t.pending = null), n = n.next;
    }
    iv = !1;
  }
  fl = 0, Gn = nn = Ee = null, Df = !1, yp = av = 0, Uf = null;
}
function oa() {
  var n = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };
  return Gn === null ? Ee.memoizedState = Gn = n : Gn = Gn.next = n, Gn;
}
function kn() {
  if (nn === null) {
    var n = Ee.alternate;
    n = n !== null ? n.memoizedState : null;
  } else n = nn.next;
  var t = Gn === null ? Ee.memoizedState : Gn.next;
  if (t !== null)
    Gn = t, nn = n;
  else {
    if (n === null)
      throw Ee.alternate === null ? Error(vt(467)) : Error(vt(310));
    nn = n, n = {
      memoizedState: nn.memoizedState,
      baseState: nn.baseState,
      baseQueue: nn.baseQueue,
      queue: nn.queue,
      next: null
    }, Gn === null ? Ee.memoizedState = Gn = n : Gn = Gn.next = n;
  }
  return Gn;
}
function tE() {
  return { lastEffect: null, events: null, stores: null, memoCache: null };
}
function um(n) {
  var t = yp;
  return yp += 1, Uf === null && (Uf = []), n = gU(Uf, n, t), t = Ee, (Gn === null ? t.memoizedState : Gn.next) === null && (t = t.alternate, ue.H = t === null || t.memoizedState === null ? jU : QU), n;
}
function U_(n) {
  if (n !== null && typeof n == "object") {
    if (typeof n.then == "function") return um(n);
    if (n.$$typeof === qr) return Ni(n);
  }
  throw Error(vt(438, String(n)));
}
function eE(n) {
  var t = null, e = Ee.updateQueue;
  if (e !== null && (t = e.memoCache), t == null) {
    var i = Ee.alternate;
    i !== null && (i = i.updateQueue, i !== null && (i = i.memoCache, i != null && (t = {
      data: i.data.map(function(a) {
        return a.slice();
      }),
      index: 0
    })));
  }
  if (t == null && (t = { data: [], index: 0 }), e === null && (e = tE(), Ee.updateQueue = e), e.memoCache = t, e = t.data[t.index], e === void 0)
    for (e = t.data[t.index] = Array(n), i = 0; i < n; i++)
      e[i] = OI;
  return t.index++, e;
}
function eo(n, t) {
  return typeof t == "function" ? t(n) : t;
}
function U0(n) {
  var t = kn();
  return nE(t, nn, n);
}
function nE(n, t, e) {
  var i = n.queue;
  if (i === null) throw Error(vt(311));
  i.lastRenderedReducer = e;
  var a = n.baseQueue, s = i.pending;
  if (s !== null) {
    if (a !== null) {
      var r = a.next;
      a.next = s.next, s.next = r;
    }
    t.baseQueue = a = s, i.pending = null;
  }
  if (s = n.baseState, a === null) n.memoizedState = s;
  else {
    t = a.next;
    var l = r = null, c = null, f = t, d = !1;
    do {
      var p = f.lane & -536870913;
      if (p !== f.lane ? (Be & p) === p : (fl & p) === p) {
        var m = f.revertLane;
        if (m === 0)
          c !== null && (c = c.next = {
            lane: 0,
            revertLane: 0,
            action: f.action,
            hasEagerState: f.hasEagerState,
            eagerState: f.eagerState,
            next: null
          }), p === Xf && (d = !0);
        else if ((fl & m) === m) {
          f = f.next, m === Xf && (d = !0);
          continue;
        } else
          p = {
            lane: 0,
            revertLane: f.revertLane,
            action: f.action,
            hasEagerState: f.hasEagerState,
            eagerState: f.eagerState,
            next: null
          }, c === null ? (l = c = p, r = s) : c = c.next = p, Ee.lanes |= m, dl |= m;
        p = f.action, Fu && e(s, p), s = f.hasEagerState ? f.eagerState : e(s, p);
      } else
        m = {
          lane: p,
          revertLane: f.revertLane,
          action: f.action,
          hasEagerState: f.hasEagerState,
          eagerState: f.eagerState,
          next: null
        }, c === null ? (l = c = m, r = s) : c = c.next = m, Ee.lanes |= p, dl |= p;
      f = f.next;
    } while (f !== null && f !== t);
    if (c === null ? r = s : c.next = l, !ka(s, n.memoizedState) && (ui = !0, d && (e = wf, e !== null)))
      throw e;
    n.memoizedState = s, n.baseState = r, n.baseQueue = c, i.lastRenderedState = s;
  }
  return a === null && (i.lanes = 0), [n.memoizedState, i.dispatch];
}
function cS(n) {
  var t = kn(), e = t.queue;
  if (e === null) throw Error(vt(311));
  e.lastRenderedReducer = n;
  var i = e.dispatch, a = e.pending, s = t.memoizedState;
  if (a !== null) {
    e.pending = null;
    var r = a = a.next;
    do
      s = n(s, r.action), r = r.next;
    while (r !== a);
    ka(s, t.memoizedState) || (ui = !0), t.memoizedState = s, t.baseQueue === null && (t.baseState = s), e.lastRenderedState = s;
  }
  return [s, i];
}
function SU(n, t, e) {
  var i = Ee, a = kn(), s = ke;
  if (s) {
    if (e === void 0) throw Error(vt(407));
    e = e();
  } else e = t();
  var r = !ka(
    (nn || a).memoizedState,
    e
  );
  r && (a.memoizedState = e, ui = !0), a = a.queue;
  var l = EU.bind(null, i, a, n);
  if (cm(2048, 8, l, [n]), a.getSnapshot !== t || r || Gn !== null && Gn.memoizedState.tag & 1) {
    if (i.flags |= 2048, Yf(
      9,
      O_(),
      bU.bind(
        null,
        i,
        a,
        e,
        t
      ),
      null
    ), dn === null) throw Error(vt(349));
    s || fl & 124 || MU(i, t, e);
  }
  return e;
}
function MU(n, t, e) {
  n.flags |= 16384, n = { getSnapshot: t, value: e }, t = Ee.updateQueue, t === null ? (t = tE(), Ee.updateQueue = t, t.stores = [n]) : (e = t.stores, e === null ? t.stores = [n] : e.push(n));
}
function bU(n, t, e, i) {
  t.value = e, t.getSnapshot = i, TU(t) && AU(n);
}
function EU(n, t, e) {
  return e(function() {
    TU(t) && AU(n);
  });
}
function TU(n) {
  var t = n.getSnapshot;
  n = n.value;
  try {
    var e = t();
    return !ka(n, e);
  } catch {
    return !0;
  }
}
function AU(n) {
  var t = vh(n, 2);
  t !== null && Xa(t, n, 2);
}
function oM(n) {
  var t = oa();
  if (typeof n == "function") {
    var e = n;
    if (n = e(), Fu) {
      Wo(!0);
      try {
        e();
      } finally {
        Wo(!1);
      }
    }
  }
  return t.memoizedState = t.baseState = n, t.queue = {
    pending: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: eo,
    lastRenderedState: n
  }, t;
}
function RU(n, t, e, i) {
  return n.baseState = e, nE(
    n,
    nn,
    typeof i == "function" ? i : eo
  );
}
function j5(n, t, e, i, a) {
  if (N_(n)) throw Error(vt(485));
  if (n = t.action, n !== null) {
    var s = {
      payload: a,
      action: n,
      next: null,
      isTransition: !0,
      status: "pending",
      value: null,
      reason: null,
      listeners: [],
      then: function(r) {
        s.listeners.push(r);
      }
    };
    ue.T !== null ? e(!0) : s.isTransition = !1, i(s), e = t.pending, e === null ? (s.next = t.pending = s, CU(t, s)) : (s.next = e.next, t.pending = e.next = s);
  }
}
function CU(n, t) {
  var e = t.action, i = t.payload, a = n.state;
  if (t.isTransition) {
    var s = ue.T, r = {};
    ue.T = r;
    try {
      var l = e(a, i), c = ue.S;
      c !== null && c(r, l), wR(n, t, l);
    } catch (f) {
      lM(n, t, f);
    } finally {
      ue.T = s;
    }
  } else
    try {
      s = e(a, i), wR(n, t, s);
    } catch (f) {
      lM(n, t, f);
    }
}
function wR(n, t, e) {
  e !== null && typeof e == "object" && typeof e.then == "function" ? e.then(
    function(i) {
      DR(n, t, i);
    },
    function(i) {
      return lM(n, t, i);
    }
  ) : DR(n, t, e);
}
function DR(n, t, e) {
  t.status = "fulfilled", t.value = e, wU(t), n.state = e, t = n.pending, t !== null && (e = t.next, e === t ? n.pending = null : (e = e.next, t.next = e, CU(n, e)));
}
function lM(n, t, e) {
  var i = n.pending;
  if (n.pending = null, i !== null) {
    i = i.next;
    do
      t.status = "rejected", t.reason = e, wU(t), t = t.next;
    while (t !== i);
  }
  n.action = null;
}
function wU(n) {
  n = n.listeners;
  for (var t = 0; t < n.length; t++) (0, n[t])();
}
function DU(n, t) {
  return t;
}
function UR(n, t) {
  if (ke) {
    var e = dn.formState;
    if (e !== null) {
      t: {
        var i = Ee;
        if (ke) {
          if (Un) {
            e: {
              for (var a = Un, s = tr; a.nodeType !== 8; ) {
                if (!s) {
                  a = null;
                  break e;
                }
                if (a = Hs(
                  a.nextSibling
                ), a === null) {
                  a = null;
                  break e;
                }
              }
              s = a.data, a = s === "F!" || s === "F" ? a : null;
            }
            if (a) {
              Un = Hs(
                a.nextSibling
              ), i = a.data === "F!";
              break t;
            }
          }
          Iu(i);
        }
        i = !1;
      }
      i && (t = e[0]);
    }
  }
  return e = oa(), e.memoizedState = e.baseState = t, i = {
    pending: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: DU,
    lastRenderedState: t
  }, e.queue = i, e = kU.bind(
    null,
    Ee,
    i
  ), i.dispatch = e, i = oM(!1), s = rE.bind(
    null,
    Ee,
    !1,
    i.queue
  ), i = oa(), a = {
    state: t,
    dispatch: null,
    action: n,
    pending: null
  }, i.queue = a, e = j5.bind(
    null,
    Ee,
    a,
    s,
    e
  ), a.dispatch = e, i.memoizedState = n, [t, e, !1];
}
function OR(n) {
  var t = kn();
  return UU(t, nn, n);
}
function UU(n, t, e) {
  if (t = nE(
    n,
    t,
    DU
  )[0], n = U0(eo)[0], typeof t == "object" && t !== null && typeof t.then == "function")
    try {
      var i = um(t);
    } catch (r) {
      throw r === lm ? D_ : r;
    }
  else i = t;
  t = kn();
  var a = t.queue, s = a.dispatch;
  return e !== t.memoizedState && (Ee.flags |= 2048, Yf(
    9,
    O_(),
    Q5.bind(null, a, e),
    null
  )), [i, s, n];
}
function Q5(n, t) {
  n.action = t;
}
function NR(n) {
  var t = kn(), e = nn;
  if (e !== null)
    return UU(t, e, n);
  kn(), t = t.memoizedState, e = kn();
  var i = e.queue.dispatch;
  return e.memoizedState = n, [t, i, !1];
}
function Yf(n, t, e, i) {
  return n = { tag: n, create: e, deps: i, inst: t, next: null }, t = Ee.updateQueue, t === null && (t = tE(), Ee.updateQueue = t), e = t.lastEffect, e === null ? t.lastEffect = n.next = n : (i = e.next, e.next = n, n.next = i, t.lastEffect = n), n;
}
function O_() {
  return { destroy: void 0, resource: void 0 };
}
function OU() {
  return kn().memoizedState;
}
function O0(n, t, e, i) {
  var a = oa();
  i = i === void 0 ? null : i, Ee.flags |= n, a.memoizedState = Yf(
    1 | t,
    O_(),
    e,
    i
  );
}
function cm(n, t, e, i) {
  var a = kn();
  i = i === void 0 ? null : i;
  var s = a.memoizedState.inst;
  nn !== null && i !== null && jb(i, nn.memoizedState.deps) ? a.memoizedState = Yf(t, s, e, i) : (Ee.flags |= n, a.memoizedState = Yf(
    1 | t,
    s,
    e,
    i
  ));
}
function LR(n, t) {
  O0(8390656, 8, n, t);
}
function NU(n, t) {
  cm(2048, 8, n, t);
}
function LU(n, t) {
  return cm(4, 2, n, t);
}
function zU(n, t) {
  return cm(4, 4, n, t);
}
function BU(n, t) {
  if (typeof t == "function") {
    n = n();
    var e = t(n);
    return function() {
      typeof e == "function" ? e() : t(null);
    };
  }
  if (t != null)
    return n = n(), t.current = n, function() {
      t.current = null;
    };
}
function PU(n, t, e) {
  e = e != null ? e.concat([n]) : null, cm(4, 4, BU.bind(null, t, n), e);
}
function iE() {
}
function IU(n, t) {
  var e = kn();
  t = t === void 0 ? null : t;
  var i = e.memoizedState;
  return t !== null && jb(t, i[1]) ? i[0] : (e.memoizedState = [n, t], n);
}
function HU(n, t) {
  var e = kn();
  t = t === void 0 ? null : t;
  var i = e.memoizedState;
  if (t !== null && jb(t, i[1]))
    return i[0];
  if (i = n(), Fu) {
    Wo(!0);
    try {
      n();
    } finally {
      Wo(!1);
    }
  }
  return e.memoizedState = [i, t], i;
}
function aE(n, t, e) {
  return e === void 0 || fl & 1073741824 ? n.memoizedState = t : (n.memoizedState = e, n = wO(), Ee.lanes |= n, dl |= n, e);
}
function FU(n, t, e, i) {
  return ka(e, t) ? e : qf.current !== null ? (n = aE(n, e, i), ka(n, t) || (ui = !0), n) : fl & 42 ? (n = wO(), Ee.lanes |= n, dl |= n, t) : (ui = !0, n.memoizedState = e);
}
function VU(n, t, e, i, a) {
  var s = We.p;
  We.p = s !== 0 && 8 > s ? s : 8;
  var r = ue.T, l = {};
  ue.T = l, rE(n, !1, t, e);
  try {
    var c = a(), f = ue.S;
    if (f !== null && f(l, c), c !== null && typeof c == "object" && typeof c.then == "function") {
      var d = k5(
        c,
        i
      );
      Wd(
        n,
        t,
        d,
        Ga(n)
      );
    } else
      Wd(
        n,
        t,
        i,
        Ga(n)
      );
  } catch (p) {
    Wd(
      n,
      t,
      { then: function() {
      }, status: "rejected", reason: p },
      Ga()
    );
  } finally {
    We.p = s, ue.T = r;
  }
}
function K5() {
}
function uM(n, t, e, i) {
  if (n.tag !== 5) throw Error(vt(476));
  var a = GU(n).queue;
  VU(
    n,
    a,
    t,
    Eu,
    e === null ? K5 : function() {
      return XU(n), e(i);
    }
  );
}
function GU(n) {
  var t = n.memoizedState;
  if (t !== null) return t;
  t = {
    memoizedState: Eu,
    baseState: Eu,
    baseQueue: null,
    queue: {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: eo,
      lastRenderedState: Eu
    },
    next: null
  };
  var e = {};
  return t.next = {
    memoizedState: e,
    baseState: e,
    baseQueue: null,
    queue: {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: eo,
      lastRenderedState: e
    },
    next: null
  }, n.memoizedState = t, n = n.alternate, n !== null && (n.memoizedState = t), t;
}
function XU(n) {
  var t = GU(n).next.queue;
  Wd(n, t, {}, Ga());
}
function sE() {
  return Ni(Ep);
}
function qU() {
  return kn().memoizedState;
}
function YU() {
  return kn().memoizedState;
}
function J5(n) {
  for (var t = n.return; t !== null; ) {
    switch (t.tag) {
      case 24:
      case 3:
        var e = Ga();
        n = nl(e);
        var i = il(t, n, e);
        i !== null && (Xa(i, t, e), qd(i, t, e)), t = { cache: Yb() }, n.payload = t;
        return;
    }
    t = t.return;
  }
}
function $5(n, t, e) {
  var i = Ga();
  e = {
    lane: i,
    revertLane: 0,
    action: e,
    hasEagerState: !1,
    eagerState: null,
    next: null
  }, N_(n) ? WU(t, e) : (e = Vb(n, t, e, i), e !== null && (Xa(e, n, i), ZU(e, t, i)));
}
function kU(n, t, e) {
  var i = Ga();
  Wd(n, t, e, i);
}
function Wd(n, t, e, i) {
  var a = {
    lane: i,
    revertLane: 0,
    action: e,
    hasEagerState: !1,
    eagerState: null,
    next: null
  };
  if (N_(n)) WU(t, a);
  else {
    var s = n.alternate;
    if (n.lanes === 0 && (s === null || s.lanes === 0) && (s = t.lastRenderedReducer, s !== null))
      try {
        var r = t.lastRenderedState, l = s(r, e);
        if (a.hasEagerState = !0, a.eagerState = l, ka(l, r))
          return w_(n, t, a, 0), dn === null && C_(), !1;
      } catch {
      } finally {
      }
    if (e = Vb(n, t, a, i), e !== null)
      return Xa(e, n, i), ZU(e, t, i), !0;
  }
  return !1;
}
function rE(n, t, e, i) {
  if (i = {
    lane: 2,
    revertLane: pE(),
    action: i,
    hasEagerState: !1,
    eagerState: null,
    next: null
  }, N_(n)) {
    if (t) throw Error(vt(479));
  } else
    t = Vb(
      n,
      e,
      i,
      2
    ), t !== null && Xa(t, n, 2);
}
function N_(n) {
  var t = n.alternate;
  return n === Ee || t !== null && t === Ee;
}
function WU(n, t) {
  Df = iv = !0;
  var e = n.pending;
  e === null ? t.next = t : (t.next = e.next, e.next = t), n.pending = t;
}
function ZU(n, t, e) {
  if (e & 4194048) {
    var i = t.lanes;
    i &= n.pendingLanes, e |= i, t.lanes = e, ID(n, e);
  }
}
var sv = {
  readContext: Ni,
  use: U_,
  useCallback: Ln,
  useContext: Ln,
  useEffect: Ln,
  useImperativeHandle: Ln,
  useLayoutEffect: Ln,
  useInsertionEffect: Ln,
  useMemo: Ln,
  useReducer: Ln,
  useRef: Ln,
  useState: Ln,
  useDebugValue: Ln,
  useDeferredValue: Ln,
  useTransition: Ln,
  useSyncExternalStore: Ln,
  useId: Ln,
  useHostTransitionStatus: Ln,
  useFormState: Ln,
  useActionState: Ln,
  useOptimistic: Ln,
  useMemoCache: Ln,
  useCacheRefresh: Ln
}, jU = {
  readContext: Ni,
  use: U_,
  useCallback: function(n, t) {
    return oa().memoizedState = [
      n,
      t === void 0 ? null : t
    ], n;
  },
  useContext: Ni,
  useEffect: LR,
  useImperativeHandle: function(n, t, e) {
    e = e != null ? e.concat([n]) : null, O0(
      4194308,
      4,
      BU.bind(null, t, n),
      e
    );
  },
  useLayoutEffect: function(n, t) {
    return O0(4194308, 4, n, t);
  },
  useInsertionEffect: function(n, t) {
    O0(4, 2, n, t);
  },
  useMemo: function(n, t) {
    var e = oa();
    t = t === void 0 ? null : t;
    var i = n();
    if (Fu) {
      Wo(!0);
      try {
        n();
      } finally {
        Wo(!1);
      }
    }
    return e.memoizedState = [i, t], i;
  },
  useReducer: function(n, t, e) {
    var i = oa();
    if (e !== void 0) {
      var a = e(t);
      if (Fu) {
        Wo(!0);
        try {
          e(t);
        } finally {
          Wo(!1);
        }
      }
    } else a = t;
    return i.memoizedState = i.baseState = a, n = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: n,
      lastRenderedState: a
    }, i.queue = n, n = n.dispatch = $5.bind(
      null,
      Ee,
      n
    ), [i.memoizedState, n];
  },
  useRef: function(n) {
    var t = oa();
    return n = { current: n }, t.memoizedState = n;
  },
  useState: function(n) {
    n = oM(n);
    var t = n.queue, e = kU.bind(null, Ee, t);
    return t.dispatch = e, [n.memoizedState, e];
  },
  useDebugValue: iE,
  useDeferredValue: function(n, t) {
    var e = oa();
    return aE(e, n, t);
  },
  useTransition: function() {
    var n = oM(!1);
    return n = VU.bind(
      null,
      Ee,
      n.queue,
      !0,
      !1
    ), oa().memoizedState = n, [!1, n];
  },
  useSyncExternalStore: function(n, t, e) {
    var i = Ee, a = oa();
    if (ke) {
      if (e === void 0)
        throw Error(vt(407));
      e = e();
    } else {
      if (e = t(), dn === null)
        throw Error(vt(349));
      Be & 124 || MU(i, t, e);
    }
    a.memoizedState = e;
    var s = { value: e, getSnapshot: t };
    return a.queue = s, LR(EU.bind(null, i, s, n), [
      n
    ]), i.flags |= 2048, Yf(
      9,
      O_(),
      bU.bind(
        null,
        i,
        s,
        e,
        t
      ),
      null
    ), e;
  },
  useId: function() {
    var n = oa(), t = dn.identifierPrefix;
    if (ke) {
      var e = kr, i = Yr;
      e = (i & ~(1 << 32 - Va(i) - 1)).toString(32) + e, t = "«" + t + "R" + e, e = av++, 0 < e && (t += "H" + e.toString(32)), t += "»";
    } else
      e = W5++, t = "«" + t + "r" + e.toString(32) + "»";
    return n.memoizedState = t;
  },
  useHostTransitionStatus: sE,
  useFormState: UR,
  useActionState: UR,
  useOptimistic: function(n) {
    var t = oa();
    t.memoizedState = t.baseState = n;
    var e = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: null,
      lastRenderedState: null
    };
    return t.queue = e, t = rE.bind(
      null,
      Ee,
      !0,
      e
    ), e.dispatch = t, [n, t];
  },
  useMemoCache: eE,
  useCacheRefresh: function() {
    return oa().memoizedState = J5.bind(
      null,
      Ee
    );
  }
}, QU = {
  readContext: Ni,
  use: U_,
  useCallback: IU,
  useContext: Ni,
  useEffect: NU,
  useImperativeHandle: PU,
  useInsertionEffect: LU,
  useLayoutEffect: zU,
  useMemo: HU,
  useReducer: U0,
  useRef: OU,
  useState: function() {
    return U0(eo);
  },
  useDebugValue: iE,
  useDeferredValue: function(n, t) {
    var e = kn();
    return FU(
      e,
      nn.memoizedState,
      n,
      t
    );
  },
  useTransition: function() {
    var n = U0(eo)[0], t = kn().memoizedState;
    return [
      typeof n == "boolean" ? n : um(n),
      t
    ];
  },
  useSyncExternalStore: SU,
  useId: qU,
  useHostTransitionStatus: sE,
  useFormState: OR,
  useActionState: OR,
  useOptimistic: function(n, t) {
    var e = kn();
    return RU(e, nn, n, t);
  },
  useMemoCache: eE,
  useCacheRefresh: YU
}, tH = {
  readContext: Ni,
  use: U_,
  useCallback: IU,
  useContext: Ni,
  useEffect: NU,
  useImperativeHandle: PU,
  useInsertionEffect: LU,
  useLayoutEffect: zU,
  useMemo: HU,
  useReducer: cS,
  useRef: OU,
  useState: function() {
    return cS(eo);
  },
  useDebugValue: iE,
  useDeferredValue: function(n, t) {
    var e = kn();
    return nn === null ? aE(e, n, t) : FU(
      e,
      nn.memoizedState,
      n,
      t
    );
  },
  useTransition: function() {
    var n = cS(eo)[0], t = kn().memoizedState;
    return [
      typeof n == "boolean" ? n : um(n),
      t
    ];
  },
  useSyncExternalStore: SU,
  useId: qU,
  useHostTransitionStatus: sE,
  useFormState: NR,
  useActionState: NR,
  useOptimistic: function(n, t) {
    var e = kn();
    return nn !== null ? RU(e, nn, n, t) : (e.baseState = n, [n, e.queue.dispatch]);
  },
  useMemoCache: eE,
  useCacheRefresh: YU
}, Of = null, xp = 0;
function Sg(n) {
  var t = xp;
  return xp += 1, Of === null && (Of = []), gU(Of, n, t);
}
function rd(n, t) {
  t = t.props.ref, n.ref = t !== void 0 ? t : null;
}
function Mg(n, t) {
  throw t.$$typeof === DI ? Error(vt(525)) : (n = Object.prototype.toString.call(t), Error(
    vt(
      31,
      n === "[object Object]" ? "object with keys {" + Object.keys(t).join(", ") + "}" : n
    )
  ));
}
function zR(n) {
  var t = n._init;
  return t(n._payload);
}
function KU(n) {
  function t(v, S) {
    if (n) {
      var E = v.deletions;
      E === null ? (v.deletions = [S], v.flags |= 16) : E.push(S);
    }
  }
  function e(v, S) {
    if (!n) return null;
    for (; S !== null; )
      t(v, S), S = S.sibling;
    return null;
  }
  function i(v) {
    for (var S = /* @__PURE__ */ new Map(); v !== null; )
      v.key !== null ? S.set(v.key, v) : S.set(v.index, v), v = v.sibling;
    return S;
  }
  function a(v, S) {
    return v = Qr(v, S), v.index = 0, v.sibling = null, v;
  }
  function s(v, S, E) {
    return v.index = E, n ? (E = v.alternate, E !== null ? (E = E.index, E < S ? (v.flags |= 67108866, S) : E) : (v.flags |= 67108866, S)) : (v.flags |= 1048576, S);
  }
  function r(v) {
    return n && v.alternate === null && (v.flags |= 67108866), v;
  }
  function l(v, S, E, T) {
    return S === null || S.tag !== 6 ? (S = oS(E, v.mode, T), S.return = v, S) : (S = a(S, E), S.return = v, S);
  }
  function c(v, S, E, T) {
    var w = E.type;
    return w === lf ? d(
      v,
      S,
      E.props.children,
      T,
      E.key
    ) : S !== null && (S.elementType === w || typeof w == "object" && w !== null && w.$$typeof === Io && zR(w) === S.type) ? (S = a(S, E.props), rd(S, E), S.return = v, S) : (S = w0(
      E.type,
      E.key,
      E.props,
      null,
      v.mode,
      T
    ), rd(S, E), S.return = v, S);
  }
  function f(v, S, E, T) {
    return S === null || S.tag !== 4 || S.stateNode.containerInfo !== E.containerInfo || S.stateNode.implementation !== E.implementation ? (S = lS(E, v.mode, T), S.return = v, S) : (S = a(S, E.children || []), S.return = v, S);
  }
  function d(v, S, E, T, w) {
    return S === null || S.tag !== 7 ? (S = Tu(
      E,
      v.mode,
      T,
      w
    ), S.return = v, S) : (S = a(S, E), S.return = v, S);
  }
  function p(v, S, E) {
    if (typeof S == "string" && S !== "" || typeof S == "number" || typeof S == "bigint")
      return S = oS(
        "" + S,
        v.mode,
        E
      ), S.return = v, S;
    if (typeof S == "object" && S !== null) {
      switch (S.$$typeof) {
        case pg:
          return E = w0(
            S.type,
            S.key,
            S.props,
            null,
            v.mode,
            E
          ), rd(E, S), E.return = v, E;
        case wd:
          return S = lS(
            S,
            v.mode,
            E
          ), S.return = v, S;
        case Io:
          var T = S._init;
          return S = T(S._payload), p(v, S, E);
      }
      if (Dd(S) || nd(S))
        return S = Tu(
          S,
          v.mode,
          E,
          null
        ), S.return = v, S;
      if (typeof S.then == "function")
        return p(v, Sg(S), E);
      if (S.$$typeof === qr)
        return p(
          v,
          yg(v, S),
          E
        );
      Mg(v, S);
    }
    return null;
  }
  function m(v, S, E, T) {
    var w = S !== null ? S.key : null;
    if (typeof E == "string" && E !== "" || typeof E == "number" || typeof E == "bigint")
      return w !== null ? null : l(v, S, "" + E, T);
    if (typeof E == "object" && E !== null) {
      switch (E.$$typeof) {
        case pg:
          return E.key === w ? c(v, S, E, T) : null;
        case wd:
          return E.key === w ? f(v, S, E, T) : null;
        case Io:
          return w = E._init, E = w(E._payload), m(v, S, E, T);
      }
      if (Dd(E) || nd(E))
        return w !== null ? null : d(v, S, E, T, null);
      if (typeof E.then == "function")
        return m(
          v,
          S,
          Sg(E),
          T
        );
      if (E.$$typeof === qr)
        return m(
          v,
          S,
          yg(v, E),
          T
        );
      Mg(v, E);
    }
    return null;
  }
  function g(v, S, E, T, w) {
    if (typeof T == "string" && T !== "" || typeof T == "number" || typeof T == "bigint")
      return v = v.get(E) || null, l(S, v, "" + T, w);
    if (typeof T == "object" && T !== null) {
      switch (T.$$typeof) {
        case pg:
          return v = v.get(
            T.key === null ? E : T.key
          ) || null, c(S, v, T, w);
        case wd:
          return v = v.get(
            T.key === null ? E : T.key
          ) || null, f(S, v, T, w);
        case Io:
          var D = T._init;
          return T = D(T._payload), g(
            v,
            S,
            E,
            T,
            w
          );
      }
      if (Dd(T) || nd(T))
        return v = v.get(E) || null, d(S, v, T, w, null);
      if (typeof T.then == "function")
        return g(
          v,
          S,
          E,
          Sg(T),
          w
        );
      if (T.$$typeof === qr)
        return g(
          v,
          S,
          E,
          yg(S, T),
          w
        );
      Mg(S, T);
    }
    return null;
  }
  function y(v, S, E, T) {
    for (var w = null, D = null, U = S, O = S = 0, R = null; U !== null && O < E.length; O++) {
      U.index > O ? (R = U, U = null) : R = U.sibling;
      var C = m(
        v,
        U,
        E[O],
        T
      );
      if (C === null) {
        U === null && (U = R);
        break;
      }
      n && U && C.alternate === null && t(v, U), S = s(C, S, O), D === null ? w = C : D.sibling = C, D = C, U = R;
    }
    if (O === E.length)
      return e(v, U), ke && fu(v, O), w;
    if (U === null) {
      for (; O < E.length; O++)
        U = p(v, E[O], T), U !== null && (S = s(
          U,
          S,
          O
        ), D === null ? w = U : D.sibling = U, D = U);
      return ke && fu(v, O), w;
    }
    for (U = i(U); O < E.length; O++)
      R = g(
        U,
        v,
        O,
        E[O],
        T
      ), R !== null && (n && R.alternate !== null && U.delete(
        R.key === null ? O : R.key
      ), S = s(
        R,
        S,
        O
      ), D === null ? w = R : D.sibling = R, D = R);
    return n && U.forEach(function(B) {
      return t(v, B);
    }), ke && fu(v, O), w;
  }
  function x(v, S, E, T) {
    if (E == null) throw Error(vt(151));
    for (var w = null, D = null, U = S, O = S = 0, R = null, C = E.next(); U !== null && !C.done; O++, C = E.next()) {
      U.index > O ? (R = U, U = null) : R = U.sibling;
      var B = m(v, U, C.value, T);
      if (B === null) {
        U === null && (U = R);
        break;
      }
      n && U && B.alternate === null && t(v, U), S = s(B, S, O), D === null ? w = B : D.sibling = B, D = B, U = R;
    }
    if (C.done)
      return e(v, U), ke && fu(v, O), w;
    if (U === null) {
      for (; !C.done; O++, C = E.next())
        C = p(v, C.value, T), C !== null && (S = s(C, S, O), D === null ? w = C : D.sibling = C, D = C);
      return ke && fu(v, O), w;
    }
    for (U = i(U); !C.done; O++, C = E.next())
      C = g(U, v, O, C.value, T), C !== null && (n && C.alternate !== null && U.delete(C.key === null ? O : C.key), S = s(C, S, O), D === null ? w = C : D.sibling = C, D = C);
    return n && U.forEach(function(Y) {
      return t(v, Y);
    }), ke && fu(v, O), w;
  }
  function M(v, S, E, T) {
    if (typeof E == "object" && E !== null && E.type === lf && E.key === null && (E = E.props.children), typeof E == "object" && E !== null) {
      switch (E.$$typeof) {
        case pg:
          t: {
            for (var w = E.key; S !== null; ) {
              if (S.key === w) {
                if (w = E.type, w === lf) {
                  if (S.tag === 7) {
                    e(
                      v,
                      S.sibling
                    ), T = a(
                      S,
                      E.props.children
                    ), T.return = v, v = T;
                    break t;
                  }
                } else if (S.elementType === w || typeof w == "object" && w !== null && w.$$typeof === Io && zR(w) === S.type) {
                  e(
                    v,
                    S.sibling
                  ), T = a(S, E.props), rd(T, E), T.return = v, v = T;
                  break t;
                }
                e(v, S);
                break;
              } else t(v, S);
              S = S.sibling;
            }
            E.type === lf ? (T = Tu(
              E.props.children,
              v.mode,
              T,
              E.key
            ), T.return = v, v = T) : (T = w0(
              E.type,
              E.key,
              E.props,
              null,
              v.mode,
              T
            ), rd(T, E), T.return = v, v = T);
          }
          return r(v);
        case wd:
          t: {
            for (w = E.key; S !== null; ) {
              if (S.key === w)
                if (S.tag === 4 && S.stateNode.containerInfo === E.containerInfo && S.stateNode.implementation === E.implementation) {
                  e(
                    v,
                    S.sibling
                  ), T = a(S, E.children || []), T.return = v, v = T;
                  break t;
                } else {
                  e(v, S);
                  break;
                }
              else t(v, S);
              S = S.sibling;
            }
            T = lS(E, v.mode, T), T.return = v, v = T;
          }
          return r(v);
        case Io:
          return w = E._init, E = w(E._payload), M(
            v,
            S,
            E,
            T
          );
      }
      if (Dd(E))
        return y(
          v,
          S,
          E,
          T
        );
      if (nd(E)) {
        if (w = nd(E), typeof w != "function") throw Error(vt(150));
        return E = w.call(E), x(
          v,
          S,
          E,
          T
        );
      }
      if (typeof E.then == "function")
        return M(
          v,
          S,
          Sg(E),
          T
        );
      if (E.$$typeof === qr)
        return M(
          v,
          S,
          yg(v, E),
          T
        );
      Mg(v, E);
    }
    return typeof E == "string" && E !== "" || typeof E == "number" || typeof E == "bigint" ? (E = "" + E, S !== null && S.tag === 6 ? (e(v, S.sibling), T = a(S, E), T.return = v, v = T) : (e(v, S), T = oS(E, v.mode, T), T.return = v, v = T), r(v)) : e(v, S);
  }
  return function(v, S, E, T) {
    try {
      xp = 0;
      var w = M(
        v,
        S,
        E,
        T
      );
      return Of = null, w;
    } catch (U) {
      if (U === lm || U === D_) throw U;
      var D = Pa(29, U, null, v.mode);
      return D.lanes = T, D.return = v, D;
    } finally {
    }
  };
}
var kf = KU(!0), JU = KU(!1), ys = pr(null), lr = null;
function Go(n) {
  var t = n.alternate;
  xn(jn, jn.current & 1), xn(ys, n), lr === null && (t === null || qf.current !== null || t.memoizedState !== null) && (lr = n);
}
function $U(n) {
  if (n.tag === 22) {
    if (xn(jn, jn.current), xn(ys, n), lr === null) {
      var t = n.alternate;
      t !== null && t.memoizedState !== null && (lr = n);
    }
  } else Xo();
}
function Xo() {
  xn(jn, jn.current), xn(ys, ys.current);
}
function Zr(n) {
  ci(ys), lr === n && (lr = null), ci(jn);
}
var jn = pr(0);
function rv(n) {
  for (var t = n; t !== null; ) {
    if (t.tag === 13) {
      var e = t.memoizedState;
      if (e !== null && (e = e.dehydrated, e === null || e.data === "$?" || AM(e)))
        return t;
    } else if (t.tag === 19 && t.memoizedProps.revealOrder !== void 0) {
      if (t.flags & 128) return t;
    } else if (t.child !== null) {
      t.child.return = t, t = t.child;
      continue;
    }
    if (t === n) break;
    for (; t.sibling === null; ) {
      if (t.return === null || t.return === n) return null;
      t = t.return;
    }
    t.sibling.return = t.return, t = t.sibling;
  }
  return null;
}
function fS(n, t, e, i) {
  t = n.memoizedState, e = e(i, t), e = e == null ? t : mn({}, t, e), n.memoizedState = e, n.lanes === 0 && (n.updateQueue.baseState = e);
}
var cM = {
  enqueueSetState: function(n, t, e) {
    n = n._reactInternals;
    var i = Ga(), a = nl(i);
    a.payload = t, e != null && (a.callback = e), t = il(n, a, i), t !== null && (Xa(t, n, i), qd(t, n, i));
  },
  enqueueReplaceState: function(n, t, e) {
    n = n._reactInternals;
    var i = Ga(), a = nl(i);
    a.tag = 1, a.payload = t, e != null && (a.callback = e), t = il(n, a, i), t !== null && (Xa(t, n, i), qd(t, n, i));
  },
  enqueueForceUpdate: function(n, t) {
    n = n._reactInternals;
    var e = Ga(), i = nl(e);
    i.tag = 2, t != null && (i.callback = t), t = il(n, i, e), t !== null && (Xa(t, n, e), qd(t, n, e));
  }
};
function BR(n, t, e, i, a, s, r) {
  return n = n.stateNode, typeof n.shouldComponentUpdate == "function" ? n.shouldComponentUpdate(i, s, r) : t.prototype && t.prototype.isPureReactComponent ? !vp(e, i) || !vp(a, s) : !0;
}
function PR(n, t, e, i) {
  n = t.state, typeof t.componentWillReceiveProps == "function" && t.componentWillReceiveProps(e, i), typeof t.UNSAFE_componentWillReceiveProps == "function" && t.UNSAFE_componentWillReceiveProps(e, i), t.state !== n && cM.enqueueReplaceState(t, t.state, null);
}
function Vu(n, t) {
  var e = t;
  if ("ref" in t) {
    e = {};
    for (var i in t)
      i !== "ref" && (e[i] = t[i]);
  }
  if (n = n.defaultProps) {
    e === t && (e = mn({}, e));
    for (var a in n)
      e[a] === void 0 && (e[a] = n[a]);
  }
  return e;
}
var ov = typeof reportError == "function" ? reportError : function(n) {
  if (typeof window == "object" && typeof window.ErrorEvent == "function") {
    var t = new window.ErrorEvent("error", {
      bubbles: !0,
      cancelable: !0,
      message: typeof n == "object" && n !== null && typeof n.message == "string" ? String(n.message) : String(n),
      error: n
    });
    if (!window.dispatchEvent(t)) return;
  } else if (typeof process == "object" && typeof process.emit == "function") {
    process.emit("uncaughtException", n);
    return;
  }
  console.error(n);
};
function tO(n) {
  ov(n);
}
function eO(n) {
  console.error(n);
}
function nO(n) {
  ov(n);
}
function lv(n, t) {
  try {
    var e = n.onUncaughtError;
    e(t.value, { componentStack: t.stack });
  } catch (i) {
    setTimeout(function() {
      throw i;
    });
  }
}
function IR(n, t, e) {
  try {
    var i = n.onCaughtError;
    i(e.value, {
      componentStack: e.stack,
      errorBoundary: t.tag === 1 ? t.stateNode : null
    });
  } catch (a) {
    setTimeout(function() {
      throw a;
    });
  }
}
function fM(n, t, e) {
  return e = nl(e), e.tag = 3, e.payload = { element: null }, e.callback = function() {
    lv(n, t);
  }, e;
}
function iO(n) {
  return n = nl(n), n.tag = 3, n;
}
function aO(n, t, e, i) {
  var a = e.type.getDerivedStateFromError;
  if (typeof a == "function") {
    var s = i.value;
    n.payload = function() {
      return a(s);
    }, n.callback = function() {
      IR(t, e, i);
    };
  }
  var r = e.stateNode;
  r !== null && typeof r.componentDidCatch == "function" && (n.callback = function() {
    IR(t, e, i), typeof a != "function" && (al === null ? al = /* @__PURE__ */ new Set([this]) : al.add(this));
    var l = i.stack;
    this.componentDidCatch(i.value, {
      componentStack: l !== null ? l : ""
    });
  });
}
function eH(n, t, e, i, a) {
  if (e.flags |= 32768, i !== null && typeof i == "object" && typeof i.then == "function") {
    if (t = e.alternate, t !== null && rm(
      t,
      e,
      a,
      !0
    ), e = ys.current, e !== null) {
      switch (e.tag) {
        case 13:
          return lr === null ? yM() : e.alternate === null && On === 0 && (On = 3), e.flags &= -257, e.flags |= 65536, e.lanes = a, i === iM ? e.flags |= 16384 : (t = e.updateQueue, t === null ? e.updateQueue = /* @__PURE__ */ new Set([i]) : t.add(i), MS(n, i, a)), !1;
        case 22:
          return e.flags |= 65536, i === iM ? e.flags |= 16384 : (t = e.updateQueue, t === null ? (t = {
            transitions: null,
            markerInstances: null,
            retryQueue: /* @__PURE__ */ new Set([i])
          }, e.updateQueue = t) : (e = t.retryQueue, e === null ? t.retryQueue = /* @__PURE__ */ new Set([i]) : e.add(i)), MS(n, i, a)), !1;
      }
      throw Error(vt(435, e.tag));
    }
    return MS(n, i, a), yM(), !1;
  }
  if (ke)
    return t = ys.current, t !== null ? (!(t.flags & 65536) && (t.flags |= 256), t.flags |= 65536, t.lanes = a, i !== J1 && (n = Error(vt(422), { cause: i }), _p(ds(n, e)))) : (i !== J1 && (t = Error(vt(423), {
      cause: i
    }), _p(
      ds(t, e)
    )), n = n.current.alternate, n.flags |= 65536, a &= -a, n.lanes |= a, i = ds(i, e), a = fM(
      n.stateNode,
      i,
      a
    ), uS(n, a), On !== 4 && (On = 2)), !1;
  var s = Error(vt(520), { cause: i });
  if (s = ds(s, e), Qd === null ? Qd = [s] : Qd.push(s), On !== 4 && (On = 2), t === null) return !0;
  i = ds(i, e), e = t;
  do {
    switch (e.tag) {
      case 3:
        return e.flags |= 65536, n = a & -a, e.lanes |= n, n = fM(e.stateNode, i, n), uS(e, n), !1;
      case 1:
        if (t = e.type, s = e.stateNode, (e.flags & 128) === 0 && (typeof t.getDerivedStateFromError == "function" || s !== null && typeof s.componentDidCatch == "function" && (al === null || !al.has(s))))
          return e.flags |= 65536, a &= -a, e.lanes |= a, a = iO(a), aO(
            a,
            n,
            e,
            i
          ), uS(e, a), !1;
    }
    e = e.return;
  } while (e !== null);
  return !1;
}
var sO = Error(vt(461)), ui = !1;
function gi(n, t, e, i) {
  t.child = n === null ? JU(t, null, e, i) : kf(
    t,
    n.child,
    e,
    i
  );
}
function HR(n, t, e, i, a) {
  e = e.render;
  var s = t.ref;
  if ("ref" in i) {
    var r = {};
    for (var l in i)
      l !== "ref" && (r[l] = i[l]);
  } else r = i;
  return Hu(t), i = Qb(
    n,
    t,
    e,
    r,
    s,
    a
  ), l = Kb(), n !== null && !ui ? (Jb(n, t, a), no(n, t, a)) : (ke && l && Xb(t), t.flags |= 1, gi(n, t, i, a), t.child);
}
function FR(n, t, e, i, a) {
  if (n === null) {
    var s = e.type;
    return typeof s == "function" && !Gb(s) && s.defaultProps === void 0 && e.compare === null ? (t.tag = 15, t.type = s, rO(
      n,
      t,
      s,
      i,
      a
    )) : (n = w0(
      e.type,
      null,
      i,
      t,
      t.mode,
      a
    ), n.ref = t.ref, n.return = t, t.child = n);
  }
  if (s = n.child, !oE(n, a)) {
    var r = s.memoizedProps;
    if (e = e.compare, e = e !== null ? e : vp, e(r, i) && n.ref === t.ref)
      return no(n, t, a);
  }
  return t.flags |= 1, n = Qr(s, i), n.ref = t.ref, n.return = t, t.child = n;
}
function rO(n, t, e, i, a) {
  if (n !== null) {
    var s = n.memoizedProps;
    if (vp(s, i) && n.ref === t.ref)
      if (ui = !1, t.pendingProps = i = s, oE(n, a))
        n.flags & 131072 && (ui = !0);
      else
        return t.lanes = n.lanes, no(n, t, a);
  }
  return hM(
    n,
    t,
    e,
    i,
    a
  );
}
function oO(n, t, e) {
  var i = t.pendingProps, a = i.children, s = n !== null ? n.memoizedState : null;
  if (i.mode === "hidden") {
    if (t.flags & 128) {
      if (i = s !== null ? s.baseLanes | e : e, n !== null) {
        for (a = t.child = n.child, s = 0; a !== null; )
          s = s | a.lanes | a.childLanes, a = a.sibling;
        t.childLanes = s & ~i;
      } else t.childLanes = 0, t.child = null;
      return VR(
        n,
        t,
        i,
        e
      );
    }
    if (e & 536870912)
      t.memoizedState = { baseLanes: 0, cachePool: null }, n !== null && D0(
        t,
        s !== null ? s.cachePool : null
      ), s !== null ? CR(t, s) : rM(), $U(t);
    else
      return t.lanes = t.childLanes = 536870912, VR(
        n,
        t,
        s !== null ? s.baseLanes | e : e,
        e
      );
  } else
    s !== null ? (D0(t, s.cachePool), CR(t, s), Xo(), t.memoizedState = null) : (n !== null && D0(t, null), rM(), Xo());
  return gi(n, t, a, e), t.child;
}
function VR(n, t, e, i) {
  var a = kb();
  return a = a === null ? null : { parent: Zn._currentValue, pool: a }, t.memoizedState = {
    baseLanes: e,
    cachePool: a
  }, n !== null && D0(t, null), rM(), $U(t), n !== null && rm(n, t, i, !0), null;
}
function N0(n, t) {
  var e = t.ref;
  if (e === null)
    n !== null && n.ref !== null && (t.flags |= 4194816);
  else {
    if (typeof e != "function" && typeof e != "object")
      throw Error(vt(284));
    (n === null || n.ref !== e) && (t.flags |= 4194816);
  }
}
function hM(n, t, e, i, a) {
  return Hu(t), e = Qb(
    n,
    t,
    e,
    i,
    void 0,
    a
  ), i = Kb(), n !== null && !ui ? (Jb(n, t, a), no(n, t, a)) : (ke && i && Xb(t), t.flags |= 1, gi(n, t, e, a), t.child);
}
function GR(n, t, e, i, a, s) {
  return Hu(t), t.updateQueue = null, e = xU(
    t,
    i,
    e,
    a
  ), yU(n), i = Kb(), n !== null && !ui ? (Jb(n, t, s), no(n, t, s)) : (ke && i && Xb(t), t.flags |= 1, gi(n, t, e, s), t.child);
}
function XR(n, t, e, i, a) {
  if (Hu(t), t.stateNode === null) {
    var s = gf, r = e.contextType;
    typeof r == "object" && r !== null && (s = Ni(r)), s = new e(i, s), t.memoizedState = s.state !== null && s.state !== void 0 ? s.state : null, s.updater = cM, t.stateNode = s, s._reactInternals = t, s = t.stateNode, s.props = i, s.state = t.memoizedState, s.refs = {}, Wb(t), r = e.contextType, s.context = typeof r == "object" && r !== null ? Ni(r) : gf, s.state = t.memoizedState, r = e.getDerivedStateFromProps, typeof r == "function" && (fS(
      t,
      e,
      r,
      i
    ), s.state = t.memoizedState), typeof e.getDerivedStateFromProps == "function" || typeof s.getSnapshotBeforeUpdate == "function" || typeof s.UNSAFE_componentWillMount != "function" && typeof s.componentWillMount != "function" || (r = s.state, typeof s.componentWillMount == "function" && s.componentWillMount(), typeof s.UNSAFE_componentWillMount == "function" && s.UNSAFE_componentWillMount(), r !== s.state && cM.enqueueReplaceState(s, s.state, null), kd(t, i, s, a), Yd(), s.state = t.memoizedState), typeof s.componentDidMount == "function" && (t.flags |= 4194308), i = !0;
  } else if (n === null) {
    s = t.stateNode;
    var l = t.memoizedProps, c = Vu(e, l);
    s.props = c;
    var f = s.context, d = e.contextType;
    r = gf, typeof d == "object" && d !== null && (r = Ni(d));
    var p = e.getDerivedStateFromProps;
    d = typeof p == "function" || typeof s.getSnapshotBeforeUpdate == "function", l = t.pendingProps !== l, d || typeof s.UNSAFE_componentWillReceiveProps != "function" && typeof s.componentWillReceiveProps != "function" || (l || f !== r) && PR(
      t,
      s,
      i,
      r
    ), Ho = !1;
    var m = t.memoizedState;
    s.state = m, kd(t, i, s, a), Yd(), f = t.memoizedState, l || m !== f || Ho ? (typeof p == "function" && (fS(
      t,
      e,
      p,
      i
    ), f = t.memoizedState), (c = Ho || BR(
      t,
      e,
      c,
      i,
      m,
      f,
      r
    )) ? (d || typeof s.UNSAFE_componentWillMount != "function" && typeof s.componentWillMount != "function" || (typeof s.componentWillMount == "function" && s.componentWillMount(), typeof s.UNSAFE_componentWillMount == "function" && s.UNSAFE_componentWillMount()), typeof s.componentDidMount == "function" && (t.flags |= 4194308)) : (typeof s.componentDidMount == "function" && (t.flags |= 4194308), t.memoizedProps = i, t.memoizedState = f), s.props = i, s.state = f, s.context = r, i = c) : (typeof s.componentDidMount == "function" && (t.flags |= 4194308), i = !1);
  } else {
    s = t.stateNode, aM(n, t), r = t.memoizedProps, d = Vu(e, r), s.props = d, p = t.pendingProps, m = s.context, f = e.contextType, c = gf, typeof f == "object" && f !== null && (c = Ni(f)), l = e.getDerivedStateFromProps, (f = typeof l == "function" || typeof s.getSnapshotBeforeUpdate == "function") || typeof s.UNSAFE_componentWillReceiveProps != "function" && typeof s.componentWillReceiveProps != "function" || (r !== p || m !== c) && PR(
      t,
      s,
      i,
      c
    ), Ho = !1, m = t.memoizedState, s.state = m, kd(t, i, s, a), Yd();
    var g = t.memoizedState;
    r !== p || m !== g || Ho || n !== null && n.dependencies !== null && ev(n.dependencies) ? (typeof l == "function" && (fS(
      t,
      e,
      l,
      i
    ), g = t.memoizedState), (d = Ho || BR(
      t,
      e,
      d,
      i,
      m,
      g,
      c
    ) || n !== null && n.dependencies !== null && ev(n.dependencies)) ? (f || typeof s.UNSAFE_componentWillUpdate != "function" && typeof s.componentWillUpdate != "function" || (typeof s.componentWillUpdate == "function" && s.componentWillUpdate(i, g, c), typeof s.UNSAFE_componentWillUpdate == "function" && s.UNSAFE_componentWillUpdate(
      i,
      g,
      c
    )), typeof s.componentDidUpdate == "function" && (t.flags |= 4), typeof s.getSnapshotBeforeUpdate == "function" && (t.flags |= 1024)) : (typeof s.componentDidUpdate != "function" || r === n.memoizedProps && m === n.memoizedState || (t.flags |= 4), typeof s.getSnapshotBeforeUpdate != "function" || r === n.memoizedProps && m === n.memoizedState || (t.flags |= 1024), t.memoizedProps = i, t.memoizedState = g), s.props = i, s.state = g, s.context = c, i = d) : (typeof s.componentDidUpdate != "function" || r === n.memoizedProps && m === n.memoizedState || (t.flags |= 4), typeof s.getSnapshotBeforeUpdate != "function" || r === n.memoizedProps && m === n.memoizedState || (t.flags |= 1024), i = !1);
  }
  return s = i, N0(n, t), i = (t.flags & 128) !== 0, s || i ? (s = t.stateNode, e = i && typeof e.getDerivedStateFromError != "function" ? null : s.render(), t.flags |= 1, n !== null && i ? (t.child = kf(
    t,
    n.child,
    null,
    a
  ), t.child = kf(
    t,
    null,
    e,
    a
  )) : gi(n, t, e, a), t.memoizedState = s.state, n = t.child) : n = no(
    n,
    t,
    a
  ), n;
}
function qR(n, t, e, i) {
  return sm(), t.flags |= 256, gi(n, t, e, i), t.child;
}
var hS = {
  dehydrated: null,
  treeContext: null,
  retryLane: 0,
  hydrationErrors: null
};
function dS(n) {
  return { baseLanes: n, cachePool: pU() };
}
function pS(n, t, e) {
  return n = n !== null ? n.childLanes & ~e : 0, t && (n |= ps), n;
}
function lO(n, t, e) {
  var i = t.pendingProps, a = !1, s = (t.flags & 128) !== 0, r;
  if ((r = s) || (r = n !== null && n.memoizedState === null ? !1 : (jn.current & 2) !== 0), r && (a = !0, t.flags &= -129), r = (t.flags & 32) !== 0, t.flags &= -33, n === null) {
    if (ke) {
      if (a ? Go(t) : Xo(), ke) {
        var l = Un, c;
        if (c = l) {
          t: {
            for (c = l, l = tr; c.nodeType !== 8; ) {
              if (!l) {
                l = null;
                break t;
              }
              if (c = Hs(
                c.nextSibling
              ), c === null) {
                l = null;
                break t;
              }
            }
            l = c;
          }
          l !== null ? (t.memoizedState = {
            dehydrated: l,
            treeContext: Au !== null ? { id: Yr, overflow: kr } : null,
            retryLane: 536870912,
            hydrationErrors: null
          }, c = Pa(
            18,
            null,
            null,
            0
          ), c.stateNode = l, c.return = t, t.child = c, Wi = t, Un = null, c = !0) : c = !1;
        }
        c || Iu(t);
      }
      if (l = t.memoizedState, l !== null && (l = l.dehydrated, l !== null))
        return AM(l) ? t.lanes = 32 : t.lanes = 536870912, null;
      Zr(t);
    }
    return l = i.children, i = i.fallback, a ? (Xo(), a = t.mode, l = uv(
      { mode: "hidden", children: l },
      a
    ), i = Tu(
      i,
      a,
      e,
      null
    ), l.return = t, i.return = t, l.sibling = i, t.child = l, a = t.child, a.memoizedState = dS(e), a.childLanes = pS(
      n,
      r,
      e
    ), t.memoizedState = hS, i) : (Go(t), dM(t, l));
  }
  if (c = n.memoizedState, c !== null && (l = c.dehydrated, l !== null)) {
    if (s)
      t.flags & 256 ? (Go(t), t.flags &= -257, t = mS(
        n,
        t,
        e
      )) : t.memoizedState !== null ? (Xo(), t.child = n.child, t.flags |= 128, t = null) : (Xo(), a = i.fallback, l = t.mode, i = uv(
        { mode: "visible", children: i.children },
        l
      ), a = Tu(
        a,
        l,
        e,
        null
      ), a.flags |= 2, i.return = t, a.return = t, i.sibling = a, t.child = i, kf(
        t,
        n.child,
        null,
        e
      ), i = t.child, i.memoizedState = dS(e), i.childLanes = pS(
        n,
        r,
        e
      ), t.memoizedState = hS, t = a);
    else if (Go(t), AM(l)) {
      if (r = l.nextSibling && l.nextSibling.dataset, r) var f = r.dgst;
      r = f, i = Error(vt(419)), i.stack = "", i.digest = r, _p({ value: i, source: null, stack: null }), t = mS(
        n,
        t,
        e
      );
    } else if (ui || rm(n, t, e, !1), r = (e & n.childLanes) !== 0, ui || r) {
      if (r = dn, r !== null && (i = e & -e, i = i & 42 ? 1 : Ub(i), i = i & (r.suspendedLanes | e) ? 0 : i, i !== 0 && i !== c.retryLane))
        throw c.retryLane = i, vh(n, i), Xa(r, n, i), sO;
      l.data === "$?" || yM(), t = mS(
        n,
        t,
        e
      );
    } else
      l.data === "$?" ? (t.flags |= 192, t.child = n.child, t = null) : (n = c.treeContext, Un = Hs(
        l.nextSibling
      ), Wi = t, ke = !0, Ru = null, tr = !1, n !== null && (cs[fs++] = Yr, cs[fs++] = kr, cs[fs++] = Au, Yr = n.id, kr = n.overflow, Au = t), t = dM(
        t,
        i.children
      ), t.flags |= 4096);
    return t;
  }
  return a ? (Xo(), a = i.fallback, l = t.mode, c = n.child, f = c.sibling, i = Qr(c, {
    mode: "hidden",
    children: i.children
  }), i.subtreeFlags = c.subtreeFlags & 65011712, f !== null ? a = Qr(f, a) : (a = Tu(
    a,
    l,
    e,
    null
  ), a.flags |= 2), a.return = t, i.return = t, i.sibling = a, t.child = i, i = a, a = t.child, l = n.child.memoizedState, l === null ? l = dS(e) : (c = l.cachePool, c !== null ? (f = Zn._currentValue, c = c.parent !== f ? { parent: f, pool: f } : c) : c = pU(), l = {
    baseLanes: l.baseLanes | e,
    cachePool: c
  }), a.memoizedState = l, a.childLanes = pS(
    n,
    r,
    e
  ), t.memoizedState = hS, i) : (Go(t), e = n.child, n = e.sibling, e = Qr(e, {
    mode: "visible",
    children: i.children
  }), e.return = t, e.sibling = null, n !== null && (r = t.deletions, r === null ? (t.deletions = [n], t.flags |= 16) : r.push(n)), t.child = e, t.memoizedState = null, e);
}
function dM(n, t) {
  return t = uv(
    { mode: "visible", children: t },
    n.mode
  ), t.return = n, n.child = t;
}
function uv(n, t) {
  return n = Pa(22, n, null, t), n.lanes = 0, n.stateNode = {
    _visibility: 1,
    _pendingMarkers: null,
    _retryCache: null,
    _transitions: null
  }, n;
}
function mS(n, t, e) {
  return kf(t, n.child, null, e), n = dM(
    t,
    t.pendingProps.children
  ), n.flags |= 2, t.memoizedState = null, n;
}
function YR(n, t, e) {
  n.lanes |= t;
  var i = n.alternate;
  i !== null && (i.lanes |= t), tM(n.return, t, e);
}
function gS(n, t, e, i, a) {
  var s = n.memoizedState;
  s === null ? n.memoizedState = {
    isBackwards: t,
    rendering: null,
    renderingStartTime: 0,
    last: i,
    tail: e,
    tailMode: a
  } : (s.isBackwards = t, s.rendering = null, s.renderingStartTime = 0, s.last = i, s.tail = e, s.tailMode = a);
}
function uO(n, t, e) {
  var i = t.pendingProps, a = i.revealOrder, s = i.tail;
  if (gi(n, t, i.children, e), i = jn.current, i & 2)
    i = i & 1 | 2, t.flags |= 128;
  else {
    if (n !== null && n.flags & 128)
      t: for (n = t.child; n !== null; ) {
        if (n.tag === 13)
          n.memoizedState !== null && YR(n, e, t);
        else if (n.tag === 19)
          YR(n, e, t);
        else if (n.child !== null) {
          n.child.return = n, n = n.child;
          continue;
        }
        if (n === t) break t;
        for (; n.sibling === null; ) {
          if (n.return === null || n.return === t)
            break t;
          n = n.return;
        }
        n.sibling.return = n.return, n = n.sibling;
      }
    i &= 1;
  }
  switch (xn(jn, i), a) {
    case "forwards":
      for (e = t.child, a = null; e !== null; )
        n = e.alternate, n !== null && rv(n) === null && (a = e), e = e.sibling;
      e = a, e === null ? (a = t.child, t.child = null) : (a = e.sibling, e.sibling = null), gS(
        t,
        !1,
        a,
        e,
        s
      );
      break;
    case "backwards":
      for (e = null, a = t.child, t.child = null; a !== null; ) {
        if (n = a.alternate, n !== null && rv(n) === null) {
          t.child = a;
          break;
        }
        n = a.sibling, a.sibling = e, e = a, a = n;
      }
      gS(
        t,
        !0,
        e,
        null,
        s
      );
      break;
    case "together":
      gS(t, !1, null, null, void 0);
      break;
    default:
      t.memoizedState = null;
  }
  return t.child;
}
function no(n, t, e) {
  if (n !== null && (t.dependencies = n.dependencies), dl |= t.lanes, !(e & t.childLanes))
    if (n !== null) {
      if (rm(
        n,
        t,
        e,
        !1
      ), (e & t.childLanes) === 0)
        return null;
    } else return null;
  if (n !== null && t.child !== n.child)
    throw Error(vt(153));
  if (t.child !== null) {
    for (n = t.child, e = Qr(n, n.pendingProps), t.child = e, e.return = t; n.sibling !== null; )
      n = n.sibling, e = e.sibling = Qr(n, n.pendingProps), e.return = t;
    e.sibling = null;
  }
  return t.child;
}
function oE(n, t) {
  return n.lanes & t ? !0 : (n = n.dependencies, !!(n !== null && ev(n)));
}
function nH(n, t, e) {
  switch (t.tag) {
    case 3:
      W0(t, t.stateNode.containerInfo), Vo(t, Zn, n.memoizedState.cache), sm();
      break;
    case 27:
    case 5:
      G1(t);
      break;
    case 4:
      W0(t, t.stateNode.containerInfo);
      break;
    case 10:
      Vo(
        t,
        t.type,
        t.memoizedProps.value
      );
      break;
    case 13:
      var i = t.memoizedState;
      if (i !== null)
        return i.dehydrated !== null ? (Go(t), t.flags |= 128, null) : e & t.child.childLanes ? lO(n, t, e) : (Go(t), n = no(
          n,
          t,
          e
        ), n !== null ? n.sibling : null);
      Go(t);
      break;
    case 19:
      var a = (n.flags & 128) !== 0;
      if (i = (e & t.childLanes) !== 0, i || (rm(
        n,
        t,
        e,
        !1
      ), i = (e & t.childLanes) !== 0), a) {
        if (i)
          return uO(
            n,
            t,
            e
          );
        t.flags |= 128;
      }
      if (a = t.memoizedState, a !== null && (a.rendering = null, a.tail = null, a.lastEffect = null), xn(jn, jn.current), i) break;
      return null;
    case 22:
    case 23:
      return t.lanes = 0, oO(n, t, e);
    case 24:
      Vo(t, Zn, n.memoizedState.cache);
  }
  return no(n, t, e);
}
function cO(n, t, e) {
  if (n !== null)
    if (n.memoizedProps !== t.pendingProps)
      ui = !0;
    else {
      if (!oE(n, e) && !(t.flags & 128))
        return ui = !1, nH(
          n,
          t,
          e
        );
      ui = !!(n.flags & 131072);
    }
  else
    ui = !1, ke && t.flags & 1048576 && hU(t, tv, t.index);
  switch (t.lanes = 0, t.tag) {
    case 16:
      t: {
        n = t.pendingProps;
        var i = t.elementType, a = i._init;
        if (i = a(i._payload), t.type = i, typeof i == "function")
          Gb(i) ? (n = Vu(i, n), t.tag = 1, t = XR(
            null,
            t,
            i,
            n,
            e
          )) : (t.tag = 0, t = hM(
            null,
            t,
            i,
            n,
            e
          ));
        else {
          if (i != null) {
            if (a = i.$$typeof, a === Cb) {
              t.tag = 11, t = HR(
                null,
                t,
                i,
                n,
                e
              );
              break t;
            } else if (a === wb) {
              t.tag = 14, t = FR(
                null,
                t,
                i,
                n,
                e
              );
              break t;
            }
          }
          throw t = F1(i) || i, Error(vt(306, t, ""));
        }
      }
      return t;
    case 0:
      return hM(
        n,
        t,
        t.type,
        t.pendingProps,
        e
      );
    case 1:
      return i = t.type, a = Vu(
        i,
        t.pendingProps
      ), XR(
        n,
        t,
        i,
        a,
        e
      );
    case 3:
      t: {
        if (W0(
          t,
          t.stateNode.containerInfo
        ), n === null) throw Error(vt(387));
        i = t.pendingProps;
        var s = t.memoizedState;
        a = s.element, aM(n, t), kd(t, i, null, e);
        var r = t.memoizedState;
        if (i = r.cache, Vo(t, Zn, i), i !== s.cache && eM(
          t,
          [Zn],
          e,
          !0
        ), Yd(), i = r.element, s.isDehydrated)
          if (s = {
            element: i,
            isDehydrated: !1,
            cache: r.cache
          }, t.updateQueue.baseState = s, t.memoizedState = s, t.flags & 256) {
            t = qR(
              n,
              t,
              i,
              e
            );
            break t;
          } else if (i !== a) {
            a = ds(
              Error(vt(424)),
              t
            ), _p(a), t = qR(
              n,
              t,
              i,
              e
            );
            break t;
          } else {
            switch (n = t.stateNode.containerInfo, n.nodeType) {
              case 9:
                n = n.body;
                break;
              default:
                n = n.nodeName === "HTML" ? n.ownerDocument.body : n;
            }
            for (Un = Hs(n.firstChild), Wi = t, ke = !0, Ru = null, tr = !0, e = JU(
              t,
              null,
              i,
              e
            ), t.child = e; e; )
              e.flags = e.flags & -3 | 4096, e = e.sibling;
          }
        else {
          if (sm(), i === a) {
            t = no(
              n,
              t,
              e
            );
            break t;
          }
          gi(
            n,
            t,
            i,
            e
          );
        }
        t = t.child;
      }
      return t;
    case 26:
      return N0(n, t), n === null ? (e = lC(
        t.type,
        null,
        t.pendingProps,
        null
      )) ? t.memoizedState = e : ke || (e = t.type, n = t.pendingProps, i = gv(
        el.current
      ).createElement(e), i[Oi] = t, i[ga] = n, _i(i, e, n), oi(i), t.stateNode = i) : t.memoizedState = lC(
        t.type,
        n.memoizedProps,
        t.pendingProps,
        n.memoizedState
      ), null;
    case 27:
      return G1(t), n === null && ke && (i = t.stateNode = QO(
        t.type,
        t.pendingProps,
        el.current
      ), Wi = t, tr = !0, a = Un, xl(t.type) ? (RM = a, Un = Hs(
        i.firstChild
      )) : Un = a), gi(
        n,
        t,
        t.pendingProps.children,
        e
      ), N0(n, t), n === null && (t.flags |= 4194304), t.child;
    case 5:
      return n === null && ke && ((a = i = Un) && (i = DH(
        i,
        t.type,
        t.pendingProps,
        tr
      ), i !== null ? (t.stateNode = i, Wi = t, Un = Hs(
        i.firstChild
      ), tr = !1, a = !0) : a = !1), a || Iu(t)), G1(t), a = t.type, s = t.pendingProps, r = n !== null ? n.memoizedProps : null, i = s.children, EM(a, s) ? i = null : r !== null && EM(a, r) && (t.flags |= 32), t.memoizedState !== null && (a = Qb(
        n,
        t,
        Z5,
        null,
        null,
        e
      ), Ep._currentValue = a), N0(n, t), gi(n, t, i, e), t.child;
    case 6:
      return n === null && ke && ((n = e = Un) && (e = UH(
        e,
        t.pendingProps,
        tr
      ), e !== null ? (t.stateNode = e, Wi = t, Un = null, n = !0) : n = !1), n || Iu(t)), null;
    case 13:
      return lO(n, t, e);
    case 4:
      return W0(
        t,
        t.stateNode.containerInfo
      ), i = t.pendingProps, n === null ? t.child = kf(
        t,
        null,
        i,
        e
      ) : gi(
        n,
        t,
        i,
        e
      ), t.child;
    case 11:
      return HR(
        n,
        t,
        t.type,
        t.pendingProps,
        e
      );
    case 7:
      return gi(
        n,
        t,
        t.pendingProps,
        e
      ), t.child;
    case 8:
      return gi(
        n,
        t,
        t.pendingProps.children,
        e
      ), t.child;
    case 12:
      return gi(
        n,
        t,
        t.pendingProps.children,
        e
      ), t.child;
    case 10:
      return i = t.pendingProps, Vo(t, t.type, i.value), gi(
        n,
        t,
        i.children,
        e
      ), t.child;
    case 9:
      return a = t.type._context, i = t.pendingProps.children, Hu(t), a = Ni(a), i = i(a), t.flags |= 1, gi(n, t, i, e), t.child;
    case 14:
      return FR(
        n,
        t,
        t.type,
        t.pendingProps,
        e
      );
    case 15:
      return rO(
        n,
        t,
        t.type,
        t.pendingProps,
        e
      );
    case 19:
      return uO(n, t, e);
    case 31:
      return i = t.pendingProps, e = t.mode, i = {
        mode: i.mode,
        children: i.children
      }, n === null ? (e = uv(
        i,
        e
      ), e.ref = t.ref, t.child = e, e.return = t, t = e) : (e = Qr(n.child, i), e.ref = t.ref, t.child = e, e.return = t, t = e), t;
    case 22:
      return oO(n, t, e);
    case 24:
      return Hu(t), i = Ni(Zn), n === null ? (a = kb(), a === null && (a = dn, s = Yb(), a.pooledCache = s, s.refCount++, s !== null && (a.pooledCacheLanes |= e), a = s), t.memoizedState = {
        parent: i,
        cache: a
      }, Wb(t), Vo(t, Zn, a)) : (n.lanes & e && (aM(n, t), kd(t, null, null, e), Yd()), a = n.memoizedState, s = t.memoizedState, a.parent !== i ? (a = { parent: i, cache: i }, t.memoizedState = a, t.lanes === 0 && (t.memoizedState = t.updateQueue.baseState = a), Vo(t, Zn, i)) : (i = s.cache, Vo(t, Zn, i), i !== a.cache && eM(
        t,
        [Zn],
        e,
        !0
      ))), gi(
        n,
        t,
        t.pendingProps.children,
        e
      ), t.child;
    case 29:
      throw t.pendingProps;
  }
  throw Error(vt(156, t.tag));
}
function Dr(n) {
  n.flags |= 4;
}
function kR(n, t) {
  if (t.type !== "stylesheet" || t.state.loading & 4)
    n.flags &= -16777217;
  else if (n.flags |= 16777216, !$O(t)) {
    if (t = ys.current, t !== null && ((Be & 4194048) === Be ? lr !== null : (Be & 62914560) !== Be && !(Be & 536870912) || t !== lr))
      throw Xd = iM, mU;
    n.flags |= 8192;
  }
}
function bg(n, t) {
  t !== null && (n.flags |= 4), n.flags & 16384 && (t = n.tag !== 22 ? BD() : 536870912, n.lanes |= t, Wf |= t);
}
function od(n, t) {
  if (!ke)
    switch (n.tailMode) {
      case "hidden":
        t = n.tail;
        for (var e = null; t !== null; )
          t.alternate !== null && (e = t), t = t.sibling;
        e === null ? n.tail = null : e.sibling = null;
        break;
      case "collapsed":
        e = n.tail;
        for (var i = null; e !== null; )
          e.alternate !== null && (i = e), e = e.sibling;
        i === null ? t || n.tail === null ? n.tail = null : n.tail.sibling = null : i.sibling = null;
    }
}
function bn(n) {
  var t = n.alternate !== null && n.alternate.child === n.child, e = 0, i = 0;
  if (t)
    for (var a = n.child; a !== null; )
      e |= a.lanes | a.childLanes, i |= a.subtreeFlags & 65011712, i |= a.flags & 65011712, a.return = n, a = a.sibling;
  else
    for (a = n.child; a !== null; )
      e |= a.lanes | a.childLanes, i |= a.subtreeFlags, i |= a.flags, a.return = n, a = a.sibling;
  return n.subtreeFlags |= i, n.childLanes = e, t;
}
function iH(n, t, e) {
  var i = t.pendingProps;
  switch (qb(t), t.tag) {
    case 31:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return bn(t), null;
    case 1:
      return bn(t), null;
    case 3:
      return e = t.stateNode, i = null, n !== null && (i = n.memoizedState.cache), t.memoizedState.cache !== i && (t.flags |= 2048), Kr(Zn), Ff(), e.pendingContext && (e.context = e.pendingContext, e.pendingContext = null), (n === null || n.child === null) && (sd(t) ? Dr(t) : n === null || n.memoizedState.isDehydrated && !(t.flags & 256) || (t.flags |= 1024, MR())), bn(t), null;
    case 26:
      return e = t.memoizedState, n === null ? (Dr(t), e !== null ? (bn(t), kR(t, e)) : (bn(t), t.flags &= -16777217)) : e ? e !== n.memoizedState ? (Dr(t), bn(t), kR(t, e)) : (bn(t), t.flags &= -16777217) : (n.memoizedProps !== i && Dr(t), bn(t), t.flags &= -16777217), null;
    case 27:
      Z0(t), e = el.current;
      var a = t.type;
      if (n !== null && t.stateNode != null)
        n.memoizedProps !== i && Dr(t);
      else {
        if (!i) {
          if (t.stateNode === null)
            throw Error(vt(166));
          return bn(t), null;
        }
        n = rr.current, sd(t) ? xR(t) : (n = QO(a, i, e), t.stateNode = n, Dr(t));
      }
      return bn(t), null;
    case 5:
      if (Z0(t), e = t.type, n !== null && t.stateNode != null)
        n.memoizedProps !== i && Dr(t);
      else {
        if (!i) {
          if (t.stateNode === null)
            throw Error(vt(166));
          return bn(t), null;
        }
        if (n = rr.current, sd(t))
          xR(t);
        else {
          switch (a = gv(
            el.current
          ), n) {
            case 1:
              n = a.createElementNS(
                "http://www.w3.org/2000/svg",
                e
              );
              break;
            case 2:
              n = a.createElementNS(
                "http://www.w3.org/1998/Math/MathML",
                e
              );
              break;
            default:
              switch (e) {
                case "svg":
                  n = a.createElementNS(
                    "http://www.w3.org/2000/svg",
                    e
                  );
                  break;
                case "math":
                  n = a.createElementNS(
                    "http://www.w3.org/1998/Math/MathML",
                    e
                  );
                  break;
                case "script":
                  n = a.createElement("div"), n.innerHTML = "<script><\/script>", n = n.removeChild(n.firstChild);
                  break;
                case "select":
                  n = typeof i.is == "string" ? a.createElement("select", { is: i.is }) : a.createElement("select"), i.multiple ? n.multiple = !0 : i.size && (n.size = i.size);
                  break;
                default:
                  n = typeof i.is == "string" ? a.createElement(e, { is: i.is }) : a.createElement(e);
              }
          }
          n[Oi] = t, n[ga] = i;
          t: for (a = t.child; a !== null; ) {
            if (a.tag === 5 || a.tag === 6)
              n.appendChild(a.stateNode);
            else if (a.tag !== 4 && a.tag !== 27 && a.child !== null) {
              a.child.return = a, a = a.child;
              continue;
            }
            if (a === t) break t;
            for (; a.sibling === null; ) {
              if (a.return === null || a.return === t)
                break t;
              a = a.return;
            }
            a.sibling.return = a.return, a = a.sibling;
          }
          t.stateNode = n;
          t: switch (_i(n, e, i), e) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              n = !!i.autoFocus;
              break t;
            case "img":
              n = !0;
              break t;
            default:
              n = !1;
          }
          n && Dr(t);
        }
      }
      return bn(t), t.flags &= -16777217, null;
    case 6:
      if (n && t.stateNode != null)
        n.memoizedProps !== i && Dr(t);
      else {
        if (typeof i != "string" && t.stateNode === null)
          throw Error(vt(166));
        if (n = el.current, sd(t)) {
          if (n = t.stateNode, e = t.memoizedProps, i = null, a = Wi, a !== null)
            switch (a.tag) {
              case 27:
              case 5:
                i = a.memoizedProps;
            }
          n[Oi] = t, n = !!(n.nodeValue === e || i !== null && i.suppressHydrationWarning === !0 || WO(n.nodeValue, e)), n || Iu(t);
        } else
          n = gv(n).createTextNode(
            i
          ), n[Oi] = t, t.stateNode = n;
      }
      return bn(t), null;
    case 13:
      if (i = t.memoizedState, n === null || n.memoizedState !== null && n.memoizedState.dehydrated !== null) {
        if (a = sd(t), i !== null && i.dehydrated !== null) {
          if (n === null) {
            if (!a) throw Error(vt(318));
            if (a = t.memoizedState, a = a !== null ? a.dehydrated : null, !a) throw Error(vt(317));
            a[Oi] = t;
          } else
            sm(), !(t.flags & 128) && (t.memoizedState = null), t.flags |= 4;
          bn(t), a = !1;
        } else
          a = MR(), n !== null && n.memoizedState !== null && (n.memoizedState.hydrationErrors = a), a = !0;
        if (!a)
          return t.flags & 256 ? (Zr(t), t) : (Zr(t), null);
      }
      if (Zr(t), t.flags & 128)
        return t.lanes = e, t;
      if (e = i !== null, n = n !== null && n.memoizedState !== null, e) {
        i = t.child, a = null, i.alternate !== null && i.alternate.memoizedState !== null && i.alternate.memoizedState.cachePool !== null && (a = i.alternate.memoizedState.cachePool.pool);
        var s = null;
        i.memoizedState !== null && i.memoizedState.cachePool !== null && (s = i.memoizedState.cachePool.pool), s !== a && (i.flags |= 2048);
      }
      return e !== n && e && (t.child.flags |= 8192), bg(t, t.updateQueue), bn(t), null;
    case 4:
      return Ff(), n === null && mE(t.stateNode.containerInfo), bn(t), null;
    case 10:
      return Kr(t.type), bn(t), null;
    case 19:
      if (ci(jn), a = t.memoizedState, a === null) return bn(t), null;
      if (i = (t.flags & 128) !== 0, s = a.rendering, s === null)
        if (i) od(a, !1);
        else {
          if (On !== 0 || n !== null && n.flags & 128)
            for (n = t.child; n !== null; ) {
              if (s = rv(n), s !== null) {
                for (t.flags |= 128, od(a, !1), n = s.updateQueue, t.updateQueue = n, bg(t, n), t.subtreeFlags = 0, n = e, e = t.child; e !== null; )
                  fU(e, n), e = e.sibling;
                return xn(
                  jn,
                  jn.current & 1 | 2
                ), t.child;
              }
              n = n.sibling;
            }
          a.tail !== null && or() > fv && (t.flags |= 128, i = !0, od(a, !1), t.lanes = 4194304);
        }
      else {
        if (!i)
          if (n = rv(s), n !== null) {
            if (t.flags |= 128, i = !0, n = n.updateQueue, t.updateQueue = n, bg(t, n), od(a, !0), a.tail === null && a.tailMode === "hidden" && !s.alternate && !ke)
              return bn(t), null;
          } else
            2 * or() - a.renderingStartTime > fv && e !== 536870912 && (t.flags |= 128, i = !0, od(a, !1), t.lanes = 4194304);
        a.isBackwards ? (s.sibling = t.child, t.child = s) : (n = a.last, n !== null ? n.sibling = s : t.child = s, a.last = s);
      }
      return a.tail !== null ? (t = a.tail, a.rendering = t, a.tail = t.sibling, a.renderingStartTime = or(), t.sibling = null, n = jn.current, xn(jn, i ? n & 1 | 2 : n & 1), t) : (bn(t), null);
    case 22:
    case 23:
      return Zr(t), Zb(), i = t.memoizedState !== null, n !== null ? n.memoizedState !== null !== i && (t.flags |= 8192) : i && (t.flags |= 8192), i ? e & 536870912 && !(t.flags & 128) && (bn(t), t.subtreeFlags & 6 && (t.flags |= 8192)) : bn(t), e = t.updateQueue, e !== null && bg(t, e.retryQueue), e = null, n !== null && n.memoizedState !== null && n.memoizedState.cachePool !== null && (e = n.memoizedState.cachePool.pool), i = null, t.memoizedState !== null && t.memoizedState.cachePool !== null && (i = t.memoizedState.cachePool.pool), i !== e && (t.flags |= 2048), n !== null && ci(Cu), null;
    case 24:
      return e = null, n !== null && (e = n.memoizedState.cache), t.memoizedState.cache !== e && (t.flags |= 2048), Kr(Zn), bn(t), null;
    case 25:
      return null;
    case 30:
      return null;
  }
  throw Error(vt(156, t.tag));
}
function aH(n, t) {
  switch (qb(t), t.tag) {
    case 1:
      return n = t.flags, n & 65536 ? (t.flags = n & -65537 | 128, t) : null;
    case 3:
      return Kr(Zn), Ff(), n = t.flags, n & 65536 && !(n & 128) ? (t.flags = n & -65537 | 128, t) : null;
    case 26:
    case 27:
    case 5:
      return Z0(t), null;
    case 13:
      if (Zr(t), n = t.memoizedState, n !== null && n.dehydrated !== null) {
        if (t.alternate === null)
          throw Error(vt(340));
        sm();
      }
      return n = t.flags, n & 65536 ? (t.flags = n & -65537 | 128, t) : null;
    case 19:
      return ci(jn), null;
    case 4:
      return Ff(), null;
    case 10:
      return Kr(t.type), null;
    case 22:
    case 23:
      return Zr(t), Zb(), n !== null && ci(Cu), n = t.flags, n & 65536 ? (t.flags = n & -65537 | 128, t) : null;
    case 24:
      return Kr(Zn), null;
    case 25:
      return null;
    default:
      return null;
  }
}
function fO(n, t) {
  switch (qb(t), t.tag) {
    case 3:
      Kr(Zn), Ff();
      break;
    case 26:
    case 27:
    case 5:
      Z0(t);
      break;
    case 4:
      Ff();
      break;
    case 13:
      Zr(t);
      break;
    case 19:
      ci(jn);
      break;
    case 10:
      Kr(t.type);
      break;
    case 22:
    case 23:
      Zr(t), Zb(), n !== null && ci(Cu);
      break;
    case 24:
      Kr(Zn);
  }
}
function fm(n, t) {
  try {
    var e = t.updateQueue, i = e !== null ? e.lastEffect : null;
    if (i !== null) {
      var a = i.next;
      e = a;
      do {
        if ((e.tag & n) === n) {
          i = void 0;
          var s = e.create, r = e.inst;
          i = s(), r.destroy = i;
        }
        e = e.next;
      } while (e !== a);
    }
  } catch (l) {
    on(t, t.return, l);
  }
}
function hl(n, t, e) {
  try {
    var i = t.updateQueue, a = i !== null ? i.lastEffect : null;
    if (a !== null) {
      var s = a.next;
      i = s;
      do {
        if ((i.tag & n) === n) {
          var r = i.inst, l = r.destroy;
          if (l !== void 0) {
            r.destroy = void 0, a = t;
            var c = e, f = l;
            try {
              f();
            } catch (d) {
              on(
                a,
                c,
                d
              );
            }
          }
        }
        i = i.next;
      } while (i !== s);
    }
  } catch (d) {
    on(t, t.return, d);
  }
}
function hO(n) {
  var t = n.updateQueue;
  if (t !== null) {
    var e = n.stateNode;
    try {
      _U(t, e);
    } catch (i) {
      on(n, n.return, i);
    }
  }
}
function dO(n, t, e) {
  e.props = Vu(
    n.type,
    n.memoizedProps
  ), e.state = n.memoizedState;
  try {
    e.componentWillUnmount();
  } catch (i) {
    on(n, t, i);
  }
}
function Zd(n, t) {
  try {
    var e = n.ref;
    if (e !== null) {
      switch (n.tag) {
        case 26:
        case 27:
        case 5:
          var i = n.stateNode;
          break;
        case 30:
          i = n.stateNode;
          break;
        default:
          i = n.stateNode;
      }
      typeof e == "function" ? n.refCleanup = e(i) : e.current = i;
    }
  } catch (a) {
    on(n, t, a);
  }
}
function nr(n, t) {
  var e = n.ref, i = n.refCleanup;
  if (e !== null)
    if (typeof i == "function")
      try {
        i();
      } catch (a) {
        on(n, t, a);
      } finally {
        n.refCleanup = null, n = n.alternate, n != null && (n.refCleanup = null);
      }
    else if (typeof e == "function")
      try {
        e(null);
      } catch (a) {
        on(n, t, a);
      }
    else e.current = null;
}
function pO(n) {
  var t = n.type, e = n.memoizedProps, i = n.stateNode;
  try {
    t: switch (t) {
      case "button":
      case "input":
      case "select":
      case "textarea":
        e.autoFocus && i.focus();
        break t;
      case "img":
        e.src ? i.src = e.src : e.srcSet && (i.srcset = e.srcSet);
    }
  } catch (a) {
    on(n, n.return, a);
  }
}
function vS(n, t, e) {
  try {
    var i = n.stateNode;
    TH(i, n.type, e, t), i[ga] = t;
  } catch (a) {
    on(n, n.return, a);
  }
}
function mO(n) {
  return n.tag === 5 || n.tag === 3 || n.tag === 26 || n.tag === 27 && xl(n.type) || n.tag === 4;
}
function _S(n) {
  t: for (; ; ) {
    for (; n.sibling === null; ) {
      if (n.return === null || mO(n.return)) return null;
      n = n.return;
    }
    for (n.sibling.return = n.return, n = n.sibling; n.tag !== 5 && n.tag !== 6 && n.tag !== 18; ) {
      if (n.tag === 27 && xl(n.type) || n.flags & 2 || n.child === null || n.tag === 4) continue t;
      n.child.return = n, n = n.child;
    }
    if (!(n.flags & 2)) return n.stateNode;
  }
}
function pM(n, t, e) {
  var i = n.tag;
  if (i === 5 || i === 6)
    n = n.stateNode, t ? (e.nodeType === 9 ? e.body : e.nodeName === "HTML" ? e.ownerDocument.body : e).insertBefore(n, t) : (t = e.nodeType === 9 ? e.body : e.nodeName === "HTML" ? e.ownerDocument.body : e, t.appendChild(n), e = e._reactRootContainer, e != null || t.onclick !== null || (t.onclick = P_));
  else if (i !== 4 && (i === 27 && xl(n.type) && (e = n.stateNode, t = null), n = n.child, n !== null))
    for (pM(n, t, e), n = n.sibling; n !== null; )
      pM(n, t, e), n = n.sibling;
}
function cv(n, t, e) {
  var i = n.tag;
  if (i === 5 || i === 6)
    n = n.stateNode, t ? e.insertBefore(n, t) : e.appendChild(n);
  else if (i !== 4 && (i === 27 && xl(n.type) && (e = n.stateNode), n = n.child, n !== null))
    for (cv(n, t, e), n = n.sibling; n !== null; )
      cv(n, t, e), n = n.sibling;
}
function gO(n) {
  var t = n.stateNode, e = n.memoizedProps;
  try {
    for (var i = n.type, a = t.attributes; a.length; )
      t.removeAttributeNode(a[0]);
    _i(t, i, e), t[Oi] = n, t[ga] = e;
  } catch (s) {
    on(n, n.return, s);
  }
}
var Vr = !1, Bn = !1, yS = !1, WR = typeof WeakSet == "function" ? WeakSet : Set, ri = null;
function sH(n, t) {
  if (n = n.containerInfo, MM = xv, n = iU(n), Hb(n)) {
    if ("selectionStart" in n)
      var e = {
        start: n.selectionStart,
        end: n.selectionEnd
      };
    else
      t: {
        e = (e = n.ownerDocument) && e.defaultView || window;
        var i = e.getSelection && e.getSelection();
        if (i && i.rangeCount !== 0) {
          e = i.anchorNode;
          var a = i.anchorOffset, s = i.focusNode;
          i = i.focusOffset;
          try {
            e.nodeType, s.nodeType;
          } catch {
            e = null;
            break t;
          }
          var r = 0, l = -1, c = -1, f = 0, d = 0, p = n, m = null;
          e: for (; ; ) {
            for (var g; p !== e || a !== 0 && p.nodeType !== 3 || (l = r + a), p !== s || i !== 0 && p.nodeType !== 3 || (c = r + i), p.nodeType === 3 && (r += p.nodeValue.length), (g = p.firstChild) !== null; )
              m = p, p = g;
            for (; ; ) {
              if (p === n) break e;
              if (m === e && ++f === a && (l = r), m === s && ++d === i && (c = r), (g = p.nextSibling) !== null) break;
              p = m, m = p.parentNode;
            }
            p = g;
          }
          e = l === -1 || c === -1 ? null : { start: l, end: c };
        } else e = null;
      }
    e = e || { start: 0, end: 0 };
  } else e = null;
  for (bM = { focusedElem: n, selectionRange: e }, xv = !1, ri = t; ri !== null; )
    if (t = ri, n = t.child, (t.subtreeFlags & 1024) !== 0 && n !== null)
      n.return = t, ri = n;
    else
      for (; ri !== null; ) {
        switch (t = ri, s = t.alternate, n = t.flags, t.tag) {
          case 0:
            break;
          case 11:
          case 15:
            break;
          case 1:
            if (n & 1024 && s !== null) {
              n = void 0, e = t, a = s.memoizedProps, s = s.memoizedState, i = e.stateNode;
              try {
                var y = Vu(
                  e.type,
                  a,
                  e.elementType === e.type
                );
                n = i.getSnapshotBeforeUpdate(
                  y,
                  s
                ), i.__reactInternalSnapshotBeforeUpdate = n;
              } catch (x) {
                on(
                  e,
                  e.return,
                  x
                );
              }
            }
            break;
          case 3:
            if (n & 1024) {
              if (n = t.stateNode.containerInfo, e = n.nodeType, e === 9)
                TM(n);
              else if (e === 1)
                switch (n.nodeName) {
                  case "HEAD":
                  case "HTML":
                  case "BODY":
                    TM(n);
                    break;
                  default:
                    n.textContent = "";
                }
            }
            break;
          case 5:
          case 26:
          case 27:
          case 6:
          case 4:
          case 17:
            break;
          default:
            if (n & 1024) throw Error(vt(163));
        }
        if (n = t.sibling, n !== null) {
          n.return = t.return, ri = n;
          break;
        }
        ri = t.return;
      }
}
function vO(n, t, e) {
  var i = e.flags;
  switch (e.tag) {
    case 0:
    case 11:
    case 15:
      wo(n, e), i & 4 && fm(5, e);
      break;
    case 1:
      if (wo(n, e), i & 4)
        if (n = e.stateNode, t === null)
          try {
            n.componentDidMount();
          } catch (r) {
            on(e, e.return, r);
          }
        else {
          var a = Vu(
            e.type,
            t.memoizedProps
          );
          t = t.memoizedState;
          try {
            n.componentDidUpdate(
              a,
              t,
              n.__reactInternalSnapshotBeforeUpdate
            );
          } catch (r) {
            on(
              e,
              e.return,
              r
            );
          }
        }
      i & 64 && hO(e), i & 512 && Zd(e, e.return);
      break;
    case 3:
      if (wo(n, e), i & 64 && (n = e.updateQueue, n !== null)) {
        if (t = null, e.child !== null)
          switch (e.child.tag) {
            case 27:
            case 5:
              t = e.child.stateNode;
              break;
            case 1:
              t = e.child.stateNode;
          }
        try {
          _U(n, t);
        } catch (r) {
          on(e, e.return, r);
        }
      }
      break;
    case 27:
      t === null && i & 4 && gO(e);
    case 26:
    case 5:
      wo(n, e), t === null && i & 4 && pO(e), i & 512 && Zd(e, e.return);
      break;
    case 12:
      wo(n, e);
      break;
    case 13:
      wo(n, e), i & 4 && xO(n, e), i & 64 && (n = e.memoizedState, n !== null && (n = n.dehydrated, n !== null && (e = pH.bind(
        null,
        e
      ), OH(n, e))));
      break;
    case 22:
      if (i = e.memoizedState !== null || Vr, !i) {
        t = t !== null && t.memoizedState !== null || Bn, a = Vr;
        var s = Bn;
        Vr = i, (Bn = t) && !s ? Po(
          n,
          e,
          (e.subtreeFlags & 8772) !== 0
        ) : wo(n, e), Vr = a, Bn = s;
      }
      break;
    case 30:
      break;
    default:
      wo(n, e);
  }
}
function _O(n) {
  var t = n.alternate;
  t !== null && (n.alternate = null, _O(t)), n.child = null, n.deletions = null, n.sibling = null, n.tag === 5 && (t = n.stateNode, t !== null && Nb(t)), n.stateNode = null, n.return = null, n.dependencies = null, n.memoizedProps = null, n.memoizedState = null, n.pendingProps = null, n.stateNode = null, n.updateQueue = null;
}
var gn = null, la = !1;
function Ur(n, t, e) {
  for (e = e.child; e !== null; )
    yO(n, t, e), e = e.sibling;
}
function yO(n, t, e) {
  if (Fa && typeof Fa.onCommitFiberUnmount == "function")
    try {
      Fa.onCommitFiberUnmount(tm, e);
    } catch {
    }
  switch (e.tag) {
    case 26:
      Bn || nr(e, t), Ur(
        n,
        t,
        e
      ), e.memoizedState ? e.memoizedState.count-- : e.stateNode && (e = e.stateNode, e.parentNode.removeChild(e));
      break;
    case 27:
      Bn || nr(e, t);
      var i = gn, a = la;
      xl(e.type) && (gn = e.stateNode, la = !1), Ur(
        n,
        t,
        e
      ), Jd(e.stateNode), gn = i, la = a;
      break;
    case 5:
      Bn || nr(e, t);
    case 6:
      if (i = gn, a = la, gn = null, Ur(
        n,
        t,
        e
      ), gn = i, la = a, gn !== null)
        if (la)
          try {
            (gn.nodeType === 9 ? gn.body : gn.nodeName === "HTML" ? gn.ownerDocument.body : gn).removeChild(e.stateNode);
          } catch (s) {
            on(
              e,
              t,
              s
            );
          }
        else
          try {
            gn.removeChild(e.stateNode);
          } catch (s) {
            on(
              e,
              t,
              s
            );
          }
      break;
    case 18:
      gn !== null && (la ? (n = gn, sC(
        n.nodeType === 9 ? n.body : n.nodeName === "HTML" ? n.ownerDocument.body : n,
        e.stateNode
      ), Rp(n)) : sC(gn, e.stateNode));
      break;
    case 4:
      i = gn, a = la, gn = e.stateNode.containerInfo, la = !0, Ur(
        n,
        t,
        e
      ), gn = i, la = a;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      Bn || hl(2, e, t), Bn || hl(4, e, t), Ur(
        n,
        t,
        e
      );
      break;
    case 1:
      Bn || (nr(e, t), i = e.stateNode, typeof i.componentWillUnmount == "function" && dO(
        e,
        t,
        i
      )), Ur(
        n,
        t,
        e
      );
      break;
    case 21:
      Ur(
        n,
        t,
        e
      );
      break;
    case 22:
      Bn = (i = Bn) || e.memoizedState !== null, Ur(
        n,
        t,
        e
      ), Bn = i;
      break;
    default:
      Ur(
        n,
        t,
        e
      );
  }
}
function xO(n, t) {
  if (t.memoizedState === null && (n = t.alternate, n !== null && (n = n.memoizedState, n !== null && (n = n.dehydrated, n !== null))))
    try {
      Rp(n);
    } catch (e) {
      on(t, t.return, e);
    }
}
function rH(n) {
  switch (n.tag) {
    case 13:
    case 19:
      var t = n.stateNode;
      return t === null && (t = n.stateNode = new WR()), t;
    case 22:
      return n = n.stateNode, t = n._retryCache, t === null && (t = n._retryCache = new WR()), t;
    default:
      throw Error(vt(435, n.tag));
  }
}
function xS(n, t) {
  var e = rH(n);
  t.forEach(function(i) {
    var a = mH.bind(null, n, i);
    e.has(i) || (e.add(i), i.then(a, a));
  });
}
function Ua(n, t) {
  var e = t.deletions;
  if (e !== null)
    for (var i = 0; i < e.length; i++) {
      var a = e[i], s = n, r = t, l = r;
      t: for (; l !== null; ) {
        switch (l.tag) {
          case 27:
            if (xl(l.type)) {
              gn = l.stateNode, la = !1;
              break t;
            }
            break;
          case 5:
            gn = l.stateNode, la = !1;
            break t;
          case 3:
          case 4:
            gn = l.stateNode.containerInfo, la = !0;
            break t;
        }
        l = l.return;
      }
      if (gn === null) throw Error(vt(160));
      yO(s, r, a), gn = null, la = !1, s = a.alternate, s !== null && (s.return = null), a.return = null;
    }
  if (t.subtreeFlags & 13878)
    for (t = t.child; t !== null; )
      SO(t, n), t = t.sibling;
}
var zs = null;
function SO(n, t) {
  var e = n.alternate, i = n.flags;
  switch (n.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      Ua(t, n), Oa(n), i & 4 && (hl(3, n, n.return), fm(3, n), hl(5, n, n.return));
      break;
    case 1:
      Ua(t, n), Oa(n), i & 512 && (Bn || e === null || nr(e, e.return)), i & 64 && Vr && (n = n.updateQueue, n !== null && (i = n.callbacks, i !== null && (e = n.shared.hiddenCallbacks, n.shared.hiddenCallbacks = e === null ? i : e.concat(i))));
      break;
    case 26:
      var a = zs;
      if (Ua(t, n), Oa(n), i & 512 && (Bn || e === null || nr(e, e.return)), i & 4) {
        var s = e !== null ? e.memoizedState : null;
        if (i = n.memoizedState, e === null)
          if (i === null)
            if (n.stateNode === null) {
              t: {
                i = n.type, e = n.memoizedProps, a = a.ownerDocument || a;
                e: switch (i) {
                  case "title":
                    s = a.getElementsByTagName("title")[0], (!s || s[im] || s[Oi] || s.namespaceURI === "http://www.w3.org/2000/svg" || s.hasAttribute("itemprop")) && (s = a.createElement(i), a.head.insertBefore(
                      s,
                      a.querySelector("head > title")
                    )), _i(s, i, e), s[Oi] = n, oi(s), i = s;
                    break t;
                  case "link":
                    var r = cC(
                      "link",
                      "href",
                      a
                    ).get(i + (e.href || ""));
                    if (r) {
                      for (var l = 0; l < r.length; l++)
                        if (s = r[l], s.getAttribute("href") === (e.href == null || e.href === "" ? null : e.href) && s.getAttribute("rel") === (e.rel == null ? null : e.rel) && s.getAttribute("title") === (e.title == null ? null : e.title) && s.getAttribute("crossorigin") === (e.crossOrigin == null ? null : e.crossOrigin)) {
                          r.splice(l, 1);
                          break e;
                        }
                    }
                    s = a.createElement(i), _i(s, i, e), a.head.appendChild(s);
                    break;
                  case "meta":
                    if (r = cC(
                      "meta",
                      "content",
                      a
                    ).get(i + (e.content || ""))) {
                      for (l = 0; l < r.length; l++)
                        if (s = r[l], s.getAttribute("content") === (e.content == null ? null : "" + e.content) && s.getAttribute("name") === (e.name == null ? null : e.name) && s.getAttribute("property") === (e.property == null ? null : e.property) && s.getAttribute("http-equiv") === (e.httpEquiv == null ? null : e.httpEquiv) && s.getAttribute("charset") === (e.charSet == null ? null : e.charSet)) {
                          r.splice(l, 1);
                          break e;
                        }
                    }
                    s = a.createElement(i), _i(s, i, e), a.head.appendChild(s);
                    break;
                  default:
                    throw Error(vt(468, i));
                }
                s[Oi] = n, oi(s), i = s;
              }
              n.stateNode = i;
            } else
              fC(
                a,
                n.type,
                n.stateNode
              );
          else
            n.stateNode = uC(
              a,
              i,
              n.memoizedProps
            );
        else
          s !== i ? (s === null ? e.stateNode !== null && (e = e.stateNode, e.parentNode.removeChild(e)) : s.count--, i === null ? fC(
            a,
            n.type,
            n.stateNode
          ) : uC(
            a,
            i,
            n.memoizedProps
          )) : i === null && n.stateNode !== null && vS(
            n,
            n.memoizedProps,
            e.memoizedProps
          );
      }
      break;
    case 27:
      Ua(t, n), Oa(n), i & 512 && (Bn || e === null || nr(e, e.return)), e !== null && i & 4 && vS(
        n,
        n.memoizedProps,
        e.memoizedProps
      );
      break;
    case 5:
      if (Ua(t, n), Oa(n), i & 512 && (Bn || e === null || nr(e, e.return)), n.flags & 32) {
        a = n.stateNode;
        try {
          Gf(a, "");
        } catch (g) {
          on(n, n.return, g);
        }
      }
      i & 4 && n.stateNode != null && (a = n.memoizedProps, vS(
        n,
        a,
        e !== null ? e.memoizedProps : a
      )), i & 1024 && (yS = !0);
      break;
    case 6:
      if (Ua(t, n), Oa(n), i & 4) {
        if (n.stateNode === null)
          throw Error(vt(162));
        i = n.memoizedProps, e = n.stateNode;
        try {
          e.nodeValue = i;
        } catch (g) {
          on(n, n.return, g);
        }
      }
      break;
    case 3:
      if (B0 = null, a = zs, zs = vv(t.containerInfo), Ua(t, n), zs = a, Oa(n), i & 4 && e !== null && e.memoizedState.isDehydrated)
        try {
          Rp(t.containerInfo);
        } catch (g) {
          on(n, n.return, g);
        }
      yS && (yS = !1, MO(n));
      break;
    case 4:
      i = zs, zs = vv(
        n.stateNode.containerInfo
      ), Ua(t, n), Oa(n), zs = i;
      break;
    case 12:
      Ua(t, n), Oa(n);
      break;
    case 13:
      Ua(t, n), Oa(n), n.child.flags & 8192 && n.memoizedState !== null != (e !== null && e.memoizedState !== null) && (hE = or()), i & 4 && (i = n.updateQueue, i !== null && (n.updateQueue = null, xS(n, i)));
      break;
    case 22:
      a = n.memoizedState !== null;
      var c = e !== null && e.memoizedState !== null, f = Vr, d = Bn;
      if (Vr = f || a, Bn = d || c, Ua(t, n), Bn = d, Vr = f, Oa(n), i & 8192)
        t: for (t = n.stateNode, t._visibility = a ? t._visibility & -2 : t._visibility | 1, a && (e === null || c || Vr || Bn || hu(n)), e = null, t = n; ; ) {
          if (t.tag === 5 || t.tag === 26) {
            if (e === null) {
              c = e = t;
              try {
                if (s = c.stateNode, a)
                  r = s.style, typeof r.setProperty == "function" ? r.setProperty("display", "none", "important") : r.display = "none";
                else {
                  l = c.stateNode;
                  var p = c.memoizedProps.style, m = p != null && p.hasOwnProperty("display") ? p.display : null;
                  l.style.display = m == null || typeof m == "boolean" ? "" : ("" + m).trim();
                }
              } catch (g) {
                on(c, c.return, g);
              }
            }
          } else if (t.tag === 6) {
            if (e === null) {
              c = t;
              try {
                c.stateNode.nodeValue = a ? "" : c.memoizedProps;
              } catch (g) {
                on(c, c.return, g);
              }
            }
          } else if ((t.tag !== 22 && t.tag !== 23 || t.memoizedState === null || t === n) && t.child !== null) {
            t.child.return = t, t = t.child;
            continue;
          }
          if (t === n) break t;
          for (; t.sibling === null; ) {
            if (t.return === null || t.return === n) break t;
            e === t && (e = null), t = t.return;
          }
          e === t && (e = null), t.sibling.return = t.return, t = t.sibling;
        }
      i & 4 && (i = n.updateQueue, i !== null && (e = i.retryQueue, e !== null && (i.retryQueue = null, xS(n, e))));
      break;
    case 19:
      Ua(t, n), Oa(n), i & 4 && (i = n.updateQueue, i !== null && (n.updateQueue = null, xS(n, i)));
      break;
    case 30:
      break;
    case 21:
      break;
    default:
      Ua(t, n), Oa(n);
  }
}
function Oa(n) {
  var t = n.flags;
  if (t & 2) {
    try {
      for (var e, i = n.return; i !== null; ) {
        if (mO(i)) {
          e = i;
          break;
        }
        i = i.return;
      }
      if (e == null) throw Error(vt(160));
      switch (e.tag) {
        case 27:
          var a = e.stateNode, s = _S(n);
          cv(n, s, a);
          break;
        case 5:
          var r = e.stateNode;
          e.flags & 32 && (Gf(r, ""), e.flags &= -33);
          var l = _S(n);
          cv(n, l, r);
          break;
        case 3:
        case 4:
          var c = e.stateNode.containerInfo, f = _S(n);
          pM(
            n,
            f,
            c
          );
          break;
        default:
          throw Error(vt(161));
      }
    } catch (d) {
      on(n, n.return, d);
    }
    n.flags &= -3;
  }
  t & 4096 && (n.flags &= -4097);
}
function MO(n) {
  if (n.subtreeFlags & 1024)
    for (n = n.child; n !== null; ) {
      var t = n;
      MO(t), t.tag === 5 && t.flags & 1024 && t.stateNode.reset(), n = n.sibling;
    }
}
function wo(n, t) {
  if (t.subtreeFlags & 8772)
    for (t = t.child; t !== null; )
      vO(n, t.alternate, t), t = t.sibling;
}
function hu(n) {
  for (n = n.child; n !== null; ) {
    var t = n;
    switch (t.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        hl(4, t, t.return), hu(t);
        break;
      case 1:
        nr(t, t.return);
        var e = t.stateNode;
        typeof e.componentWillUnmount == "function" && dO(
          t,
          t.return,
          e
        ), hu(t);
        break;
      case 27:
        Jd(t.stateNode);
      case 26:
      case 5:
        nr(t, t.return), hu(t);
        break;
      case 22:
        t.memoizedState === null && hu(t);
        break;
      case 30:
        hu(t);
        break;
      default:
        hu(t);
    }
    n = n.sibling;
  }
}
function Po(n, t, e) {
  for (e = e && (t.subtreeFlags & 8772) !== 0, t = t.child; t !== null; ) {
    var i = t.alternate, a = n, s = t, r = s.flags;
    switch (s.tag) {
      case 0:
      case 11:
      case 15:
        Po(
          a,
          s,
          e
        ), fm(4, s);
        break;
      case 1:
        if (Po(
          a,
          s,
          e
        ), i = s, a = i.stateNode, typeof a.componentDidMount == "function")
          try {
            a.componentDidMount();
          } catch (f) {
            on(i, i.return, f);
          }
        if (i = s, a = i.updateQueue, a !== null) {
          var l = i.stateNode;
          try {
            var c = a.shared.hiddenCallbacks;
            if (c !== null)
              for (a.shared.hiddenCallbacks = null, a = 0; a < c.length; a++)
                vU(c[a], l);
          } catch (f) {
            on(i, i.return, f);
          }
        }
        e && r & 64 && hO(s), Zd(s, s.return);
        break;
      case 27:
        gO(s);
      case 26:
      case 5:
        Po(
          a,
          s,
          e
        ), e && i === null && r & 4 && pO(s), Zd(s, s.return);
        break;
      case 12:
        Po(
          a,
          s,
          e
        );
        break;
      case 13:
        Po(
          a,
          s,
          e
        ), e && r & 4 && xO(a, s);
        break;
      case 22:
        s.memoizedState === null && Po(
          a,
          s,
          e
        ), Zd(s, s.return);
        break;
      case 30:
        break;
      default:
        Po(
          a,
          s,
          e
        );
    }
    t = t.sibling;
  }
}
function lE(n, t) {
  var e = null;
  n !== null && n.memoizedState !== null && n.memoizedState.cachePool !== null && (e = n.memoizedState.cachePool.pool), n = null, t.memoizedState !== null && t.memoizedState.cachePool !== null && (n = t.memoizedState.cachePool.pool), n !== e && (n != null && n.refCount++, e != null && om(e));
}
function uE(n, t) {
  n = null, t.alternate !== null && (n = t.alternate.memoizedState.cache), t = t.memoizedState.cache, t !== n && (t.refCount++, n != null && om(n));
}
function Qs(n, t, e, i) {
  if (t.subtreeFlags & 10256)
    for (t = t.child; t !== null; )
      bO(
        n,
        t,
        e,
        i
      ), t = t.sibling;
}
function bO(n, t, e, i) {
  var a = t.flags;
  switch (t.tag) {
    case 0:
    case 11:
    case 15:
      Qs(
        n,
        t,
        e,
        i
      ), a & 2048 && fm(9, t);
      break;
    case 1:
      Qs(
        n,
        t,
        e,
        i
      );
      break;
    case 3:
      Qs(
        n,
        t,
        e,
        i
      ), a & 2048 && (n = null, t.alternate !== null && (n = t.alternate.memoizedState.cache), t = t.memoizedState.cache, t !== n && (t.refCount++, n != null && om(n)));
      break;
    case 12:
      if (a & 2048) {
        Qs(
          n,
          t,
          e,
          i
        ), n = t.stateNode;
        try {
          var s = t.memoizedProps, r = s.id, l = s.onPostCommit;
          typeof l == "function" && l(
            r,
            t.alternate === null ? "mount" : "update",
            n.passiveEffectDuration,
            -0
          );
        } catch (c) {
          on(t, t.return, c);
        }
      } else
        Qs(
          n,
          t,
          e,
          i
        );
      break;
    case 13:
      Qs(
        n,
        t,
        e,
        i
      );
      break;
    case 23:
      break;
    case 22:
      s = t.stateNode, r = t.alternate, t.memoizedState !== null ? s._visibility & 2 ? Qs(
        n,
        t,
        e,
        i
      ) : jd(n, t) : s._visibility & 2 ? Qs(
        n,
        t,
        e,
        i
      ) : (s._visibility |= 2, rf(
        n,
        t,
        e,
        i,
        (t.subtreeFlags & 10256) !== 0
      )), a & 2048 && lE(r, t);
      break;
    case 24:
      Qs(
        n,
        t,
        e,
        i
      ), a & 2048 && uE(t.alternate, t);
      break;
    default:
      Qs(
        n,
        t,
        e,
        i
      );
  }
}
function rf(n, t, e, i, a) {
  for (a = a && (t.subtreeFlags & 10256) !== 0, t = t.child; t !== null; ) {
    var s = n, r = t, l = e, c = i, f = r.flags;
    switch (r.tag) {
      case 0:
      case 11:
      case 15:
        rf(
          s,
          r,
          l,
          c,
          a
        ), fm(8, r);
        break;
      case 23:
        break;
      case 22:
        var d = r.stateNode;
        r.memoizedState !== null ? d._visibility & 2 ? rf(
          s,
          r,
          l,
          c,
          a
        ) : jd(
          s,
          r
        ) : (d._visibility |= 2, rf(
          s,
          r,
          l,
          c,
          a
        )), a && f & 2048 && lE(
          r.alternate,
          r
        );
        break;
      case 24:
        rf(
          s,
          r,
          l,
          c,
          a
        ), a && f & 2048 && uE(r.alternate, r);
        break;
      default:
        rf(
          s,
          r,
          l,
          c,
          a
        );
    }
    t = t.sibling;
  }
}
function jd(n, t) {
  if (t.subtreeFlags & 10256)
    for (t = t.child; t !== null; ) {
      var e = n, i = t, a = i.flags;
      switch (i.tag) {
        case 22:
          jd(e, i), a & 2048 && lE(
            i.alternate,
            i
          );
          break;
        case 24:
          jd(e, i), a & 2048 && uE(i.alternate, i);
          break;
        default:
          jd(e, i);
      }
      t = t.sibling;
    }
}
var Od = 8192;
function Dc(n) {
  if (n.subtreeFlags & Od)
    for (n = n.child; n !== null; )
      EO(n), n = n.sibling;
}
function EO(n) {
  switch (n.tag) {
    case 26:
      Dc(n), n.flags & Od && n.memoizedState !== null && YH(
        zs,
        n.memoizedState,
        n.memoizedProps
      );
      break;
    case 5:
      Dc(n);
      break;
    case 3:
    case 4:
      var t = zs;
      zs = vv(n.stateNode.containerInfo), Dc(n), zs = t;
      break;
    case 22:
      n.memoizedState === null && (t = n.alternate, t !== null && t.memoizedState !== null ? (t = Od, Od = 16777216, Dc(n), Od = t) : Dc(n));
      break;
    default:
      Dc(n);
  }
}
function TO(n) {
  var t = n.alternate;
  if (t !== null && (n = t.child, n !== null)) {
    t.child = null;
    do
      t = n.sibling, n.sibling = null, n = t;
    while (n !== null);
  }
}
function ld(n) {
  var t = n.deletions;
  if (n.flags & 16) {
    if (t !== null)
      for (var e = 0; e < t.length; e++) {
        var i = t[e];
        ri = i, RO(
          i,
          n
        );
      }
    TO(n);
  }
  if (n.subtreeFlags & 10256)
    for (n = n.child; n !== null; )
      AO(n), n = n.sibling;
}
function AO(n) {
  switch (n.tag) {
    case 0:
    case 11:
    case 15:
      ld(n), n.flags & 2048 && hl(9, n, n.return);
      break;
    case 3:
      ld(n);
      break;
    case 12:
      ld(n);
      break;
    case 22:
      var t = n.stateNode;
      n.memoizedState !== null && t._visibility & 2 && (n.return === null || n.return.tag !== 13) ? (t._visibility &= -3, L0(n)) : ld(n);
      break;
    default:
      ld(n);
  }
}
function L0(n) {
  var t = n.deletions;
  if (n.flags & 16) {
    if (t !== null)
      for (var e = 0; e < t.length; e++) {
        var i = t[e];
        ri = i, RO(
          i,
          n
        );
      }
    TO(n);
  }
  for (n = n.child; n !== null; ) {
    switch (t = n, t.tag) {
      case 0:
      case 11:
      case 15:
        hl(8, t, t.return), L0(t);
        break;
      case 22:
        e = t.stateNode, e._visibility & 2 && (e._visibility &= -3, L0(t));
        break;
      default:
        L0(t);
    }
    n = n.sibling;
  }
}
function RO(n, t) {
  for (; ri !== null; ) {
    var e = ri;
    switch (e.tag) {
      case 0:
      case 11:
      case 15:
        hl(8, e, t);
        break;
      case 23:
      case 22:
        if (e.memoizedState !== null && e.memoizedState.cachePool !== null) {
          var i = e.memoizedState.cachePool.pool;
          i != null && i.refCount++;
        }
        break;
      case 24:
        om(e.memoizedState.cache);
    }
    if (i = e.child, i !== null) i.return = e, ri = i;
    else
      t: for (e = n; ri !== null; ) {
        i = ri;
        var a = i.sibling, s = i.return;
        if (_O(i), i === e) {
          ri = null;
          break t;
        }
        if (a !== null) {
          a.return = s, ri = a;
          break t;
        }
        ri = s;
      }
  }
}
var oH = {
  getCacheForType: function(n) {
    var t = Ni(Zn), e = t.data.get(n);
    return e === void 0 && (e = n(), t.data.set(n, e)), e;
  }
}, lH = typeof WeakMap == "function" ? WeakMap : Map, Ke = 0, dn = null, we = null, Be = 0, Qe = 0, za = null, jo = !1, _h = !1, cE = !1, io = 0, On = 0, dl = 0, wu = 0, fE = 0, ps = 0, Wf = 0, Qd = null, ua = null, mM = !1, hE = 0, fv = 1 / 0, hv = null, al = null, vi = 0, sl = null, Zf = null, Nf = 0, gM = 0, vM = null, CO = null, Kd = 0, _M = null;
function Ga() {
  if (Ke & 2 && Be !== 0)
    return Be & -Be;
  if (ue.T !== null) {
    var n = Xf;
    return n !== 0 ? n : pE();
  }
  return HD();
}
function wO() {
  ps === 0 && (ps = !(Be & 536870912) || ke ? zD() : 536870912);
  var n = ys.current;
  return n !== null && (n.flags |= 32), ps;
}
function Xa(n, t, e) {
  (n === dn && (Qe === 2 || Qe === 9) || n.cancelPendingCommit !== null) && (jf(n, 0), Qo(
    n,
    Be,
    ps,
    !1
  )), nm(n, e), (!(Ke & 2) || n !== dn) && (n === dn && (!(Ke & 2) && (wu |= e), On === 4 && Qo(
    n,
    Be,
    ps,
    !1
  )), mr(n));
}
function DO(n, t, e) {
  if (Ke & 6) throw Error(vt(327));
  var i = !e && (t & 124) === 0 && (t & n.expiredLanes) === 0 || em(n, t), a = i ? fH(n, t) : SS(n, t, !0), s = i;
  do {
    if (a === 0) {
      _h && !i && Qo(n, t, 0, !1);
      break;
    } else {
      if (e = n.current.alternate, s && !uH(e)) {
        a = SS(n, t, !1), s = !1;
        continue;
      }
      if (a === 2) {
        if (s = t, n.errorRecoveryDisabledLanes & s)
          var r = 0;
        else
          r = n.pendingLanes & -536870913, r = r !== 0 ? r : r & 536870912 ? 536870912 : 0;
        if (r !== 0) {
          t = r;
          t: {
            var l = n;
            a = Qd;
            var c = l.current.memoizedState.isDehydrated;
            if (c && (jf(l, r).flags |= 256), r = SS(
              l,
              r,
              !1
            ), r !== 2) {
              if (cE && !c) {
                l.errorRecoveryDisabledLanes |= s, wu |= s, a = 4;
                break t;
              }
              s = ua, ua = a, s !== null && (ua === null ? ua = s : ua.push.apply(
                ua,
                s
              ));
            }
            a = r;
          }
          if (s = !1, a !== 2) continue;
        }
      }
      if (a === 1) {
        jf(n, 0), Qo(n, t, 0, !0);
        break;
      }
      t: {
        switch (i = n, s = a, s) {
          case 0:
          case 1:
            throw Error(vt(345));
          case 4:
            if ((t & 4194048) !== t) break;
          case 6:
            Qo(
              i,
              t,
              ps,
              !jo
            );
            break t;
          case 2:
            ua = null;
            break;
          case 3:
          case 5:
            break;
          default:
            throw Error(vt(329));
        }
        if ((t & 62914560) === t && (a = hE + 300 - or(), 10 < a)) {
          if (Qo(
            i,
            t,
            ps,
            !jo
          ), E_(i, 0, !0) !== 0) break t;
          i.timeoutHandle = jO(
            ZR.bind(
              null,
              i,
              e,
              ua,
              hv,
              mM,
              t,
              ps,
              wu,
              Wf,
              jo,
              s,
              2,
              -0,
              0
            ),
            a
          );
          break t;
        }
        ZR(
          i,
          e,
          ua,
          hv,
          mM,
          t,
          ps,
          wu,
          Wf,
          jo,
          s,
          0,
          -0,
          0
        );
      }
    }
    break;
  } while (!0);
  mr(n);
}
function ZR(n, t, e, i, a, s, r, l, c, f, d, p, m, g) {
  if (n.timeoutHandle = -1, p = t.subtreeFlags, (p & 8192 || (p & 16785408) === 16785408) && (bp = { stylesheets: null, count: 0, unsuspend: qH }, EO(t), p = kH(), p !== null)) {
    n.cancelPendingCommit = p(
      QR.bind(
        null,
        n,
        t,
        s,
        e,
        i,
        a,
        r,
        l,
        c,
        d,
        1,
        m,
        g
      )
    ), Qo(n, s, r, !f);
    return;
  }
  QR(
    n,
    t,
    s,
    e,
    i,
    a,
    r,
    l,
    c
  );
}
function uH(n) {
  for (var t = n; ; ) {
    var e = t.tag;
    if ((e === 0 || e === 11 || e === 15) && t.flags & 16384 && (e = t.updateQueue, e !== null && (e = e.stores, e !== null)))
      for (var i = 0; i < e.length; i++) {
        var a = e[i], s = a.getSnapshot;
        a = a.value;
        try {
          if (!ka(s(), a)) return !1;
        } catch {
          return !1;
        }
      }
    if (e = t.child, t.subtreeFlags & 16384 && e !== null)
      e.return = t, t = e;
    else {
      if (t === n) break;
      for (; t.sibling === null; ) {
        if (t.return === null || t.return === n) return !0;
        t = t.return;
      }
      t.sibling.return = t.return, t = t.sibling;
    }
  }
  return !0;
}
function Qo(n, t, e, i) {
  t &= ~fE, t &= ~wu, n.suspendedLanes |= t, n.pingedLanes &= ~t, i && (n.warmLanes |= t), i = n.expirationTimes;
  for (var a = t; 0 < a; ) {
    var s = 31 - Va(a), r = 1 << s;
    i[s] = -1, a &= ~r;
  }
  e !== 0 && PD(n, e, t);
}
function L_() {
  return Ke & 6 ? !0 : (hm(0), !1);
}
function dE() {
  if (we !== null) {
    if (Qe === 0)
      var n = we.return;
    else
      n = we, Wr = Ju = null, $b(n), Of = null, xp = 0, n = we;
    for (; n !== null; )
      fO(n.alternate, n), n = n.return;
    we = null;
  }
}
function jf(n, t) {
  var e = n.timeoutHandle;
  e !== -1 && (n.timeoutHandle = -1, RH(e)), e = n.cancelPendingCommit, e !== null && (n.cancelPendingCommit = null, e()), dE(), dn = n, we = e = Qr(n.current, null), Be = t, Qe = 0, za = null, jo = !1, _h = em(n, t), cE = !1, Wf = ps = fE = wu = dl = On = 0, ua = Qd = null, mM = !1, t & 8 && (t |= t & 32);
  var i = n.entangledLanes;
  if (i !== 0)
    for (n = n.entanglements, i &= t; 0 < i; ) {
      var a = 31 - Va(i), s = 1 << a;
      t |= n[a], i &= ~s;
    }
  return io = t, C_(), e;
}
function UO(n, t) {
  Ee = null, ue.H = sv, t === lm || t === D_ ? (t = AR(), Qe = 3) : t === mU ? (t = AR(), Qe = 4) : Qe = t === sO ? 8 : t !== null && typeof t == "object" && typeof t.then == "function" ? 6 : 1, za = t, we === null && (On = 1, lv(
    n,
    ds(t, n.current)
  ));
}
function OO() {
  var n = ue.H;
  return ue.H = sv, n === null ? sv : n;
}
function NO() {
  var n = ue.A;
  return ue.A = oH, n;
}
function yM() {
  On = 4, jo || (Be & 4194048) !== Be && ys.current !== null || (_h = !0), !(dl & 134217727) && !(wu & 134217727) || dn === null || Qo(
    dn,
    Be,
    ps,
    !1
  );
}
function SS(n, t, e) {
  var i = Ke;
  Ke |= 2;
  var a = OO(), s = NO();
  (dn !== n || Be !== t) && (hv = null, jf(n, t)), t = !1;
  var r = On;
  t: do
    try {
      if (Qe !== 0 && we !== null) {
        var l = we, c = za;
        switch (Qe) {
          case 8:
            dE(), r = 6;
            break t;
          case 3:
          case 2:
          case 9:
          case 6:
            ys.current === null && (t = !0);
            var f = Qe;
            if (Qe = 0, za = null, yf(n, l, c, f), e && _h) {
              r = 0;
              break t;
            }
            break;
          default:
            f = Qe, Qe = 0, za = null, yf(n, l, c, f);
        }
      }
      cH(), r = On;
      break;
    } catch (d) {
      UO(n, d);
    }
  while (!0);
  return t && n.shellSuspendCounter++, Wr = Ju = null, Ke = i, ue.H = a, ue.A = s, we === null && (dn = null, Be = 0, C_()), r;
}
function cH() {
  for (; we !== null; ) LO(we);
}
function fH(n, t) {
  var e = Ke;
  Ke |= 2;
  var i = OO(), a = NO();
  dn !== n || Be !== t ? (hv = null, fv = or() + 500, jf(n, t)) : _h = em(
    n,
    t
  );
  t: do
    try {
      if (Qe !== 0 && we !== null) {
        t = we;
        var s = za;
        e: switch (Qe) {
          case 1:
            Qe = 0, za = null, yf(n, t, s, 1);
            break;
          case 2:
          case 9:
            if (TR(s)) {
              Qe = 0, za = null, jR(t);
              break;
            }
            t = function() {
              Qe !== 2 && Qe !== 9 || dn !== n || (Qe = 7), mr(n);
            }, s.then(t, t);
            break t;
          case 3:
            Qe = 7;
            break t;
          case 4:
            Qe = 5;
            break t;
          case 7:
            TR(s) ? (Qe = 0, za = null, jR(t)) : (Qe = 0, za = null, yf(n, t, s, 7));
            break;
          case 5:
            var r = null;
            switch (we.tag) {
              case 26:
                r = we.memoizedState;
              case 5:
              case 27:
                var l = we;
                if (!r || $O(r)) {
                  Qe = 0, za = null;
                  var c = l.sibling;
                  if (c !== null) we = c;
                  else {
                    var f = l.return;
                    f !== null ? (we = f, z_(f)) : we = null;
                  }
                  break e;
                }
            }
            Qe = 0, za = null, yf(n, t, s, 5);
            break;
          case 6:
            Qe = 0, za = null, yf(n, t, s, 6);
            break;
          case 8:
            dE(), On = 6;
            break t;
          default:
            throw Error(vt(462));
        }
      }
      hH();
      break;
    } catch (d) {
      UO(n, d);
    }
  while (!0);
  return Wr = Ju = null, ue.H = i, ue.A = a, Ke = e, we !== null ? 0 : (dn = null, Be = 0, C_(), On);
}
function hH() {
  for (; we !== null && !LI(); )
    LO(we);
}
function LO(n) {
  var t = cO(n.alternate, n, io);
  n.memoizedProps = n.pendingProps, t === null ? z_(n) : we = t;
}
function jR(n) {
  var t = n, e = t.alternate;
  switch (t.tag) {
    case 15:
    case 0:
      t = GR(
        e,
        t,
        t.pendingProps,
        t.type,
        void 0,
        Be
      );
      break;
    case 11:
      t = GR(
        e,
        t,
        t.pendingProps,
        t.type.render,
        t.ref,
        Be
      );
      break;
    case 5:
      $b(t);
    default:
      fO(e, t), t = we = fU(t, io), t = cO(e, t, io);
  }
  n.memoizedProps = n.pendingProps, t === null ? z_(n) : we = t;
}
function yf(n, t, e, i) {
  Wr = Ju = null, $b(t), Of = null, xp = 0;
  var a = t.return;
  try {
    if (eH(
      n,
      a,
      t,
      e,
      Be
    )) {
      On = 1, lv(
        n,
        ds(e, n.current)
      ), we = null;
      return;
    }
  } catch (s) {
    if (a !== null) throw we = a, s;
    On = 1, lv(
      n,
      ds(e, n.current)
    ), we = null;
    return;
  }
  t.flags & 32768 ? (ke || i === 1 ? n = !0 : _h || Be & 536870912 ? n = !1 : (jo = n = !0, (i === 2 || i === 9 || i === 3 || i === 6) && (i = ys.current, i !== null && i.tag === 13 && (i.flags |= 16384))), zO(t, n)) : z_(t);
}
function z_(n) {
  var t = n;
  do {
    if (t.flags & 32768) {
      zO(
        t,
        jo
      );
      return;
    }
    n = t.return;
    var e = iH(
      t.alternate,
      t,
      io
    );
    if (e !== null) {
      we = e;
      return;
    }
    if (t = t.sibling, t !== null) {
      we = t;
      return;
    }
    we = t = n;
  } while (t !== null);
  On === 0 && (On = 5);
}
function zO(n, t) {
  do {
    var e = aH(n.alternate, n);
    if (e !== null) {
      e.flags &= 32767, we = e;
      return;
    }
    if (e = n.return, e !== null && (e.flags |= 32768, e.subtreeFlags = 0, e.deletions = null), !t && (n = n.sibling, n !== null)) {
      we = n;
      return;
    }
    we = n = e;
  } while (n !== null);
  On = 6, we = null;
}
function QR(n, t, e, i, a, s, r, l, c) {
  n.cancelPendingCommit = null;
  do
    B_();
  while (vi !== 0);
  if (Ke & 6) throw Error(vt(327));
  if (t !== null) {
    if (t === n.current) throw Error(vt(177));
    if (s = t.lanes | t.childLanes, s |= Fb, qI(
      n,
      e,
      s,
      r,
      l,
      c
    ), n === dn && (we = dn = null, Be = 0), Zf = t, sl = n, Nf = e, gM = s, vM = a, CO = i, t.subtreeFlags & 10256 || t.flags & 10256 ? (n.callbackNode = null, n.callbackPriority = 0, gH(j0, function() {
      return FO(), null;
    })) : (n.callbackNode = null, n.callbackPriority = 0), i = (t.flags & 13878) !== 0, t.subtreeFlags & 13878 || i) {
      i = ue.T, ue.T = null, a = We.p, We.p = 2, r = Ke, Ke |= 4;
      try {
        sH(n, t, e);
      } finally {
        Ke = r, We.p = a, ue.T = i;
      }
    }
    vi = 1, BO(), PO(), IO();
  }
}
function BO() {
  if (vi === 1) {
    vi = 0;
    var n = sl, t = Zf, e = (t.flags & 13878) !== 0;
    if (t.subtreeFlags & 13878 || e) {
      e = ue.T, ue.T = null;
      var i = We.p;
      We.p = 2;
      var a = Ke;
      Ke |= 4;
      try {
        SO(t, n);
        var s = bM, r = iU(n.containerInfo), l = s.focusedElem, c = s.selectionRange;
        if (r !== l && l && l.ownerDocument && nU(
          l.ownerDocument.documentElement,
          l
        )) {
          if (c !== null && Hb(l)) {
            var f = c.start, d = c.end;
            if (d === void 0 && (d = f), "selectionStart" in l)
              l.selectionStart = f, l.selectionEnd = Math.min(
                d,
                l.value.length
              );
            else {
              var p = l.ownerDocument || document, m = p && p.defaultView || window;
              if (m.getSelection) {
                var g = m.getSelection(), y = l.textContent.length, x = Math.min(c.start, y), M = c.end === void 0 ? x : Math.min(c.end, y);
                !g.extend && x > M && (r = M, M = x, x = r);
                var v = vR(
                  l,
                  x
                ), S = vR(
                  l,
                  M
                );
                if (v && S && (g.rangeCount !== 1 || g.anchorNode !== v.node || g.anchorOffset !== v.offset || g.focusNode !== S.node || g.focusOffset !== S.offset)) {
                  var E = p.createRange();
                  E.setStart(v.node, v.offset), g.removeAllRanges(), x > M ? (g.addRange(E), g.extend(S.node, S.offset)) : (E.setEnd(S.node, S.offset), g.addRange(E));
                }
              }
            }
          }
          for (p = [], g = l; g = g.parentNode; )
            g.nodeType === 1 && p.push({
              element: g,
              left: g.scrollLeft,
              top: g.scrollTop
            });
          for (typeof l.focus == "function" && l.focus(), l = 0; l < p.length; l++) {
            var T = p[l];
            T.element.scrollLeft = T.left, T.element.scrollTop = T.top;
          }
        }
        xv = !!MM, bM = MM = null;
      } finally {
        Ke = a, We.p = i, ue.T = e;
      }
    }
    n.current = t, vi = 2;
  }
}
function PO() {
  if (vi === 2) {
    vi = 0;
    var n = sl, t = Zf, e = (t.flags & 8772) !== 0;
    if (t.subtreeFlags & 8772 || e) {
      e = ue.T, ue.T = null;
      var i = We.p;
      We.p = 2;
      var a = Ke;
      Ke |= 4;
      try {
        vO(n, t.alternate, t);
      } finally {
        Ke = a, We.p = i, ue.T = e;
      }
    }
    vi = 3;
  }
}
function IO() {
  if (vi === 4 || vi === 3) {
    vi = 0, zI();
    var n = sl, t = Zf, e = Nf, i = CO;
    t.subtreeFlags & 10256 || t.flags & 10256 ? vi = 5 : (vi = 0, Zf = sl = null, HO(n, n.pendingLanes));
    var a = n.pendingLanes;
    if (a === 0 && (al = null), Ob(e), t = t.stateNode, Fa && typeof Fa.onCommitFiberRoot == "function")
      try {
        Fa.onCommitFiberRoot(
          tm,
          t,
          void 0,
          (t.current.flags & 128) === 128
        );
      } catch {
      }
    if (i !== null) {
      t = ue.T, a = We.p, We.p = 2, ue.T = null;
      try {
        for (var s = n.onRecoverableError, r = 0; r < i.length; r++) {
          var l = i[r];
          s(l.value, {
            componentStack: l.stack
          });
        }
      } finally {
        ue.T = t, We.p = a;
      }
    }
    Nf & 3 && B_(), mr(n), a = n.pendingLanes, e & 4194090 && a & 42 ? n === _M ? Kd++ : (Kd = 0, _M = n) : Kd = 0, hm(0);
  }
}
function HO(n, t) {
  (n.pooledCacheLanes &= t) === 0 && (t = n.pooledCache, t != null && (n.pooledCache = null, om(t)));
}
function B_(n) {
  return BO(), PO(), IO(), FO();
}
function FO() {
  if (vi !== 5) return !1;
  var n = sl, t = gM;
  gM = 0;
  var e = Ob(Nf), i = ue.T, a = We.p;
  try {
    We.p = 32 > e ? 32 : e, ue.T = null, e = vM, vM = null;
    var s = sl, r = Nf;
    if (vi = 0, Zf = sl = null, Nf = 0, Ke & 6) throw Error(vt(331));
    var l = Ke;
    if (Ke |= 4, AO(s.current), bO(
      s,
      s.current,
      r,
      e
    ), Ke = l, hm(0, !1), Fa && typeof Fa.onPostCommitFiberRoot == "function")
      try {
        Fa.onPostCommitFiberRoot(tm, s);
      } catch {
      }
    return !0;
  } finally {
    We.p = a, ue.T = i, HO(n, t);
  }
}
function KR(n, t, e) {
  t = ds(e, t), t = fM(n.stateNode, t, 2), n = il(n, t, 2), n !== null && (nm(n, 2), mr(n));
}
function on(n, t, e) {
  if (n.tag === 3)
    KR(n, n, e);
  else
    for (; t !== null; ) {
      if (t.tag === 3) {
        KR(
          t,
          n,
          e
        );
        break;
      } else if (t.tag === 1) {
        var i = t.stateNode;
        if (typeof t.type.getDerivedStateFromError == "function" || typeof i.componentDidCatch == "function" && (al === null || !al.has(i))) {
          n = ds(e, n), e = iO(2), i = il(t, e, 2), i !== null && (aO(
            e,
            i,
            t,
            n
          ), nm(i, 2), mr(i));
          break;
        }
      }
      t = t.return;
    }
}
function MS(n, t, e) {
  var i = n.pingCache;
  if (i === null) {
    i = n.pingCache = new lH();
    var a = /* @__PURE__ */ new Set();
    i.set(t, a);
  } else
    a = i.get(t), a === void 0 && (a = /* @__PURE__ */ new Set(), i.set(t, a));
  a.has(e) || (cE = !0, a.add(e), n = dH.bind(null, n, t, e), t.then(n, n));
}
function dH(n, t, e) {
  var i = n.pingCache;
  i !== null && i.delete(t), n.pingedLanes |= n.suspendedLanes & e, n.warmLanes &= ~e, dn === n && (Be & e) === e && (On === 4 || On === 3 && (Be & 62914560) === Be && 300 > or() - hE ? !(Ke & 2) && jf(n, 0) : fE |= e, Wf === Be && (Wf = 0)), mr(n);
}
function VO(n, t) {
  t === 0 && (t = BD()), n = vh(n, t), n !== null && (nm(n, t), mr(n));
}
function pH(n) {
  var t = n.memoizedState, e = 0;
  t !== null && (e = t.retryLane), VO(n, e);
}
function mH(n, t) {
  var e = 0;
  switch (n.tag) {
    case 13:
      var i = n.stateNode, a = n.memoizedState;
      a !== null && (e = a.retryLane);
      break;
    case 19:
      i = n.stateNode;
      break;
    case 22:
      i = n.stateNode._retryCache;
      break;
    default:
      throw Error(vt(314));
  }
  i !== null && i.delete(t), VO(n, e);
}
function gH(n, t) {
  return Db(n, t);
}
var dv = null, of = null, xM = !1, pv = !1, bS = !1, Du = 0;
function mr(n) {
  n !== of && n.next === null && (of === null ? dv = of = n : of = of.next = n), pv = !0, xM || (xM = !0, _H());
}
function hm(n, t) {
  if (!bS && pv) {
    bS = !0;
    do
      for (var e = !1, i = dv; i !== null; ) {
        if (n !== 0) {
          var a = i.pendingLanes;
          if (a === 0) var s = 0;
          else {
            var r = i.suspendedLanes, l = i.pingedLanes;
            s = (1 << 31 - Va(42 | n) + 1) - 1, s &= a & ~(r & ~l), s = s & 201326741 ? s & 201326741 | 1 : s ? s | 2 : 0;
          }
          s !== 0 && (e = !0, JR(i, s));
        } else
          s = Be, s = E_(
            i,
            i === dn ? s : 0,
            i.cancelPendingCommit !== null || i.timeoutHandle !== -1
          ), !(s & 3) || em(i, s) || (e = !0, JR(i, s));
        i = i.next;
      }
    while (e);
    bS = !1;
  }
}
function vH() {
  GO();
}
function GO() {
  pv = xM = !1;
  var n = 0;
  Du !== 0 && (AH() && (n = Du), Du = 0);
  for (var t = or(), e = null, i = dv; i !== null; ) {
    var a = i.next, s = XO(i, t);
    s === 0 ? (i.next = null, e === null ? dv = a : e.next = a, a === null && (of = e)) : (e = i, (n !== 0 || s & 3) && (pv = !0)), i = a;
  }
  hm(n);
}
function XO(n, t) {
  for (var e = n.suspendedLanes, i = n.pingedLanes, a = n.expirationTimes, s = n.pendingLanes & -62914561; 0 < s; ) {
    var r = 31 - Va(s), l = 1 << r, c = a[r];
    c === -1 ? (!(l & e) || l & i) && (a[r] = XI(l, t)) : c <= t && (n.expiredLanes |= l), s &= ~l;
  }
  if (t = dn, e = Be, e = E_(
    n,
    n === t ? e : 0,
    n.cancelPendingCommit !== null || n.timeoutHandle !== -1
  ), i = n.callbackNode, e === 0 || n === t && (Qe === 2 || Qe === 9) || n.cancelPendingCommit !== null)
    return i !== null && i !== null && jx(i), n.callbackNode = null, n.callbackPriority = 0;
  if (!(e & 3) || em(n, e)) {
    if (t = e & -e, t === n.callbackPriority) return t;
    switch (i !== null && jx(i), Ob(e)) {
      case 2:
      case 8:
        e = ND;
        break;
      case 32:
        e = j0;
        break;
      case 268435456:
        e = LD;
        break;
      default:
        e = j0;
    }
    return i = qO.bind(null, n), e = Db(e, i), n.callbackPriority = t, n.callbackNode = e, t;
  }
  return i !== null && i !== null && jx(i), n.callbackPriority = 2, n.callbackNode = null, 2;
}
function qO(n, t) {
  if (vi !== 0 && vi !== 5)
    return n.callbackNode = null, n.callbackPriority = 0, null;
  var e = n.callbackNode;
  if (B_() && n.callbackNode !== e)
    return null;
  var i = Be;
  return i = E_(
    n,
    n === dn ? i : 0,
    n.cancelPendingCommit !== null || n.timeoutHandle !== -1
  ), i === 0 ? null : (DO(n, i, t), XO(n, or()), n.callbackNode != null && n.callbackNode === e ? qO.bind(null, n) : null);
}
function JR(n, t) {
  if (B_()) return null;
  DO(n, t, !0);
}
function _H() {
  CH(function() {
    Ke & 6 ? Db(
      OD,
      vH
    ) : GO();
  });
}
function pE() {
  return Du === 0 && (Du = zD()), Du;
}
function $R(n) {
  return n == null || typeof n == "symbol" || typeof n == "boolean" ? null : typeof n == "function" ? n : A0("" + n);
}
function tC(n, t) {
  var e = t.ownerDocument.createElement("input");
  return e.name = t.name, e.value = t.value, n.id && e.setAttribute("form", n.id), t.parentNode.insertBefore(e, t), n = new FormData(n), e.parentNode.removeChild(e), n;
}
function yH(n, t, e, i, a) {
  if (t === "submit" && e && e.stateNode === a) {
    var s = $R(
      (a[ga] || null).action
    ), r = i.submitter;
    r && (t = (t = r[ga] || null) ? $R(t.formAction) : r.getAttribute("formAction"), t !== null && (s = t, r = null));
    var l = new T_(
      "action",
      "action",
      null,
      i,
      a
    );
    n.push({
      event: l,
      listeners: [
        {
          instance: null,
          listener: function() {
            if (i.defaultPrevented) {
              if (Du !== 0) {
                var c = r ? tC(a, r) : new FormData(a);
                uM(
                  e,
                  {
                    pending: !0,
                    data: c,
                    method: a.method,
                    action: s
                  },
                  null,
                  c
                );
              }
            } else
              typeof s == "function" && (l.preventDefault(), c = r ? tC(a, r) : new FormData(a), uM(
                e,
                {
                  pending: !0,
                  data: c,
                  method: a.method,
                  action: s
                },
                s,
                c
              ));
          },
          currentTarget: a
        }
      ]
    });
  }
}
for (var ES = 0; ES < K1.length; ES++) {
  var TS = K1[ES], xH = TS.toLowerCase(), SH = TS[0].toUpperCase() + TS.slice(1);
  Vs(
    xH,
    "on" + SH
  );
}
Vs(sU, "onAnimationEnd");
Vs(rU, "onAnimationIteration");
Vs(oU, "onAnimationStart");
Vs("dblclick", "onDoubleClick");
Vs("focusin", "onFocus");
Vs("focusout", "onBlur");
Vs(I5, "onTransitionRun");
Vs(H5, "onTransitionStart");
Vs(F5, "onTransitionCancel");
Vs(lU, "onTransitionEnd");
Vf("onMouseEnter", ["mouseout", "mouseover"]);
Vf("onMouseLeave", ["mouseout", "mouseover"]);
Vf("onPointerEnter", ["pointerout", "pointerover"]);
Vf("onPointerLeave", ["pointerout", "pointerover"]);
ju(
  "onChange",
  "change click focusin focusout input keydown keyup selectionchange".split(" ")
);
ju(
  "onSelect",
  "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
    " "
  )
);
ju("onBeforeInput", [
  "compositionend",
  "keypress",
  "textInput",
  "paste"
]);
ju(
  "onCompositionEnd",
  "compositionend focusout keydown keypress keyup mousedown".split(" ")
);
ju(
  "onCompositionStart",
  "compositionstart focusout keydown keypress keyup mousedown".split(" ")
);
ju(
  "onCompositionUpdate",
  "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
);
var Sp = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
  " "
), MH = new Set(
  "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Sp)
);
function YO(n, t) {
  t = (t & 4) !== 0;
  for (var e = 0; e < n.length; e++) {
    var i = n[e], a = i.event;
    i = i.listeners;
    t: {
      var s = void 0;
      if (t)
        for (var r = i.length - 1; 0 <= r; r--) {
          var l = i[r], c = l.instance, f = l.currentTarget;
          if (l = l.listener, c !== s && a.isPropagationStopped())
            break t;
          s = l, a.currentTarget = f;
          try {
            s(a);
          } catch (d) {
            ov(d);
          }
          a.currentTarget = null, s = c;
        }
      else
        for (r = 0; r < i.length; r++) {
          if (l = i[r], c = l.instance, f = l.currentTarget, l = l.listener, c !== s && a.isPropagationStopped())
            break t;
          s = l, a.currentTarget = f;
          try {
            s(a);
          } catch (d) {
            ov(d);
          }
          a.currentTarget = null, s = c;
        }
    }
  }
}
function Ce(n, t) {
  var e = t[q1];
  e === void 0 && (e = t[q1] = /* @__PURE__ */ new Set());
  var i = n + "__bubble";
  e.has(i) || (kO(t, n, 2, !1), e.add(i));
}
function AS(n, t, e) {
  var i = 0;
  t && (i |= 4), kO(
    e,
    n,
    i,
    t
  );
}
var Eg = "_reactListening" + Math.random().toString(36).slice(2);
function mE(n) {
  if (!n[Eg]) {
    n[Eg] = !0, FD.forEach(function(e) {
      e !== "selectionchange" && (MH.has(e) || AS(e, !1, n), AS(e, !0, n));
    });
    var t = n.nodeType === 9 ? n : n.ownerDocument;
    t === null || t[Eg] || (t[Eg] = !0, AS("selectionchange", !1, t));
  }
}
function kO(n, t, e, i) {
  switch (aN(t)) {
    case 2:
      var a = jH;
      break;
    case 8:
      a = QH;
      break;
    default:
      a = yE;
  }
  e = a.bind(
    null,
    t,
    e,
    n
  ), a = void 0, !Z1 || t !== "touchstart" && t !== "touchmove" && t !== "wheel" || (a = !0), i ? a !== void 0 ? n.addEventListener(t, e, {
    capture: !0,
    passive: a
  }) : n.addEventListener(t, e, !0) : a !== void 0 ? n.addEventListener(t, e, {
    passive: a
  }) : n.addEventListener(t, e, !1);
}
function RS(n, t, e, i, a) {
  var s = i;
  if (!(t & 1) && !(t & 2) && i !== null)
    t: for (; ; ) {
      if (i === null) return;
      var r = i.tag;
      if (r === 3 || r === 4) {
        var l = i.stateNode.containerInfo;
        if (l === a) break;
        if (r === 4)
          for (r = i.return; r !== null; ) {
            var c = r.tag;
            if ((c === 3 || c === 4) && r.stateNode.containerInfo === a)
              return;
            r = r.return;
          }
        for (; l !== null; ) {
          if (r = cf(l), r === null) return;
          if (c = r.tag, c === 5 || c === 6 || c === 26 || c === 27) {
            i = s = r;
            continue t;
          }
          l = l.parentNode;
        }
      }
      i = i.return;
    }
  ZD(function() {
    var f = s, d = zb(e), p = [];
    t: {
      var m = uU.get(n);
      if (m !== void 0) {
        var g = T_, y = n;
        switch (n) {
          case "keypress":
            if (C0(e) === 0) break t;
          case "keydown":
          case "keyup":
            g = g5;
            break;
          case "focusin":
            y = "focus", g = iS;
            break;
          case "focusout":
            y = "blur", g = iS;
            break;
          case "beforeblur":
          case "afterblur":
            g = iS;
            break;
          case "click":
            if (e.button === 2) break t;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            g = oR;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            g = a5;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            g = y5;
            break;
          case sU:
          case rU:
          case oU:
            g = o5;
            break;
          case lU:
            g = S5;
            break;
          case "scroll":
          case "scrollend":
            g = n5;
            break;
          case "wheel":
            g = b5;
            break;
          case "copy":
          case "cut":
          case "paste":
            g = u5;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            g = uR;
            break;
          case "toggle":
          case "beforetoggle":
            g = T5;
        }
        var x = (t & 4) !== 0, M = !x && (n === "scroll" || n === "scrollend"), v = x ? m !== null ? m + "Capture" : null : m;
        x = [];
        for (var S = f, E; S !== null; ) {
          var T = S;
          if (E = T.stateNode, T = T.tag, T !== 5 && T !== 26 && T !== 27 || E === null || v === null || (T = mp(S, v), T != null && x.push(
            Mp(S, T, E)
          )), M) break;
          S = S.return;
        }
        0 < x.length && (m = new g(
          m,
          y,
          null,
          e,
          d
        ), p.push({ event: m, listeners: x }));
      }
    }
    if (!(t & 7)) {
      t: {
        if (m = n === "mouseover" || n === "pointerover", g = n === "mouseout" || n === "pointerout", m && e !== W1 && (y = e.relatedTarget || e.fromElement) && (cf(y) || y[mh]))
          break t;
        if ((g || m) && (m = d.window === d ? d : (m = d.ownerDocument) ? m.defaultView || m.parentWindow : window, g ? (y = e.relatedTarget || e.toElement, g = f, y = y ? cf(y) : null, y !== null && (M = $p(y), x = y.tag, y !== M || x !== 5 && x !== 27 && x !== 6) && (y = null)) : (g = null, y = f), g !== y)) {
          if (x = oR, T = "onMouseLeave", v = "onMouseEnter", S = "mouse", (n === "pointerout" || n === "pointerover") && (x = uR, T = "onPointerLeave", v = "onPointerEnter", S = "pointer"), M = g == null ? m : Ud(g), E = y == null ? m : Ud(y), m = new x(
            T,
            S + "leave",
            g,
            e,
            d
          ), m.target = M, m.relatedTarget = E, T = null, cf(d) === f && (x = new x(
            v,
            S + "enter",
            y,
            e,
            d
          ), x.target = E, x.relatedTarget = M, T = x), M = T, g && y)
            e: {
              for (x = g, v = y, S = 0, E = x; E; E = Uc(E))
                S++;
              for (E = 0, T = v; T; T = Uc(T))
                E++;
              for (; 0 < S - E; )
                x = Uc(x), S--;
              for (; 0 < E - S; )
                v = Uc(v), E--;
              for (; S--; ) {
                if (x === v || v !== null && x === v.alternate)
                  break e;
                x = Uc(x), v = Uc(v);
              }
              x = null;
            }
          else x = null;
          g !== null && eC(
            p,
            m,
            g,
            x,
            !1
          ), y !== null && M !== null && eC(
            p,
            M,
            y,
            x,
            !0
          );
        }
      }
      t: {
        if (m = f ? Ud(f) : window, g = m.nodeName && m.nodeName.toLowerCase(), g === "select" || g === "input" && m.type === "file")
          var w = dR;
        else if (hR(m))
          if (tU)
            w = z5;
          else {
            w = N5;
            var D = O5;
          }
        else
          g = m.nodeName, !g || g.toLowerCase() !== "input" || m.type !== "checkbox" && m.type !== "radio" ? f && Lb(f.elementType) && (w = dR) : w = L5;
        if (w && (w = w(n, f))) {
          $D(
            p,
            w,
            e,
            d
          );
          break t;
        }
        D && D(n, m, f), n === "focusout" && f && m.type === "number" && f.memoizedProps.value != null && k1(m, "number", m.value);
      }
      switch (D = f ? Ud(f) : window, n) {
        case "focusin":
          (hR(D) || D.contentEditable === "true") && (df = D, j1 = f, Vd = null);
          break;
        case "focusout":
          Vd = j1 = df = null;
          break;
        case "mousedown":
          Q1 = !0;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Q1 = !1, _R(p, e, d);
          break;
        case "selectionchange":
          if (P5) break;
        case "keydown":
        case "keyup":
          _R(p, e, d);
      }
      var U;
      if (Ib)
        t: {
          switch (n) {
            case "compositionstart":
              var O = "onCompositionStart";
              break t;
            case "compositionend":
              O = "onCompositionEnd";
              break t;
            case "compositionupdate":
              O = "onCompositionUpdate";
              break t;
          }
          O = void 0;
        }
      else
        hf ? KD(n, e) && (O = "onCompositionEnd") : n === "keydown" && e.keyCode === 229 && (O = "onCompositionStart");
      O && (QD && e.locale !== "ko" && (hf || O !== "onCompositionStart" ? O === "onCompositionEnd" && hf && (U = jD()) : (Zo = d, Bb = "value" in Zo ? Zo.value : Zo.textContent, hf = !0)), D = mv(f, O), 0 < D.length && (O = new lR(
        O,
        n,
        null,
        e,
        d
      ), p.push({ event: O, listeners: D }), U ? O.data = U : (U = JD(e), U !== null && (O.data = U)))), (U = R5 ? C5(n, e) : w5(n, e)) && (O = mv(f, "onBeforeInput"), 0 < O.length && (D = new lR(
        "onBeforeInput",
        "beforeinput",
        null,
        e,
        d
      ), p.push({
        event: D,
        listeners: O
      }), D.data = U)), yH(
        p,
        n,
        f,
        e,
        d
      );
    }
    YO(p, t);
  });
}
function Mp(n, t, e) {
  return {
    instance: n,
    listener: t,
    currentTarget: e
  };
}
function mv(n, t) {
  for (var e = t + "Capture", i = []; n !== null; ) {
    var a = n, s = a.stateNode;
    if (a = a.tag, a !== 5 && a !== 26 && a !== 27 || s === null || (a = mp(n, e), a != null && i.unshift(
      Mp(n, a, s)
    ), a = mp(n, t), a != null && i.push(
      Mp(n, a, s)
    )), n.tag === 3) return i;
    n = n.return;
  }
  return [];
}
function Uc(n) {
  if (n === null) return null;
  do
    n = n.return;
  while (n && n.tag !== 5 && n.tag !== 27);
  return n || null;
}
function eC(n, t, e, i, a) {
  for (var s = t._reactName, r = []; e !== null && e !== i; ) {
    var l = e, c = l.alternate, f = l.stateNode;
    if (l = l.tag, c !== null && c === i) break;
    l !== 5 && l !== 26 && l !== 27 || f === null || (c = f, a ? (f = mp(e, s), f != null && r.unshift(
      Mp(e, f, c)
    )) : a || (f = mp(e, s), f != null && r.push(
      Mp(e, f, c)
    ))), e = e.return;
  }
  r.length !== 0 && n.push({ event: t, listeners: r });
}
var bH = /\r\n?/g, EH = /\u0000|\uFFFD/g;
function nC(n) {
  return (typeof n == "string" ? n : "" + n).replace(bH, `
`).replace(EH, "");
}
function WO(n, t) {
  return t = nC(t), nC(n) === t;
}
function P_() {
}
function tn(n, t, e, i, a, s) {
  switch (e) {
    case "children":
      typeof i == "string" ? t === "body" || t === "textarea" && i === "" || Gf(n, i) : (typeof i == "number" || typeof i == "bigint") && t !== "body" && Gf(n, "" + i);
      break;
    case "className":
      vg(n, "class", i);
      break;
    case "tabIndex":
      vg(n, "tabindex", i);
      break;
    case "dir":
    case "role":
    case "viewBox":
    case "width":
    case "height":
      vg(n, e, i);
      break;
    case "style":
      WD(n, i, s);
      break;
    case "data":
      if (t !== "object") {
        vg(n, "data", i);
        break;
      }
    case "src":
    case "href":
      if (i === "" && (t !== "a" || e !== "href")) {
        n.removeAttribute(e);
        break;
      }
      if (i == null || typeof i == "function" || typeof i == "symbol" || typeof i == "boolean") {
        n.removeAttribute(e);
        break;
      }
      i = A0("" + i), n.setAttribute(e, i);
      break;
    case "action":
    case "formAction":
      if (typeof i == "function") {
        n.setAttribute(
          e,
          "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
        );
        break;
      } else
        typeof s == "function" && (e === "formAction" ? (t !== "input" && tn(n, t, "name", a.name, a, null), tn(
          n,
          t,
          "formEncType",
          a.formEncType,
          a,
          null
        ), tn(
          n,
          t,
          "formMethod",
          a.formMethod,
          a,
          null
        ), tn(
          n,
          t,
          "formTarget",
          a.formTarget,
          a,
          null
        )) : (tn(n, t, "encType", a.encType, a, null), tn(n, t, "method", a.method, a, null), tn(n, t, "target", a.target, a, null)));
      if (i == null || typeof i == "symbol" || typeof i == "boolean") {
        n.removeAttribute(e);
        break;
      }
      i = A0("" + i), n.setAttribute(e, i);
      break;
    case "onClick":
      i != null && (n.onclick = P_);
      break;
    case "onScroll":
      i != null && Ce("scroll", n);
      break;
    case "onScrollEnd":
      i != null && Ce("scrollend", n);
      break;
    case "dangerouslySetInnerHTML":
      if (i != null) {
        if (typeof i != "object" || !("__html" in i))
          throw Error(vt(61));
        if (e = i.__html, e != null) {
          if (a.children != null) throw Error(vt(60));
          n.innerHTML = e;
        }
      }
      break;
    case "multiple":
      n.multiple = i && typeof i != "function" && typeof i != "symbol";
      break;
    case "muted":
      n.muted = i && typeof i != "function" && typeof i != "symbol";
      break;
    case "suppressContentEditableWarning":
    case "suppressHydrationWarning":
    case "defaultValue":
    case "defaultChecked":
    case "innerHTML":
    case "ref":
      break;
    case "autoFocus":
      break;
    case "xlinkHref":
      if (i == null || typeof i == "function" || typeof i == "boolean" || typeof i == "symbol") {
        n.removeAttribute("xlink:href");
        break;
      }
      e = A0("" + i), n.setAttributeNS(
        "http://www.w3.org/1999/xlink",
        "xlink:href",
        e
      );
      break;
    case "contentEditable":
    case "spellCheck":
    case "draggable":
    case "value":
    case "autoReverse":
    case "externalResourcesRequired":
    case "focusable":
    case "preserveAlpha":
      i != null && typeof i != "function" && typeof i != "symbol" ? n.setAttribute(e, "" + i) : n.removeAttribute(e);
      break;
    case "inert":
    case "allowFullScreen":
    case "async":
    case "autoPlay":
    case "controls":
    case "default":
    case "defer":
    case "disabled":
    case "disablePictureInPicture":
    case "disableRemotePlayback":
    case "formNoValidate":
    case "hidden":
    case "loop":
    case "noModule":
    case "noValidate":
    case "open":
    case "playsInline":
    case "readOnly":
    case "required":
    case "reversed":
    case "scoped":
    case "seamless":
    case "itemScope":
      i && typeof i != "function" && typeof i != "symbol" ? n.setAttribute(e, "") : n.removeAttribute(e);
      break;
    case "capture":
    case "download":
      i === !0 ? n.setAttribute(e, "") : i !== !1 && i != null && typeof i != "function" && typeof i != "symbol" ? n.setAttribute(e, i) : n.removeAttribute(e);
      break;
    case "cols":
    case "rows":
    case "size":
    case "span":
      i != null && typeof i != "function" && typeof i != "symbol" && !isNaN(i) && 1 <= i ? n.setAttribute(e, i) : n.removeAttribute(e);
      break;
    case "rowSpan":
    case "start":
      i == null || typeof i == "function" || typeof i == "symbol" || isNaN(i) ? n.removeAttribute(e) : n.setAttribute(e, i);
      break;
    case "popover":
      Ce("beforetoggle", n), Ce("toggle", n), T0(n, "popover", i);
      break;
    case "xlinkActuate":
      wr(
        n,
        "http://www.w3.org/1999/xlink",
        "xlink:actuate",
        i
      );
      break;
    case "xlinkArcrole":
      wr(
        n,
        "http://www.w3.org/1999/xlink",
        "xlink:arcrole",
        i
      );
      break;
    case "xlinkRole":
      wr(
        n,
        "http://www.w3.org/1999/xlink",
        "xlink:role",
        i
      );
      break;
    case "xlinkShow":
      wr(
        n,
        "http://www.w3.org/1999/xlink",
        "xlink:show",
        i
      );
      break;
    case "xlinkTitle":
      wr(
        n,
        "http://www.w3.org/1999/xlink",
        "xlink:title",
        i
      );
      break;
    case "xlinkType":
      wr(
        n,
        "http://www.w3.org/1999/xlink",
        "xlink:type",
        i
      );
      break;
    case "xmlBase":
      wr(
        n,
        "http://www.w3.org/XML/1998/namespace",
        "xml:base",
        i
      );
      break;
    case "xmlLang":
      wr(
        n,
        "http://www.w3.org/XML/1998/namespace",
        "xml:lang",
        i
      );
      break;
    case "xmlSpace":
      wr(
        n,
        "http://www.w3.org/XML/1998/namespace",
        "xml:space",
        i
      );
      break;
    case "is":
      T0(n, "is", i);
      break;
    case "innerText":
    case "textContent":
      break;
    default:
      (!(2 < e.length) || e[0] !== "o" && e[0] !== "O" || e[1] !== "n" && e[1] !== "N") && (e = t5.get(e) || e, T0(n, e, i));
  }
}
function SM(n, t, e, i, a, s) {
  switch (e) {
    case "style":
      WD(n, i, s);
      break;
    case "dangerouslySetInnerHTML":
      if (i != null) {
        if (typeof i != "object" || !("__html" in i))
          throw Error(vt(61));
        if (e = i.__html, e != null) {
          if (a.children != null) throw Error(vt(60));
          n.innerHTML = e;
        }
      }
      break;
    case "children":
      typeof i == "string" ? Gf(n, i) : (typeof i == "number" || typeof i == "bigint") && Gf(n, "" + i);
      break;
    case "onScroll":
      i != null && Ce("scroll", n);
      break;
    case "onScrollEnd":
      i != null && Ce("scrollend", n);
      break;
    case "onClick":
      i != null && (n.onclick = P_);
      break;
    case "suppressContentEditableWarning":
    case "suppressHydrationWarning":
    case "innerHTML":
    case "ref":
      break;
    case "innerText":
    case "textContent":
      break;
    default:
      if (!VD.hasOwnProperty(e))
        t: {
          if (e[0] === "o" && e[1] === "n" && (a = e.endsWith("Capture"), t = e.slice(2, a ? e.length - 7 : void 0), s = n[ga] || null, s = s != null ? s[e] : null, typeof s == "function" && n.removeEventListener(t, s, a), typeof i == "function")) {
            typeof s != "function" && s !== null && (e in n ? n[e] = null : n.hasAttribute(e) && n.removeAttribute(e)), n.addEventListener(t, i, a);
            break t;
          }
          e in n ? n[e] = i : i === !0 ? n.setAttribute(e, "") : T0(n, e, i);
        }
  }
}
function _i(n, t, e) {
  switch (t) {
    case "div":
    case "span":
    case "svg":
    case "path":
    case "a":
    case "g":
    case "p":
    case "li":
      break;
    case "img":
      Ce("error", n), Ce("load", n);
      var i = !1, a = !1, s;
      for (s in e)
        if (e.hasOwnProperty(s)) {
          var r = e[s];
          if (r != null)
            switch (s) {
              case "src":
                i = !0;
                break;
              case "srcSet":
                a = !0;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(vt(137, t));
              default:
                tn(n, t, s, r, e, null);
            }
        }
      a && tn(n, t, "srcSet", e.srcSet, e, null), i && tn(n, t, "src", e.src, e, null);
      return;
    case "input":
      Ce("invalid", n);
      var l = s = r = a = null, c = null, f = null;
      for (i in e)
        if (e.hasOwnProperty(i)) {
          var d = e[i];
          if (d != null)
            switch (i) {
              case "name":
                a = d;
                break;
              case "type":
                r = d;
                break;
              case "checked":
                c = d;
                break;
              case "defaultChecked":
                f = d;
                break;
              case "value":
                s = d;
                break;
              case "defaultValue":
                l = d;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                if (d != null)
                  throw Error(vt(137, t));
                break;
              default:
                tn(n, t, i, d, e, null);
            }
        }
      qD(
        n,
        s,
        l,
        c,
        f,
        r,
        a,
        !1
      ), Q0(n);
      return;
    case "select":
      Ce("invalid", n), i = r = s = null;
      for (a in e)
        if (e.hasOwnProperty(a) && (l = e[a], l != null))
          switch (a) {
            case "value":
              s = l;
              break;
            case "defaultValue":
              r = l;
              break;
            case "multiple":
              i = l;
            default:
              tn(n, t, a, l, e, null);
          }
      t = s, e = r, n.multiple = !!i, t != null ? Rf(n, !!i, t, !1) : e != null && Rf(n, !!i, e, !0);
      return;
    case "textarea":
      Ce("invalid", n), s = a = i = null;
      for (r in e)
        if (e.hasOwnProperty(r) && (l = e[r], l != null))
          switch (r) {
            case "value":
              i = l;
              break;
            case "defaultValue":
              a = l;
              break;
            case "children":
              s = l;
              break;
            case "dangerouslySetInnerHTML":
              if (l != null) throw Error(vt(91));
              break;
            default:
              tn(n, t, r, l, e, null);
          }
      kD(n, i, a, s), Q0(n);
      return;
    case "option":
      for (c in e)
        if (e.hasOwnProperty(c) && (i = e[c], i != null))
          switch (c) {
            case "selected":
              n.selected = i && typeof i != "function" && typeof i != "symbol";
              break;
            default:
              tn(n, t, c, i, e, null);
          }
      return;
    case "dialog":
      Ce("beforetoggle", n), Ce("toggle", n), Ce("cancel", n), Ce("close", n);
      break;
    case "iframe":
    case "object":
      Ce("load", n);
      break;
    case "video":
    case "audio":
      for (i = 0; i < Sp.length; i++)
        Ce(Sp[i], n);
      break;
    case "image":
      Ce("error", n), Ce("load", n);
      break;
    case "details":
      Ce("toggle", n);
      break;
    case "embed":
    case "source":
    case "link":
      Ce("error", n), Ce("load", n);
    case "area":
    case "base":
    case "br":
    case "col":
    case "hr":
    case "keygen":
    case "meta":
    case "param":
    case "track":
    case "wbr":
    case "menuitem":
      for (f in e)
        if (e.hasOwnProperty(f) && (i = e[f], i != null))
          switch (f) {
            case "children":
            case "dangerouslySetInnerHTML":
              throw Error(vt(137, t));
            default:
              tn(n, t, f, i, e, null);
          }
      return;
    default:
      if (Lb(t)) {
        for (d in e)
          e.hasOwnProperty(d) && (i = e[d], i !== void 0 && SM(
            n,
            t,
            d,
            i,
            e,
            void 0
          ));
        return;
      }
  }
  for (l in e)
    e.hasOwnProperty(l) && (i = e[l], i != null && tn(n, t, l, i, e, null));
}
function TH(n, t, e, i) {
  switch (t) {
    case "div":
    case "span":
    case "svg":
    case "path":
    case "a":
    case "g":
    case "p":
    case "li":
      break;
    case "input":
      var a = null, s = null, r = null, l = null, c = null, f = null, d = null;
      for (g in e) {
        var p = e[g];
        if (e.hasOwnProperty(g) && p != null)
          switch (g) {
            case "checked":
              break;
            case "value":
              break;
            case "defaultValue":
              c = p;
            default:
              i.hasOwnProperty(g) || tn(n, t, g, null, i, p);
          }
      }
      for (var m in i) {
        var g = i[m];
        if (p = e[m], i.hasOwnProperty(m) && (g != null || p != null))
          switch (m) {
            case "type":
              s = g;
              break;
            case "name":
              a = g;
              break;
            case "checked":
              f = g;
              break;
            case "defaultChecked":
              d = g;
              break;
            case "value":
              r = g;
              break;
            case "defaultValue":
              l = g;
              break;
            case "children":
            case "dangerouslySetInnerHTML":
              if (g != null)
                throw Error(vt(137, t));
              break;
            default:
              g !== p && tn(
                n,
                t,
                m,
                g,
                i,
                p
              );
          }
      }
      Y1(
        n,
        r,
        l,
        c,
        f,
        d,
        s,
        a
      );
      return;
    case "select":
      g = r = l = m = null;
      for (s in e)
        if (c = e[s], e.hasOwnProperty(s) && c != null)
          switch (s) {
            case "value":
              break;
            case "multiple":
              g = c;
            default:
              i.hasOwnProperty(s) || tn(
                n,
                t,
                s,
                null,
                i,
                c
              );
          }
      for (a in i)
        if (s = i[a], c = e[a], i.hasOwnProperty(a) && (s != null || c != null))
          switch (a) {
            case "value":
              m = s;
              break;
            case "defaultValue":
              l = s;
              break;
            case "multiple":
              r = s;
            default:
              s !== c && tn(
                n,
                t,
                a,
                s,
                i,
                c
              );
          }
      t = l, e = r, i = g, m != null ? Rf(n, !!e, m, !1) : !!i != !!e && (t != null ? Rf(n, !!e, t, !0) : Rf(n, !!e, e ? [] : "", !1));
      return;
    case "textarea":
      g = m = null;
      for (l in e)
        if (a = e[l], e.hasOwnProperty(l) && a != null && !i.hasOwnProperty(l))
          switch (l) {
            case "value":
              break;
            case "children":
              break;
            default:
              tn(n, t, l, null, i, a);
          }
      for (r in i)
        if (a = i[r], s = e[r], i.hasOwnProperty(r) && (a != null || s != null))
          switch (r) {
            case "value":
              m = a;
              break;
            case "defaultValue":
              g = a;
              break;
            case "children":
              break;
            case "dangerouslySetInnerHTML":
              if (a != null) throw Error(vt(91));
              break;
            default:
              a !== s && tn(n, t, r, a, i, s);
          }
      YD(n, m, g);
      return;
    case "option":
      for (var y in e)
        if (m = e[y], e.hasOwnProperty(y) && m != null && !i.hasOwnProperty(y))
          switch (y) {
            case "selected":
              n.selected = !1;
              break;
            default:
              tn(
                n,
                t,
                y,
                null,
                i,
                m
              );
          }
      for (c in i)
        if (m = i[c], g = e[c], i.hasOwnProperty(c) && m !== g && (m != null || g != null))
          switch (c) {
            case "selected":
              n.selected = m && typeof m != "function" && typeof m != "symbol";
              break;
            default:
              tn(
                n,
                t,
                c,
                m,
                i,
                g
              );
          }
      return;
    case "img":
    case "link":
    case "area":
    case "base":
    case "br":
    case "col":
    case "embed":
    case "hr":
    case "keygen":
    case "meta":
    case "param":
    case "source":
    case "track":
    case "wbr":
    case "menuitem":
      for (var x in e)
        m = e[x], e.hasOwnProperty(x) && m != null && !i.hasOwnProperty(x) && tn(n, t, x, null, i, m);
      for (f in i)
        if (m = i[f], g = e[f], i.hasOwnProperty(f) && m !== g && (m != null || g != null))
          switch (f) {
            case "children":
            case "dangerouslySetInnerHTML":
              if (m != null)
                throw Error(vt(137, t));
              break;
            default:
              tn(
                n,
                t,
                f,
                m,
                i,
                g
              );
          }
      return;
    default:
      if (Lb(t)) {
        for (var M in e)
          m = e[M], e.hasOwnProperty(M) && m !== void 0 && !i.hasOwnProperty(M) && SM(
            n,
            t,
            M,
            void 0,
            i,
            m
          );
        for (d in i)
          m = i[d], g = e[d], !i.hasOwnProperty(d) || m === g || m === void 0 && g === void 0 || SM(
            n,
            t,
            d,
            m,
            i,
            g
          );
        return;
      }
  }
  for (var v in e)
    m = e[v], e.hasOwnProperty(v) && m != null && !i.hasOwnProperty(v) && tn(n, t, v, null, i, m);
  for (p in i)
    m = i[p], g = e[p], !i.hasOwnProperty(p) || m === g || m == null && g == null || tn(n, t, p, m, i, g);
}
var MM = null, bM = null;
function gv(n) {
  return n.nodeType === 9 ? n : n.ownerDocument;
}
function iC(n) {
  switch (n) {
    case "http://www.w3.org/2000/svg":
      return 1;
    case "http://www.w3.org/1998/Math/MathML":
      return 2;
    default:
      return 0;
  }
}
function ZO(n, t) {
  if (n === 0)
    switch (t) {
      case "svg":
        return 1;
      case "math":
        return 2;
      default:
        return 0;
    }
  return n === 1 && t === "foreignObject" ? 0 : n;
}
function EM(n, t) {
  return n === "textarea" || n === "noscript" || typeof t.children == "string" || typeof t.children == "number" || typeof t.children == "bigint" || typeof t.dangerouslySetInnerHTML == "object" && t.dangerouslySetInnerHTML !== null && t.dangerouslySetInnerHTML.__html != null;
}
var CS = null;
function AH() {
  var n = window.event;
  return n && n.type === "popstate" ? n === CS ? !1 : (CS = n, !0) : (CS = null, !1);
}
var jO = typeof setTimeout == "function" ? setTimeout : void 0, RH = typeof clearTimeout == "function" ? clearTimeout : void 0, aC = typeof Promise == "function" ? Promise : void 0, CH = typeof queueMicrotask == "function" ? queueMicrotask : typeof aC < "u" ? function(n) {
  return aC.resolve(null).then(n).catch(wH);
} : jO;
function wH(n) {
  setTimeout(function() {
    throw n;
  });
}
function xl(n) {
  return n === "head";
}
function sC(n, t) {
  var e = t, i = 0, a = 0;
  do {
    var s = e.nextSibling;
    if (n.removeChild(e), s && s.nodeType === 8)
      if (e = s.data, e === "/$") {
        if (0 < i && 8 > i) {
          e = i;
          var r = n.ownerDocument;
          if (e & 1 && Jd(r.documentElement), e & 2 && Jd(r.body), e & 4)
            for (e = r.head, Jd(e), r = e.firstChild; r; ) {
              var l = r.nextSibling, c = r.nodeName;
              r[im] || c === "SCRIPT" || c === "STYLE" || c === "LINK" && r.rel.toLowerCase() === "stylesheet" || e.removeChild(r), r = l;
            }
        }
        if (a === 0) {
          n.removeChild(s), Rp(t);
          return;
        }
        a--;
      } else
        e === "$" || e === "$?" || e === "$!" ? a++ : i = e.charCodeAt(0) - 48;
    else i = 0;
    e = s;
  } while (e);
  Rp(t);
}
function TM(n) {
  var t = n.firstChild;
  for (t && t.nodeType === 10 && (t = t.nextSibling); t; ) {
    var e = t;
    switch (t = t.nextSibling, e.nodeName) {
      case "HTML":
      case "HEAD":
      case "BODY":
        TM(e), Nb(e);
        continue;
      case "SCRIPT":
      case "STYLE":
        continue;
      case "LINK":
        if (e.rel.toLowerCase() === "stylesheet") continue;
    }
    n.removeChild(e);
  }
}
function DH(n, t, e, i) {
  for (; n.nodeType === 1; ) {
    var a = e;
    if (n.nodeName.toLowerCase() !== t.toLowerCase()) {
      if (!i && (n.nodeName !== "INPUT" || n.type !== "hidden"))
        break;
    } else if (i) {
      if (!n[im])
        switch (t) {
          case "meta":
            if (!n.hasAttribute("itemprop")) break;
            return n;
          case "link":
            if (s = n.getAttribute("rel"), s === "stylesheet" && n.hasAttribute("data-precedence"))
              break;
            if (s !== a.rel || n.getAttribute("href") !== (a.href == null || a.href === "" ? null : a.href) || n.getAttribute("crossorigin") !== (a.crossOrigin == null ? null : a.crossOrigin) || n.getAttribute("title") !== (a.title == null ? null : a.title))
              break;
            return n;
          case "style":
            if (n.hasAttribute("data-precedence")) break;
            return n;
          case "script":
            if (s = n.getAttribute("src"), (s !== (a.src == null ? null : a.src) || n.getAttribute("type") !== (a.type == null ? null : a.type) || n.getAttribute("crossorigin") !== (a.crossOrigin == null ? null : a.crossOrigin)) && s && n.hasAttribute("async") && !n.hasAttribute("itemprop"))
              break;
            return n;
          default:
            return n;
        }
    } else if (t === "input" && n.type === "hidden") {
      var s = a.name == null ? null : "" + a.name;
      if (a.type === "hidden" && n.getAttribute("name") === s)
        return n;
    } else return n;
    if (n = Hs(n.nextSibling), n === null) break;
  }
  return null;
}
function UH(n, t, e) {
  if (t === "") return null;
  for (; n.nodeType !== 3; )
    if ((n.nodeType !== 1 || n.nodeName !== "INPUT" || n.type !== "hidden") && !e || (n = Hs(n.nextSibling), n === null)) return null;
  return n;
}
function AM(n) {
  return n.data === "$!" || n.data === "$?" && n.ownerDocument.readyState === "complete";
}
function OH(n, t) {
  var e = n.ownerDocument;
  if (n.data !== "$?" || e.readyState === "complete")
    t();
  else {
    var i = function() {
      t(), e.removeEventListener("DOMContentLoaded", i);
    };
    e.addEventListener("DOMContentLoaded", i), n._reactRetry = i;
  }
}
function Hs(n) {
  for (; n != null; n = n.nextSibling) {
    var t = n.nodeType;
    if (t === 1 || t === 3) break;
    if (t === 8) {
      if (t = n.data, t === "$" || t === "$!" || t === "$?" || t === "F!" || t === "F")
        break;
      if (t === "/$") return null;
    }
  }
  return n;
}
var RM = null;
function rC(n) {
  n = n.previousSibling;
  for (var t = 0; n; ) {
    if (n.nodeType === 8) {
      var e = n.data;
      if (e === "$" || e === "$!" || e === "$?") {
        if (t === 0) return n;
        t--;
      } else e === "/$" && t++;
    }
    n = n.previousSibling;
  }
  return null;
}
function QO(n, t, e) {
  switch (t = gv(e), n) {
    case "html":
      if (n = t.documentElement, !n) throw Error(vt(452));
      return n;
    case "head":
      if (n = t.head, !n) throw Error(vt(453));
      return n;
    case "body":
      if (n = t.body, !n) throw Error(vt(454));
      return n;
    default:
      throw Error(vt(451));
  }
}
function Jd(n) {
  for (var t = n.attributes; t.length; )
    n.removeAttributeNode(t[0]);
  Nb(n);
}
var xs = /* @__PURE__ */ new Map(), oC = /* @__PURE__ */ new Set();
function vv(n) {
  return typeof n.getRootNode == "function" ? n.getRootNode() : n.nodeType === 9 ? n : n.ownerDocument;
}
var co = We.d;
We.d = {
  f: NH,
  r: LH,
  D: zH,
  C: BH,
  L: PH,
  m: IH,
  X: FH,
  S: HH,
  M: VH
};
function NH() {
  var n = co.f(), t = L_();
  return n || t;
}
function LH(n) {
  var t = gh(n);
  t !== null && t.tag === 5 && t.type === "form" ? XU(t) : co.r(n);
}
var yh = typeof document > "u" ? null : document;
function KO(n, t, e) {
  var i = yh;
  if (i && typeof t == "string" && t) {
    var a = hs(t);
    a = 'link[rel="' + n + '"][href="' + a + '"]', typeof e == "string" && (a += '[crossorigin="' + e + '"]'), oC.has(a) || (oC.add(a), n = { rel: n, crossOrigin: e, href: t }, i.querySelector(a) === null && (t = i.createElement("link"), _i(t, "link", n), oi(t), i.head.appendChild(t)));
  }
}
function zH(n) {
  co.D(n), KO("dns-prefetch", n, null);
}
function BH(n, t) {
  co.C(n, t), KO("preconnect", n, t);
}
function PH(n, t, e) {
  co.L(n, t, e);
  var i = yh;
  if (i && n && t) {
    var a = 'link[rel="preload"][as="' + hs(t) + '"]';
    t === "image" && e && e.imageSrcSet ? (a += '[imagesrcset="' + hs(
      e.imageSrcSet
    ) + '"]', typeof e.imageSizes == "string" && (a += '[imagesizes="' + hs(
      e.imageSizes
    ) + '"]')) : a += '[href="' + hs(n) + '"]';
    var s = a;
    switch (t) {
      case "style":
        s = Qf(n);
        break;
      case "script":
        s = xh(n);
    }
    xs.has(s) || (n = mn(
      {
        rel: "preload",
        href: t === "image" && e && e.imageSrcSet ? void 0 : n,
        as: t
      },
      e
    ), xs.set(s, n), i.querySelector(a) !== null || t === "style" && i.querySelector(dm(s)) || t === "script" && i.querySelector(pm(s)) || (t = i.createElement("link"), _i(t, "link", n), oi(t), i.head.appendChild(t)));
  }
}
function IH(n, t) {
  co.m(n, t);
  var e = yh;
  if (e && n) {
    var i = t && typeof t.as == "string" ? t.as : "script", a = 'link[rel="modulepreload"][as="' + hs(i) + '"][href="' + hs(n) + '"]', s = a;
    switch (i) {
      case "audioworklet":
      case "paintworklet":
      case "serviceworker":
      case "sharedworker":
      case "worker":
      case "script":
        s = xh(n);
    }
    if (!xs.has(s) && (n = mn({ rel: "modulepreload", href: n }, t), xs.set(s, n), e.querySelector(a) === null)) {
      switch (i) {
        case "audioworklet":
        case "paintworklet":
        case "serviceworker":
        case "sharedworker":
        case "worker":
        case "script":
          if (e.querySelector(pm(s)))
            return;
      }
      i = e.createElement("link"), _i(i, "link", n), oi(i), e.head.appendChild(i);
    }
  }
}
function HH(n, t, e) {
  co.S(n, t, e);
  var i = yh;
  if (i && n) {
    var a = Af(i).hoistableStyles, s = Qf(n);
    t = t || "default";
    var r = a.get(s);
    if (!r) {
      var l = { loading: 0, preload: null };
      if (r = i.querySelector(
        dm(s)
      ))
        l.loading = 5;
      else {
        n = mn(
          { rel: "stylesheet", href: n, "data-precedence": t },
          e
        ), (e = xs.get(s)) && gE(n, e);
        var c = r = i.createElement("link");
        oi(c), _i(c, "link", n), c._p = new Promise(function(f, d) {
          c.onload = f, c.onerror = d;
        }), c.addEventListener("load", function() {
          l.loading |= 1;
        }), c.addEventListener("error", function() {
          l.loading |= 2;
        }), l.loading |= 4, z0(r, t, i);
      }
      r = {
        type: "stylesheet",
        instance: r,
        count: 1,
        state: l
      }, a.set(s, r);
    }
  }
}
function FH(n, t) {
  co.X(n, t);
  var e = yh;
  if (e && n) {
    var i = Af(e).hoistableScripts, a = xh(n), s = i.get(a);
    s || (s = e.querySelector(pm(a)), s || (n = mn({ src: n, async: !0 }, t), (t = xs.get(a)) && vE(n, t), s = e.createElement("script"), oi(s), _i(s, "link", n), e.head.appendChild(s)), s = {
      type: "script",
      instance: s,
      count: 1,
      state: null
    }, i.set(a, s));
  }
}
function VH(n, t) {
  co.M(n, t);
  var e = yh;
  if (e && n) {
    var i = Af(e).hoistableScripts, a = xh(n), s = i.get(a);
    s || (s = e.querySelector(pm(a)), s || (n = mn({ src: n, async: !0, type: "module" }, t), (t = xs.get(a)) && vE(n, t), s = e.createElement("script"), oi(s), _i(s, "link", n), e.head.appendChild(s)), s = {
      type: "script",
      instance: s,
      count: 1,
      state: null
    }, i.set(a, s));
  }
}
function lC(n, t, e, i) {
  var a = (a = el.current) ? vv(a) : null;
  if (!a) throw Error(vt(446));
  switch (n) {
    case "meta":
    case "title":
      return null;
    case "style":
      return typeof e.precedence == "string" && typeof e.href == "string" ? (t = Qf(e.href), e = Af(
        a
      ).hoistableStyles, i = e.get(t), i || (i = {
        type: "style",
        instance: null,
        count: 0,
        state: null
      }, e.set(t, i)), i) : { type: "void", instance: null, count: 0, state: null };
    case "link":
      if (e.rel === "stylesheet" && typeof e.href == "string" && typeof e.precedence == "string") {
        n = Qf(e.href);
        var s = Af(
          a
        ).hoistableStyles, r = s.get(n);
        if (r || (a = a.ownerDocument || a, r = {
          type: "stylesheet",
          instance: null,
          count: 0,
          state: { loading: 0, preload: null }
        }, s.set(n, r), (s = a.querySelector(
          dm(n)
        )) && !s._p && (r.instance = s, r.state.loading = 5), xs.has(n) || (e = {
          rel: "preload",
          as: "style",
          href: e.href,
          crossOrigin: e.crossOrigin,
          integrity: e.integrity,
          media: e.media,
          hrefLang: e.hrefLang,
          referrerPolicy: e.referrerPolicy
        }, xs.set(n, e), s || GH(
          a,
          n,
          e,
          r.state
        ))), t && i === null)
          throw Error(vt(528, ""));
        return r;
      }
      if (t && i !== null)
        throw Error(vt(529, ""));
      return null;
    case "script":
      return t = e.async, e = e.src, typeof e == "string" && t && typeof t != "function" && typeof t != "symbol" ? (t = xh(e), e = Af(
        a
      ).hoistableScripts, i = e.get(t), i || (i = {
        type: "script",
        instance: null,
        count: 0,
        state: null
      }, e.set(t, i)), i) : { type: "void", instance: null, count: 0, state: null };
    default:
      throw Error(vt(444, n));
  }
}
function Qf(n) {
  return 'href="' + hs(n) + '"';
}
function dm(n) {
  return 'link[rel="stylesheet"][' + n + "]";
}
function JO(n) {
  return mn({}, n, {
    "data-precedence": n.precedence,
    precedence: null
  });
}
function GH(n, t, e, i) {
  n.querySelector('link[rel="preload"][as="style"][' + t + "]") ? i.loading = 1 : (t = n.createElement("link"), i.preload = t, t.addEventListener("load", function() {
    return i.loading |= 1;
  }), t.addEventListener("error", function() {
    return i.loading |= 2;
  }), _i(t, "link", e), oi(t), n.head.appendChild(t));
}
function xh(n) {
  return '[src="' + hs(n) + '"]';
}
function pm(n) {
  return "script[async]" + n;
}
function uC(n, t, e) {
  if (t.count++, t.instance === null)
    switch (t.type) {
      case "style":
        var i = n.querySelector(
          'style[data-href~="' + hs(e.href) + '"]'
        );
        if (i)
          return t.instance = i, oi(i), i;
        var a = mn({}, e, {
          "data-href": e.href,
          "data-precedence": e.precedence,
          href: null,
          precedence: null
        });
        return i = (n.ownerDocument || n).createElement(
          "style"
        ), oi(i), _i(i, "style", a), z0(i, e.precedence, n), t.instance = i;
      case "stylesheet":
        a = Qf(e.href);
        var s = n.querySelector(
          dm(a)
        );
        if (s)
          return t.state.loading |= 4, t.instance = s, oi(s), s;
        i = JO(e), (a = xs.get(a)) && gE(i, a), s = (n.ownerDocument || n).createElement("link"), oi(s);
        var r = s;
        return r._p = new Promise(function(l, c) {
          r.onload = l, r.onerror = c;
        }), _i(s, "link", i), t.state.loading |= 4, z0(s, e.precedence, n), t.instance = s;
      case "script":
        return s = xh(e.src), (a = n.querySelector(
          pm(s)
        )) ? (t.instance = a, oi(a), a) : (i = e, (a = xs.get(s)) && (i = mn({}, e), vE(i, a)), n = n.ownerDocument || n, a = n.createElement("script"), oi(a), _i(a, "link", i), n.head.appendChild(a), t.instance = a);
      case "void":
        return null;
      default:
        throw Error(vt(443, t.type));
    }
  else
    t.type === "stylesheet" && !(t.state.loading & 4) && (i = t.instance, t.state.loading |= 4, z0(i, e.precedence, n));
  return t.instance;
}
function z0(n, t, e) {
  for (var i = e.querySelectorAll(
    'link[rel="stylesheet"][data-precedence],style[data-precedence]'
  ), a = i.length ? i[i.length - 1] : null, s = a, r = 0; r < i.length; r++) {
    var l = i[r];
    if (l.dataset.precedence === t) s = l;
    else if (s !== a) break;
  }
  s ? s.parentNode.insertBefore(n, s.nextSibling) : (t = e.nodeType === 9 ? e.head : e, t.insertBefore(n, t.firstChild));
}
function gE(n, t) {
  n.crossOrigin == null && (n.crossOrigin = t.crossOrigin), n.referrerPolicy == null && (n.referrerPolicy = t.referrerPolicy), n.title == null && (n.title = t.title);
}
function vE(n, t) {
  n.crossOrigin == null && (n.crossOrigin = t.crossOrigin), n.referrerPolicy == null && (n.referrerPolicy = t.referrerPolicy), n.integrity == null && (n.integrity = t.integrity);
}
var B0 = null;
function cC(n, t, e) {
  if (B0 === null) {
    var i = /* @__PURE__ */ new Map(), a = B0 = /* @__PURE__ */ new Map();
    a.set(e, i);
  } else
    a = B0, i = a.get(e), i || (i = /* @__PURE__ */ new Map(), a.set(e, i));
  if (i.has(n)) return i;
  for (i.set(n, null), e = e.getElementsByTagName(n), a = 0; a < e.length; a++) {
    var s = e[a];
    if (!(s[im] || s[Oi] || n === "link" && s.getAttribute("rel") === "stylesheet") && s.namespaceURI !== "http://www.w3.org/2000/svg") {
      var r = s.getAttribute(t) || "";
      r = n + r;
      var l = i.get(r);
      l ? l.push(s) : i.set(r, [s]);
    }
  }
  return i;
}
function fC(n, t, e) {
  n = n.ownerDocument || n, n.head.insertBefore(
    e,
    t === "title" ? n.querySelector("head > title") : null
  );
}
function XH(n, t, e) {
  if (e === 1 || t.itemProp != null) return !1;
  switch (n) {
    case "meta":
    case "title":
      return !0;
    case "style":
      if (typeof t.precedence != "string" || typeof t.href != "string" || t.href === "")
        break;
      return !0;
    case "link":
      if (typeof t.rel != "string" || typeof t.href != "string" || t.href === "" || t.onLoad || t.onError)
        break;
      switch (t.rel) {
        case "stylesheet":
          return n = t.disabled, typeof t.precedence == "string" && n == null;
        default:
          return !0;
      }
    case "script":
      if (t.async && typeof t.async != "function" && typeof t.async != "symbol" && !t.onLoad && !t.onError && t.src && typeof t.src == "string")
        return !0;
  }
  return !1;
}
function $O(n) {
  return !(n.type === "stylesheet" && !(n.state.loading & 3));
}
var bp = null;
function qH() {
}
function YH(n, t, e) {
  if (bp === null) throw Error(vt(475));
  var i = bp;
  if (t.type === "stylesheet" && (typeof e.media != "string" || matchMedia(e.media).matches !== !1) && !(t.state.loading & 4)) {
    if (t.instance === null) {
      var a = Qf(e.href), s = n.querySelector(
        dm(a)
      );
      if (s) {
        n = s._p, n !== null && typeof n == "object" && typeof n.then == "function" && (i.count++, i = _v.bind(i), n.then(i, i)), t.state.loading |= 4, t.instance = s, oi(s);
        return;
      }
      s = n.ownerDocument || n, e = JO(e), (a = xs.get(a)) && gE(e, a), s = s.createElement("link"), oi(s);
      var r = s;
      r._p = new Promise(function(l, c) {
        r.onload = l, r.onerror = c;
      }), _i(s, "link", e), t.instance = s;
    }
    i.stylesheets === null && (i.stylesheets = /* @__PURE__ */ new Map()), i.stylesheets.set(t, n), (n = t.state.preload) && !(t.state.loading & 3) && (i.count++, t = _v.bind(i), n.addEventListener("load", t), n.addEventListener("error", t));
  }
}
function kH() {
  if (bp === null) throw Error(vt(475));
  var n = bp;
  return n.stylesheets && n.count === 0 && CM(n, n.stylesheets), 0 < n.count ? function(t) {
    var e = setTimeout(function() {
      if (n.stylesheets && CM(n, n.stylesheets), n.unsuspend) {
        var i = n.unsuspend;
        n.unsuspend = null, i();
      }
    }, 6e4);
    return n.unsuspend = t, function() {
      n.unsuspend = null, clearTimeout(e);
    };
  } : null;
}
function _v() {
  if (this.count--, this.count === 0) {
    if (this.stylesheets) CM(this, this.stylesheets);
    else if (this.unsuspend) {
      var n = this.unsuspend;
      this.unsuspend = null, n();
    }
  }
}
var yv = null;
function CM(n, t) {
  n.stylesheets = null, n.unsuspend !== null && (n.count++, yv = /* @__PURE__ */ new Map(), t.forEach(WH, n), yv = null, _v.call(n));
}
function WH(n, t) {
  if (!(t.state.loading & 4)) {
    var e = yv.get(n);
    if (e) var i = e.get(null);
    else {
      e = /* @__PURE__ */ new Map(), yv.set(n, e);
      for (var a = n.querySelectorAll(
        "link[data-precedence],style[data-precedence]"
      ), s = 0; s < a.length; s++) {
        var r = a[s];
        (r.nodeName === "LINK" || r.getAttribute("media") !== "not all") && (e.set(r.dataset.precedence, r), i = r);
      }
      i && e.set(null, i);
    }
    a = t.instance, r = a.getAttribute("data-precedence"), s = e.get(r) || i, s === i && e.set(null, a), e.set(r, a), this.count++, i = _v.bind(this), a.addEventListener("load", i), a.addEventListener("error", i), s ? s.parentNode.insertBefore(a, s.nextSibling) : (n = n.nodeType === 9 ? n.head : n, n.insertBefore(a, n.firstChild)), t.state.loading |= 4;
  }
}
var Ep = {
  $$typeof: qr,
  Provider: null,
  Consumer: null,
  _currentValue: Eu,
  _currentValue2: Eu,
  _threadCount: 0
};
function ZH(n, t, e, i, a, s, r, l) {
  this.tag = 1, this.containerInfo = n, this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = Qx(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Qx(0), this.hiddenUpdates = Qx(null), this.identifierPrefix = i, this.onUncaughtError = a, this.onCaughtError = s, this.onRecoverableError = r, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = l, this.incompleteTransitions = /* @__PURE__ */ new Map();
}
function tN(n, t, e, i, a, s, r, l, c, f, d, p) {
  return n = new ZH(
    n,
    t,
    e,
    r,
    l,
    c,
    f,
    p
  ), t = 1, s === !0 && (t |= 24), s = Pa(3, null, null, t), n.current = s, s.stateNode = n, t = Yb(), t.refCount++, n.pooledCache = t, t.refCount++, s.memoizedState = {
    element: i,
    isDehydrated: e,
    cache: t
  }, Wb(s), n;
}
function eN(n) {
  return n ? (n = gf, n) : gf;
}
function nN(n, t, e, i, a, s) {
  a = eN(a), i.context === null ? i.context = a : i.pendingContext = a, i = nl(t), i.payload = { element: e }, s = s === void 0 ? null : s, s !== null && (i.callback = s), e = il(n, i, t), e !== null && (Xa(e, n, t), qd(e, n, t));
}
function hC(n, t) {
  if (n = n.memoizedState, n !== null && n.dehydrated !== null) {
    var e = n.retryLane;
    n.retryLane = e !== 0 && e < t ? e : t;
  }
}
function _E(n, t) {
  hC(n, t), (n = n.alternate) && hC(n, t);
}
function iN(n) {
  if (n.tag === 13) {
    var t = vh(n, 67108864);
    t !== null && Xa(t, n, 67108864), _E(n, 67108864);
  }
}
var xv = !0;
function jH(n, t, e, i) {
  var a = ue.T;
  ue.T = null;
  var s = We.p;
  try {
    We.p = 2, yE(n, t, e, i);
  } finally {
    We.p = s, ue.T = a;
  }
}
function QH(n, t, e, i) {
  var a = ue.T;
  ue.T = null;
  var s = We.p;
  try {
    We.p = 8, yE(n, t, e, i);
  } finally {
    We.p = s, ue.T = a;
  }
}
function yE(n, t, e, i) {
  if (xv) {
    var a = wM(i);
    if (a === null)
      RS(
        n,
        t,
        i,
        Sv,
        e
      ), dC(n, i);
    else if (JH(
      a,
      n,
      t,
      e,
      i
    ))
      i.stopPropagation();
    else if (dC(n, i), t & 4 && -1 < KH.indexOf(n)) {
      for (; a !== null; ) {
        var s = gh(a);
        if (s !== null)
          switch (s.tag) {
            case 3:
              if (s = s.stateNode, s.current.memoizedState.isDehydrated) {
                var r = cu(s.pendingLanes);
                if (r !== 0) {
                  var l = s;
                  for (l.pendingLanes |= 2, l.entangledLanes |= 2; r; ) {
                    var c = 1 << 31 - Va(r);
                    l.entanglements[1] |= c, r &= ~c;
                  }
                  mr(s), !(Ke & 6) && (fv = or() + 500, hm(0));
                }
              }
              break;
            case 13:
              l = vh(s, 2), l !== null && Xa(l, s, 2), L_(), _E(s, 2);
          }
        if (s = wM(i), s === null && RS(
          n,
          t,
          i,
          Sv,
          e
        ), s === a) break;
        a = s;
      }
      a !== null && i.stopPropagation();
    } else
      RS(
        n,
        t,
        i,
        null,
        e
      );
  }
}
function wM(n) {
  return n = zb(n), xE(n);
}
var Sv = null;
function xE(n) {
  if (Sv = null, n = cf(n), n !== null) {
    var t = $p(n);
    if (t === null) n = null;
    else {
      var e = t.tag;
      if (e === 13) {
        if (n = CD(t), n !== null) return n;
        n = null;
      } else if (e === 3) {
        if (t.stateNode.current.memoizedState.isDehydrated)
          return t.tag === 3 ? t.stateNode.containerInfo : null;
        n = null;
      } else t !== n && (n = null);
    }
  }
  return Sv = n, null;
}
function aN(n) {
  switch (n) {
    case "beforetoggle":
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "toggle":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 2;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 8;
    case "message":
      switch (BI()) {
        case OD:
          return 2;
        case ND:
          return 8;
        case j0:
        case PI:
          return 32;
        case LD:
          return 268435456;
        default:
          return 32;
      }
    default:
      return 32;
  }
}
var DM = !1, rl = null, ol = null, ll = null, Tp = /* @__PURE__ */ new Map(), Ap = /* @__PURE__ */ new Map(), qo = [], KH = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
  " "
);
function dC(n, t) {
  switch (n) {
    case "focusin":
    case "focusout":
      rl = null;
      break;
    case "dragenter":
    case "dragleave":
      ol = null;
      break;
    case "mouseover":
    case "mouseout":
      ll = null;
      break;
    case "pointerover":
    case "pointerout":
      Tp.delete(t.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Ap.delete(t.pointerId);
  }
}
function ud(n, t, e, i, a, s) {
  return n === null || n.nativeEvent !== s ? (n = {
    blockedOn: t,
    domEventName: e,
    eventSystemFlags: i,
    nativeEvent: s,
    targetContainers: [a]
  }, t !== null && (t = gh(t), t !== null && iN(t)), n) : (n.eventSystemFlags |= i, t = n.targetContainers, a !== null && t.indexOf(a) === -1 && t.push(a), n);
}
function JH(n, t, e, i, a) {
  switch (t) {
    case "focusin":
      return rl = ud(
        rl,
        n,
        t,
        e,
        i,
        a
      ), !0;
    case "dragenter":
      return ol = ud(
        ol,
        n,
        t,
        e,
        i,
        a
      ), !0;
    case "mouseover":
      return ll = ud(
        ll,
        n,
        t,
        e,
        i,
        a
      ), !0;
    case "pointerover":
      var s = a.pointerId;
      return Tp.set(
        s,
        ud(
          Tp.get(s) || null,
          n,
          t,
          e,
          i,
          a
        )
      ), !0;
    case "gotpointercapture":
      return s = a.pointerId, Ap.set(
        s,
        ud(
          Ap.get(s) || null,
          n,
          t,
          e,
          i,
          a
        )
      ), !0;
  }
  return !1;
}
function sN(n) {
  var t = cf(n.target);
  if (t !== null) {
    var e = $p(t);
    if (e !== null) {
      if (t = e.tag, t === 13) {
        if (t = CD(e), t !== null) {
          n.blockedOn = t, YI(n.priority, function() {
            if (e.tag === 13) {
              var i = Ga();
              i = Ub(i);
              var a = vh(e, i);
              a !== null && Xa(a, e, i), _E(e, i);
            }
          });
          return;
        }
      } else if (t === 3 && e.stateNode.current.memoizedState.isDehydrated) {
        n.blockedOn = e.tag === 3 ? e.stateNode.containerInfo : null;
        return;
      }
    }
  }
  n.blockedOn = null;
}
function P0(n) {
  if (n.blockedOn !== null) return !1;
  for (var t = n.targetContainers; 0 < t.length; ) {
    var e = wM(n.nativeEvent);
    if (e === null) {
      e = n.nativeEvent;
      var i = new e.constructor(
        e.type,
        e
      );
      W1 = i, e.target.dispatchEvent(i), W1 = null;
    } else
      return t = gh(e), t !== null && iN(t), n.blockedOn = e, !1;
    t.shift();
  }
  return !0;
}
function pC(n, t, e) {
  P0(n) && e.delete(t);
}
function $H() {
  DM = !1, rl !== null && P0(rl) && (rl = null), ol !== null && P0(ol) && (ol = null), ll !== null && P0(ll) && (ll = null), Tp.forEach(pC), Ap.forEach(pC);
}
function Tg(n, t) {
  n.blockedOn === t && (n.blockedOn = null, DM || (DM = !0, $n.unstable_scheduleCallback(
    $n.unstable_NormalPriority,
    $H
  )));
}
var Ag = null;
function mC(n) {
  Ag !== n && (Ag = n, $n.unstable_scheduleCallback(
    $n.unstable_NormalPriority,
    function() {
      Ag === n && (Ag = null);
      for (var t = 0; t < n.length; t += 3) {
        var e = n[t], i = n[t + 1], a = n[t + 2];
        if (typeof i != "function") {
          if (xE(i || e) === null)
            continue;
          break;
        }
        var s = gh(e);
        s !== null && (n.splice(t, 3), t -= 3, uM(
          s,
          {
            pending: !0,
            data: a,
            method: e.method,
            action: i
          },
          i,
          a
        ));
      }
    }
  ));
}
function Rp(n) {
  function t(c) {
    return Tg(c, n);
  }
  rl !== null && Tg(rl, n), ol !== null && Tg(ol, n), ll !== null && Tg(ll, n), Tp.forEach(t), Ap.forEach(t);
  for (var e = 0; e < qo.length; e++) {
    var i = qo[e];
    i.blockedOn === n && (i.blockedOn = null);
  }
  for (; 0 < qo.length && (e = qo[0], e.blockedOn === null); )
    sN(e), e.blockedOn === null && qo.shift();
  if (e = (n.ownerDocument || n).$$reactFormReplay, e != null)
    for (i = 0; i < e.length; i += 3) {
      var a = e[i], s = e[i + 1], r = a[ga] || null;
      if (typeof s == "function")
        r || mC(e);
      else if (r) {
        var l = null;
        if (s && s.hasAttribute("formAction")) {
          if (a = s, r = s[ga] || null)
            l = r.formAction;
          else if (xE(a) !== null) continue;
        } else l = r.action;
        typeof l == "function" ? e[i + 1] = l : (e.splice(i, 3), i -= 3), mC(e);
      }
    }
}
function SE(n) {
  this._internalRoot = n;
}
I_.prototype.render = SE.prototype.render = function(n) {
  var t = this._internalRoot;
  if (t === null) throw Error(vt(409));
  var e = t.current, i = Ga();
  nN(e, i, n, t, null, null);
};
I_.prototype.unmount = SE.prototype.unmount = function() {
  var n = this._internalRoot;
  if (n !== null) {
    this._internalRoot = null;
    var t = n.containerInfo;
    nN(n.current, 2, null, n, null, null), L_(), t[mh] = null;
  }
};
function I_(n) {
  this._internalRoot = n;
}
I_.prototype.unstable_scheduleHydration = function(n) {
  if (n) {
    var t = HD();
    n = { blockedOn: null, target: n, priority: t };
    for (var e = 0; e < qo.length && t !== 0 && t < qo[e].priority; e++) ;
    qo.splice(e, 0, n), e === 0 && sN(n);
  }
};
var gC = AD.version;
if (gC !== "19.1.0")
  throw Error(
    vt(
      527,
      gC,
      "19.1.0"
    )
  );
We.findDOMNode = function(n) {
  var t = n._reactInternals;
  if (t === void 0)
    throw typeof n.render == "function" ? Error(vt(188)) : (n = Object.keys(n).join(","), Error(vt(268, n)));
  return n = wI(t), n = n !== null ? wD(n) : null, n = n === null ? null : n.stateNode, n;
};
var t6 = {
  bundleType: 0,
  version: "19.1.0",
  rendererPackageName: "react-dom",
  currentDispatcherRef: ue,
  reconcilerVersion: "19.1.0"
};
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") {
  var Rg = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!Rg.isDisabled && Rg.supportsFiber)
    try {
      tm = Rg.inject(
        t6
      ), Fa = Rg;
    } catch {
    }
}
M_.createRoot = function(n, t) {
  if (!RD(n)) throw Error(vt(299));
  var e = !1, i = "", a = tO, s = eO, r = nO, l = null;
  return t != null && (t.unstable_strictMode === !0 && (e = !0), t.identifierPrefix !== void 0 && (i = t.identifierPrefix), t.onUncaughtError !== void 0 && (a = t.onUncaughtError), t.onCaughtError !== void 0 && (s = t.onCaughtError), t.onRecoverableError !== void 0 && (r = t.onRecoverableError), t.unstable_transitionCallbacks !== void 0 && (l = t.unstable_transitionCallbacks)), t = tN(
    n,
    1,
    !1,
    null,
    null,
    e,
    i,
    a,
    s,
    r,
    l,
    null
  ), n[mh] = t.current, mE(n), new SE(t);
};
M_.hydrateRoot = function(n, t, e) {
  if (!RD(n)) throw Error(vt(299));
  var i = !1, a = "", s = tO, r = eO, l = nO, c = null, f = null;
  return e != null && (e.unstable_strictMode === !0 && (i = !0), e.identifierPrefix !== void 0 && (a = e.identifierPrefix), e.onUncaughtError !== void 0 && (s = e.onUncaughtError), e.onCaughtError !== void 0 && (r = e.onCaughtError), e.onRecoverableError !== void 0 && (l = e.onRecoverableError), e.unstable_transitionCallbacks !== void 0 && (c = e.unstable_transitionCallbacks), e.formState !== void 0 && (f = e.formState)), t = tN(
    n,
    1,
    !0,
    t,
    e ?? null,
    i,
    a,
    s,
    r,
    l,
    c,
    f
  ), t.context = eN(null), e = t.current, i = Ga(), i = Ub(i), a = nl(i), a.callback = null, il(e, a, i), e = i, t.current.lanes = e, nm(t, e), mr(t), n[mh] = t.current, mE(n), new I_(t);
};
M_.version = "19.1.0";
function rN() {
  if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(rN);
    } catch (n) {
      console.error(n);
    }
}
rN(), xD.exports = M_;
var e6 = xD.exports;
function Hr(n) {
  if (n === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return n;
}
function oN(n, t) {
  n.prototype = Object.create(t.prototype), n.prototype.constructor = n, n.__proto__ = t;
}
/*!
 * GSAP 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/
var qa = {
  autoSleep: 120,
  force3D: "auto",
  nullTargetWarn: 1,
  units: {
    lineHeight: ""
  }
}, Kf = {
  duration: 0.5,
  overwrite: !1,
  delay: 0
}, ME, yi, _n, ur = 1e8, Li = 1 / ur, UM = Math.PI * 2, n6 = UM / 4, i6 = 0, lN = Math.sqrt, a6 = Math.cos, s6 = Math.sin, fi = function(t) {
  return typeof t == "string";
}, Nn = function(t) {
  return typeof t == "function";
}, ao = function(t) {
  return typeof t == "number";
}, bE = function(t) {
  return typeof t > "u";
}, hr = function(t) {
  return typeof t == "object";
}, ha = function(t) {
  return t !== !1;
}, EE = function() {
  return typeof window < "u";
}, Cg = function(t) {
  return Nn(t) || fi(t);
}, uN = typeof ArrayBuffer == "function" && ArrayBuffer.isView || function() {
}, Bi = Array.isArray, OM = /(?:-?\.?\d|\.)+/gi, cN = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, xf = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g, wS = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, fN = /[+-]=-?[.\d]+/, hN = /[^,'"\[\]\s]+/gi, r6 = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i, En, $s, NM, TE, Wa = {}, Mv = {}, dN, pN = function(t) {
  return (Mv = Jf(t, Wa)) && va;
}, AE = function(t, e) {
  return console.warn("Invalid property", t, "set to", e, "Missing plugin? gsap.registerPlugin()");
}, Cp = function(t, e) {
  return !e && console.warn(t);
}, mN = function(t, e) {
  return t && (Wa[t] = e) && Mv && (Mv[t] = e) || Wa;
}, wp = function() {
  return 0;
}, o6 = {
  suppressEvents: !0,
  isStart: !0,
  kill: !1
}, I0 = {
  suppressEvents: !0,
  kill: !1
}, l6 = {
  suppressEvents: !0
}, RE = {}, ul = [], LM = {}, gN, Ba = {}, DS = {}, vC = 30, H0 = [], CE = "", wE = function(t) {
  var e = t[0], i, a;
  if (hr(e) || Nn(e) || (t = [t]), !(i = (e._gsap || {}).harness)) {
    for (a = H0.length; a-- && !H0[a].targetTest(e); )
      ;
    i = H0[a];
  }
  for (a = t.length; a--; )
    t[a] && (t[a]._gsap || (t[a]._gsap = new FN(t[a], i))) || t.splice(a, 1);
  return t;
}, Uu = function(t) {
  return t._gsap || wE(ms(t))[0]._gsap;
}, vN = function(t, e, i) {
  return (i = t[e]) && Nn(i) ? t[e]() : bE(i) && t.getAttribute && t.getAttribute(e) || i;
}, da = function(t, e) {
  return (t = t.split(",")).forEach(e) || t;
}, Pn = function(t) {
  return Math.round(t * 1e5) / 1e5 || 0;
}, qn = function(t) {
  return Math.round(t * 1e7) / 1e7 || 0;
}, Lf = function(t, e) {
  var i = e.charAt(0), a = parseFloat(e.substr(2));
  return t = parseFloat(t), i === "+" ? t + a : i === "-" ? t - a : i === "*" ? t * a : t / a;
}, u6 = function(t, e) {
  for (var i = e.length, a = 0; t.indexOf(e[a]) < 0 && ++a < i; )
    ;
  return a < i;
}, bv = function() {
  var t = ul.length, e = ul.slice(0), i, a;
  for (LM = {}, ul.length = 0, i = 0; i < t; i++)
    a = e[i], a && a._lazy && (a.render(a._lazy[0], a._lazy[1], !0)._lazy = 0);
}, DE = function(t) {
  return !!(t._initted || t._startAt || t.add);
}, _N = function(t, e, i, a) {
  ul.length && !yi && bv(), t.render(e, i, !!(yi && e < 0 && DE(t))), ul.length && !yi && bv();
}, yN = function(t) {
  var e = parseFloat(t);
  return (e || e === 0) && (t + "").match(hN).length < 2 ? e : fi(t) ? t.trim() : t;
}, xN = function(t) {
  return t;
}, Za = function(t, e) {
  for (var i in e)
    i in t || (t[i] = e[i]);
  return t;
}, c6 = function(t) {
  return function(e, i) {
    for (var a in i)
      a in e || a === "duration" && t || a === "ease" || (e[a] = i[a]);
  };
}, Jf = function(t, e) {
  for (var i in e)
    t[i] = e[i];
  return t;
}, _C = function n(t, e) {
  for (var i in e)
    i !== "__proto__" && i !== "constructor" && i !== "prototype" && (t[i] = hr(e[i]) ? n(t[i] || (t[i] = {}), e[i]) : e[i]);
  return t;
}, Ev = function(t, e) {
  var i = {}, a;
  for (a in t)
    a in e || (i[a] = t[a]);
  return i;
}, $d = function(t) {
  var e = t.parent || En, i = t.keyframes ? c6(Bi(t.keyframes)) : Za;
  if (ha(t.inherit))
    for (; e; )
      i(t, e.vars.defaults), e = e.parent || e._dp;
  return t;
}, f6 = function(t, e) {
  for (var i = t.length, a = i === e.length; a && i-- && t[i] === e[i]; )
    ;
  return i < 0;
}, SN = function(t, e, i, a, s) {
  var r = t[a], l;
  if (s)
    for (l = e[s]; r && r[s] > l; )
      r = r._prev;
  return r ? (e._next = r._next, r._next = e) : (e._next = t[i], t[i] = e), e._next ? e._next._prev = e : t[a] = e, e._prev = r, e.parent = e._dp = t, e;
}, H_ = function(t, e, i, a) {
  i === void 0 && (i = "_first"), a === void 0 && (a = "_last");
  var s = e._prev, r = e._next;
  s ? s._next = r : t[i] === e && (t[i] = r), r ? r._prev = s : t[a] === e && (t[a] = s), e._next = e._prev = e.parent = null;
}, pl = function(t, e) {
  t.parent && (!e || t.parent.autoRemoveChildren) && t.parent.remove && t.parent.remove(t), t._act = 0;
}, Ou = function(t, e) {
  if (t && (!e || e._end > t._dur || e._start < 0))
    for (var i = t; i; )
      i._dirty = 1, i = i.parent;
  return t;
}, h6 = function(t) {
  for (var e = t.parent; e && e.parent; )
    e._dirty = 1, e.totalDuration(), e = e.parent;
  return t;
}, zM = function(t, e, i, a) {
  return t._startAt && (yi ? t._startAt.revert(I0) : t.vars.immediateRender && !t.vars.autoRevert || t._startAt.render(e, !0, a));
}, d6 = function n(t) {
  return !t || t._ts && n(t.parent);
}, yC = function(t) {
  return t._repeat ? $f(t._tTime, t = t.duration() + t._rDelay) * t : 0;
}, $f = function(t, e) {
  var i = Math.floor(t = qn(t / e));
  return t && i === t ? i - 1 : i;
}, Tv = function(t, e) {
  return (t - e._start) * e._ts + (e._ts >= 0 ? 0 : e._dirty ? e.totalDuration() : e._tDur);
}, F_ = function(t) {
  return t._end = qn(t._start + (t._tDur / Math.abs(t._ts || t._rts || Li) || 0));
}, V_ = function(t, e) {
  var i = t._dp;
  return i && i.smoothChildTiming && t._ts && (t._start = qn(i._time - (t._ts > 0 ? e / t._ts : ((t._dirty ? t.totalDuration() : t._tDur) - e) / -t._ts)), F_(t), i._dirty || Ou(i, t)), t;
}, MN = function(t, e) {
  var i;
  if ((e._time || !e._dur && e._initted || e._start < t._time && (e._dur || !e.add)) && (i = Tv(t.rawTime(), e), (!e._dur || mm(0, e.totalDuration(), i) - e._tTime > Li) && e.render(i, !0)), Ou(t, e)._dp && t._initted && t._time >= t._dur && t._ts) {
    if (t._dur < t.duration())
      for (i = t; i._dp; )
        i.rawTime() >= 0 && i.totalTime(i._tTime), i = i._dp;
    t._zTime = -1e-8;
  }
}, er = function(t, e, i, a) {
  return e.parent && pl(e), e._start = qn((ao(i) ? i : i || t !== En ? os(t, i, e) : t._time) + e._delay), e._end = qn(e._start + (e.totalDuration() / Math.abs(e.timeScale()) || 0)), SN(t, e, "_first", "_last", t._sort ? "_start" : 0), BM(e) || (t._recent = e), a || MN(t, e), t._ts < 0 && V_(t, t._tTime), t;
}, bN = function(t, e) {
  return (Wa.ScrollTrigger || AE("scrollTrigger", e)) && Wa.ScrollTrigger.create(e, t);
}, EN = function(t, e, i, a, s) {
  if (OE(t, e, s), !t._initted)
    return 1;
  if (!i && t._pt && !yi && (t._dur && t.vars.lazy !== !1 || !t._dur && t.vars.lazy) && gN !== Ia.frame)
    return ul.push(t), t._lazy = [s, a], 1;
}, p6 = function n(t) {
  var e = t.parent;
  return e && e._ts && e._initted && !e._lock && (e.rawTime() < 0 || n(e));
}, BM = function(t) {
  var e = t.data;
  return e === "isFromStart" || e === "isStart";
}, m6 = function(t, e, i, a) {
  var s = t.ratio, r = e < 0 || !e && (!t._start && p6(t) && !(!t._initted && BM(t)) || (t._ts < 0 || t._dp._ts < 0) && !BM(t)) ? 0 : 1, l = t._rDelay, c = 0, f, d, p;
  if (l && t._repeat && (c = mm(0, t._tDur, e), d = $f(c, l), t._yoyo && d & 1 && (r = 1 - r), d !== $f(t._tTime, l) && (s = 1 - r, t.vars.repeatRefresh && t._initted && t.invalidate())), r !== s || yi || a || t._zTime === Li || !e && t._zTime) {
    if (!t._initted && EN(t, e, a, i, c))
      return;
    for (p = t._zTime, t._zTime = e || (i ? Li : 0), i || (i = e && !p), t.ratio = r, t._from && (r = 1 - r), t._time = 0, t._tTime = c, f = t._pt; f; )
      f.r(r, f.d), f = f._next;
    e < 0 && zM(t, e, i, !0), t._onUpdate && !i && Ha(t, "onUpdate"), c && t._repeat && !i && t.parent && Ha(t, "onRepeat"), (e >= t._tDur || e < 0) && t.ratio === r && (r && pl(t, 1), !i && !yi && (Ha(t, r ? "onComplete" : "onReverseComplete", !0), t._prom && t._prom()));
  } else t._zTime || (t._zTime = e);
}, g6 = function(t, e, i) {
  var a;
  if (i > e)
    for (a = t._first; a && a._start <= i; ) {
      if (a.data === "isPause" && a._start > e)
        return a;
      a = a._next;
    }
  else
    for (a = t._last; a && a._start >= i; ) {
      if (a.data === "isPause" && a._start < e)
        return a;
      a = a._prev;
    }
}, th = function(t, e, i, a) {
  var s = t._repeat, r = qn(e) || 0, l = t._tTime / t._tDur;
  return l && !a && (t._time *= r / t._dur), t._dur = r, t._tDur = s ? s < 0 ? 1e10 : qn(r * (s + 1) + t._rDelay * s) : r, l > 0 && !a && V_(t, t._tTime = t._tDur * l), t.parent && F_(t), i || Ou(t.parent, t), t;
}, xC = function(t) {
  return t instanceof Zi ? Ou(t) : th(t, t._dur);
}, v6 = {
  _start: 0,
  endTime: wp,
  totalDuration: wp
}, os = function n(t, e, i) {
  var a = t.labels, s = t._recent || v6, r = t.duration() >= ur ? s.endTime(!1) : t._dur, l, c, f;
  return fi(e) && (isNaN(e) || e in a) ? (c = e.charAt(0), f = e.substr(-1) === "%", l = e.indexOf("="), c === "<" || c === ">" ? (l >= 0 && (e = e.replace(/=/, "")), (c === "<" ? s._start : s.endTime(s._repeat >= 0)) + (parseFloat(e.substr(1)) || 0) * (f ? (l < 0 ? s : i).totalDuration() / 100 : 1)) : l < 0 ? (e in a || (a[e] = r), a[e]) : (c = parseFloat(e.charAt(l - 1) + e.substr(l + 1)), f && i && (c = c / 100 * (Bi(i) ? i[0] : i).totalDuration()), l > 1 ? n(t, e.substr(0, l - 1), i) + c : r + c)) : e == null ? r : +e;
}, tp = function(t, e, i) {
  var a = ao(e[1]), s = (a ? 2 : 1) + (t < 2 ? 0 : 1), r = e[s], l, c;
  if (a && (r.duration = e[1]), r.parent = i, t) {
    for (l = r, c = i; c && !("immediateRender" in l); )
      l = c.vars.defaults || {}, c = ha(c.vars.inherit) && c.parent;
    r.immediateRender = ha(l.immediateRender), t < 2 ? r.runBackwards = 1 : r.startAt = e[s - 1];
  }
  return new Xn(e[0], r, e[s + 1]);
}, Sl = function(t, e) {
  return t || t === 0 ? e(t) : e;
}, mm = function(t, e, i) {
  return i < t ? t : i > e ? e : i;
}, Ui = function(t, e) {
  return !fi(t) || !(e = r6.exec(t)) ? "" : e[1];
}, _6 = function(t, e, i) {
  return Sl(i, function(a) {
    return mm(t, e, a);
  });
}, PM = [].slice, TN = function(t, e) {
  return t && hr(t) && "length" in t && (!e && !t.length || t.length - 1 in t && hr(t[0])) && !t.nodeType && t !== $s;
}, y6 = function(t, e, i) {
  return i === void 0 && (i = []), t.forEach(function(a) {
    var s;
    return fi(a) && !e || TN(a, 1) ? (s = i).push.apply(s, ms(a)) : i.push(a);
  }) || i;
}, ms = function(t, e, i) {
  return _n && !e && _n.selector ? _n.selector(t) : fi(t) && !i && (NM || !eh()) ? PM.call((e || TE).querySelectorAll(t), 0) : Bi(t) ? y6(t, i) : TN(t) ? PM.call(t, 0) : t ? [t] : [];
}, IM = function(t) {
  return t = ms(t)[0] || Cp("Invalid scope") || {}, function(e) {
    var i = t.current || t.nativeElement || t;
    return ms(e, i.querySelectorAll ? i : i === t ? Cp("Invalid scope") || TE.createElement("div") : t);
  };
}, AN = function(t) {
  return t.sort(function() {
    return 0.5 - Math.random();
  });
}, RN = function(t) {
  if (Nn(t))
    return t;
  var e = hr(t) ? t : {
    each: t
  }, i = Nu(e.ease), a = e.from || 0, s = parseFloat(e.base) || 0, r = {}, l = a > 0 && a < 1, c = isNaN(a) || l, f = e.axis, d = a, p = a;
  return fi(a) ? d = p = {
    center: 0.5,
    edges: 0.5,
    end: 1
  }[a] || 0 : !l && c && (d = a[0], p = a[1]), function(m, g, y) {
    var x = (y || e).length, M = r[x], v, S, E, T, w, D, U, O, R;
    if (!M) {
      if (R = e.grid === "auto" ? 0 : (e.grid || [1, ur])[1], !R) {
        for (U = -1e8; U < (U = y[R++].getBoundingClientRect().left) && R < x; )
          ;
        R < x && R--;
      }
      for (M = r[x] = [], v = c ? Math.min(R, x) * d - 0.5 : a % R, S = R === ur ? 0 : c ? x * p / R - 0.5 : a / R | 0, U = 0, O = ur, D = 0; D < x; D++)
        E = D % R - v, T = S - (D / R | 0), M[D] = w = f ? Math.abs(f === "y" ? T : E) : lN(E * E + T * T), w > U && (U = w), w < O && (O = w);
      a === "random" && AN(M), M.max = U - O, M.min = O, M.v = x = (parseFloat(e.amount) || parseFloat(e.each) * (R > x ? x - 1 : f ? f === "y" ? x / R : R : Math.max(R, x / R)) || 0) * (a === "edges" ? -1 : 1), M.b = x < 0 ? s - x : s, M.u = Ui(e.amount || e.each) || 0, i = i && x < 0 ? PN(i) : i;
    }
    return x = (M[m] - M.min) / M.max || 0, qn(M.b + (i ? i(x) : x) * M.v) + M.u;
  };
}, HM = function(t) {
  var e = Math.pow(10, ((t + "").split(".")[1] || "").length);
  return function(i) {
    var a = qn(Math.round(parseFloat(i) / t) * t * e);
    return (a - a % 1) / e + (ao(i) ? 0 : Ui(i));
  };
}, CN = function(t, e) {
  var i = Bi(t), a, s;
  return !i && hr(t) && (a = i = t.radius || ur, t.values ? (t = ms(t.values), (s = !ao(t[0])) && (a *= a)) : t = HM(t.increment)), Sl(e, i ? Nn(t) ? function(r) {
    return s = t(r), Math.abs(s - r) <= a ? s : r;
  } : function(r) {
    for (var l = parseFloat(s ? r.x : r), c = parseFloat(s ? r.y : 0), f = ur, d = 0, p = t.length, m, g; p--; )
      s ? (m = t[p].x - l, g = t[p].y - c, m = m * m + g * g) : m = Math.abs(t[p] - l), m < f && (f = m, d = p);
    return d = !a || f <= a ? t[d] : r, s || d === r || ao(r) ? d : d + Ui(r);
  } : HM(t));
}, wN = function(t, e, i, a) {
  return Sl(Bi(t) ? !e : i === !0 ? !!(i = 0) : !a, function() {
    return Bi(t) ? t[~~(Math.random() * t.length)] : (i = i || 1e-5) && (a = i < 1 ? Math.pow(10, (i + "").length - 2) : 1) && Math.floor(Math.round((t - i / 2 + Math.random() * (e - t + i * 0.99)) / i) * i * a) / a;
  });
}, x6 = function() {
  for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
    e[i] = arguments[i];
  return function(a) {
    return e.reduce(function(s, r) {
      return r(s);
    }, a);
  };
}, S6 = function(t, e) {
  return function(i) {
    return t(parseFloat(i)) + (e || Ui(i));
  };
}, M6 = function(t, e, i) {
  return UN(t, e, 0, 1, i);
}, DN = function(t, e, i) {
  return Sl(i, function(a) {
    return t[~~e(a)];
  });
}, b6 = function n(t, e, i) {
  var a = e - t;
  return Bi(t) ? DN(t, n(0, t.length), e) : Sl(i, function(s) {
    return (a + (s - t) % a) % a + t;
  });
}, E6 = function n(t, e, i) {
  var a = e - t, s = a * 2;
  return Bi(t) ? DN(t, n(0, t.length - 1), e) : Sl(i, function(r) {
    return r = (s + (r - t) % s) % s || 0, t + (r > a ? s - r : r);
  });
}, Dp = function(t) {
  for (var e = 0, i = "", a, s, r, l; ~(a = t.indexOf("random(", e)); )
    r = t.indexOf(")", a), l = t.charAt(a + 7) === "[", s = t.substr(a + 7, r - a - 7).match(l ? hN : OM), i += t.substr(e, a - e) + wN(l ? s : +s[0], l ? 0 : +s[1], +s[2] || 1e-5), e = r + 1;
  return i + t.substr(e, t.length - e);
}, UN = function(t, e, i, a, s) {
  var r = e - t, l = a - i;
  return Sl(s, function(c) {
    return i + ((c - t) / r * l || 0);
  });
}, T6 = function n(t, e, i, a) {
  var s = isNaN(t + e) ? 0 : function(g) {
    return (1 - g) * t + g * e;
  };
  if (!s) {
    var r = fi(t), l = {}, c, f, d, p, m;
    if (i === !0 && (a = 1) && (i = null), r)
      t = {
        p: t
      }, e = {
        p: e
      };
    else if (Bi(t) && !Bi(e)) {
      for (d = [], p = t.length, m = p - 2, f = 1; f < p; f++)
        d.push(n(t[f - 1], t[f]));
      p--, s = function(y) {
        y *= p;
        var x = Math.min(m, ~~y);
        return d[x](y - x);
      }, i = e;
    } else a || (t = Jf(Bi(t) ? [] : {}, t));
    if (!d) {
      for (c in e)
        UE.call(l, t, c, "get", e[c]);
      s = function(y) {
        return zE(y, l) || (r ? t.p : t);
      };
    }
  }
  return Sl(i, s);
}, SC = function(t, e, i) {
  var a = t.labels, s = ur, r, l, c;
  for (r in a)
    l = a[r] - e, l < 0 == !!i && l && s > (l = Math.abs(l)) && (c = r, s = l);
  return c;
}, Ha = function(t, e, i) {
  var a = t.vars, s = a[e], r = _n, l = t._ctx, c, f, d;
  if (s)
    return c = a[e + "Params"], f = a.callbackScope || t, i && ul.length && bv(), l && (_n = l), d = c ? s.apply(f, c) : s.call(f), _n = r, d;
}, Nd = function(t) {
  return pl(t), t.scrollTrigger && t.scrollTrigger.kill(!!yi), t.progress() < 1 && Ha(t, "onInterrupt"), t;
}, Sf, ON = [], NN = function(t) {
  if (t)
    if (t = !t.name && t.default || t, EE() || t.headless) {
      var e = t.name, i = Nn(t), a = e && !i && t.init ? function() {
        this._props = [];
      } : t, s = {
        init: wp,
        render: zE,
        add: UE,
        kill: V6,
        modifier: F6,
        rawVars: 0
      }, r = {
        targetTest: 0,
        get: 0,
        getSetter: LE,
        aliases: {},
        register: 0
      };
      if (eh(), t !== a) {
        if (Ba[e])
          return;
        Za(a, Za(Ev(t, s), r)), Jf(a.prototype, Jf(s, Ev(t, r))), Ba[a.prop = e] = a, t.targetTest && (H0.push(a), RE[e] = 1), e = (e === "css" ? "CSS" : e.charAt(0).toUpperCase() + e.substr(1)) + "Plugin";
      }
      mN(e, a), t.register && t.register(va, a, pa);
    } else
      ON.push(t);
}, rn = 255, Ld = {
  aqua: [0, rn, rn],
  lime: [0, rn, 0],
  silver: [192, 192, 192],
  black: [0, 0, 0],
  maroon: [128, 0, 0],
  teal: [0, 128, 128],
  blue: [0, 0, rn],
  navy: [0, 0, 128],
  white: [rn, rn, rn],
  olive: [128, 128, 0],
  yellow: [rn, rn, 0],
  orange: [rn, 165, 0],
  gray: [128, 128, 128],
  purple: [128, 0, 128],
  green: [0, 128, 0],
  red: [rn, 0, 0],
  pink: [rn, 192, 203],
  cyan: [0, rn, rn],
  transparent: [rn, rn, rn, 0]
}, US = function(t, e, i) {
  return t += t < 0 ? 1 : t > 1 ? -1 : 0, (t * 6 < 1 ? e + (i - e) * t * 6 : t < 0.5 ? i : t * 3 < 2 ? e + (i - e) * (2 / 3 - t) * 6 : e) * rn + 0.5 | 0;
}, LN = function(t, e, i) {
  var a = t ? ao(t) ? [t >> 16, t >> 8 & rn, t & rn] : 0 : Ld.black, s, r, l, c, f, d, p, m, g, y;
  if (!a) {
    if (t.substr(-1) === "," && (t = t.substr(0, t.length - 1)), Ld[t])
      a = Ld[t];
    else if (t.charAt(0) === "#") {
      if (t.length < 6 && (s = t.charAt(1), r = t.charAt(2), l = t.charAt(3), t = "#" + s + s + r + r + l + l + (t.length === 5 ? t.charAt(4) + t.charAt(4) : "")), t.length === 9)
        return a = parseInt(t.substr(1, 6), 16), [a >> 16, a >> 8 & rn, a & rn, parseInt(t.substr(7), 16) / 255];
      t = parseInt(t.substr(1), 16), a = [t >> 16, t >> 8 & rn, t & rn];
    } else if (t.substr(0, 3) === "hsl") {
      if (a = y = t.match(OM), !e)
        c = +a[0] % 360 / 360, f = +a[1] / 100, d = +a[2] / 100, r = d <= 0.5 ? d * (f + 1) : d + f - d * f, s = d * 2 - r, a.length > 3 && (a[3] *= 1), a[0] = US(c + 1 / 3, s, r), a[1] = US(c, s, r), a[2] = US(c - 1 / 3, s, r);
      else if (~t.indexOf("="))
        return a = t.match(cN), i && a.length < 4 && (a[3] = 1), a;
    } else
      a = t.match(OM) || Ld.transparent;
    a = a.map(Number);
  }
  return e && !y && (s = a[0] / rn, r = a[1] / rn, l = a[2] / rn, p = Math.max(s, r, l), m = Math.min(s, r, l), d = (p + m) / 2, p === m ? c = f = 0 : (g = p - m, f = d > 0.5 ? g / (2 - p - m) : g / (p + m), c = p === s ? (r - l) / g + (r < l ? 6 : 0) : p === r ? (l - s) / g + 2 : (s - r) / g + 4, c *= 60), a[0] = ~~(c + 0.5), a[1] = ~~(f * 100 + 0.5), a[2] = ~~(d * 100 + 0.5)), i && a.length < 4 && (a[3] = 1), a;
}, zN = function(t) {
  var e = [], i = [], a = -1;
  return t.split(cl).forEach(function(s) {
    var r = s.match(xf) || [];
    e.push.apply(e, r), i.push(a += r.length + 1);
  }), e.c = i, e;
}, MC = function(t, e, i) {
  var a = "", s = (t + a).match(cl), r = e ? "hsla(" : "rgba(", l = 0, c, f, d, p;
  if (!s)
    return t;
  if (s = s.map(function(m) {
    return (m = LN(m, e, 1)) && r + (e ? m[0] + "," + m[1] + "%," + m[2] + "%," + m[3] : m.join(",")) + ")";
  }), i && (d = zN(t), c = i.c, c.join(a) !== d.c.join(a)))
    for (f = t.replace(cl, "1").split(xf), p = f.length - 1; l < p; l++)
      a += f[l] + (~c.indexOf(l) ? s.shift() || r + "0,0,0,0)" : (d.length ? d : s.length ? s : i).shift());
  if (!f)
    for (f = t.split(cl), p = f.length - 1; l < p; l++)
      a += f[l] + s[l];
  return a + f[p];
}, cl = function() {
  var n = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", t;
  for (t in Ld)
    n += "|" + t + "\\b";
  return new RegExp(n + ")", "gi");
}(), A6 = /hsl[a]?\(/, BN = function(t) {
  var e = t.join(" "), i;
  if (cl.lastIndex = 0, cl.test(e))
    return i = A6.test(e), t[1] = MC(t[1], i), t[0] = MC(t[0], i, zN(t[1])), !0;
}, Up, Ia = function() {
  var n = Date.now, t = 500, e = 33, i = n(), a = i, s = 1e3 / 240, r = s, l = [], c, f, d, p, m, g, y = function x(M) {
    var v = n() - a, S = M === !0, E, T, w, D;
    if ((v > t || v < 0) && (i += v - e), a += v, w = a - i, E = w - r, (E > 0 || S) && (D = ++p.frame, m = w - p.time * 1e3, p.time = w = w / 1e3, r += E + (E >= s ? 4 : s - E), T = 1), S || (c = f(x)), T)
      for (g = 0; g < l.length; g++)
        l[g](w, m, D, M);
  };
  return p = {
    time: 0,
    frame: 0,
    tick: function() {
      y(!0);
    },
    deltaRatio: function(M) {
      return m / (1e3 / (M || 60));
    },
    wake: function() {
      dN && (!NM && EE() && ($s = NM = window, TE = $s.document || {}, Wa.gsap = va, ($s.gsapVersions || ($s.gsapVersions = [])).push(va.version), pN(Mv || $s.GreenSockGlobals || !$s.gsap && $s || {}), ON.forEach(NN)), d = typeof requestAnimationFrame < "u" && requestAnimationFrame, c && p.sleep(), f = d || function(M) {
        return setTimeout(M, r - p.time * 1e3 + 1 | 0);
      }, Up = 1, y(2));
    },
    sleep: function() {
      (d ? cancelAnimationFrame : clearTimeout)(c), Up = 0, f = wp;
    },
    lagSmoothing: function(M, v) {
      t = M || 1 / 0, e = Math.min(v || 33, t);
    },
    fps: function(M) {
      s = 1e3 / (M || 240), r = p.time * 1e3 + s;
    },
    add: function(M, v, S) {
      var E = v ? function(T, w, D, U) {
        M(T, w, D, U), p.remove(E);
      } : M;
      return p.remove(M), l[S ? "unshift" : "push"](E), eh(), E;
    },
    remove: function(M, v) {
      ~(v = l.indexOf(M)) && l.splice(v, 1) && g >= v && g--;
    },
    _listeners: l
  }, p;
}(), eh = function() {
  return !Up && Ia.wake();
}, Ne = {}, R6 = /^[\d.\-M][\d.\-,\s]/, C6 = /["']/g, w6 = function(t) {
  for (var e = {}, i = t.substr(1, t.length - 3).split(":"), a = i[0], s = 1, r = i.length, l, c, f; s < r; s++)
    c = i[s], l = s !== r - 1 ? c.lastIndexOf(",") : c.length, f = c.substr(0, l), e[a] = isNaN(f) ? f.replace(C6, "").trim() : +f, a = c.substr(l + 1).trim();
  return e;
}, D6 = function(t) {
  var e = t.indexOf("(") + 1, i = t.indexOf(")"), a = t.indexOf("(", e);
  return t.substring(e, ~a && a < i ? t.indexOf(")", i + 1) : i);
}, U6 = function(t) {
  var e = (t + "").split("("), i = Ne[e[0]];
  return i && e.length > 1 && i.config ? i.config.apply(null, ~t.indexOf("{") ? [w6(e[1])] : D6(t).split(",").map(yN)) : Ne._CE && R6.test(t) ? Ne._CE("", t) : i;
}, PN = function(t) {
  return function(e) {
    return 1 - t(1 - e);
  };
}, IN = function n(t, e) {
  for (var i = t._first, a; i; )
    i instanceof Zi ? n(i, e) : i.vars.yoyoEase && (!i._yoyo || !i._repeat) && i._yoyo !== e && (i.timeline ? n(i.timeline, e) : (a = i._ease, i._ease = i._yEase, i._yEase = a, i._yoyo = e)), i = i._next;
}, Nu = function(t, e) {
  return t && (Nn(t) ? t : Ne[t] || U6(t)) || e;
}, $u = function(t, e, i, a) {
  i === void 0 && (i = function(c) {
    return 1 - e(1 - c);
  }), a === void 0 && (a = function(c) {
    return c < 0.5 ? e(c * 2) / 2 : 1 - e((1 - c) * 2) / 2;
  });
  var s = {
    easeIn: e,
    easeOut: i,
    easeInOut: a
  }, r;
  return da(t, function(l) {
    Ne[l] = Wa[l] = s, Ne[r = l.toLowerCase()] = i;
    for (var c in s)
      Ne[r + (c === "easeIn" ? ".in" : c === "easeOut" ? ".out" : ".inOut")] = Ne[l + "." + c] = s[c];
  }), s;
}, HN = function(t) {
  return function(e) {
    return e < 0.5 ? (1 - t(1 - e * 2)) / 2 : 0.5 + t((e - 0.5) * 2) / 2;
  };
}, OS = function n(t, e, i) {
  var a = e >= 1 ? e : 1, s = (i || (t ? 0.3 : 0.45)) / (e < 1 ? e : 1), r = s / UM * (Math.asin(1 / a) || 0), l = function(d) {
    return d === 1 ? 1 : a * Math.pow(2, -10 * d) * s6((d - r) * s) + 1;
  }, c = t === "out" ? l : t === "in" ? function(f) {
    return 1 - l(1 - f);
  } : HN(l);
  return s = UM / s, c.config = function(f, d) {
    return n(t, f, d);
  }, c;
}, NS = function n(t, e) {
  e === void 0 && (e = 1.70158);
  var i = function(r) {
    return r ? --r * r * ((e + 1) * r + e) + 1 : 0;
  }, a = t === "out" ? i : t === "in" ? function(s) {
    return 1 - i(1 - s);
  } : HN(i);
  return a.config = function(s) {
    return n(t, s);
  }, a;
};
da("Linear,Quad,Cubic,Quart,Quint,Strong", function(n, t) {
  var e = t < 5 ? t + 1 : t;
  $u(n + ",Power" + (e - 1), t ? function(i) {
    return Math.pow(i, e);
  } : function(i) {
    return i;
  }, function(i) {
    return 1 - Math.pow(1 - i, e);
  }, function(i) {
    return i < 0.5 ? Math.pow(i * 2, e) / 2 : 1 - Math.pow((1 - i) * 2, e) / 2;
  });
});
Ne.Linear.easeNone = Ne.none = Ne.Linear.easeIn;
$u("Elastic", OS("in"), OS("out"), OS());
(function(n, t) {
  var e = 1 / t, i = 2 * e, a = 2.5 * e, s = function(l) {
    return l < e ? n * l * l : l < i ? n * Math.pow(l - 1.5 / t, 2) + 0.75 : l < a ? n * (l -= 2.25 / t) * l + 0.9375 : n * Math.pow(l - 2.625 / t, 2) + 0.984375;
  };
  $u("Bounce", function(r) {
    return 1 - s(1 - r);
  }, s);
})(7.5625, 2.75);
$u("Expo", function(n) {
  return Math.pow(2, 10 * (n - 1)) * n + n * n * n * n * n * n * (1 - n);
});
$u("Circ", function(n) {
  return -(lN(1 - n * n) - 1);
});
$u("Sine", function(n) {
  return n === 1 ? 1 : -a6(n * n6) + 1;
});
$u("Back", NS("in"), NS("out"), NS());
Ne.SteppedEase = Ne.steps = Wa.SteppedEase = {
  config: function(t, e) {
    t === void 0 && (t = 1);
    var i = 1 / t, a = t + (e ? 0 : 1), s = e ? 1 : 0, r = 1 - Li;
    return function(l) {
      return ((a * mm(0, r, l) | 0) + s) * i;
    };
  }
};
Kf.ease = Ne["quad.out"];
da("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function(n) {
  return CE += n + "," + n + "Params,";
});
var FN = function(t, e) {
  this.id = i6++, t._gsap = this, this.target = t, this.harness = e, this.get = e ? e.get : vN, this.set = e ? e.getSetter : LE;
}, Op = /* @__PURE__ */ function() {
  function n(e) {
    this.vars = e, this._delay = +e.delay || 0, (this._repeat = e.repeat === 1 / 0 ? -2 : e.repeat || 0) && (this._rDelay = e.repeatDelay || 0, this._yoyo = !!e.yoyo || !!e.yoyoEase), this._ts = 1, th(this, +e.duration, 1, 1), this.data = e.data, _n && (this._ctx = _n, _n.data.push(this)), Up || Ia.wake();
  }
  var t = n.prototype;
  return t.delay = function(i) {
    return i || i === 0 ? (this.parent && this.parent.smoothChildTiming && this.startTime(this._start + i - this._delay), this._delay = i, this) : this._delay;
  }, t.duration = function(i) {
    return arguments.length ? this.totalDuration(this._repeat > 0 ? i + (i + this._rDelay) * this._repeat : i) : this.totalDuration() && this._dur;
  }, t.totalDuration = function(i) {
    return arguments.length ? (this._dirty = 0, th(this, this._repeat < 0 ? i : (i - this._repeat * this._rDelay) / (this._repeat + 1))) : this._tDur;
  }, t.totalTime = function(i, a) {
    if (eh(), !arguments.length)
      return this._tTime;
    var s = this._dp;
    if (s && s.smoothChildTiming && this._ts) {
      for (V_(this, i), !s._dp || s.parent || MN(s, this); s && s.parent; )
        s.parent._time !== s._start + (s._ts >= 0 ? s._tTime / s._ts : (s.totalDuration() - s._tTime) / -s._ts) && s.totalTime(s._tTime, !0), s = s.parent;
      !this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && i < this._tDur || this._ts < 0 && i > 0 || !this._tDur && !i) && er(this._dp, this, this._start - this._delay);
    }
    return (this._tTime !== i || !this._dur && !a || this._initted && Math.abs(this._zTime) === Li || !i && !this._initted && (this.add || this._ptLookup)) && (this._ts || (this._pTime = i), _N(this, i, a)), this;
  }, t.time = function(i, a) {
    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), i + yC(this)) % (this._dur + this._rDelay) || (i ? this._dur : 0), a) : this._time;
  }, t.totalProgress = function(i, a) {
    return arguments.length ? this.totalTime(this.totalDuration() * i, a) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() >= 0 && this._initted ? 1 : 0;
  }, t.progress = function(i, a) {
    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - i : i) + yC(this), a) : this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0;
  }, t.iteration = function(i, a) {
    var s = this.duration() + this._rDelay;
    return arguments.length ? this.totalTime(this._time + (i - 1) * s, a) : this._repeat ? $f(this._tTime, s) + 1 : 1;
  }, t.timeScale = function(i, a) {
    if (!arguments.length)
      return this._rts === -1e-8 ? 0 : this._rts;
    if (this._rts === i)
      return this;
    var s = this.parent && this._ts ? Tv(this.parent._time, this) : this._tTime;
    return this._rts = +i || 0, this._ts = this._ps || i === -1e-8 ? 0 : this._rts, this.totalTime(mm(-Math.abs(this._delay), this.totalDuration(), s), a !== !1), F_(this), h6(this);
  }, t.paused = function(i) {
    return arguments.length ? (this._ps !== i && (this._ps = i, i ? (this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()), this._ts = this._act = 0) : (eh(), this._ts = this._rts, this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== Li && (this._tTime -= Li)))), this) : this._ps;
  }, t.startTime = function(i) {
    if (arguments.length) {
      this._start = i;
      var a = this.parent || this._dp;
      return a && (a._sort || !this.parent) && er(a, this, i - this._delay), this;
    }
    return this._start;
  }, t.endTime = function(i) {
    return this._start + (ha(i) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
  }, t.rawTime = function(i) {
    var a = this.parent || this._dp;
    return a ? i && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : this._ts ? Tv(a.rawTime(i), this) : this._tTime : this._tTime;
  }, t.revert = function(i) {
    i === void 0 && (i = l6);
    var a = yi;
    return yi = i, DE(this) && (this.timeline && this.timeline.revert(i), this.totalTime(-0.01, i.suppressEvents)), this.data !== "nested" && i.kill !== !1 && this.kill(), yi = a, this;
  }, t.globalTime = function(i) {
    for (var a = this, s = arguments.length ? i : a.rawTime(); a; )
      s = a._start + s / (Math.abs(a._ts) || 1), a = a._dp;
    return !this.parent && this._sat ? this._sat.globalTime(i) : s;
  }, t.repeat = function(i) {
    return arguments.length ? (this._repeat = i === 1 / 0 ? -2 : i, xC(this)) : this._repeat === -2 ? 1 / 0 : this._repeat;
  }, t.repeatDelay = function(i) {
    if (arguments.length) {
      var a = this._time;
      return this._rDelay = i, xC(this), a ? this.time(a) : this;
    }
    return this._rDelay;
  }, t.yoyo = function(i) {
    return arguments.length ? (this._yoyo = i, this) : this._yoyo;
  }, t.seek = function(i, a) {
    return this.totalTime(os(this, i), ha(a));
  }, t.restart = function(i, a) {
    return this.play().totalTime(i ? -this._delay : 0, ha(a)), this._dur || (this._zTime = -1e-8), this;
  }, t.play = function(i, a) {
    return i != null && this.seek(i, a), this.reversed(!1).paused(!1);
  }, t.reverse = function(i, a) {
    return i != null && this.seek(i || this.totalDuration(), a), this.reversed(!0).paused(!1);
  }, t.pause = function(i, a) {
    return i != null && this.seek(i, a), this.paused(!0);
  }, t.resume = function() {
    return this.paused(!1);
  }, t.reversed = function(i) {
    return arguments.length ? (!!i !== this.reversed() && this.timeScale(-this._rts || (i ? -1e-8 : 0)), this) : this._rts < 0;
  }, t.invalidate = function() {
    return this._initted = this._act = 0, this._zTime = -1e-8, this;
  }, t.isActive = function() {
    var i = this.parent || this._dp, a = this._start, s;
    return !!(!i || this._ts && this._initted && i.isActive() && (s = i.rawTime(!0)) >= a && s < this.endTime(!0) - Li);
  }, t.eventCallback = function(i, a, s) {
    var r = this.vars;
    return arguments.length > 1 ? (a ? (r[i] = a, s && (r[i + "Params"] = s), i === "onUpdate" && (this._onUpdate = a)) : delete r[i], this) : r[i];
  }, t.then = function(i) {
    var a = this;
    return new Promise(function(s) {
      var r = Nn(i) ? i : xN, l = function() {
        var f = a.then;
        a.then = null, Nn(r) && (r = r(a)) && (r.then || r === a) && (a.then = f), s(r), a.then = f;
      };
      a._initted && a.totalProgress() === 1 && a._ts >= 0 || !a._tTime && a._ts < 0 ? l() : a._prom = l;
    });
  }, t.kill = function() {
    Nd(this);
  }, n;
}();
Za(Op.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: !1,
  parent: null,
  _initted: !1,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -1e-8,
  _prom: 0,
  _ps: !1,
  _rts: 1
});
var Zi = /* @__PURE__ */ function(n) {
  oN(t, n);
  function t(i, a) {
    var s;
    return i === void 0 && (i = {}), s = n.call(this, i) || this, s.labels = {}, s.smoothChildTiming = !!i.smoothChildTiming, s.autoRemoveChildren = !!i.autoRemoveChildren, s._sort = ha(i.sortChildren), En && er(i.parent || En, Hr(s), a), i.reversed && s.reverse(), i.paused && s.paused(!0), i.scrollTrigger && bN(Hr(s), i.scrollTrigger), s;
  }
  var e = t.prototype;
  return e.to = function(a, s, r) {
    return tp(0, arguments, this), this;
  }, e.from = function(a, s, r) {
    return tp(1, arguments, this), this;
  }, e.fromTo = function(a, s, r, l) {
    return tp(2, arguments, this), this;
  }, e.set = function(a, s, r) {
    return s.duration = 0, s.parent = this, $d(s).repeatDelay || (s.repeat = 0), s.immediateRender = !!s.immediateRender, new Xn(a, s, os(this, r), 1), this;
  }, e.call = function(a, s, r) {
    return er(this, Xn.delayedCall(0, a, s), r);
  }, e.staggerTo = function(a, s, r, l, c, f, d) {
    return r.duration = s, r.stagger = r.stagger || l, r.onComplete = f, r.onCompleteParams = d, r.parent = this, new Xn(a, r, os(this, c)), this;
  }, e.staggerFrom = function(a, s, r, l, c, f, d) {
    return r.runBackwards = 1, $d(r).immediateRender = ha(r.immediateRender), this.staggerTo(a, s, r, l, c, f, d);
  }, e.staggerFromTo = function(a, s, r, l, c, f, d, p) {
    return l.startAt = r, $d(l).immediateRender = ha(l.immediateRender), this.staggerTo(a, s, l, c, f, d, p);
  }, e.render = function(a, s, r) {
    var l = this._time, c = this._dirty ? this.totalDuration() : this._tDur, f = this._dur, d = a <= 0 ? 0 : qn(a), p = this._zTime < 0 != a < 0 && (this._initted || !f), m, g, y, x, M, v, S, E, T, w, D, U;
    if (this !== En && d > c && a >= 0 && (d = c), d !== this._tTime || r || p) {
      if (l !== this._time && f && (d += this._time - l, a += this._time - l), m = d, T = this._start, E = this._ts, v = !E, p && (f || (l = this._zTime), (a || !s) && (this._zTime = a)), this._repeat) {
        if (D = this._yoyo, M = f + this._rDelay, this._repeat < -1 && a < 0)
          return this.totalTime(M * 100 + a, s, r);
        if (m = qn(d % M), d === c ? (x = this._repeat, m = f) : (w = qn(d / M), x = ~~w, x && x === w && (m = f, x--), m > f && (m = f)), w = $f(this._tTime, M), !l && this._tTime && w !== x && this._tTime - w * M - this._dur <= 0 && (w = x), D && x & 1 && (m = f - m, U = 1), x !== w && !this._lock) {
          var O = D && w & 1, R = O === (D && x & 1);
          if (x < w && (O = !O), l = O ? 0 : d % f ? f : d, this._lock = 1, this.render(l || (U ? 0 : qn(x * M)), s, !f)._lock = 0, this._tTime = d, !s && this.parent && Ha(this, "onRepeat"), this.vars.repeatRefresh && !U && (this.invalidate()._lock = 1), l && l !== this._time || v !== !this._ts || this.vars.onRepeat && !this.parent && !this._act)
            return this;
          if (f = this._dur, c = this._tDur, R && (this._lock = 2, l = O ? f : -1e-4, this.render(l, !0), this.vars.repeatRefresh && !U && this.invalidate()), this._lock = 0, !this._ts && !v)
            return this;
          IN(this, U);
        }
      }
      if (this._hasPause && !this._forcing && this._lock < 2 && (S = g6(this, qn(l), qn(m)), S && (d -= m - (m = S._start))), this._tTime = d, this._time = m, this._act = !E, this._initted || (this._onUpdate = this.vars.onUpdate, this._initted = 1, this._zTime = a, l = 0), !l && d && !s && !w && (Ha(this, "onStart"), this._tTime !== d))
        return this;
      if (m >= l && a >= 0)
        for (g = this._first; g; ) {
          if (y = g._next, (g._act || m >= g._start) && g._ts && S !== g) {
            if (g.parent !== this)
              return this.render(a, s, r);
            if (g.render(g._ts > 0 ? (m - g._start) * g._ts : (g._dirty ? g.totalDuration() : g._tDur) + (m - g._start) * g._ts, s, r), m !== this._time || !this._ts && !v) {
              S = 0, y && (d += this._zTime = -1e-8);
              break;
            }
          }
          g = y;
        }
      else {
        g = this._last;
        for (var C = a < 0 ? a : m; g; ) {
          if (y = g._prev, (g._act || C <= g._end) && g._ts && S !== g) {
            if (g.parent !== this)
              return this.render(a, s, r);
            if (g.render(g._ts > 0 ? (C - g._start) * g._ts : (g._dirty ? g.totalDuration() : g._tDur) + (C - g._start) * g._ts, s, r || yi && DE(g)), m !== this._time || !this._ts && !v) {
              S = 0, y && (d += this._zTime = C ? -1e-8 : Li);
              break;
            }
          }
          g = y;
        }
      }
      if (S && !s && (this.pause(), S.render(m >= l ? 0 : -1e-8)._zTime = m >= l ? 1 : -1, this._ts))
        return this._start = T, F_(this), this.render(a, s, r);
      this._onUpdate && !s && Ha(this, "onUpdate", !0), (d === c && this._tTime >= this.totalDuration() || !d && l) && (T === this._start || Math.abs(E) !== Math.abs(this._ts)) && (this._lock || ((a || !f) && (d === c && this._ts > 0 || !d && this._ts < 0) && pl(this, 1), !s && !(a < 0 && !l) && (d || l || !c) && (Ha(this, d === c && a >= 0 ? "onComplete" : "onReverseComplete", !0), this._prom && !(d < c && this.timeScale() > 0) && this._prom())));
    }
    return this;
  }, e.add = function(a, s) {
    var r = this;
    if (ao(s) || (s = os(this, s, a)), !(a instanceof Op)) {
      if (Bi(a))
        return a.forEach(function(l) {
          return r.add(l, s);
        }), this;
      if (fi(a))
        return this.addLabel(a, s);
      if (Nn(a))
        a = Xn.delayedCall(0, a);
      else
        return this;
    }
    return this !== a ? er(this, a, s) : this;
  }, e.getChildren = function(a, s, r, l) {
    a === void 0 && (a = !0), s === void 0 && (s = !0), r === void 0 && (r = !0), l === void 0 && (l = -1e8);
    for (var c = [], f = this._first; f; )
      f._start >= l && (f instanceof Xn ? s && c.push(f) : (r && c.push(f), a && c.push.apply(c, f.getChildren(!0, s, r)))), f = f._next;
    return c;
  }, e.getById = function(a) {
    for (var s = this.getChildren(1, 1, 1), r = s.length; r--; )
      if (s[r].vars.id === a)
        return s[r];
  }, e.remove = function(a) {
    return fi(a) ? this.removeLabel(a) : Nn(a) ? this.killTweensOf(a) : (a.parent === this && H_(this, a), a === this._recent && (this._recent = this._last), Ou(this));
  }, e.totalTime = function(a, s) {
    return arguments.length ? (this._forcing = 1, !this._dp && this._ts && (this._start = qn(Ia.time - (this._ts > 0 ? a / this._ts : (this.totalDuration() - a) / -this._ts))), n.prototype.totalTime.call(this, a, s), this._forcing = 0, this) : this._tTime;
  }, e.addLabel = function(a, s) {
    return this.labels[a] = os(this, s), this;
  }, e.removeLabel = function(a) {
    return delete this.labels[a], this;
  }, e.addPause = function(a, s, r) {
    var l = Xn.delayedCall(0, s || wp, r);
    return l.data = "isPause", this._hasPause = 1, er(this, l, os(this, a));
  }, e.removePause = function(a) {
    var s = this._first;
    for (a = os(this, a); s; )
      s._start === a && s.data === "isPause" && pl(s), s = s._next;
  }, e.killTweensOf = function(a, s, r) {
    for (var l = this.getTweensOf(a, r), c = l.length; c--; )
      Ko !== l[c] && l[c].kill(a, s);
    return this;
  }, e.getTweensOf = function(a, s) {
    for (var r = [], l = ms(a), c = this._first, f = ao(s), d; c; )
      c instanceof Xn ? u6(c._targets, l) && (f ? (!Ko || c._initted && c._ts) && c.globalTime(0) <= s && c.globalTime(c.totalDuration()) > s : !s || c.isActive()) && r.push(c) : (d = c.getTweensOf(l, s)).length && r.push.apply(r, d), c = c._next;
    return r;
  }, e.tweenTo = function(a, s) {
    s = s || {};
    var r = this, l = os(r, a), c = s, f = c.startAt, d = c.onStart, p = c.onStartParams, m = c.immediateRender, g, y = Xn.to(r, Za({
      ease: s.ease || "none",
      lazy: !1,
      immediateRender: !1,
      time: l,
      overwrite: "auto",
      duration: s.duration || Math.abs((l - (f && "time" in f ? f.time : r._time)) / r.timeScale()) || Li,
      onStart: function() {
        if (r.pause(), !g) {
          var M = s.duration || Math.abs((l - (f && "time" in f ? f.time : r._time)) / r.timeScale());
          y._dur !== M && th(y, M, 0, 1).render(y._time, !0, !0), g = 1;
        }
        d && d.apply(y, p || []);
      }
    }, s));
    return m ? y.render(0) : y;
  }, e.tweenFromTo = function(a, s, r) {
    return this.tweenTo(s, Za({
      startAt: {
        time: os(this, a)
      }
    }, r));
  }, e.recent = function() {
    return this._recent;
  }, e.nextLabel = function(a) {
    return a === void 0 && (a = this._time), SC(this, os(this, a));
  }, e.previousLabel = function(a) {
    return a === void 0 && (a = this._time), SC(this, os(this, a), 1);
  }, e.currentLabel = function(a) {
    return arguments.length ? this.seek(a, !0) : this.previousLabel(this._time + Li);
  }, e.shiftChildren = function(a, s, r) {
    r === void 0 && (r = 0);
    for (var l = this._first, c = this.labels, f; l; )
      l._start >= r && (l._start += a, l._end += a), l = l._next;
    if (s)
      for (f in c)
        c[f] >= r && (c[f] += a);
    return Ou(this);
  }, e.invalidate = function(a) {
    var s = this._first;
    for (this._lock = 0; s; )
      s.invalidate(a), s = s._next;
    return n.prototype.invalidate.call(this, a);
  }, e.clear = function(a) {
    a === void 0 && (a = !0);
    for (var s = this._first, r; s; )
      r = s._next, this.remove(s), s = r;
    return this._dp && (this._time = this._tTime = this._pTime = 0), a && (this.labels = {}), Ou(this);
  }, e.totalDuration = function(a) {
    var s = 0, r = this, l = r._last, c = ur, f, d, p;
    if (arguments.length)
      return r.timeScale((r._repeat < 0 ? r.duration() : r.totalDuration()) / (r.reversed() ? -a : a));
    if (r._dirty) {
      for (p = r.parent; l; )
        f = l._prev, l._dirty && l.totalDuration(), d = l._start, d > c && r._sort && l._ts && !r._lock ? (r._lock = 1, er(r, l, d - l._delay, 1)._lock = 0) : c = d, d < 0 && l._ts && (s -= d, (!p && !r._dp || p && p.smoothChildTiming) && (r._start += d / r._ts, r._time -= d, r._tTime -= d), r.shiftChildren(-d, !1, -1 / 0), c = 0), l._end > s && l._ts && (s = l._end), l = f;
      th(r, r === En && r._time > s ? r._time : s, 1, 1), r._dirty = 0;
    }
    return r._tDur;
  }, t.updateRoot = function(a) {
    if (En._ts && (_N(En, Tv(a, En)), gN = Ia.frame), Ia.frame >= vC) {
      vC += qa.autoSleep || 120;
      var s = En._first;
      if ((!s || !s._ts) && qa.autoSleep && Ia._listeners.length < 2) {
        for (; s && !s._ts; )
          s = s._next;
        s || Ia.sleep();
      }
    }
  }, t;
}(Op);
Za(Zi.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});
var O6 = function(t, e, i, a, s, r, l) {
  var c = new pa(this._pt, t, e, 0, 1, kN, null, s), f = 0, d = 0, p, m, g, y, x, M, v, S;
  for (c.b = i, c.e = a, i += "", a += "", (v = ~a.indexOf("random(")) && (a = Dp(a)), r && (S = [i, a], r(S, t, e), i = S[0], a = S[1]), m = i.match(wS) || []; p = wS.exec(a); )
    y = p[0], x = a.substring(f, p.index), g ? g = (g + 1) % 5 : x.substr(-5) === "rgba(" && (g = 1), y !== m[d++] && (M = parseFloat(m[d - 1]) || 0, c._pt = {
      _next: c._pt,
      p: x || d === 1 ? x : ",",
      //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
      s: M,
      c: y.charAt(1) === "=" ? Lf(M, y) - M : parseFloat(y) - M,
      m: g && g < 4 ? Math.round : 0
    }, f = wS.lastIndex);
  return c.c = f < a.length ? a.substring(f, a.length) : "", c.fp = l, (fN.test(a) || v) && (c.e = 0), this._pt = c, c;
}, UE = function(t, e, i, a, s, r, l, c, f, d) {
  Nn(a) && (a = a(s || 0, t, r));
  var p = t[e], m = i !== "get" ? i : Nn(p) ? f ? t[e.indexOf("set") || !Nn(t["get" + e.substr(3)]) ? e : "get" + e.substr(3)](f) : t[e]() : p, g = Nn(p) ? f ? P6 : qN : NE, y;
  if (fi(a) && (~a.indexOf("random(") && (a = Dp(a)), a.charAt(1) === "=" && (y = Lf(m, a) + (Ui(m) || 0), (y || y === 0) && (a = y))), !d || m !== a || FM)
    return !isNaN(m * a) && a !== "" ? (y = new pa(this._pt, t, e, +m || 0, a - (m || 0), typeof p == "boolean" ? H6 : YN, 0, g), f && (y.fp = f), l && y.modifier(l, this, t), this._pt = y) : (!p && !(e in t) && AE(e, a), O6.call(this, t, e, m, a, g, c || qa.stringFilter, f));
}, N6 = function(t, e, i, a, s) {
  if (Nn(t) && (t = ep(t, s, e, i, a)), !hr(t) || t.style && t.nodeType || Bi(t) || uN(t))
    return fi(t) ? ep(t, s, e, i, a) : t;
  var r = {}, l;
  for (l in t)
    r[l] = ep(t[l], s, e, i, a);
  return r;
}, VN = function(t, e, i, a, s, r) {
  var l, c, f, d;
  if (Ba[t] && (l = new Ba[t]()).init(s, l.rawVars ? e[t] : N6(e[t], a, s, r, i), i, a, r) !== !1 && (i._pt = c = new pa(i._pt, s, t, 0, 1, l.render, l, 0, l.priority), i !== Sf))
    for (f = i._ptLookup[i._targets.indexOf(s)], d = l._props.length; d--; )
      f[l._props[d]] = c;
  return l;
}, Ko, FM, OE = function n(t, e, i) {
  var a = t.vars, s = a.ease, r = a.startAt, l = a.immediateRender, c = a.lazy, f = a.onUpdate, d = a.runBackwards, p = a.yoyoEase, m = a.keyframes, g = a.autoRevert, y = t._dur, x = t._startAt, M = t._targets, v = t.parent, S = v && v.data === "nested" ? v.vars.targets : M, E = t._overwrite === "auto" && !ME, T = t.timeline, w, D, U, O, R, C, B, Y, V, Q, J, P, q;
  if (T && (!m || !s) && (s = "none"), t._ease = Nu(s, Kf.ease), t._yEase = p ? PN(Nu(p === !0 ? s : p, Kf.ease)) : 0, p && t._yoyo && !t._repeat && (p = t._yEase, t._yEase = t._ease, t._ease = p), t._from = !T && !!a.runBackwards, !T || m && !a.stagger) {
    if (Y = M[0] ? Uu(M[0]).harness : 0, P = Y && a[Y.prop], w = Ev(a, RE), x && (x._zTime < 0 && x.progress(1), e < 0 && d && l && !g ? x.render(-1, !0) : x.revert(d && y ? I0 : o6), x._lazy = 0), r) {
      if (pl(t._startAt = Xn.set(M, Za({
        data: "isStart",
        overwrite: !1,
        parent: v,
        immediateRender: !0,
        lazy: !x && ha(c),
        startAt: null,
        delay: 0,
        onUpdate: f && function() {
          return Ha(t, "onUpdate");
        },
        stagger: 0
      }, r))), t._startAt._dp = 0, t._startAt._sat = t, e < 0 && (yi || !l && !g) && t._startAt.revert(I0), l && y && e <= 0 && i <= 0) {
        e && (t._zTime = e);
        return;
      }
    } else if (d && y && !x) {
      if (e && (l = !1), U = Za({
        overwrite: !1,
        data: "isFromStart",
        //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
        lazy: l && !x && ha(c),
        immediateRender: l,
        //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
        stagger: 0,
        parent: v
        //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
      }, w), P && (U[Y.prop] = P), pl(t._startAt = Xn.set(M, U)), t._startAt._dp = 0, t._startAt._sat = t, e < 0 && (yi ? t._startAt.revert(I0) : t._startAt.render(-1, !0)), t._zTime = e, !l)
        n(t._startAt, Li, Li);
      else if (!e)
        return;
    }
    for (t._pt = t._ptCache = 0, c = y && ha(c) || c && !y, D = 0; D < M.length; D++) {
      if (R = M[D], B = R._gsap || wE(M)[D]._gsap, t._ptLookup[D] = Q = {}, LM[B.id] && ul.length && bv(), J = S === M ? D : S.indexOf(R), Y && (V = new Y()).init(R, P || w, t, J, S) !== !1 && (t._pt = O = new pa(t._pt, R, V.name, 0, 1, V.render, V, 0, V.priority), V._props.forEach(function(G) {
        Q[G] = O;
      }), V.priority && (C = 1)), !Y || P)
        for (U in w)
          Ba[U] && (V = VN(U, w, t, J, R, S)) ? V.priority && (C = 1) : Q[U] = O = UE.call(t, R, U, "get", w[U], J, S, 0, a.stringFilter);
      t._op && t._op[D] && t.kill(R, t._op[D]), E && t._pt && (Ko = t, En.killTweensOf(R, Q, t.globalTime(e)), q = !t.parent, Ko = 0), t._pt && c && (LM[B.id] = 1);
    }
    C && WN(t), t._onInit && t._onInit(t);
  }
  t._onUpdate = f, t._initted = (!t._op || t._pt) && !q, m && e <= 0 && T.render(ur, !0, !0);
}, L6 = function(t, e, i, a, s, r, l, c) {
  var f = (t._pt && t._ptCache || (t._ptCache = {}))[e], d, p, m, g;
  if (!f)
    for (f = t._ptCache[e] = [], m = t._ptLookup, g = t._targets.length; g--; ) {
      if (d = m[g][e], d && d.d && d.d._pt)
        for (d = d.d._pt; d && d.p !== e && d.fp !== e; )
          d = d._next;
      if (!d)
        return FM = 1, t.vars[e] = "+=0", OE(t, l), FM = 0, c ? Cp(e + " not eligible for reset") : 1;
      f.push(d);
    }
  for (g = f.length; g--; )
    p = f[g], d = p._pt || p, d.s = (a || a === 0) && !s ? a : d.s + (a || 0) + r * d.c, d.c = i - d.s, p.e && (p.e = Pn(i) + Ui(p.e)), p.b && (p.b = d.s + Ui(p.b));
}, z6 = function(t, e) {
  var i = t[0] ? Uu(t[0]).harness : 0, a = i && i.aliases, s, r, l, c;
  if (!a)
    return e;
  s = Jf({}, e);
  for (r in a)
    if (r in s)
      for (c = a[r].split(","), l = c.length; l--; )
        s[c[l]] = s[r];
  return s;
}, B6 = function(t, e, i, a) {
  var s = e.ease || a || "power1.inOut", r, l;
  if (Bi(e))
    l = i[t] || (i[t] = []), e.forEach(function(c, f) {
      return l.push({
        t: f / (e.length - 1) * 100,
        v: c,
        e: s
      });
    });
  else
    for (r in e)
      l = i[r] || (i[r] = []), r === "ease" || l.push({
        t: parseFloat(t),
        v: e[r],
        e: s
      });
}, ep = function(t, e, i, a, s) {
  return Nn(t) ? t.call(e, i, a, s) : fi(t) && ~t.indexOf("random(") ? Dp(t) : t;
}, GN = CE + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert", XN = {};
da(GN + ",id,stagger,delay,duration,paused,scrollTrigger", function(n) {
  return XN[n] = 1;
});
var Xn = /* @__PURE__ */ function(n) {
  oN(t, n);
  function t(i, a, s, r) {
    var l;
    typeof a == "number" && (s.duration = a, a = s, s = null), l = n.call(this, r ? a : $d(a)) || this;
    var c = l.vars, f = c.duration, d = c.delay, p = c.immediateRender, m = c.stagger, g = c.overwrite, y = c.keyframes, x = c.defaults, M = c.scrollTrigger, v = c.yoyoEase, S = a.parent || En, E = (Bi(i) || uN(i) ? ao(i[0]) : "length" in a) ? [i] : ms(i), T, w, D, U, O, R, C, B;
    if (l._targets = E.length ? wE(E) : Cp("GSAP target " + i + " not found. https://gsap.com", !qa.nullTargetWarn) || [], l._ptLookup = [], l._overwrite = g, y || m || Cg(f) || Cg(d)) {
      if (a = l.vars, T = l.timeline = new Zi({
        data: "nested",
        defaults: x || {},
        targets: S && S.data === "nested" ? S.vars.targets : E
      }), T.kill(), T.parent = T._dp = Hr(l), T._start = 0, m || Cg(f) || Cg(d)) {
        if (U = E.length, C = m && RN(m), hr(m))
          for (O in m)
            ~GN.indexOf(O) && (B || (B = {}), B[O] = m[O]);
        for (w = 0; w < U; w++)
          D = Ev(a, XN), D.stagger = 0, v && (D.yoyoEase = v), B && Jf(D, B), R = E[w], D.duration = +ep(f, Hr(l), w, R, E), D.delay = (+ep(d, Hr(l), w, R, E) || 0) - l._delay, !m && U === 1 && D.delay && (l._delay = d = D.delay, l._start += d, D.delay = 0), T.to(R, D, C ? C(w, R, E) : 0), T._ease = Ne.none;
        T.duration() ? f = d = 0 : l.timeline = 0;
      } else if (y) {
        $d(Za(T.vars.defaults, {
          ease: "none"
        })), T._ease = Nu(y.ease || a.ease || "none");
        var Y = 0, V, Q, J;
        if (Bi(y))
          y.forEach(function(P) {
            return T.to(E, P, ">");
          }), T.duration();
        else {
          D = {};
          for (O in y)
            O === "ease" || O === "easeEach" || B6(O, y[O], D, y.easeEach);
          for (O in D)
            for (V = D[O].sort(function(P, q) {
              return P.t - q.t;
            }), Y = 0, w = 0; w < V.length; w++)
              Q = V[w], J = {
                ease: Q.e,
                duration: (Q.t - (w ? V[w - 1].t : 0)) / 100 * f
              }, J[O] = Q.v, T.to(E, J, Y), Y += J.duration;
          T.duration() < f && T.to({}, {
            duration: f - T.duration()
          });
        }
      }
      f || l.duration(f = T.duration());
    } else
      l.timeline = 0;
    return g === !0 && !ME && (Ko = Hr(l), En.killTweensOf(E), Ko = 0), er(S, Hr(l), s), a.reversed && l.reverse(), a.paused && l.paused(!0), (p || !f && !y && l._start === qn(S._time) && ha(p) && d6(Hr(l)) && S.data !== "nested") && (l._tTime = -1e-8, l.render(Math.max(0, -d) || 0)), M && bN(Hr(l), M), l;
  }
  var e = t.prototype;
  return e.render = function(a, s, r) {
    var l = this._time, c = this._tDur, f = this._dur, d = a < 0, p = a > c - Li && !d ? c : a < Li ? 0 : a, m, g, y, x, M, v, S, E, T;
    if (!f)
      m6(this, a, s, r);
    else if (p !== this._tTime || !a || r || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== d || this._lazy) {
      if (m = p, E = this.timeline, this._repeat) {
        if (x = f + this._rDelay, this._repeat < -1 && d)
          return this.totalTime(x * 100 + a, s, r);
        if (m = qn(p % x), p === c ? (y = this._repeat, m = f) : (M = qn(p / x), y = ~~M, y && y === M ? (m = f, y--) : m > f && (m = f)), v = this._yoyo && y & 1, v && (T = this._yEase, m = f - m), M = $f(this._tTime, x), m === l && !r && this._initted && y === M)
          return this._tTime = p, this;
        y !== M && (E && this._yEase && IN(E, v), this.vars.repeatRefresh && !v && !this._lock && m !== x && this._initted && (this._lock = r = 1, this.render(qn(x * y), !0).invalidate()._lock = 0));
      }
      if (!this._initted) {
        if (EN(this, d ? a : m, r, s, p))
          return this._tTime = 0, this;
        if (l !== this._time && !(r && this.vars.repeatRefresh && y !== M))
          return this;
        if (f !== this._dur)
          return this.render(a, s, r);
      }
      if (this._tTime = p, this._time = m, !this._act && this._ts && (this._act = 1, this._lazy = 0), this.ratio = S = (T || this._ease)(m / f), this._from && (this.ratio = S = 1 - S), !l && p && !s && !M && (Ha(this, "onStart"), this._tTime !== p))
        return this;
      for (g = this._pt; g; )
        g.r(S, g.d), g = g._next;
      E && E.render(a < 0 ? a : E._dur * E._ease(m / this._dur), s, r) || this._startAt && (this._zTime = a), this._onUpdate && !s && (d && zM(this, a, s, r), Ha(this, "onUpdate")), this._repeat && y !== M && this.vars.onRepeat && !s && this.parent && Ha(this, "onRepeat"), (p === this._tDur || !p) && this._tTime === p && (d && !this._onUpdate && zM(this, a, !0, !0), (a || !f) && (p === this._tDur && this._ts > 0 || !p && this._ts < 0) && pl(this, 1), !s && !(d && !l) && (p || l || v) && (Ha(this, p === c ? "onComplete" : "onReverseComplete", !0), this._prom && !(p < c && this.timeScale() > 0) && this._prom()));
    }
    return this;
  }, e.targets = function() {
    return this._targets;
  }, e.invalidate = function(a) {
    return (!a || !this.vars.runBackwards) && (this._startAt = 0), this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0, this._ptLookup = [], this.timeline && this.timeline.invalidate(a), n.prototype.invalidate.call(this, a);
  }, e.resetTo = function(a, s, r, l, c) {
    Up || Ia.wake(), this._ts || this.play();
    var f = Math.min(this._dur, (this._dp._time - this._start) * this._ts), d;
    return this._initted || OE(this, f), d = this._ease(f / this._dur), L6(this, a, s, r, l, d, f, c) ? this.resetTo(a, s, r, l, 1) : (V_(this, 0), this.parent || SN(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0), this.render(0));
  }, e.kill = function(a, s) {
    if (s === void 0 && (s = "all"), !a && (!s || s === "all"))
      return this._lazy = this._pt = 0, this.parent ? Nd(this) : this.scrollTrigger && this.scrollTrigger.kill(!!yi), this;
    if (this.timeline) {
      var r = this.timeline.totalDuration();
      return this.timeline.killTweensOf(a, s, Ko && Ko.vars.overwrite !== !0)._first || Nd(this), this.parent && r !== this.timeline.totalDuration() && th(this, this._dur * this.timeline._tDur / r, 0, 1), this;
    }
    var l = this._targets, c = a ? ms(a) : l, f = this._ptLookup, d = this._pt, p, m, g, y, x, M, v;
    if ((!s || s === "all") && f6(l, c))
      return s === "all" && (this._pt = 0), Nd(this);
    for (p = this._op = this._op || [], s !== "all" && (fi(s) && (x = {}, da(s, function(S) {
      return x[S] = 1;
    }), s = x), s = z6(l, s)), v = l.length; v--; )
      if (~c.indexOf(l[v])) {
        m = f[v], s === "all" ? (p[v] = s, y = m, g = {}) : (g = p[v] = p[v] || {}, y = s);
        for (x in y)
          M = m && m[x], M && ((!("kill" in M.d) || M.d.kill(x) === !0) && H_(this, M, "_pt"), delete m[x]), g !== "all" && (g[x] = 1);
      }
    return this._initted && !this._pt && d && Nd(this), this;
  }, t.to = function(a, s) {
    return new t(a, s, arguments[2]);
  }, t.from = function(a, s) {
    return tp(1, arguments);
  }, t.delayedCall = function(a, s, r, l) {
    return new t(s, 0, {
      immediateRender: !1,
      lazy: !1,
      overwrite: !1,
      delay: a,
      onComplete: s,
      onReverseComplete: s,
      onCompleteParams: r,
      onReverseCompleteParams: r,
      callbackScope: l
    });
  }, t.fromTo = function(a, s, r) {
    return tp(2, arguments);
  }, t.set = function(a, s) {
    return s.duration = 0, s.repeatDelay || (s.repeat = 0), new t(a, s);
  }, t.killTweensOf = function(a, s, r) {
    return En.killTweensOf(a, s, r);
  }, t;
}(Op);
Za(Xn.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
});
da("staggerTo,staggerFrom,staggerFromTo", function(n) {
  Xn[n] = function() {
    var t = new Zi(), e = PM.call(arguments, 0);
    return e.splice(n === "staggerFromTo" ? 5 : 4, 0, 0), t[n].apply(t, e);
  };
});
var NE = function(t, e, i) {
  return t[e] = i;
}, qN = function(t, e, i) {
  return t[e](i);
}, P6 = function(t, e, i, a) {
  return t[e](a.fp, i);
}, I6 = function(t, e, i) {
  return t.setAttribute(e, i);
}, LE = function(t, e) {
  return Nn(t[e]) ? qN : bE(t[e]) && t.setAttribute ? I6 : NE;
}, YN = function(t, e) {
  return e.set(e.t, e.p, Math.round((e.s + e.c * t) * 1e6) / 1e6, e);
}, H6 = function(t, e) {
  return e.set(e.t, e.p, !!(e.s + e.c * t), e);
}, kN = function(t, e) {
  var i = e._pt, a = "";
  if (!t && e.b)
    a = e.b;
  else if (t === 1 && e.e)
    a = e.e;
  else {
    for (; i; )
      a = i.p + (i.m ? i.m(i.s + i.c * t) : Math.round((i.s + i.c * t) * 1e4) / 1e4) + a, i = i._next;
    a += e.c;
  }
  e.set(e.t, e.p, a, e);
}, zE = function(t, e) {
  for (var i = e._pt; i; )
    i.r(t, i.d), i = i._next;
}, F6 = function(t, e, i, a) {
  for (var s = this._pt, r; s; )
    r = s._next, s.p === a && s.modifier(t, e, i), s = r;
}, V6 = function(t) {
  for (var e = this._pt, i, a; e; )
    a = e._next, e.p === t && !e.op || e.op === t ? H_(this, e, "_pt") : e.dep || (i = 1), e = a;
  return !i;
}, G6 = function(t, e, i, a) {
  a.mSet(t, e, a.m.call(a.tween, i, a.mt), a);
}, WN = function(t) {
  for (var e = t._pt, i, a, s, r; e; ) {
    for (i = e._next, a = s; a && a.pr > e.pr; )
      a = a._next;
    (e._prev = a ? a._prev : r) ? e._prev._next = e : s = e, (e._next = a) ? a._prev = e : r = e, e = i;
  }
  t._pt = s;
}, pa = /* @__PURE__ */ function() {
  function n(e, i, a, s, r, l, c, f, d) {
    this.t = i, this.s = s, this.c = r, this.p = a, this.r = l || YN, this.d = c || this, this.set = f || NE, this.pr = d || 0, this._next = e, e && (e._prev = this);
  }
  var t = n.prototype;
  return t.modifier = function(i, a, s) {
    this.mSet = this.mSet || this.set, this.set = G6, this.m = i, this.mt = s, this.tween = a;
  }, n;
}();
da(CE + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function(n) {
  return RE[n] = 1;
});
Wa.TweenMax = Wa.TweenLite = Xn;
Wa.TimelineLite = Wa.TimelineMax = Zi;
En = new Zi({
  sortChildren: !1,
  defaults: Kf,
  autoRemoveChildren: !0,
  id: "root",
  smoothChildTiming: !0
});
qa.stringFilter = BN;
var Lu = [], F0 = {}, X6 = [], bC = 0, q6 = 0, LS = function(t) {
  return (F0[t] || X6).map(function(e) {
    return e();
  });
}, VM = function() {
  var t = Date.now(), e = [];
  t - bC > 2 && (LS("matchMediaInit"), Lu.forEach(function(i) {
    var a = i.queries, s = i.conditions, r, l, c, f;
    for (l in a)
      r = $s.matchMedia(a[l]).matches, r && (c = 1), r !== s[l] && (s[l] = r, f = 1);
    f && (i.revert(), c && e.push(i));
  }), LS("matchMediaRevert"), e.forEach(function(i) {
    return i.onMatch(i, function(a) {
      return i.add(null, a);
    });
  }), bC = t, LS("matchMedia"));
}, ZN = /* @__PURE__ */ function() {
  function n(e, i) {
    this.selector = i && IM(i), this.data = [], this._r = [], this.isReverted = !1, this.id = q6++, e && this.add(e);
  }
  var t = n.prototype;
  return t.add = function(i, a, s) {
    Nn(i) && (s = a, a = i, i = Nn);
    var r = this, l = function() {
      var f = _n, d = r.selector, p;
      return f && f !== r && f.data.push(r), s && (r.selector = IM(s)), _n = r, p = a.apply(r, arguments), Nn(p) && r._r.push(p), _n = f, r.selector = d, r.isReverted = !1, p;
    };
    return r.last = l, i === Nn ? l(r, function(c) {
      return r.add(null, c);
    }) : i ? r[i] = l : l;
  }, t.ignore = function(i) {
    var a = _n;
    _n = null, i(this), _n = a;
  }, t.getTweens = function() {
    var i = [];
    return this.data.forEach(function(a) {
      return a instanceof n ? i.push.apply(i, a.getTweens()) : a instanceof Xn && !(a.parent && a.parent.data === "nested") && i.push(a);
    }), i;
  }, t.clear = function() {
    this._r.length = this.data.length = 0;
  }, t.kill = function(i, a) {
    var s = this;
    if (i ? function() {
      for (var l = s.getTweens(), c = s.data.length, f; c--; )
        f = s.data[c], f.data === "isFlip" && (f.revert(), f.getChildren(!0, !0, !1).forEach(function(d) {
          return l.splice(l.indexOf(d), 1);
        }));
      for (l.map(function(d) {
        return {
          g: d._dur || d._delay || d._sat && !d._sat.vars.immediateRender ? d.globalTime(0) : -1 / 0,
          t: d
        };
      }).sort(function(d, p) {
        return p.g - d.g || -1 / 0;
      }).forEach(function(d) {
        return d.t.revert(i);
      }), c = s.data.length; c--; )
        f = s.data[c], f instanceof Zi ? f.data !== "nested" && (f.scrollTrigger && f.scrollTrigger.revert(), f.kill()) : !(f instanceof Xn) && f.revert && f.revert(i);
      s._r.forEach(function(d) {
        return d(i, s);
      }), s.isReverted = !0;
    }() : this.data.forEach(function(l) {
      return l.kill && l.kill();
    }), this.clear(), a)
      for (var r = Lu.length; r--; )
        Lu[r].id === this.id && Lu.splice(r, 1);
  }, t.revert = function(i) {
    this.kill(i || {});
  }, n;
}(), Y6 = /* @__PURE__ */ function() {
  function n(e) {
    this.contexts = [], this.scope = e, _n && _n.data.push(this);
  }
  var t = n.prototype;
  return t.add = function(i, a, s) {
    hr(i) || (i = {
      matches: i
    });
    var r = new ZN(0, s || this.scope), l = r.conditions = {}, c, f, d;
    _n && !r.selector && (r.selector = _n.selector), this.contexts.push(r), a = r.add("onMatch", a), r.queries = i;
    for (f in i)
      f === "all" ? d = 1 : (c = $s.matchMedia(i[f]), c && (Lu.indexOf(r) < 0 && Lu.push(r), (l[f] = c.matches) && (d = 1), c.addListener ? c.addListener(VM) : c.addEventListener("change", VM)));
    return d && a(r, function(p) {
      return r.add(null, p);
    }), this;
  }, t.revert = function(i) {
    this.kill(i || {});
  }, t.kill = function(i) {
    this.contexts.forEach(function(a) {
      return a.kill(i, !0);
    });
  }, n;
}(), Av = {
  registerPlugin: function() {
    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
      e[i] = arguments[i];
    e.forEach(function(a) {
      return NN(a);
    });
  },
  timeline: function(t) {
    return new Zi(t);
  },
  getTweensOf: function(t, e) {
    return En.getTweensOf(t, e);
  },
  getProperty: function(t, e, i, a) {
    fi(t) && (t = ms(t)[0]);
    var s = Uu(t || {}).get, r = i ? xN : yN;
    return i === "native" && (i = ""), t && (e ? r((Ba[e] && Ba[e].get || s)(t, e, i, a)) : function(l, c, f) {
      return r((Ba[l] && Ba[l].get || s)(t, l, c, f));
    });
  },
  quickSetter: function(t, e, i) {
    if (t = ms(t), t.length > 1) {
      var a = t.map(function(d) {
        return va.quickSetter(d, e, i);
      }), s = a.length;
      return function(d) {
        for (var p = s; p--; )
          a[p](d);
      };
    }
    t = t[0] || {};
    var r = Ba[e], l = Uu(t), c = l.harness && (l.harness.aliases || {})[e] || e, f = r ? function(d) {
      var p = new r();
      Sf._pt = 0, p.init(t, i ? d + i : d, Sf, 0, [t]), p.render(1, p), Sf._pt && zE(1, Sf);
    } : l.set(t, c);
    return r ? f : function(d) {
      return f(t, c, i ? d + i : d, l, 1);
    };
  },
  quickTo: function(t, e, i) {
    var a, s = va.to(t, Za((a = {}, a[e] = "+=0.1", a.paused = !0, a.stagger = 0, a), i || {})), r = function(c, f, d) {
      return s.resetTo(e, c, f, d);
    };
    return r.tween = s, r;
  },
  isTweening: function(t) {
    return En.getTweensOf(t, !0).length > 0;
  },
  defaults: function(t) {
    return t && t.ease && (t.ease = Nu(t.ease, Kf.ease)), _C(Kf, t || {});
  },
  config: function(t) {
    return _C(qa, t || {});
  },
  registerEffect: function(t) {
    var e = t.name, i = t.effect, a = t.plugins, s = t.defaults, r = t.extendTimeline;
    (a || "").split(",").forEach(function(l) {
      return l && !Ba[l] && !Wa[l] && Cp(e + " effect requires " + l + " plugin.");
    }), DS[e] = function(l, c, f) {
      return i(ms(l), Za(c || {}, s), f);
    }, r && (Zi.prototype[e] = function(l, c, f) {
      return this.add(DS[e](l, hr(c) ? c : (f = c) && {}, this), f);
    });
  },
  registerEase: function(t, e) {
    Ne[t] = Nu(e);
  },
  parseEase: function(t, e) {
    return arguments.length ? Nu(t, e) : Ne;
  },
  getById: function(t) {
    return En.getById(t);
  },
  exportRoot: function(t, e) {
    t === void 0 && (t = {});
    var i = new Zi(t), a, s;
    for (i.smoothChildTiming = ha(t.smoothChildTiming), En.remove(i), i._dp = 0, i._time = i._tTime = En._time, a = En._first; a; )
      s = a._next, (e || !(!a._dur && a instanceof Xn && a.vars.onComplete === a._targets[0])) && er(i, a, a._start - a._delay), a = s;
    return er(En, i, 0), i;
  },
  context: function(t, e) {
    return t ? new ZN(t, e) : _n;
  },
  matchMedia: function(t) {
    return new Y6(t);
  },
  matchMediaRefresh: function() {
    return Lu.forEach(function(t) {
      var e = t.conditions, i, a;
      for (a in e)
        e[a] && (e[a] = !1, i = 1);
      i && t.revert();
    }) || VM();
  },
  addEventListener: function(t, e) {
    var i = F0[t] || (F0[t] = []);
    ~i.indexOf(e) || i.push(e);
  },
  removeEventListener: function(t, e) {
    var i = F0[t], a = i && i.indexOf(e);
    a >= 0 && i.splice(a, 1);
  },
  utils: {
    wrap: b6,
    wrapYoyo: E6,
    distribute: RN,
    random: wN,
    snap: CN,
    normalize: M6,
    getUnit: Ui,
    clamp: _6,
    splitColor: LN,
    toArray: ms,
    selector: IM,
    mapRange: UN,
    pipe: x6,
    unitize: S6,
    interpolate: T6,
    shuffle: AN
  },
  install: pN,
  effects: DS,
  ticker: Ia,
  updateRoot: Zi.updateRoot,
  plugins: Ba,
  globalTimeline: En,
  core: {
    PropTween: pa,
    globals: mN,
    Tween: Xn,
    Timeline: Zi,
    Animation: Op,
    getCache: Uu,
    _removeLinkedListItem: H_,
    reverting: function() {
      return yi;
    },
    context: function(t) {
      return t && _n && (_n.data.push(t), t._ctx = _n), _n;
    },
    suppressOverwrites: function(t) {
      return ME = t;
    }
  }
};
da("to,from,fromTo,delayedCall,set,killTweensOf", function(n) {
  return Av[n] = Xn[n];
});
Ia.add(Zi.updateRoot);
Sf = Av.to({}, {
  duration: 0
});
var k6 = function(t, e) {
  for (var i = t._pt; i && i.p !== e && i.op !== e && i.fp !== e; )
    i = i._next;
  return i;
}, W6 = function(t, e) {
  var i = t._targets, a, s, r;
  for (a in e)
    for (s = i.length; s--; )
      r = t._ptLookup[s][a], r && (r = r.d) && (r._pt && (r = k6(r, a)), r && r.modifier && r.modifier(e[a], t, i[s], a));
}, zS = function(t, e) {
  return {
    name: t,
    headless: 1,
    rawVars: 1,
    //don't pre-process function-based values or "random()" strings.
    init: function(a, s, r) {
      r._onInit = function(l) {
        var c, f;
        if (fi(s) && (c = {}, da(s, function(d) {
          return c[d] = 1;
        }), s = c), e) {
          c = {};
          for (f in s)
            c[f] = e(s[f]);
          s = c;
        }
        W6(l, s);
      };
    }
  };
}, va = Av.registerPlugin({
  name: "attr",
  init: function(t, e, i, a, s) {
    var r, l, c;
    this.tween = i;
    for (r in e)
      c = t.getAttribute(r) || "", l = this.add(t, "setAttribute", (c || 0) + "", e[r], a, s, 0, 0, r), l.op = r, l.b = c, this._props.push(r);
  },
  render: function(t, e) {
    for (var i = e._pt; i; )
      yi ? i.set(i.t, i.p, i.b, i) : i.r(t, i.d), i = i._next;
  }
}, {
  name: "endArray",
  headless: 1,
  init: function(t, e) {
    for (var i = e.length; i--; )
      this.add(t, i, t[i] || 0, e[i], 0, 0, 0, 0, 0, 1);
  }
}, zS("roundProps", HM), zS("modifiers"), zS("snap", CN)) || Av;
Xn.version = Zi.version = va.version = "3.13.0";
dN = 1;
EE() && eh();
Ne.Power0;
Ne.Power1;
Ne.Power2;
Ne.Power3;
Ne.Power4;
Ne.Linear;
Ne.Quad;
Ne.Cubic;
Ne.Quart;
Ne.Quint;
Ne.Strong;
Ne.Elastic;
Ne.Back;
Ne.SteppedEase;
Ne.Bounce;
Ne.Sine;
Ne.Expo;
Ne.Circ;
/*!
 * CSSPlugin 3.13.0
 * https://gsap.com
 *
 * Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/
var EC, Jo, zf, BE, vu, TC, PE, Z6 = function() {
  return typeof window < "u";
}, so = {}, du = 180 / Math.PI, Bf = Math.PI / 180, Oc = Math.atan2, AC = 1e8, IE = /([A-Z])/g, j6 = /(left|right|width|margin|padding|x)/i, Q6 = /[\s,\(]\S/, ir = {
  autoAlpha: "opacity,visibility",
  scale: "scaleX,scaleY",
  alpha: "opacity"
}, GM = function(t, e) {
  return e.set(e.t, e.p, Math.round((e.s + e.c * t) * 1e4) / 1e4 + e.u, e);
}, K6 = function(t, e) {
  return e.set(e.t, e.p, t === 1 ? e.e : Math.round((e.s + e.c * t) * 1e4) / 1e4 + e.u, e);
}, J6 = function(t, e) {
  return e.set(e.t, e.p, t ? Math.round((e.s + e.c * t) * 1e4) / 1e4 + e.u : e.b, e);
}, $6 = function(t, e) {
  var i = e.s + e.c * t;
  e.set(e.t, e.p, ~~(i + (i < 0 ? -0.5 : 0.5)) + e.u, e);
}, jN = function(t, e) {
  return e.set(e.t, e.p, t ? e.e : e.b, e);
}, QN = function(t, e) {
  return e.set(e.t, e.p, t !== 1 ? e.b : e.e, e);
}, tF = function(t, e, i) {
  return t.style[e] = i;
}, eF = function(t, e, i) {
  return t.style.setProperty(e, i);
}, nF = function(t, e, i) {
  return t._gsap[e] = i;
}, iF = function(t, e, i) {
  return t._gsap.scaleX = t._gsap.scaleY = i;
}, aF = function(t, e, i, a, s) {
  var r = t._gsap;
  r.scaleX = r.scaleY = i, r.renderTransform(s, r);
}, sF = function(t, e, i, a, s) {
  var r = t._gsap;
  r[e] = i, r.renderTransform(s, r);
}, Tn = "transform", ma = Tn + "Origin", rF = function n(t, e) {
  var i = this, a = this.target, s = a.style, r = a._gsap;
  if (t in so && s) {
    if (this.tfm = this.tfm || {}, t !== "transform")
      t = ir[t] || t, ~t.indexOf(",") ? t.split(",").forEach(function(l) {
        return i.tfm[l] = Fr(a, l);
      }) : this.tfm[t] = r.x ? r[t] : Fr(a, t), t === ma && (this.tfm.zOrigin = r.zOrigin);
    else
      return ir.transform.split(",").forEach(function(l) {
        return n.call(i, l, e);
      });
    if (this.props.indexOf(Tn) >= 0)
      return;
    r.svg && (this.svgo = a.getAttribute("data-svg-origin"), this.props.push(ma, e, "")), t = Tn;
  }
  (s || e) && this.props.push(t, e, s[t]);
}, KN = function(t) {
  t.translate && (t.removeProperty("translate"), t.removeProperty("scale"), t.removeProperty("rotate"));
}, oF = function() {
  var t = this.props, e = this.target, i = e.style, a = e._gsap, s, r;
  for (s = 0; s < t.length; s += 3)
    t[s + 1] ? t[s + 1] === 2 ? e[t[s]](t[s + 2]) : e[t[s]] = t[s + 2] : t[s + 2] ? i[t[s]] = t[s + 2] : i.removeProperty(t[s].substr(0, 2) === "--" ? t[s] : t[s].replace(IE, "-$1").toLowerCase());
  if (this.tfm) {
    for (r in this.tfm)
      a[r] = this.tfm[r];
    a.svg && (a.renderTransform(), e.setAttribute("data-svg-origin", this.svgo || "")), s = PE(), (!s || !s.isStart) && !i[Tn] && (KN(i), a.zOrigin && i[ma] && (i[ma] += " " + a.zOrigin + "px", a.zOrigin = 0, a.renderTransform()), a.uncache = 1);
  }
}, JN = function(t, e) {
  var i = {
    target: t,
    props: [],
    revert: oF,
    save: rF
  };
  return t._gsap || va.core.getCache(t), e && t.style && t.nodeType && e.split(",").forEach(function(a) {
    return i.save(a);
  }), i;
}, $N, XM = function(t, e) {
  var i = Jo.createElementNS ? Jo.createElementNS((e || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), t) : Jo.createElement(t);
  return i && i.style ? i : Jo.createElement(t);
}, gs = function n(t, e, i) {
  var a = getComputedStyle(t);
  return a[e] || a.getPropertyValue(e.replace(IE, "-$1").toLowerCase()) || a.getPropertyValue(e) || !i && n(t, nh(e) || e, 1) || "";
}, RC = "O,Moz,ms,Ms,Webkit".split(","), nh = function(t, e, i) {
  var a = e || vu, s = a.style, r = 5;
  if (t in s && !i)
    return t;
  for (t = t.charAt(0).toUpperCase() + t.substr(1); r-- && !(RC[r] + t in s); )
    ;
  return r < 0 ? null : (r === 3 ? "ms" : r >= 0 ? RC[r] : "") + t;
}, qM = function() {
  Z6() && window.document && (EC = window, Jo = EC.document, zf = Jo.documentElement, vu = XM("div") || {
    style: {}
  }, XM("div"), Tn = nh(Tn), ma = Tn + "Origin", vu.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0", $N = !!nh("perspective"), PE = va.core.reverting, BE = 1);
}, CC = function(t) {
  var e = t.ownerSVGElement, i = XM("svg", e && e.getAttribute("xmlns") || "http://www.w3.org/2000/svg"), a = t.cloneNode(!0), s;
  a.style.display = "block", i.appendChild(a), zf.appendChild(i);
  try {
    s = a.getBBox();
  } catch {
  }
  return i.removeChild(a), zf.removeChild(i), s;
}, wC = function(t, e) {
  for (var i = e.length; i--; )
    if (t.hasAttribute(e[i]))
      return t.getAttribute(e[i]);
}, tL = function(t) {
  var e, i;
  try {
    e = t.getBBox();
  } catch {
    e = CC(t), i = 1;
  }
  return e && (e.width || e.height) || i || (e = CC(t)), e && !e.width && !e.x && !e.y ? {
    x: +wC(t, ["x", "cx", "x1"]) || 0,
    y: +wC(t, ["y", "cy", "y1"]) || 0,
    width: 0,
    height: 0
  } : e;
}, eL = function(t) {
  return !!(t.getCTM && (!t.parentNode || t.ownerSVGElement) && tL(t));
}, Gu = function(t, e) {
  if (e) {
    var i = t.style, a;
    e in so && e !== ma && (e = Tn), i.removeProperty ? (a = e.substr(0, 2), (a === "ms" || e.substr(0, 6) === "webkit") && (e = "-" + e), i.removeProperty(a === "--" ? e : e.replace(IE, "-$1").toLowerCase())) : i.removeAttribute(e);
  }
}, $o = function(t, e, i, a, s, r) {
  var l = new pa(t._pt, e, i, 0, 1, r ? QN : jN);
  return t._pt = l, l.b = a, l.e = s, t._props.push(i), l;
}, DC = {
  deg: 1,
  rad: 1,
  turn: 1
}, lF = {
  grid: 1,
  flex: 1
}, ml = function n(t, e, i, a) {
  var s = parseFloat(i) || 0, r = (i + "").trim().substr((s + "").length) || "px", l = vu.style, c = j6.test(e), f = t.tagName.toLowerCase() === "svg", d = (f ? "client" : "offset") + (c ? "Width" : "Height"), p = 100, m = a === "px", g = a === "%", y, x, M, v;
  if (a === r || !s || DC[a] || DC[r])
    return s;
  if (r !== "px" && !m && (s = n(t, e, i, "px")), v = t.getCTM && eL(t), (g || r === "%") && (so[e] || ~e.indexOf("adius")))
    return y = v ? t.getBBox()[c ? "width" : "height"] : t[d], Pn(g ? s / y * p : s / 100 * y);
  if (l[c ? "width" : "height"] = p + (m ? r : a), x = a !== "rem" && ~e.indexOf("adius") || a === "em" && t.appendChild && !f ? t : t.parentNode, v && (x = (t.ownerSVGElement || {}).parentNode), (!x || x === Jo || !x.appendChild) && (x = Jo.body), M = x._gsap, M && g && M.width && c && M.time === Ia.time && !M.uncache)
    return Pn(s / M.width * p);
  if (g && (e === "height" || e === "width")) {
    var S = t.style[e];
    t.style[e] = p + a, y = t[d], S ? t.style[e] = S : Gu(t, e);
  } else
    (g || r === "%") && !lF[gs(x, "display")] && (l.position = gs(t, "position")), x === t && (l.position = "static"), x.appendChild(vu), y = vu[d], x.removeChild(vu), l.position = "absolute";
  return c && g && (M = Uu(x), M.time = Ia.time, M.width = x[d]), Pn(m ? y * s / p : y && s ? p / y * s : 0);
}, Fr = function(t, e, i, a) {
  var s;
  return BE || qM(), e in ir && e !== "transform" && (e = ir[e], ~e.indexOf(",") && (e = e.split(",")[0])), so[e] && e !== "transform" ? (s = Lp(t, a), s = e !== "transformOrigin" ? s[e] : s.svg ? s.origin : Cv(gs(t, ma)) + " " + s.zOrigin + "px") : (s = t.style[e], (!s || s === "auto" || a || ~(s + "").indexOf("calc(")) && (s = Rv[e] && Rv[e](t, e, i) || gs(t, e) || vN(t, e) || (e === "opacity" ? 1 : 0))), i && !~(s + "").trim().indexOf(" ") ? ml(t, e, s, i) + i : s;
}, uF = function(t, e, i, a) {
  if (!i || i === "none") {
    var s = nh(e, t, 1), r = s && gs(t, s, 1);
    r && r !== i ? (e = s, i = r) : e === "borderColor" && (i = gs(t, "borderTopColor"));
  }
  var l = new pa(this._pt, t.style, e, 0, 1, kN), c = 0, f = 0, d, p, m, g, y, x, M, v, S, E, T, w;
  if (l.b = i, l.e = a, i += "", a += "", a.substring(0, 6) === "var(--" && (a = gs(t, a.substring(4, a.indexOf(")")))), a === "auto" && (x = t.style[e], t.style[e] = a, a = gs(t, e) || a, x ? t.style[e] = x : Gu(t, e)), d = [i, a], BN(d), i = d[0], a = d[1], m = i.match(xf) || [], w = a.match(xf) || [], w.length) {
    for (; p = xf.exec(a); )
      M = p[0], S = a.substring(c, p.index), y ? y = (y + 1) % 5 : (S.substr(-5) === "rgba(" || S.substr(-5) === "hsla(") && (y = 1), M !== (x = m[f++] || "") && (g = parseFloat(x) || 0, T = x.substr((g + "").length), M.charAt(1) === "=" && (M = Lf(g, M) + T), v = parseFloat(M), E = M.substr((v + "").length), c = xf.lastIndex - E.length, E || (E = E || qa.units[e] || T, c === a.length && (a += E, l.e += E)), T !== E && (g = ml(t, e, x, E) || 0), l._pt = {
        _next: l._pt,
        p: S || f === 1 ? S : ",",
        //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
        s: g,
        c: v - g,
        m: y && y < 4 || e === "zIndex" ? Math.round : 0
      });
    l.c = c < a.length ? a.substring(c, a.length) : "";
  } else
    l.r = e === "display" && a === "none" ? QN : jN;
  return fN.test(a) && (l.e = 0), this._pt = l, l;
}, UC = {
  top: "0%",
  bottom: "100%",
  left: "0%",
  right: "100%",
  center: "50%"
}, cF = function(t) {
  var e = t.split(" "), i = e[0], a = e[1] || "50%";
  return (i === "top" || i === "bottom" || a === "left" || a === "right") && (t = i, i = a, a = t), e[0] = UC[i] || i, e[1] = UC[a] || a, e.join(" ");
}, fF = function(t, e) {
  if (e.tween && e.tween._time === e.tween._dur) {
    var i = e.t, a = i.style, s = e.u, r = i._gsap, l, c, f;
    if (s === "all" || s === !0)
      a.cssText = "", c = 1;
    else
      for (s = s.split(","), f = s.length; --f > -1; )
        l = s[f], so[l] && (c = 1, l = l === "transformOrigin" ? ma : Tn), Gu(i, l);
    c && (Gu(i, Tn), r && (r.svg && i.removeAttribute("transform"), a.scale = a.rotate = a.translate = "none", Lp(i, 1), r.uncache = 1, KN(a)));
  }
}, Rv = {
  clearProps: function(t, e, i, a, s) {
    if (s.data !== "isFromStart") {
      var r = t._pt = new pa(t._pt, e, i, 0, 0, fF);
      return r.u = a, r.pr = -10, r.tween = s, t._props.push(i), 1;
    }
  }
  /* className feature (about 0.4kb gzipped).
  , className(plugin, target, property, endValue, tween) {
  	let _renderClassName = (ratio, data) => {
  			data.css.render(ratio, data.css);
  			if (!ratio || ratio === 1) {
  				let inline = data.rmv,
  					target = data.t,
  					p;
  				target.setAttribute("class", ratio ? data.e : data.b);
  				for (p in inline) {
  					_removeProperty(target, p);
  				}
  			}
  		},
  		_getAllStyles = (target) => {
  			let styles = {},
  				computed = getComputedStyle(target),
  				p;
  			for (p in computed) {
  				if (isNaN(p) && p !== "cssText" && p !== "length") {
  					styles[p] = computed[p];
  				}
  			}
  			_setDefaults(styles, _parseTransform(target, 1));
  			return styles;
  		},
  		startClassList = target.getAttribute("class"),
  		style = target.style,
  		cssText = style.cssText,
  		cache = target._gsap,
  		classPT = cache.classPT,
  		inlineToRemoveAtEnd = {},
  		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
  		changingVars = {},
  		startVars = _getAllStyles(target),
  		transformRelated = /(transform|perspective)/i,
  		endVars, p;
  	if (classPT) {
  		classPT.r(1, classPT.d);
  		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
  	}
  	target.setAttribute("class", data.e);
  	endVars = _getAllStyles(target, true);
  	target.setAttribute("class", startClassList);
  	for (p in endVars) {
  		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
  			changingVars[p] = endVars[p];
  			if (!style[p] && style[p] !== "0") {
  				inlineToRemoveAtEnd[p] = 1;
  			}
  		}
  	}
  	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
  	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
  		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
  	}
  	_parseTransform(target, true); //to clear the caching of transforms
  	data.css = new gsap.plugins.css();
  	data.css.init(target, changingVars, tween);
  	plugin._props.push(...data.css._props);
  	return 1;
  }
  */
}, Np = [1, 0, 0, 1, 0, 0], nL = {}, iL = function(t) {
  return t === "matrix(1, 0, 0, 1, 0, 0)" || t === "none" || !t;
}, OC = function(t) {
  var e = gs(t, Tn);
  return iL(e) ? Np : e.substr(7).match(cN).map(Pn);
}, HE = function(t, e) {
  var i = t._gsap || Uu(t), a = t.style, s = OC(t), r, l, c, f;
  return i.svg && t.getAttribute("transform") ? (c = t.transform.baseVal.consolidate().matrix, s = [c.a, c.b, c.c, c.d, c.e, c.f], s.join(",") === "1,0,0,1,0,0" ? Np : s) : (s === Np && !t.offsetParent && t !== zf && !i.svg && (c = a.display, a.display = "block", r = t.parentNode, (!r || !t.offsetParent && !t.getBoundingClientRect().width) && (f = 1, l = t.nextElementSibling, zf.appendChild(t)), s = OC(t), c ? a.display = c : Gu(t, "display"), f && (l ? r.insertBefore(t, l) : r ? r.appendChild(t) : zf.removeChild(t))), e && s.length > 6 ? [s[0], s[1], s[4], s[5], s[12], s[13]] : s);
}, YM = function(t, e, i, a, s, r) {
  var l = t._gsap, c = s || HE(t, !0), f = l.xOrigin || 0, d = l.yOrigin || 0, p = l.xOffset || 0, m = l.yOffset || 0, g = c[0], y = c[1], x = c[2], M = c[3], v = c[4], S = c[5], E = e.split(" "), T = parseFloat(E[0]) || 0, w = parseFloat(E[1]) || 0, D, U, O, R;
  i ? c !== Np && (U = g * M - y * x) && (O = T * (M / U) + w * (-x / U) + (x * S - M * v) / U, R = T * (-y / U) + w * (g / U) - (g * S - y * v) / U, T = O, w = R) : (D = tL(t), T = D.x + (~E[0].indexOf("%") ? T / 100 * D.width : T), w = D.y + (~(E[1] || E[0]).indexOf("%") ? w / 100 * D.height : w)), a || a !== !1 && l.smooth ? (v = T - f, S = w - d, l.xOffset = p + (v * g + S * x) - v, l.yOffset = m + (v * y + S * M) - S) : l.xOffset = l.yOffset = 0, l.xOrigin = T, l.yOrigin = w, l.smooth = !!a, l.origin = e, l.originIsAbsolute = !!i, t.style[ma] = "0px 0px", r && ($o(r, l, "xOrigin", f, T), $o(r, l, "yOrigin", d, w), $o(r, l, "xOffset", p, l.xOffset), $o(r, l, "yOffset", m, l.yOffset)), t.setAttribute("data-svg-origin", T + " " + w);
}, Lp = function(t, e) {
  var i = t._gsap || new FN(t);
  if ("x" in i && !e && !i.uncache)
    return i;
  var a = t.style, s = i.scaleX < 0, r = "px", l = "deg", c = getComputedStyle(t), f = gs(t, ma) || "0", d, p, m, g, y, x, M, v, S, E, T, w, D, U, O, R, C, B, Y, V, Q, J, P, q, G, it, lt, mt, Rt, Qt, $, ht;
  return d = p = m = x = M = v = S = E = T = 0, g = y = 1, i.svg = !!(t.getCTM && eL(t)), c.translate && ((c.translate !== "none" || c.scale !== "none" || c.rotate !== "none") && (a[Tn] = (c.translate !== "none" ? "translate3d(" + (c.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (c.rotate !== "none" ? "rotate(" + c.rotate + ") " : "") + (c.scale !== "none" ? "scale(" + c.scale.split(" ").join(",") + ") " : "") + (c[Tn] !== "none" ? c[Tn] : "")), a.scale = a.rotate = a.translate = "none"), U = HE(t, i.svg), i.svg && (i.uncache ? (G = t.getBBox(), f = i.xOrigin - G.x + "px " + (i.yOrigin - G.y) + "px", q = "") : q = !e && t.getAttribute("data-svg-origin"), YM(t, q || f, !!q || i.originIsAbsolute, i.smooth !== !1, U)), w = i.xOrigin || 0, D = i.yOrigin || 0, U !== Np && (B = U[0], Y = U[1], V = U[2], Q = U[3], d = J = U[4], p = P = U[5], U.length === 6 ? (g = Math.sqrt(B * B + Y * Y), y = Math.sqrt(Q * Q + V * V), x = B || Y ? Oc(Y, B) * du : 0, S = V || Q ? Oc(V, Q) * du + x : 0, S && (y *= Math.abs(Math.cos(S * Bf))), i.svg && (d -= w - (w * B + D * V), p -= D - (w * Y + D * Q))) : (ht = U[6], Qt = U[7], lt = U[8], mt = U[9], Rt = U[10], $ = U[11], d = U[12], p = U[13], m = U[14], O = Oc(ht, Rt), M = O * du, O && (R = Math.cos(-O), C = Math.sin(-O), q = J * R + lt * C, G = P * R + mt * C, it = ht * R + Rt * C, lt = J * -C + lt * R, mt = P * -C + mt * R, Rt = ht * -C + Rt * R, $ = Qt * -C + $ * R, J = q, P = G, ht = it), O = Oc(-V, Rt), v = O * du, O && (R = Math.cos(-O), C = Math.sin(-O), q = B * R - lt * C, G = Y * R - mt * C, it = V * R - Rt * C, $ = Q * C + $ * R, B = q, Y = G, V = it), O = Oc(Y, B), x = O * du, O && (R = Math.cos(O), C = Math.sin(O), q = B * R + Y * C, G = J * R + P * C, Y = Y * R - B * C, P = P * R - J * C, B = q, J = G), M && Math.abs(M) + Math.abs(x) > 359.9 && (M = x = 0, v = 180 - v), g = Pn(Math.sqrt(B * B + Y * Y + V * V)), y = Pn(Math.sqrt(P * P + ht * ht)), O = Oc(J, P), S = Math.abs(O) > 2e-4 ? O * du : 0, T = $ ? 1 / ($ < 0 ? -$ : $) : 0), i.svg && (q = t.getAttribute("transform"), i.forceCSS = t.setAttribute("transform", "") || !iL(gs(t, Tn)), q && t.setAttribute("transform", q))), Math.abs(S) > 90 && Math.abs(S) < 270 && (s ? (g *= -1, S += x <= 0 ? 180 : -180, x += x <= 0 ? 180 : -180) : (y *= -1, S += S <= 0 ? 180 : -180)), e = e || i.uncache, i.x = d - ((i.xPercent = d && (!e && i.xPercent || (Math.round(t.offsetWidth / 2) === Math.round(-d) ? -50 : 0))) ? t.offsetWidth * i.xPercent / 100 : 0) + r, i.y = p - ((i.yPercent = p && (!e && i.yPercent || (Math.round(t.offsetHeight / 2) === Math.round(-p) ? -50 : 0))) ? t.offsetHeight * i.yPercent / 100 : 0) + r, i.z = m + r, i.scaleX = Pn(g), i.scaleY = Pn(y), i.rotation = Pn(x) + l, i.rotationX = Pn(M) + l, i.rotationY = Pn(v) + l, i.skewX = S + l, i.skewY = E + l, i.transformPerspective = T + r, (i.zOrigin = parseFloat(f.split(" ")[2]) || !e && i.zOrigin || 0) && (a[ma] = Cv(f)), i.xOffset = i.yOffset = 0, i.force3D = qa.force3D, i.renderTransform = i.svg ? dF : $N ? aL : hF, i.uncache = 0, i;
}, Cv = function(t) {
  return (t = t.split(" "))[0] + " " + t[1];
}, BS = function(t, e, i) {
  var a = Ui(e);
  return Pn(parseFloat(e) + parseFloat(ml(t, "x", i + "px", a))) + a;
}, hF = function(t, e) {
  e.z = "0px", e.rotationY = e.rotationX = "0deg", e.force3D = 0, aL(t, e);
}, Wl = "0deg", cd = "0px", Zl = ") ", aL = function(t, e) {
  var i = e || this, a = i.xPercent, s = i.yPercent, r = i.x, l = i.y, c = i.z, f = i.rotation, d = i.rotationY, p = i.rotationX, m = i.skewX, g = i.skewY, y = i.scaleX, x = i.scaleY, M = i.transformPerspective, v = i.force3D, S = i.target, E = i.zOrigin, T = "", w = v === "auto" && t && t !== 1 || v === !0;
  if (E && (p !== Wl || d !== Wl)) {
    var D = parseFloat(d) * Bf, U = Math.sin(D), O = Math.cos(D), R;
    D = parseFloat(p) * Bf, R = Math.cos(D), r = BS(S, r, U * R * -E), l = BS(S, l, -Math.sin(D) * -E), c = BS(S, c, O * R * -E + E);
  }
  M !== cd && (T += "perspective(" + M + Zl), (a || s) && (T += "translate(" + a + "%, " + s + "%) "), (w || r !== cd || l !== cd || c !== cd) && (T += c !== cd || w ? "translate3d(" + r + ", " + l + ", " + c + ") " : "translate(" + r + ", " + l + Zl), f !== Wl && (T += "rotate(" + f + Zl), d !== Wl && (T += "rotateY(" + d + Zl), p !== Wl && (T += "rotateX(" + p + Zl), (m !== Wl || g !== Wl) && (T += "skew(" + m + ", " + g + Zl), (y !== 1 || x !== 1) && (T += "scale(" + y + ", " + x + Zl), S.style[Tn] = T || "translate(0, 0)";
}, dF = function(t, e) {
  var i = e || this, a = i.xPercent, s = i.yPercent, r = i.x, l = i.y, c = i.rotation, f = i.skewX, d = i.skewY, p = i.scaleX, m = i.scaleY, g = i.target, y = i.xOrigin, x = i.yOrigin, M = i.xOffset, v = i.yOffset, S = i.forceCSS, E = parseFloat(r), T = parseFloat(l), w, D, U, O, R;
  c = parseFloat(c), f = parseFloat(f), d = parseFloat(d), d && (d = parseFloat(d), f += d, c += d), c || f ? (c *= Bf, f *= Bf, w = Math.cos(c) * p, D = Math.sin(c) * p, U = Math.sin(c - f) * -m, O = Math.cos(c - f) * m, f && (d *= Bf, R = Math.tan(f - d), R = Math.sqrt(1 + R * R), U *= R, O *= R, d && (R = Math.tan(d), R = Math.sqrt(1 + R * R), w *= R, D *= R)), w = Pn(w), D = Pn(D), U = Pn(U), O = Pn(O)) : (w = p, O = m, D = U = 0), (E && !~(r + "").indexOf("px") || T && !~(l + "").indexOf("px")) && (E = ml(g, "x", r, "px"), T = ml(g, "y", l, "px")), (y || x || M || v) && (E = Pn(E + y - (y * w + x * U) + M), T = Pn(T + x - (y * D + x * O) + v)), (a || s) && (R = g.getBBox(), E = Pn(E + a / 100 * R.width), T = Pn(T + s / 100 * R.height)), R = "matrix(" + w + "," + D + "," + U + "," + O + "," + E + "," + T + ")", g.setAttribute("transform", R), S && (g.style[Tn] = R);
}, pF = function(t, e, i, a, s) {
  var r = 360, l = fi(s), c = parseFloat(s) * (l && ~s.indexOf("rad") ? du : 1), f = c - a, d = a + f + "deg", p, m;
  return l && (p = s.split("_")[1], p === "short" && (f %= r, f !== f % (r / 2) && (f += f < 0 ? r : -360)), p === "cw" && f < 0 ? f = (f + r * AC) % r - ~~(f / r) * r : p === "ccw" && f > 0 && (f = (f - r * AC) % r - ~~(f / r) * r)), t._pt = m = new pa(t._pt, e, i, a, f, K6), m.e = d, m.u = "deg", t._props.push(i), m;
}, NC = function(t, e) {
  for (var i in e)
    t[i] = e[i];
  return t;
}, mF = function(t, e, i) {
  var a = NC({}, i._gsap), s = "perspective,force3D,transformOrigin,svgOrigin", r = i.style, l, c, f, d, p, m, g, y;
  a.svg ? (f = i.getAttribute("transform"), i.setAttribute("transform", ""), r[Tn] = e, l = Lp(i, 1), Gu(i, Tn), i.setAttribute("transform", f)) : (f = getComputedStyle(i)[Tn], r[Tn] = e, l = Lp(i, 1), r[Tn] = f);
  for (c in so)
    f = a[c], d = l[c], f !== d && s.indexOf(c) < 0 && (g = Ui(f), y = Ui(d), p = g !== y ? ml(i, c, f, y) : parseFloat(f), m = parseFloat(d), t._pt = new pa(t._pt, l, c, p, m - p, GM), t._pt.u = y || 0, t._props.push(c));
  NC(l, a);
};
da("padding,margin,Width,Radius", function(n, t) {
  var e = "Top", i = "Right", a = "Bottom", s = "Left", r = (t < 3 ? [e, i, a, s] : [e + s, e + i, a + i, a + s]).map(function(l) {
    return t < 2 ? n + l : "border" + l + n;
  });
  Rv[t > 1 ? "border" + n : n] = function(l, c, f, d, p) {
    var m, g;
    if (arguments.length < 4)
      return m = r.map(function(y) {
        return Fr(l, y, f);
      }), g = m.join(" "), g.split(m[0]).length === 5 ? m[0] : g;
    m = (d + "").split(" "), g = {}, r.forEach(function(y, x) {
      return g[y] = m[x] = m[x] || m[(x - 1) / 2 | 0];
    }), l.init(c, g, p);
  };
});
var sL = {
  name: "css",
  register: qM,
  targetTest: function(t) {
    return t.style && t.nodeType;
  },
  init: function(t, e, i, a, s) {
    var r = this._props, l = t.style, c = i.vars.startAt, f, d, p, m, g, y, x, M, v, S, E, T, w, D, U, O;
    BE || qM(), this.styles = this.styles || JN(t), O = this.styles.props, this.tween = i;
    for (x in e)
      if (x !== "autoRound" && (d = e[x], !(Ba[x] && VN(x, e, i, a, t, s)))) {
        if (g = typeof d, y = Rv[x], g === "function" && (d = d.call(i, a, t, s), g = typeof d), g === "string" && ~d.indexOf("random(") && (d = Dp(d)), y)
          y(this, t, x, d, i) && (U = 1);
        else if (x.substr(0, 2) === "--")
          f = (getComputedStyle(t).getPropertyValue(x) + "").trim(), d += "", cl.lastIndex = 0, cl.test(f) || (M = Ui(f), v = Ui(d)), v ? M !== v && (f = ml(t, x, f, v) + v) : M && (d += M), this.add(l, "setProperty", f, d, a, s, 0, 0, x), r.push(x), O.push(x, 0, l[x]);
        else if (g !== "undefined") {
          if (c && x in c ? (f = typeof c[x] == "function" ? c[x].call(i, a, t, s) : c[x], fi(f) && ~f.indexOf("random(") && (f = Dp(f)), Ui(f + "") || f === "auto" || (f += qa.units[x] || Ui(Fr(t, x)) || ""), (f + "").charAt(1) === "=" && (f = Fr(t, x))) : f = Fr(t, x), m = parseFloat(f), S = g === "string" && d.charAt(1) === "=" && d.substr(0, 2), S && (d = d.substr(2)), p = parseFloat(d), x in ir && (x === "autoAlpha" && (m === 1 && Fr(t, "visibility") === "hidden" && p && (m = 0), O.push("visibility", 0, l.visibility), $o(this, l, "visibility", m ? "inherit" : "hidden", p ? "inherit" : "hidden", !p)), x !== "scale" && x !== "transform" && (x = ir[x], ~x.indexOf(",") && (x = x.split(",")[0]))), E = x in so, E) {
            if (this.styles.save(x), g === "string" && d.substring(0, 6) === "var(--" && (d = gs(t, d.substring(4, d.indexOf(")"))), p = parseFloat(d)), T || (w = t._gsap, w.renderTransform && !e.parseTransform || Lp(t, e.parseTransform), D = e.smoothOrigin !== !1 && w.smooth, T = this._pt = new pa(this._pt, l, Tn, 0, 1, w.renderTransform, w, 0, -1), T.dep = 1), x === "scale")
              this._pt = new pa(this._pt, w, "scaleY", w.scaleY, (S ? Lf(w.scaleY, S + p) : p) - w.scaleY || 0, GM), this._pt.u = 0, r.push("scaleY", x), x += "X";
            else if (x === "transformOrigin") {
              O.push(ma, 0, l[ma]), d = cF(d), w.svg ? YM(t, d, 0, D, 0, this) : (v = parseFloat(d.split(" ")[2]) || 0, v !== w.zOrigin && $o(this, w, "zOrigin", w.zOrigin, v), $o(this, l, x, Cv(f), Cv(d)));
              continue;
            } else if (x === "svgOrigin") {
              YM(t, d, 1, D, 0, this);
              continue;
            } else if (x in nL) {
              pF(this, w, x, m, S ? Lf(m, S + d) : d);
              continue;
            } else if (x === "smoothOrigin") {
              $o(this, w, "smooth", w.smooth, d);
              continue;
            } else if (x === "force3D") {
              w[x] = d;
              continue;
            } else if (x === "transform") {
              mF(this, d, t);
              continue;
            }
          } else x in l || (x = nh(x) || x);
          if (E || (p || p === 0) && (m || m === 0) && !Q6.test(d) && x in l)
            M = (f + "").substr((m + "").length), p || (p = 0), v = Ui(d) || (x in qa.units ? qa.units[x] : M), M !== v && (m = ml(t, x, f, v)), this._pt = new pa(this._pt, E ? w : l, x, m, (S ? Lf(m, S + p) : p) - m, !E && (v === "px" || x === "zIndex") && e.autoRound !== !1 ? $6 : GM), this._pt.u = v || 0, M !== v && v !== "%" && (this._pt.b = f, this._pt.r = J6);
          else if (x in l)
            uF.call(this, t, x, f, S ? S + d : d);
          else if (x in t)
            this.add(t, x, f || t[x], S ? S + d : d, a, s);
          else if (x !== "parseTransform") {
            AE(x, d);
            continue;
          }
          E || (x in l ? O.push(x, 0, l[x]) : typeof t[x] == "function" ? O.push(x, 2, t[x]()) : O.push(x, 1, f || t[x])), r.push(x);
        }
      }
    U && WN(this);
  },
  render: function(t, e) {
    if (e.tween._time || !PE())
      for (var i = e._pt; i; )
        i.r(t, i.d), i = i._next;
    else
      e.styles.revert();
  },
  get: Fr,
  aliases: ir,
  getSetter: function(t, e, i) {
    var a = ir[e];
    return a && a.indexOf(",") < 0 && (e = a), e in so && e !== ma && (t._gsap.x || Fr(t, "x")) ? i && TC === i ? e === "scale" ? iF : nF : (TC = i || {}) && (e === "scale" ? aF : sF) : t.style && !bE(t.style[e]) ? tF : ~e.indexOf("-") ? eF : LE(t, e);
  },
  core: {
    _removeProperty: Gu,
    _getMatrix: HE
  }
};
va.utils.checkPrefix = nh;
va.core.getStyleSaver = JN;
(function(n, t, e, i) {
  var a = da(n + "," + t + "," + e, function(s) {
    so[s] = 1;
  });
  da(t, function(s) {
    qa.units[s] = "deg", nL[s] = 1;
  }), ir[a[13]] = n + "," + t, da(i, function(s) {
    var r = s.split(":");
    ir[r[1]] = a[r[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
da("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function(n) {
  qa.units[n] = "px";
});
va.registerPlugin(sL);
var FE = va.registerPlugin(sL) || va;
FE.core.Tween;
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const gm = "177", gF = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, vF = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, rL = 0, kM = 1, oL = 2, _F = 3, lL = 0, G_ = 1, np = 2, Ls = 3, ro = 0, Ki = 1, Ps = 2, Jr = 0, zu = 1, WM = 2, ZM = 3, jM = 4, uL = 5, Yo = 100, cL = 101, fL = 102, hL = 103, dL = 104, pL = 200, mL = 201, gL = 202, vL = 203, wv = 204, Dv = 205, _L = 206, yL = 207, xL = 208, SL = 209, ML = 210, bL = 211, EL = 212, TL = 213, AL = 214, Uv = 0, Ov = 1, Nv = 2, Xu = 3, Lv = 4, zv = 5, Bv = 6, Pv = 7, vm = 0, RL = 1, CL = 2, cr = 0, wL = 1, DL = 2, UL = 3, VE = 4, OL = 5, NL = 6, LL = 7, QM = "attached", zL = "detached", X_ = 300, oo = 301, gl = 302, zp = 303, Bp = 304, Sh = 306, Pp = 1e3, vs = 1001, Ip = 1002, xi = 1003, GE = 1004, yF = 1004, Mf = 1005, xF = 1005, Qn = 1006, ip = 1007, SF = 1007, ar = 1008, MF = 1008, Ss = 1009, XE = 1010, qE = 1011, ih = 1012, q_ = 1013, lo = 1014, fa = 1015, Mh = 1016, Y_ = 1017, k_ = 1018, ah = 1020, YE = 35902, kE = 1021, WE = 1022, zi = 1023, sh = 1026, rh = 1027, W_ = 1028, _m = 1029, ZE = 1030, Z_ = 1031, bF = 1032, j_ = 1033, ap = 33776, sp = 33777, rp = 33778, op = 33779, Iv = 35840, Hv = 35841, Fv = 35842, Vv = 35843, Gv = 36196, Xv = 37492, qv = 37496, Yv = 37808, kv = 37809, Wv = 37810, Zv = 37811, jv = 37812, Qv = 37813, Kv = 37814, Jv = 37815, $v = 37816, t_ = 37817, e_ = 37818, n_ = 37819, i_ = 37820, a_ = 37821, lp = 36492, s_ = 36494, r_ = 36495, jE = 36283, o_ = 36284, l_ = 36285, u_ = 36286, BL = 2200, PL = 2201, IL = 2202, Hp = 2300, c_ = 2301, V0 = 2302, _u = 2400, yu = 2401, Fp = 2402, Q_ = 2500, QE = 2501, EF = 0, TF = 1, AF = 2, HL = 3200, FL = 3201, RF = 3202, CF = 3203, Ml = 0, VL = 1, Gr = "", Di = "srgb", vl = "srgb-linear", Vp = "linear", je = "srgb", wF = 0, pu = 7680, DF = 7681, UF = 7682, OF = 7683, NF = 34055, LF = 34056, zF = 5386, BF = 512, PF = 513, IF = 514, HF = 515, FF = 516, VF = 517, GF = 518, KM = 519, GL = 512, XL = 513, qL = 514, KE = 515, YL = 516, kL = 517, WL = 518, ZL = 519, Gp = 35044, XF = 35048, qF = 35040, YF = 35045, kF = 35049, WF = 35041, ZF = 35046, jF = 35050, QF = 35042, KF = "100", JM = "300 es", _s = 2e3, Xp = 2001, JF = {
  COMPUTE: "compute",
  RENDER: "render"
}, $F = {
  PERSPECTIVE: "perspective",
  LINEAR: "linear",
  FLAT: "flat"
}, tV = {
  NORMAL: "normal",
  CENTROID: "centroid",
  SAMPLE: "sample",
  FLAT_FIRST: "flat first",
  FLAT_EITHER: "flat either"
};
class gr {
  /**
   * Adds the given event listener to the given event type.
   *
   * @param {string} type - The type of event to listen to.
   * @param {Function} listener - The function that gets called when the event is fired.
   */
  addEventListener(t, e) {
    this._listeners === void 0 && (this._listeners = {});
    const i = this._listeners;
    i[t] === void 0 && (i[t] = []), i[t].indexOf(e) === -1 && i[t].push(e);
  }
  /**
   * Returns `true` if the given event listener has been added to the given event type.
   *
   * @param {string} type - The type of event.
   * @param {Function} listener - The listener to check.
   * @return {boolean} Whether the given event listener has been added to the given event type.
   */
  hasEventListener(t, e) {
    const i = this._listeners;
    return i === void 0 ? !1 : i[t] !== void 0 && i[t].indexOf(e) !== -1;
  }
  /**
   * Removes the given event listener from the given event type.
   *
   * @param {string} type - The type of event.
   * @param {Function} listener - The listener to remove.
   */
  removeEventListener(t, e) {
    const i = this._listeners;
    if (i === void 0) return;
    const a = i[t];
    if (a !== void 0) {
      const s = a.indexOf(e);
      s !== -1 && a.splice(s, 1);
    }
  }
  /**
   * Dispatches an event object.
   *
   * @param {Object} event - The event that gets fired.
   */
  dispatchEvent(t) {
    const e = this._listeners;
    if (e === void 0) return;
    const i = e[t.type];
    if (i !== void 0) {
      t.target = this;
      const a = i.slice(0);
      for (let s = 0, r = a.length; s < r; s++)
        a[s].call(this, t);
      t.target = null;
    }
  }
}
const Ri = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let LC = 1234567;
const Bu = Math.PI / 180, oh = 180 / Math.PI;
function Ya() {
  const n = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, i = Math.random() * 4294967295 | 0;
  return (Ri[n & 255] + Ri[n >> 8 & 255] + Ri[n >> 16 & 255] + Ri[n >> 24 & 255] + "-" + Ri[t & 255] + Ri[t >> 8 & 255] + "-" + Ri[t >> 16 & 15 | 64] + Ri[t >> 24 & 255] + "-" + Ri[e & 63 | 128] + Ri[e >> 8 & 255] + "-" + Ri[e >> 16 & 255] + Ri[e >> 24 & 255] + Ri[i & 255] + Ri[i >> 8 & 255] + Ri[i >> 16 & 255] + Ri[i >> 24 & 255]).toLowerCase();
}
function me(n, t, e) {
  return Math.max(t, Math.min(e, n));
}
function JE(n, t) {
  return (n % t + t) % t;
}
function eV(n, t, e, i, a) {
  return i + (n - t) * (a - i) / (e - t);
}
function nV(n, t, e) {
  return n !== t ? (e - n) / (t - n) : 0;
}
function up(n, t, e) {
  return (1 - e) * n + e * t;
}
function iV(n, t, e, i) {
  return up(n, t, 1 - Math.exp(-e * i));
}
function aV(n, t = 1) {
  return t - Math.abs(JE(n, t * 2) - t);
}
function sV(n, t, e) {
  return n <= t ? 0 : n >= e ? 1 : (n = (n - t) / (e - t), n * n * (3 - 2 * n));
}
function rV(n, t, e) {
  return n <= t ? 0 : n >= e ? 1 : (n = (n - t) / (e - t), n * n * n * (n * (n * 6 - 15) + 10));
}
function oV(n, t) {
  return n + Math.floor(Math.random() * (t - n + 1));
}
function lV(n, t) {
  return n + Math.random() * (t - n);
}
function uV(n) {
  return n * (0.5 - Math.random());
}
function cV(n) {
  n !== void 0 && (LC = n);
  let t = LC += 1831565813;
  return t = Math.imul(t ^ t >>> 15, t | 1), t ^= t + Math.imul(t ^ t >>> 7, t | 61), ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function fV(n) {
  return n * Bu;
}
function hV(n) {
  return n * oh;
}
function dV(n) {
  return (n & n - 1) === 0 && n !== 0;
}
function pV(n) {
  return Math.pow(2, Math.ceil(Math.log(n) / Math.LN2));
}
function mV(n) {
  return Math.pow(2, Math.floor(Math.log(n) / Math.LN2));
}
function gV(n, t, e, i, a) {
  const s = Math.cos, r = Math.sin, l = s(e / 2), c = r(e / 2), f = s((t + i) / 2), d = r((t + i) / 2), p = s((t - i) / 2), m = r((t - i) / 2), g = s((i - t) / 2), y = r((i - t) / 2);
  switch (a) {
    case "XYX":
      n.set(l * d, c * p, c * m, l * f);
      break;
    case "YZY":
      n.set(c * m, l * d, c * p, l * f);
      break;
    case "ZXZ":
      n.set(c * p, c * m, l * d, l * f);
      break;
    case "XZX":
      n.set(l * d, c * y, c * g, l * f);
      break;
    case "YXY":
      n.set(c * g, l * d, c * y, l * f);
      break;
    case "ZYZ":
      n.set(c * y, c * g, l * d, l * f);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + a);
  }
}
function ji(n, t) {
  switch (t.constructor) {
    case Float32Array:
      return n;
    case Uint32Array:
      return n / 4294967295;
    case Uint16Array:
      return n / 65535;
    case Uint8Array:
      return n / 255;
    case Int32Array:
      return Math.max(n / 2147483647, -1);
    case Int16Array:
      return Math.max(n / 32767, -1);
    case Int8Array:
      return Math.max(n / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function _e(n, t) {
  switch (t.constructor) {
    case Float32Array:
      return n;
    case Uint32Array:
      return Math.round(n * 4294967295);
    case Uint16Array:
      return Math.round(n * 65535);
    case Uint8Array:
      return Math.round(n * 255);
    case Int32Array:
      return Math.round(n * 2147483647);
    case Int16Array:
      return Math.round(n * 32767);
    case Int8Array:
      return Math.round(n * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const jL = {
  DEG2RAD: Bu,
  RAD2DEG: oh,
  /**
   * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}
   * (universally unique identifier).
   *
   * @static
   * @method
   * @return {string} The UUID.
   */
  generateUUID: Ya,
  /**
   * Clamps the given value between min and max.
   *
   * @static
   * @method
   * @param {number} value - The value to clamp.
   * @param {number} min - The min value.
   * @param {number} max - The max value.
   * @return {number} The clamped value.
   */
  clamp: me,
  /**
   * Computes the Euclidean modulo of the given parameters that
   * is `( ( n % m ) + m ) % m`.
   *
   * @static
   * @method
   * @param {number} n - The first parameter.
   * @param {number} m - The second parameter.
   * @return {number} The Euclidean modulo.
   */
  euclideanModulo: JE,
  /**
   * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`
   * for the given value.
   *
   * @static
   * @method
   * @param {number} x - The value to be mapped.
   * @param {number} a1 - Minimum value for range A.
   * @param {number} a2 - Maximum value for range A.
   * @param {number} b1 - Minimum value for range B.
   * @param {number} b2 - Maximum value for range B.
   * @return {number} The mapped value.
   */
  mapLinear: eV,
  /**
   * Returns the percentage in the closed interval `[0, 1]` of the given value
   * between the start and end point.
   *
   * @static
   * @method
   * @param {number} x - The start point
   * @param {number} y - The end point.
   * @param {number} value - A value between start and end.
   * @return {number} The interpolation factor.
   */
  inverseLerp: nV,
  /**
   * Returns a value linearly interpolated from two known points based on the given interval -
   * `t = 0` will return `x` and `t = 1` will return `y`.
   *
   * @static
   * @method
   * @param {number} x - The start point
   * @param {number} y - The end point.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {number} The interpolated value.
   */
  lerp: up,
  /**
   * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta
   * time to maintain frame rate independent movement. For details, see
   * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.
   *
   * @static
   * @method
   * @param {number} x - The current point.
   * @param {number} y - The target point.
   * @param {number} lambda - A higher lambda value will make the movement more sudden,
   * and a lower value will make the movement more gradual.
   * @param {number} dt - Delta time in seconds.
   * @return {number} The interpolated value.
   */
  damp: iV,
  /**
   * Returns a value that alternates between `0` and the given `length` parameter.
   *
   * @static
   * @method
   * @param {number} x - The value to pingpong.
   * @param {number} [length=1] - The positive value the function will pingpong to.
   * @return {number} The alternated value.
   */
  pingpong: aV,
  /**
   * Returns a value in the range `[0,1]` that represents the percentage that `x` has
   * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to
   * the `min` and `max`.
   *
   * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.
   *
   * @static
   * @method
   * @param {number} x - The value to evaluate based on its position between min and max.
   * @param {number} min - The min value. Any x value below min will be `0`.
   * @param {number} max - The max value. Any x value above max will be `1`.
   * @return {number} The alternated value.
   */
  smoothstep: sV,
  /**
   * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}
   * that has zero 1st and 2nd order derivatives at x=0 and x=1.
   *
   * @static
   * @method
   * @param {number} x - The value to evaluate based on its position between min and max.
   * @param {number} min - The min value. Any x value below min will be `0`.
   * @param {number} max - The max value. Any x value above max will be `1`.
   * @return {number} The alternated value.
   */
  smootherstep: rV,
  /**
   * Returns a random integer from `<low, high>` interval.
   *
   * @static
   * @method
   * @param {number} low - The lower value boundary.
   * @param {number} high - The upper value boundary
   * @return {number} A random integer.
   */
  randInt: oV,
  /**
   * Returns a random float from `<low, high>` interval.
   *
   * @static
   * @method
   * @param {number} low - The lower value boundary.
   * @param {number} high - The upper value boundary
   * @return {number} A random float.
   */
  randFloat: lV,
  /**
   * Returns a random integer from `<-range/2, range/2>` interval.
   *
   * @static
   * @method
   * @param {number} range - Defines the value range.
   * @return {number} A random float.
   */
  randFloatSpread: uV,
  /**
   * Returns a deterministic pseudo-random float in the interval `[0, 1]`.
   *
   * @static
   * @method
   * @param {number} [s] - The integer seed.
   * @return {number} A random float.
   */
  seededRandom: cV,
  /**
   * Converts degrees to radians.
   *
   * @static
   * @method
   * @param {number} degrees - A value in degrees.
   * @return {number} The converted value in radians.
   */
  degToRad: fV,
  /**
   * Converts radians to degrees.
   *
   * @static
   * @method
   * @param {number} radians - A value in radians.
   * @return {number} The converted value in degrees.
   */
  radToDeg: hV,
  /**
   * Returns `true` if the given number is a power of two.
   *
   * @static
   * @method
   * @param {number} value - The value to check.
   * @return {boolean} Whether the given number is a power of two or not.
   */
  isPowerOfTwo: dV,
  /**
   * Returns the smallest power of two that is greater than or equal to the given number.
   *
   * @static
   * @method
   * @param {number} value - The value to find a POT for.
   * @return {number} The smallest power of two that is greater than or equal to the given number.
   */
  ceilPowerOfTwo: pV,
  /**
   * Returns the largest power of two that is less than or equal to the given number.
   *
   * @static
   * @method
   * @param {number} value - The value to find a POT for.
   * @return {number} The largest power of two that is less than or equal to the given number.
   */
  floorPowerOfTwo: mV,
  /**
   * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}
   * defined by the given angles and order.
   *
   * Rotations are applied to the axes in the order specified by order:
   * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.
   *
   * @static
   * @method
   * @param {Quaternion} q - The quaternion to set.
   * @param {number} a - The rotation applied to the first axis, in radians.
   * @param {number} b - The rotation applied to the second axis, in radians.
   * @param {number} c - The rotation applied to the third axis, in radians.
   * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.
   */
  setQuaternionFromProperEuler: gV,
  /**
   * Normalizes the given value according to the given typed array.
   *
   * @static
   * @method
   * @param {number} value - The float value in the range `[0,1]` to normalize.
   * @param {TypedArray} array - The typed array that defines the data type of the value.
   * @return {number} The normalize value.
   */
  normalize: _e,
  /**
   * Denormalizes the given value according to the given typed array.
   *
   * @static
   * @method
   * @param {number} value - The value to denormalize.
   * @param {TypedArray} array - The typed array that defines the data type of the value.
   * @return {number} The denormalize (float) value in the range `[0,1]`.
   */
  denormalize: ji
};
class ft {
  /**
   * Constructs a new 2D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   */
  constructor(t = 0, e = 0) {
    ft.prototype.isVector2 = !0, this.x = t, this.y = e;
  }
  /**
   * Alias for {@link Vector2#x}.
   *
   * @type {number}
   */
  get width() {
    return this.x;
  }
  set width(t) {
    this.x = t;
  }
  /**
   * Alias for {@link Vector2#y}.
   *
   * @type {number}
   */
  get height() {
    return this.y;
  }
  set height(t) {
    this.y = t;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @return {Vector2} A reference to this vector.
   */
  set(t, e) {
    return this.x = t, this.y = e, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector2} A reference to this vector.
   */
  setScalar(t) {
    return this.x = t, this.y = t, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setX(t) {
    return this.x = t, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setY(t) {
    return this.y = t, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y.
   * @param {number} value - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setComponent(t, e) {
    switch (t) {
      case 0:
        this.x = e;
        break;
      case 1:
        this.y = e;
        break;
      default:
        throw new Error("index is out of range: " + t);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y.
   * @return {number} A vector component value.
   */
  getComponent(t) {
    switch (t) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + t);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector2} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector2} v - The vector to copy.
   * @return {Vector2} A reference to this vector.
   */
  copy(t) {
    return this.x = t.x, this.y = t.y, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector2} v - The vector to add.
   * @return {Vector2} A reference to this vector.
   */
  add(t) {
    return this.x += t.x, this.y += t.y, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector2} A reference to this vector.
   */
  addScalar(t) {
    return this.x += t, this.y += t, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector2} a - The first vector.
   * @param {Vector2} b - The second vector.
   * @return {Vector2} A reference to this vector.
   */
  addVectors(t, e) {
    return this.x = t.x + e.x, this.y = t.y + e.y, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector2} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector2} A reference to this vector.
   */
  addScaledVector(t, e) {
    return this.x += t.x * e, this.y += t.y * e, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector2} v - The vector to subtract.
   * @return {Vector2} A reference to this vector.
   */
  sub(t) {
    return this.x -= t.x, this.y -= t.y, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector2} A reference to this vector.
   */
  subScalar(t) {
    return this.x -= t, this.y -= t, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector2} a - The first vector.
   * @param {Vector2} b - The second vector.
   * @return {Vector2} A reference to this vector.
   */
  subVectors(t, e) {
    return this.x = t.x - e.x, this.y = t.y - e.y, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector2} v - The vector to multiply.
   * @return {Vector2} A reference to this vector.
   */
  multiply(t) {
    return this.x *= t.x, this.y *= t.y, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector2} A reference to this vector.
   */
  multiplyScalar(t) {
    return this.x *= t, this.y *= t, this;
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector2} v - The vector to divide.
   * @return {Vector2} A reference to this vector.
   */
  divide(t) {
    return this.x /= t.x, this.y /= t.y, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector2} A reference to this vector.
   */
  divideScalar(t) {
    return this.multiplyScalar(1 / t);
  }
  /**
   * Multiplies this vector (with an implicit 1 as the 3rd component) by
   * the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to apply.
   * @return {Vector2} A reference to this vector.
   */
  applyMatrix3(t) {
    const e = this.x, i = this.y, a = t.elements;
    return this.x = a[0] * e + a[3] * i + a[6], this.y = a[1] * e + a[4] * i + a[7], this;
  }
  /**
   * If this vector's x or y value is greater than the given vector's x or y
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector2} v - The vector.
   * @return {Vector2} A reference to this vector.
   */
  min(t) {
    return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this;
  }
  /**
   * If this vector's x or y value is less than the given vector's x or y
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector2} v - The vector.
   * @return {Vector2} A reference to this vector.
   */
  max(t) {
    return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this;
  }
  /**
   * If this vector's x or y value is greater than the max vector's x or y
   * value, it is replaced by the corresponding value.
   * If this vector's x or y value is less than the min vector's x or y value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector2} min - The minimum x and y values.
   * @param {Vector2} max - The maximum x and y values in the desired range.
   * @return {Vector2} A reference to this vector.
   */
  clamp(t, e) {
    return this.x = me(this.x, t.x, e.x), this.y = me(this.y, t.y, e.y), this;
  }
  /**
   * If this vector's x or y values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x or y values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector2} A reference to this vector.
   */
  clampScalar(t, e) {
    return this.x = me(this.x, t, e), this.y = me(this.y, t, e), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector2} A reference to this vector.
   */
  clampLength(t, e) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(me(i, t, e));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector2} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x and y = -y.
   *
   * @return {Vector2} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector2} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(t) {
    return this.x * t.x + this.y * t.y;
  }
  /**
   * Calculates the cross product of the given vector with this instance.
   *
   * @param {Vector2} v - The vector to compute the cross product with.
   * @return {number} The result of the cross product.
   */
  cross(t) {
    return this.x * t.y - this.y * t.x;
  }
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector2} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Computes the angle in radians of this vector with respect to the positive x-axis.
   *
   * @return {number} The angle in radians.
   */
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  /**
   * Returns the angle between the given vector and this instance in radians.
   *
   * @param {Vector2} v - The vector to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(t) {
    const e = Math.sqrt(this.lengthSq() * t.lengthSq());
    if (e === 0) return Math.PI / 2;
    const i = this.dot(t) / e;
    return Math.acos(me(i, -1, 1));
  }
  /**
   * Computes the distance from the given vector to this instance.
   *
   * @param {Vector2} v - The vector to compute the distance to.
   * @return {number} The distance.
   */
  distanceTo(t) {
    return Math.sqrt(this.distanceToSquared(t));
  }
  /**
   * Computes the squared distance from the given vector to this instance.
   * If you are just comparing the distance with another distance, you should compare
   * the distance squared instead as it is slightly more efficient to calculate.
   *
   * @param {Vector2} v - The vector to compute the squared distance to.
   * @return {number} The squared distance.
   */
  distanceToSquared(t) {
    const e = this.x - t.x, i = this.y - t.y;
    return e * e + i * i;
  }
  /**
   * Computes the Manhattan distance from the given vector to this instance.
   *
   * @param {Vector2} v - The vector to compute the Manhattan distance to.
   * @return {number} The Manhattan distance.
   */
  manhattanDistanceTo(t) {
    return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector2} A reference to this vector.
   */
  setLength(t) {
    return this.normalize().multiplyScalar(t);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector2} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector2} A reference to this vector.
   */
  lerp(t, e) {
    return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector2} v1 - The first vector.
   * @param {Vector2} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector2} A reference to this vector.
   */
  lerpVectors(t, e, i) {
    return this.x = t.x + (e.x - t.x) * i, this.y = t.y + (e.y - t.y) * i, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector2} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(t) {
    return t.x === this.x && t.y === this.y;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]` and y
   * value to be `array[ offset + 1 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector2} A reference to this vector.
   */
  fromArray(t, e = 0) {
    return this.x = t[e], this.y = t[e + 1], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(t = [], e = 0) {
    return t[e] = this.x, t[e + 1] = this.y, t;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector2} A reference to this vector.
   */
  fromBufferAttribute(t, e) {
    return this.x = t.getX(e), this.y = t.getY(e), this;
  }
  /**
   * Rotates this vector around the given center by the given angle.
   *
   * @param {Vector2} center - The point around which to rotate.
   * @param {number} angle - The angle to rotate, in radians.
   * @return {Vector2} A reference to this vector.
   */
  rotateAround(t, e) {
    const i = Math.cos(e), a = Math.sin(e), s = this.x - t.x, r = this.y - t.y;
    return this.x = s * i - r * a + t.x, this.y = s * a + r * i + t.y, this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector2} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class Jn {
  /**
   * Constructs a new quaternion.
   *
   * @param {number} [x=0] - The x value of this quaternion.
   * @param {number} [y=0] - The y value of this quaternion.
   * @param {number} [z=0] - The z value of this quaternion.
   * @param {number} [w=1] - The w value of this quaternion.
   */
  constructor(t = 0, e = 0, i = 0, a = 1) {
    this.isQuaternion = !0, this._x = t, this._y = e, this._z = i, this._w = a;
  }
  /**
   * Interpolates between two quaternions via SLERP. This implementation assumes the
   * quaternion data are managed  in flat arrays.
   *
   * @param {Array<number>} dst - The destination array.
   * @param {number} dstOffset - An offset into the destination array.
   * @param {Array<number>} src0 - The source array of the first quaternion.
   * @param {number} srcOffset0 - An offset into the first source array.
   * @param {Array<number>} src1 -  The source array of the second quaternion.
   * @param {number} srcOffset1 - An offset into the second source array.
   * @param {number} t - The interpolation factor in the range `[0,1]`.
   * @see {@link Quaternion#slerp}
   */
  static slerpFlat(t, e, i, a, s, r, l) {
    let c = i[a + 0], f = i[a + 1], d = i[a + 2], p = i[a + 3];
    const m = s[r + 0], g = s[r + 1], y = s[r + 2], x = s[r + 3];
    if (l === 0) {
      t[e + 0] = c, t[e + 1] = f, t[e + 2] = d, t[e + 3] = p;
      return;
    }
    if (l === 1) {
      t[e + 0] = m, t[e + 1] = g, t[e + 2] = y, t[e + 3] = x;
      return;
    }
    if (p !== x || c !== m || f !== g || d !== y) {
      let M = 1 - l;
      const v = c * m + f * g + d * y + p * x, S = v >= 0 ? 1 : -1, E = 1 - v * v;
      if (E > Number.EPSILON) {
        const w = Math.sqrt(E), D = Math.atan2(w, v * S);
        M = Math.sin(M * D) / w, l = Math.sin(l * D) / w;
      }
      const T = l * S;
      if (c = c * M + m * T, f = f * M + g * T, d = d * M + y * T, p = p * M + x * T, M === 1 - l) {
        const w = 1 / Math.sqrt(c * c + f * f + d * d + p * p);
        c *= w, f *= w, d *= w, p *= w;
      }
    }
    t[e] = c, t[e + 1] = f, t[e + 2] = d, t[e + 3] = p;
  }
  /**
   * Multiplies two quaternions. This implementation assumes the quaternion data are managed
   * in flat arrays.
   *
   * @param {Array<number>} dst - The destination array.
   * @param {number} dstOffset - An offset into the destination array.
   * @param {Array<number>} src0 - The source array of the first quaternion.
   * @param {number} srcOffset0 - An offset into the first source array.
   * @param {Array<number>} src1 -  The source array of the second quaternion.
   * @param {number} srcOffset1 - An offset into the second source array.
   * @return {Array<number>} The destination array.
   * @see {@link Quaternion#multiplyQuaternions}.
   */
  static multiplyQuaternionsFlat(t, e, i, a, s, r) {
    const l = i[a], c = i[a + 1], f = i[a + 2], d = i[a + 3], p = s[r], m = s[r + 1], g = s[r + 2], y = s[r + 3];
    return t[e] = l * y + d * p + c * g - f * m, t[e + 1] = c * y + d * m + f * p - l * g, t[e + 2] = f * y + d * g + l * m - c * p, t[e + 3] = d * y - l * p - c * m - f * g, t;
  }
  /**
   * The x value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get x() {
    return this._x;
  }
  set x(t) {
    this._x = t, this._onChangeCallback();
  }
  /**
   * The y value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get y() {
    return this._y;
  }
  set y(t) {
    this._y = t, this._onChangeCallback();
  }
  /**
   * The z value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get z() {
    return this._z;
  }
  set z(t) {
    this._z = t, this._onChangeCallback();
  }
  /**
   * The w value of this quaternion.
   *
   * @type {number}
   * @default 1
   */
  get w() {
    return this._w;
  }
  set w(t) {
    this._w = t, this._onChangeCallback();
  }
  /**
   * Sets the quaternion components.
   *
   * @param {number} x - The x value of this quaternion.
   * @param {number} y - The y value of this quaternion.
   * @param {number} z - The z value of this quaternion.
   * @param {number} w - The w value of this quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  set(t, e, i, a) {
    return this._x = t, this._y = e, this._z = i, this._w = a, this._onChangeCallback(), this;
  }
  /**
   * Returns a new quaternion with copied values from this instance.
   *
   * @return {Quaternion} A clone of this instance.
   */
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  /**
   * Copies the values of the given quaternion to this instance.
   *
   * @param {Quaternion} quaternion - The quaternion to copy.
   * @return {Quaternion} A reference to this quaternion.
   */
  copy(t) {
    return this._x = t.x, this._y = t.y, this._z = t.z, this._w = t.w, this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the rotation specified by the given
   * Euler angles.
   *
   * @param {Euler} euler - The Euler angles.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromEuler(t, e = !0) {
    const i = t._x, a = t._y, s = t._z, r = t._order, l = Math.cos, c = Math.sin, f = l(i / 2), d = l(a / 2), p = l(s / 2), m = c(i / 2), g = c(a / 2), y = c(s / 2);
    switch (r) {
      case "XYZ":
        this._x = m * d * p + f * g * y, this._y = f * g * p - m * d * y, this._z = f * d * y + m * g * p, this._w = f * d * p - m * g * y;
        break;
      case "YXZ":
        this._x = m * d * p + f * g * y, this._y = f * g * p - m * d * y, this._z = f * d * y - m * g * p, this._w = f * d * p + m * g * y;
        break;
      case "ZXY":
        this._x = m * d * p - f * g * y, this._y = f * g * p + m * d * y, this._z = f * d * y + m * g * p, this._w = f * d * p - m * g * y;
        break;
      case "ZYX":
        this._x = m * d * p - f * g * y, this._y = f * g * p + m * d * y, this._z = f * d * y - m * g * p, this._w = f * d * p + m * g * y;
        break;
      case "YZX":
        this._x = m * d * p + f * g * y, this._y = f * g * p + m * d * y, this._z = f * d * y - m * g * p, this._w = f * d * p - m * g * y;
        break;
      case "XZY":
        this._x = m * d * p - f * g * y, this._y = f * g * p - m * d * y, this._z = f * d * y + m * g * p, this._w = f * d * p + m * g * y;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + r);
    }
    return e === !0 && this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the given axis and angle.
   *
   * @param {Vector3} axis - The normalized axis.
   * @param {number} angle - The angle in radians.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromAxisAngle(t, e) {
    const i = e / 2, a = Math.sin(i);
    return this._x = t.x * a, this._y = t.y * a, this._z = t.z * a, this._w = Math.cos(i), this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the given rotation matrix.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromRotationMatrix(t) {
    const e = t.elements, i = e[0], a = e[4], s = e[8], r = e[1], l = e[5], c = e[9], f = e[2], d = e[6], p = e[10], m = i + l + p;
    if (m > 0) {
      const g = 0.5 / Math.sqrt(m + 1);
      this._w = 0.25 / g, this._x = (d - c) * g, this._y = (s - f) * g, this._z = (r - a) * g;
    } else if (i > l && i > p) {
      const g = 2 * Math.sqrt(1 + i - l - p);
      this._w = (d - c) / g, this._x = 0.25 * g, this._y = (a + r) / g, this._z = (s + f) / g;
    } else if (l > p) {
      const g = 2 * Math.sqrt(1 + l - i - p);
      this._w = (s - f) / g, this._x = (a + r) / g, this._y = 0.25 * g, this._z = (c + d) / g;
    } else {
      const g = 2 * Math.sqrt(1 + p - i - l);
      this._w = (r - a) / g, this._x = (s + f) / g, this._y = (c + d) / g, this._z = 0.25 * g;
    }
    return this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion to the rotation required to rotate the direction vector
   * `vFrom` to the direction vector `vTo`.
   *
   * @param {Vector3} vFrom - The first (normalized) direction vector.
   * @param {Vector3} vTo - The second (normalized) direction vector.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromUnitVectors(t, e) {
    let i = t.dot(e) + 1;
    return i < Number.EPSILON ? (i = 0, Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y, this._y = t.x, this._z = 0, this._w = i) : (this._x = 0, this._y = -t.z, this._z = t.y, this._w = i)) : (this._x = t.y * e.z - t.z * e.y, this._y = t.z * e.x - t.x * e.z, this._z = t.x * e.y - t.y * e.x, this._w = i), this.normalize();
  }
  /**
   * Returns the angle between this quaternion and the given one in radians.
   *
   * @param {Quaternion} q - The quaternion to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(t) {
    return 2 * Math.acos(Math.abs(me(this.dot(t), -1, 1)));
  }
  /**
   * Rotates this quaternion by a given angular step to the given quaternion.
   * The method ensures that the final quaternion will not overshoot `q`.
   *
   * @param {Quaternion} q - The target quaternion.
   * @param {number} step - The angular step in radians.
   * @return {Quaternion} A reference to this quaternion.
   */
  rotateTowards(t, e) {
    const i = this.angleTo(t);
    if (i === 0) return this;
    const a = Math.min(1, e / i);
    return this.slerp(t, a), this;
  }
  /**
   * Sets this quaternion to the identity quaternion; that is, to the
   * quaternion that represents "no rotation".
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  identity() {
    return this.set(0, 0, 0, 1);
  }
  /**
   * Inverts this quaternion via {@link Quaternion#conjugate}. The
   * quaternion is assumed to have unit length.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  invert() {
    return this.conjugate();
  }
  /**
   * Returns the rotational conjugate of this quaternion. The conjugate of a
   * quaternion represents the same rotation in the opposite direction about
   * the rotational axis.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  /**
   * Calculates the dot product of this quaternion and the given one.
   *
   * @param {Quaternion} v - The quaternion to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(t) {
    return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w;
  }
  /**
   * Computes the squared Euclidean length (straight-line length) of this quaternion,
   * considered as a 4 dimensional vector. This can be useful if you are comparing the
   * lengths of two quaternions, as this is a slightly more efficient calculation than
   * {@link Quaternion#length}.
   *
   * @return {number} The squared Euclidean length.
   */
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  /**
   * Computes the Euclidean length (straight-line length) of this quaternion,
   * considered as a 4 dimensional vector.
   *
   * @return {number} The Euclidean length.
   */
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  /**
   * Normalizes this quaternion - that is, calculated the quaternion that performs
   * the same rotation as this one, but has a length equal to `1`.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  normalize() {
    let t = this.length();
    return t === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t = 1 / t, this._x = this._x * t, this._y = this._y * t, this._z = this._z * t, this._w = this._w * t), this._onChangeCallback(), this;
  }
  /**
   * Multiplies this quaternion by the given one.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  multiply(t) {
    return this.multiplyQuaternions(this, t);
  }
  /**
   * Pre-multiplies this quaternion by the given one.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  premultiply(t) {
    return this.multiplyQuaternions(t, this);
  }
  /**
   * Multiplies the given quaternions and stores the result in this instance.
   *
   * @param {Quaternion} a - The first quaternion.
   * @param {Quaternion} b - The second quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  multiplyQuaternions(t, e) {
    const i = t._x, a = t._y, s = t._z, r = t._w, l = e._x, c = e._y, f = e._z, d = e._w;
    return this._x = i * d + r * l + a * f - s * c, this._y = a * d + r * c + s * l - i * f, this._z = s * d + r * f + i * c - a * l, this._w = r * d - i * l - a * c - s * f, this._onChangeCallback(), this;
  }
  /**
   * Performs a spherical linear interpolation between quaternions.
   *
   * @param {Quaternion} qb - The target quaternion.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {Quaternion} A reference to this quaternion.
   */
  slerp(t, e) {
    if (e === 0) return this;
    if (e === 1) return this.copy(t);
    const i = this._x, a = this._y, s = this._z, r = this._w;
    let l = r * t._w + i * t._x + a * t._y + s * t._z;
    if (l < 0 ? (this._w = -t._w, this._x = -t._x, this._y = -t._y, this._z = -t._z, l = -l) : this.copy(t), l >= 1)
      return this._w = r, this._x = i, this._y = a, this._z = s, this;
    const c = 1 - l * l;
    if (c <= Number.EPSILON) {
      const g = 1 - e;
      return this._w = g * r + e * this._w, this._x = g * i + e * this._x, this._y = g * a + e * this._y, this._z = g * s + e * this._z, this.normalize(), this;
    }
    const f = Math.sqrt(c), d = Math.atan2(f, l), p = Math.sin((1 - e) * d) / f, m = Math.sin(e * d) / f;
    return this._w = r * p + this._w * m, this._x = i * p + this._x * m, this._y = a * p + this._y * m, this._z = s * p + this._z * m, this._onChangeCallback(), this;
  }
  /**
   * Performs a spherical linear interpolation between the given quaternions
   * and stores the result in this quaternion.
   *
   * @param {Quaternion} qa - The source quaternion.
   * @param {Quaternion} qb - The target quaternion.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {Quaternion} A reference to this quaternion.
   */
  slerpQuaternions(t, e, i) {
    return this.copy(t).slerp(e, i);
  }
  /**
   * Sets this quaternion to a uniformly random, normalized quaternion.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  random() {
    const t = 2 * Math.PI * Math.random(), e = 2 * Math.PI * Math.random(), i = Math.random(), a = Math.sqrt(1 - i), s = Math.sqrt(i);
    return this.set(
      a * Math.sin(t),
      a * Math.cos(t),
      s * Math.sin(e),
      s * Math.cos(e)
    );
  }
  /**
   * Returns `true` if this quaternion is equal with the given one.
   *
   * @param {Quaternion} quaternion - The quaternion to test for equality.
   * @return {boolean} Whether this quaternion is equal with the given one.
   */
  equals(t) {
    return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w;
  }
  /**
   * Sets this quaternion's components from the given array.
   *
   * @param {Array<number>} array - An array holding the quaternion component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Quaternion} A reference to this quaternion.
   */
  fromArray(t, e = 0) {
    return this._x = t[e], this._y = t[e + 1], this._z = t[e + 2], this._w = t[e + 3], this._onChangeCallback(), this;
  }
  /**
   * Writes the components of this quaternion to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the quaternion components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The quaternion components.
   */
  toArray(t = [], e = 0) {
    return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._w, t;
  }
  /**
   * Sets the components of this quaternion from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.
   * @param {number} index - The index into the attribute.
   * @return {Quaternion} A reference to this quaternion.
   */
  fromBufferAttribute(t, e) {
    return this._x = t.getX(e), this._y = t.getY(e), this._z = t.getZ(e), this._w = t.getW(e), this._onChangeCallback(), this;
  }
  /**
   * This methods defines the serialization result of this class. Returns the
   * numerical elements of this quaternion in an array of format `[x, y, z, w]`.
   *
   * @return {Array<number>} The serialized quaternion.
   */
  toJSON() {
    return this.toArray();
  }
  _onChange(t) {
    return this._onChangeCallback = t, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class H {
  /**
   * Constructs a new 3D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   * @param {number} [z=0] - The z value of this vector.
   */
  constructor(t = 0, e = 0, i = 0) {
    H.prototype.isVector3 = !0, this.x = t, this.y = e, this.z = i;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @param {number} z - The value of the z component.
   * @return {Vector3} A reference to this vector.
   */
  set(t, e, i) {
    return i === void 0 && (i = this.z), this.x = t, this.y = e, this.z = i, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector3} A reference to this vector.
   */
  setScalar(t) {
    return this.x = t, this.y = t, this.z = t, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setX(t) {
    return this.x = t, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setY(t) {
    return this.y = t, this;
  }
  /**
   * Sets the vector's z component to the given value
   *
   * @param {number} z - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setZ(t) {
    return this.z = t, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
   * @param {number} value - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setComponent(t, e) {
    switch (t) {
      case 0:
        this.x = e;
        break;
      case 1:
        this.y = e;
        break;
      case 2:
        this.z = e;
        break;
      default:
        throw new Error("index is out of range: " + t);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
   * @return {number} A vector component value.
   */
  getComponent(t) {
    switch (t) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + t);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector3} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector3} v - The vector to copy.
   * @return {Vector3} A reference to this vector.
   */
  copy(t) {
    return this.x = t.x, this.y = t.y, this.z = t.z, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector3} v - The vector to add.
   * @return {Vector3} A reference to this vector.
   */
  add(t) {
    return this.x += t.x, this.y += t.y, this.z += t.z, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector3} A reference to this vector.
   */
  addScalar(t) {
    return this.x += t, this.y += t, this.z += t, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  addVectors(t, e) {
    return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector3|Vector4} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector3} A reference to this vector.
   */
  addScaledVector(t, e) {
    return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector3} v - The vector to subtract.
   * @return {Vector3} A reference to this vector.
   */
  sub(t) {
    return this.x -= t.x, this.y -= t.y, this.z -= t.z, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector3} A reference to this vector.
   */
  subScalar(t) {
    return this.x -= t, this.y -= t, this.z -= t, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  subVectors(t, e) {
    return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector3} v - The vector to multiply.
   * @return {Vector3} A reference to this vector.
   */
  multiply(t) {
    return this.x *= t.x, this.y *= t.y, this.z *= t.z, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector3} A reference to this vector.
   */
  multiplyScalar(t) {
    return this.x *= t, this.y *= t, this.z *= t, this;
  }
  /**
   * Multiplies the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  multiplyVectors(t, e) {
    return this.x = t.x * e.x, this.y = t.y * e.y, this.z = t.z * e.z, this;
  }
  /**
   * Applies the given Euler rotation to this vector.
   *
   * @param {Euler} euler - The Euler angles.
   * @return {Vector3} A reference to this vector.
   */
  applyEuler(t) {
    return this.applyQuaternion(zC.setFromEuler(t));
  }
  /**
   * Applies a rotation specified by an axis and an angle to this vector.
   *
   * @param {Vector3} axis - A normalized vector representing the rotation axis.
   * @param {number} angle - The angle in radians.
   * @return {Vector3} A reference to this vector.
   */
  applyAxisAngle(t, e) {
    return this.applyQuaternion(zC.setFromAxisAngle(t, e));
  }
  /**
   * Multiplies this vector with the given 3x3 matrix.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @return {Vector3} A reference to this vector.
   */
  applyMatrix3(t) {
    const e = this.x, i = this.y, a = this.z, s = t.elements;
    return this.x = s[0] * e + s[3] * i + s[6] * a, this.y = s[1] * e + s[4] * i + s[7] * a, this.z = s[2] * e + s[5] * i + s[8] * a, this;
  }
  /**
   * Multiplies this vector by the given normal matrix and normalizes
   * the result.
   *
   * @param {Matrix3} m - The normal matrix.
   * @return {Vector3} A reference to this vector.
   */
  applyNormalMatrix(t) {
    return this.applyMatrix3(t).normalize();
  }
  /**
   * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and
   * divides by perspective.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {Vector3} A reference to this vector.
   */
  applyMatrix4(t) {
    const e = this.x, i = this.y, a = this.z, s = t.elements, r = 1 / (s[3] * e + s[7] * i + s[11] * a + s[15]);
    return this.x = (s[0] * e + s[4] * i + s[8] * a + s[12]) * r, this.y = (s[1] * e + s[5] * i + s[9] * a + s[13]) * r, this.z = (s[2] * e + s[6] * i + s[10] * a + s[14]) * r, this;
  }
  /**
   * Applies the given Quaternion to this vector.
   *
   * @param {Quaternion} q - The Quaternion.
   * @return {Vector3} A reference to this vector.
   */
  applyQuaternion(t) {
    const e = this.x, i = this.y, a = this.z, s = t.x, r = t.y, l = t.z, c = t.w, f = 2 * (r * a - l * i), d = 2 * (l * e - s * a), p = 2 * (s * i - r * e);
    return this.x = e + c * f + r * p - l * d, this.y = i + c * d + l * f - s * p, this.z = a + c * p + s * d - r * f, this;
  }
  /**
   * Projects this vector from world space into the camera's normalized
   * device coordinate (NDC) space.
   *
   * @param {Camera} camera - The camera.
   * @return {Vector3} A reference to this vector.
   */
  project(t) {
    return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix);
  }
  /**
   * Unprojects this vector from the camera's normalized device coordinate (NDC)
   * space into world space.
   *
   * @param {Camera} camera - The camera.
   * @return {Vector3} A reference to this vector.
   */
  unproject(t) {
    return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld);
  }
  /**
   * Transforms the direction of this vector by a matrix (the upper left 3 x 3
   * subset of the given 4x4 matrix and then normalizes the result.
   *
   * @param {Matrix4} m - The matrix.
   * @return {Vector3} A reference to this vector.
   */
  transformDirection(t) {
    const e = this.x, i = this.y, a = this.z, s = t.elements;
    return this.x = s[0] * e + s[4] * i + s[8] * a, this.y = s[1] * e + s[5] * i + s[9] * a, this.z = s[2] * e + s[6] * i + s[10] * a, this.normalize();
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector3} v - The vector to divide.
   * @return {Vector3} A reference to this vector.
   */
  divide(t) {
    return this.x /= t.x, this.y /= t.y, this.z /= t.z, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector3} A reference to this vector.
   */
  divideScalar(t) {
    return this.multiplyScalar(1 / t);
  }
  /**
   * If this vector's x, y or z value is greater than the given vector's x, y or z
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector3} v - The vector.
   * @return {Vector3} A reference to this vector.
   */
  min(t) {
    return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this;
  }
  /**
   * If this vector's x, y or z value is less than the given vector's x, y or z
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector3} v - The vector.
   * @return {Vector3} A reference to this vector.
   */
  max(t) {
    return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this;
  }
  /**
   * If this vector's x, y or z value is greater than the max vector's x, y or z
   * value, it is replaced by the corresponding value.
   * If this vector's x, y or z value is less than the min vector's x, y or z value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector3} min - The minimum x, y and z values.
   * @param {Vector3} max - The maximum x, y and z values in the desired range.
   * @return {Vector3} A reference to this vector.
   */
  clamp(t, e) {
    return this.x = me(this.x, t.x, e.x), this.y = me(this.y, t.y, e.y), this.z = me(this.z, t.z, e.z), this;
  }
  /**
   * If this vector's x, y or z values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x, y or z values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector3} A reference to this vector.
   */
  clampScalar(t, e) {
    return this.x = me(this.x, t, e), this.y = me(this.y, t, e), this.z = me(this.z, t, e), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector3} A reference to this vector.
   */
  clampLength(t, e) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(me(i, t, e));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector3} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.
   *
   * @return {Vector3} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector3} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(t) {
    return this.x * t.x + this.y * t.y + this.z * t.z;
  }
  // TODO lengthSquared?
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector3} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector3} A reference to this vector.
   */
  setLength(t) {
    return this.normalize().multiplyScalar(t);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector3} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector3} A reference to this vector.
   */
  lerp(t, e) {
    return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector3} v1 - The first vector.
   * @param {Vector3} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector3} A reference to this vector.
   */
  lerpVectors(t, e, i) {
    return this.x = t.x + (e.x - t.x) * i, this.y = t.y + (e.y - t.y) * i, this.z = t.z + (e.z - t.z) * i, this;
  }
  /**
   * Calculates the cross product of the given vector with this instance.
   *
   * @param {Vector3} v - The vector to compute the cross product with.
   * @return {Vector3} The result of the cross product.
   */
  cross(t) {
    return this.crossVectors(this, t);
  }
  /**
   * Calculates the cross product of the given vectors and stores the result
   * in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  crossVectors(t, e) {
    const i = t.x, a = t.y, s = t.z, r = e.x, l = e.y, c = e.z;
    return this.x = a * c - s * l, this.y = s * r - i * c, this.z = i * l - a * r, this;
  }
  /**
   * Projects this vector onto the given one.
   *
   * @param {Vector3} v - The vector to project to.
   * @return {Vector3} A reference to this vector.
   */
  projectOnVector(t) {
    const e = t.lengthSq();
    if (e === 0) return this.set(0, 0, 0);
    const i = t.dot(this) / e;
    return this.copy(t).multiplyScalar(i);
  }
  /**
   * Projects this vector onto a plane by subtracting this
   * vector projected onto the plane's normal from this vector.
   *
   * @param {Vector3} planeNormal - The plane normal.
   * @return {Vector3} A reference to this vector.
   */
  projectOnPlane(t) {
    return PS.copy(this).projectOnVector(t), this.sub(PS);
  }
  /**
   * Reflects this vector off a plane orthogonal to the given normal vector.
   *
   * @param {Vector3} normal - The (normalized) normal vector.
   * @return {Vector3} A reference to this vector.
   */
  reflect(t) {
    return this.sub(PS.copy(t).multiplyScalar(2 * this.dot(t)));
  }
  /**
   * Returns the angle between the given vector and this instance in radians.
   *
   * @param {Vector3} v - The vector to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(t) {
    const e = Math.sqrt(this.lengthSq() * t.lengthSq());
    if (e === 0) return Math.PI / 2;
    const i = this.dot(t) / e;
    return Math.acos(me(i, -1, 1));
  }
  /**
   * Computes the distance from the given vector to this instance.
   *
   * @param {Vector3} v - The vector to compute the distance to.
   * @return {number} The distance.
   */
  distanceTo(t) {
    return Math.sqrt(this.distanceToSquared(t));
  }
  /**
   * Computes the squared distance from the given vector to this instance.
   * If you are just comparing the distance with another distance, you should compare
   * the distance squared instead as it is slightly more efficient to calculate.
   *
   * @param {Vector3} v - The vector to compute the squared distance to.
   * @return {number} The squared distance.
   */
  distanceToSquared(t) {
    const e = this.x - t.x, i = this.y - t.y, a = this.z - t.z;
    return e * e + i * i + a * a;
  }
  /**
   * Computes the Manhattan distance from the given vector to this instance.
   *
   * @param {Vector3} v - The vector to compute the Manhattan distance to.
   * @return {number} The Manhattan distance.
   */
  manhattanDistanceTo(t) {
    return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z);
  }
  /**
   * Sets the vector components from the given spherical coordinates.
   *
   * @param {Spherical} s - The spherical coordinates.
   * @return {Vector3} A reference to this vector.
   */
  setFromSpherical(t) {
    return this.setFromSphericalCoords(t.radius, t.phi, t.theta);
  }
  /**
   * Sets the vector components from the given spherical coordinates.
   *
   * @param {number} radius - The radius.
   * @param {number} phi - The phi angle in radians.
   * @param {number} theta - The theta angle in radians.
   * @return {Vector3} A reference to this vector.
   */
  setFromSphericalCoords(t, e, i) {
    const a = Math.sin(e) * t;
    return this.x = a * Math.sin(i), this.y = Math.cos(e) * t, this.z = a * Math.cos(i), this;
  }
  /**
   * Sets the vector components from the given cylindrical coordinates.
   *
   * @param {Cylindrical} c - The cylindrical coordinates.
   * @return {Vector3} A reference to this vector.
   */
  setFromCylindrical(t) {
    return this.setFromCylindricalCoords(t.radius, t.theta, t.y);
  }
  /**
   * Sets the vector components from the given cylindrical coordinates.
   *
   * @param {number} radius - The radius.
   * @param {number} theta - The theta angle in radians.
   * @param {number} y - The y value.
   * @return {Vector3} A reference to this vector.
   */
  setFromCylindricalCoords(t, e, i) {
    return this.x = t * Math.sin(e), this.y = i, this.z = t * Math.cos(e), this;
  }
  /**
   * Sets the vector components to the position elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixPosition(t) {
    const e = t.elements;
    return this.x = e[12], this.y = e[13], this.z = e[14], this;
  }
  /**
   * Sets the vector components to the scale elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixScale(t) {
    const e = this.setFromMatrixColumn(t, 0).length(), i = this.setFromMatrixColumn(t, 1).length(), a = this.setFromMatrixColumn(t, 2).length();
    return this.x = e, this.y = i, this.z = a, this;
  }
  /**
   * Sets the vector components from the specified matrix column.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @param {number} index - The column index.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixColumn(t, e) {
    return this.fromArray(t.elements, e * 4);
  }
  /**
   * Sets the vector components from the specified matrix column.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @param {number} index - The column index.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrix3Column(t, e) {
    return this.fromArray(t.elements, e * 3);
  }
  /**
   * Sets the vector components from the given Euler angles.
   *
   * @param {Euler} e - The Euler angles to set.
   * @return {Vector3} A reference to this vector.
   */
  setFromEuler(t) {
    return this.x = t._x, this.y = t._y, this.z = t._z, this;
  }
  /**
   * Sets the vector components from the RGB components of the
   * given color.
   *
   * @param {Color} c - The color to set.
   * @return {Vector3} A reference to this vector.
   */
  setFromColor(t) {
    return this.x = t.r, this.y = t.g, this.z = t.b, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector3} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(t) {
    return t.x === this.x && t.y === this.y && t.z === this.z;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`
   * and z value to be `array[ offset + 2 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector3} A reference to this vector.
   */
  fromArray(t, e = 0) {
    return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(t = [], e = 0) {
    return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector3} A reference to this vector.
   */
  fromBufferAttribute(t, e) {
    return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector3} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  /**
   * Sets this vector to a uniformly random point on a unit sphere.
   *
   * @return {Vector3} A reference to this vector.
   */
  randomDirection() {
    const t = Math.random() * Math.PI * 2, e = Math.random() * 2 - 1, i = Math.sqrt(1 - e * e);
    return this.x = i * Math.cos(t), this.y = e, this.z = i * Math.sin(t), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const PS = /* @__PURE__ */ new H(), zC = /* @__PURE__ */ new Jn();
class ge {
  /**
   * Constructs a new 3x3 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   */
  constructor(t, e, i, a, s, r, l, c, f) {
    ge.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], t !== void 0 && this.set(t, e, i, a, s, r, l, c, f);
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @return {Matrix3} A reference to this matrix.
   */
  set(t, e, i, a, s, r, l, c, f) {
    const d = this.elements;
    return d[0] = t, d[1] = a, d[2] = l, d[3] = e, d[4] = s, d[5] = c, d[6] = i, d[7] = r, d[8] = f, this;
  }
  /**
   * Sets this matrix to the 3x3 identity matrix.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Copies the values of the given matrix to this instance.
   *
   * @param {Matrix3} m - The matrix to copy.
   * @return {Matrix3} A reference to this matrix.
   */
  copy(t) {
    const e = this.elements, i = t.elements;
    return e[0] = i[0], e[1] = i[1], e[2] = i[2], e[3] = i[3], e[4] = i[4], e[5] = i[5], e[6] = i[6], e[7] = i[7], e[8] = i[8], this;
  }
  /**
   * Extracts the basis of this matrix into the three axis vectors provided.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix3} A reference to this matrix.
   */
  extractBasis(t, e, i) {
    return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), i.setFromMatrix3Column(this, 2), this;
  }
  /**
   * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  setFromMatrix4(t) {
    const e = t.elements;
    return this.set(
      e[0],
      e[4],
      e[8],
      e[1],
      e[5],
      e[9],
      e[2],
      e[6],
      e[10]
    ), this;
  }
  /**
   * Post-multiplies this matrix by the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to multiply with.
   * @return {Matrix3} A reference to this matrix.
   */
  multiply(t) {
    return this.multiplyMatrices(this, t);
  }
  /**
   * Pre-multiplies this matrix by the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to multiply with.
   * @return {Matrix3} A reference to this matrix.
   */
  premultiply(t) {
    return this.multiplyMatrices(t, this);
  }
  /**
   * Multiples the given 3x3 matrices and stores the result
   * in this matrix.
   *
   * @param {Matrix3} a - The first matrix.
   * @param {Matrix3} b - The second matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  multiplyMatrices(t, e) {
    const i = t.elements, a = e.elements, s = this.elements, r = i[0], l = i[3], c = i[6], f = i[1], d = i[4], p = i[7], m = i[2], g = i[5], y = i[8], x = a[0], M = a[3], v = a[6], S = a[1], E = a[4], T = a[7], w = a[2], D = a[5], U = a[8];
    return s[0] = r * x + l * S + c * w, s[3] = r * M + l * E + c * D, s[6] = r * v + l * T + c * U, s[1] = f * x + d * S + p * w, s[4] = f * M + d * E + p * D, s[7] = f * v + d * T + p * U, s[2] = m * x + g * S + y * w, s[5] = m * M + g * E + y * D, s[8] = m * v + g * T + y * U, this;
  }
  /**
   * Multiplies every component of the matrix by the given scalar.
   *
   * @param {number} s - The scalar.
   * @return {Matrix3} A reference to this matrix.
   */
  multiplyScalar(t) {
    const e = this.elements;
    return e[0] *= t, e[3] *= t, e[6] *= t, e[1] *= t, e[4] *= t, e[7] *= t, e[2] *= t, e[5] *= t, e[8] *= t, this;
  }
  /**
   * Computes and returns the determinant of this matrix.
   *
   * @return {number} The determinant.
   */
  determinant() {
    const t = this.elements, e = t[0], i = t[1], a = t[2], s = t[3], r = t[4], l = t[5], c = t[6], f = t[7], d = t[8];
    return e * r * d - e * l * f - i * s * d + i * l * c + a * s * f - a * r * c;
  }
  /**
   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
   * You can not invert with a determinant of zero. If you attempt this, the method produces
   * a zero matrix instead.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  invert() {
    const t = this.elements, e = t[0], i = t[1], a = t[2], s = t[3], r = t[4], l = t[5], c = t[6], f = t[7], d = t[8], p = d * r - l * f, m = l * c - d * s, g = f * s - r * c, y = e * p + i * m + a * g;
    if (y === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const x = 1 / y;
    return t[0] = p * x, t[1] = (a * f - d * i) * x, t[2] = (l * i - a * r) * x, t[3] = m * x, t[4] = (d * e - a * c) * x, t[5] = (a * s - l * e) * x, t[6] = g * x, t[7] = (i * c - f * e) * x, t[8] = (r * e - i * s) * x, this;
  }
  /**
   * Transposes this matrix in place.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  transpose() {
    let t;
    const e = this.elements;
    return t = e[1], e[1] = e[3], e[3] = t, t = e[2], e[2] = e[6], e[6] = t, t = e[5], e[5] = e[7], e[7] = t, this;
  }
  /**
   * Computes the normal matrix which is the inverse transpose of the upper
   * left 3x3 portion of the given 4x4 matrix.
   *
   * @param {Matrix4} matrix4 - The 4x4 matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  getNormalMatrix(t) {
    return this.setFromMatrix4(t).invert().transpose();
  }
  /**
   * Transposes this matrix into the supplied array, and returns itself unchanged.
   *
   * @param {Array<number>} r - An array to store the transposed matrix elements.
   * @return {Matrix3} A reference to this matrix.
   */
  transposeIntoArray(t) {
    const e = this.elements;
    return t[0] = e[0], t[1] = e[3], t[2] = e[6], t[3] = e[1], t[4] = e[4], t[5] = e[7], t[6] = e[2], t[7] = e[5], t[8] = e[8], this;
  }
  /**
   * Sets the UV transform matrix from offset, repeat, rotation, and center.
   *
   * @param {number} tx - Offset x.
   * @param {number} ty - Offset y.
   * @param {number} sx - Repeat x.
   * @param {number} sy - Repeat y.
   * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.
   * @param {number} cx - Center x of rotation.
   * @param {number} cy - Center y of rotation
   * @return {Matrix3} A reference to this matrix.
   */
  setUvTransform(t, e, i, a, s, r, l) {
    const c = Math.cos(s), f = Math.sin(s);
    return this.set(
      i * c,
      i * f,
      -i * (c * r + f * l) + r + t,
      -a * f,
      a * c,
      -a * (-f * r + c * l) + l + e,
      0,
      0,
      1
    ), this;
  }
  /**
   * Scales this matrix with the given scalar values.
   *
   * @param {number} sx - The amount to scale in the X axis.
   * @param {number} sy - The amount to scale in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  scale(t, e) {
    return this.premultiply(IS.makeScale(t, e)), this;
  }
  /**
   * Rotates this matrix by the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix3} A reference to this matrix.
   */
  rotate(t) {
    return this.premultiply(IS.makeRotation(-t)), this;
  }
  /**
   * Translates this matrix by the given scalar values.
   *
   * @param {number} tx - The amount to translate in the X axis.
   * @param {number} ty - The amount to translate in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  translate(t, e) {
    return this.premultiply(IS.makeTranslation(t, e)), this;
  }
  // for 2D Transforms
  /**
   * Sets this matrix as a 2D translation transform.
   *
   * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.
   * @param {number} y - The amount to translate in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  makeTranslation(t, e) {
    return t.isVector2 ? this.set(
      1,
      0,
      t.x,
      0,
      1,
      t.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      t,
      0,
      1,
      e,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a 2D rotational transformation.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix3} A reference to this matrix.
   */
  makeRotation(t) {
    const e = Math.cos(t), i = Math.sin(t);
    return this.set(
      e,
      -i,
      0,
      i,
      e,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a 2D scale transform.
   *
   * @param {number} x - The amount to scale in the X axis.
   * @param {number} y - The amount to scale in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  makeScale(t, e) {
    return this.set(
      t,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Returns `true` if this matrix is equal with the given one.
   *
   * @param {Matrix3} matrix - The matrix to test for equality.
   * @return {boolean} Whether this matrix is equal with the given one.
   */
  equals(t) {
    const e = this.elements, i = t.elements;
    for (let a = 0; a < 9; a++)
      if (e[a] !== i[a]) return !1;
    return !0;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix3} A reference to this matrix.
   */
  fromArray(t, e = 0) {
    for (let i = 0; i < 9; i++)
      this.elements[i] = t[i + e];
    return this;
  }
  /**
   * Writes the elements of this matrix to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The matrix elements in column-major order.
   */
  toArray(t = [], e = 0) {
    const i = this.elements;
    return t[e] = i[0], t[e + 1] = i[1], t[e + 2] = i[2], t[e + 3] = i[3], t[e + 4] = i[4], t[e + 5] = i[5], t[e + 6] = i[6], t[e + 7] = i[7], t[e + 8] = i[8], t;
  }
  /**
   * Returns a matrix with copied values from this instance.
   *
   * @return {Matrix3} A clone of this instance.
   */
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const IS = /* @__PURE__ */ new ge();
function QL(n) {
  for (let t = n.length - 1; t >= 0; --t)
    if (n[t] >= 65535) return !0;
  return !1;
}
const vV = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function bf(n, t) {
  return new vV[n](t);
}
function qp(n) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", n);
}
function KL() {
  const n = qp("canvas");
  return n.style.display = "block", n;
}
const BC = {};
function Pf(n) {
  n in BC || (BC[n] = !0, console.warn(n));
}
function _V(n, t, e) {
  return new Promise(function(i, a) {
    function s() {
      switch (n.clientWaitSync(t, n.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case n.WAIT_FAILED:
          a();
          break;
        case n.TIMEOUT_EXPIRED:
          setTimeout(s, e);
          break;
        default:
          i();
      }
    }
    setTimeout(s, e);
  });
}
function yV(n) {
  const t = n.elements;
  t[2] = 0.5 * t[2] + 0.5 * t[3], t[6] = 0.5 * t[6] + 0.5 * t[7], t[10] = 0.5 * t[10] + 0.5 * t[11], t[14] = 0.5 * t[14] + 0.5 * t[15];
}
function xV(n) {
  const t = n.elements;
  t[11] === -1 ? (t[10] = -t[10] - 1, t[14] = -t[14]) : (t[10] = -t[10], t[14] = -t[14] + 1);
}
const PC = /* @__PURE__ */ new ge().set(
  0.4123908,
  0.3575843,
  0.1804808,
  0.212639,
  0.7151687,
  0.0721923,
  0.0193308,
  0.1191948,
  0.9505322
), IC = /* @__PURE__ */ new ge().set(
  3.2409699,
  -1.5373832,
  -0.4986108,
  -0.9692436,
  1.8759675,
  0.0415551,
  0.0556301,
  -0.203977,
  1.0569715
);
function SV() {
  const n = {
    enabled: !0,
    workingColorSpace: vl,
    /**
     * Implementations of supported color spaces.
     *
     * Required:
     *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
     *	- whitePoint: reference white [ x y ]
     *	- transfer: transfer function (pre-defined)
     *	- toXYZ: Matrix3 RGB to XYZ transform
     *	- fromXYZ: Matrix3 XYZ to RGB transform
     *	- luminanceCoefficients: RGB luminance coefficients
     *
     * Optional:
     *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
     *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
     *
     * Reference:
     * - https://www.russellcottrell.com/photo/matrixCalculator.htm
     */
    spaces: {},
    convert: function(a, s, r) {
      return this.enabled === !1 || s === r || !s || !r || (this.spaces[s].transfer === je && (a.r = $r(a.r), a.g = $r(a.g), a.b = $r(a.b)), this.spaces[s].primaries !== this.spaces[r].primaries && (a.applyMatrix3(this.spaces[s].toXYZ), a.applyMatrix3(this.spaces[r].fromXYZ)), this.spaces[r].transfer === je && (a.r = If(a.r), a.g = If(a.g), a.b = If(a.b))), a;
    },
    workingToColorSpace: function(a, s) {
      return this.convert(a, this.workingColorSpace, s);
    },
    colorSpaceToWorking: function(a, s) {
      return this.convert(a, s, this.workingColorSpace);
    },
    getPrimaries: function(a) {
      return this.spaces[a].primaries;
    },
    getTransfer: function(a) {
      return a === Gr ? Vp : this.spaces[a].transfer;
    },
    getLuminanceCoefficients: function(a, s = this.workingColorSpace) {
      return a.fromArray(this.spaces[s].luminanceCoefficients);
    },
    define: function(a) {
      Object.assign(this.spaces, a);
    },
    // Internal APIs
    _getMatrix: function(a, s, r) {
      return a.copy(this.spaces[s].toXYZ).multiply(this.spaces[r].fromXYZ);
    },
    _getDrawingBufferColorSpace: function(a) {
      return this.spaces[a].outputColorSpaceConfig.drawingBufferColorSpace;
    },
    _getUnpackColorSpace: function(a = this.workingColorSpace) {
      return this.spaces[a].workingColorSpaceConfig.unpackColorSpace;
    },
    // Deprecated
    fromWorkingColorSpace: function(a, s) {
      return Pf("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."), n.workingToColorSpace(a, s);
    },
    toWorkingColorSpace: function(a, s) {
      return Pf("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."), n.colorSpaceToWorking(a, s);
    }
  }, t = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06], e = [0.2126, 0.7152, 0.0722], i = [0.3127, 0.329];
  return n.define({
    [vl]: {
      primaries: t,
      whitePoint: i,
      transfer: Vp,
      toXYZ: PC,
      fromXYZ: IC,
      luminanceCoefficients: e,
      workingColorSpaceConfig: { unpackColorSpace: Di },
      outputColorSpaceConfig: { drawingBufferColorSpace: Di }
    },
    [Di]: {
      primaries: t,
      whitePoint: i,
      transfer: je,
      toXYZ: PC,
      fromXYZ: IC,
      luminanceCoefficients: e,
      outputColorSpaceConfig: { drawingBufferColorSpace: Di }
    }
  }), n;
}
const Oe = /* @__PURE__ */ SV();
function $r(n) {
  return n < 0.04045 ? n * 0.0773993808 : Math.pow(n * 0.9478672986 + 0.0521327014, 2.4);
}
function If(n) {
  return n < 31308e-7 ? n * 12.92 : 1.055 * Math.pow(n, 0.41666) - 0.055;
}
let Nc;
class JL {
  /**
   * Returns a data URI containing a representation of the given image.
   *
   * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.
   * @param {string} [type='image/png'] - Indicates the image format.
   * @return {string} The data URI.
   */
  static getDataURL(t, e = "image/png") {
    if (/^data:/i.test(t.src) || typeof HTMLCanvasElement > "u")
      return t.src;
    let i;
    if (t instanceof HTMLCanvasElement)
      i = t;
    else {
      Nc === void 0 && (Nc = qp("canvas")), Nc.width = t.width, Nc.height = t.height;
      const a = Nc.getContext("2d");
      t instanceof ImageData ? a.putImageData(t, 0, 0) : a.drawImage(t, 0, 0, t.width, t.height), i = Nc;
    }
    return i.toDataURL(e);
  }
  /**
   * Converts the given sRGB image data to linear color space.
   *
   * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.
   * @return {HTMLCanvasElement|Object} The converted image.
   */
  static sRGBToLinear(t) {
    if (typeof HTMLImageElement < "u" && t instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && t instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && t instanceof ImageBitmap) {
      const e = qp("canvas");
      e.width = t.width, e.height = t.height;
      const i = e.getContext("2d");
      i.drawImage(t, 0, 0, t.width, t.height);
      const a = i.getImageData(0, 0, t.width, t.height), s = a.data;
      for (let r = 0; r < s.length; r++)
        s[r] = $r(s[r] / 255) * 255;
      return i.putImageData(a, 0, 0), e;
    } else if (t.data) {
      const e = t.data.slice(0);
      for (let i = 0; i < e.length; i++)
        e instanceof Uint8Array || e instanceof Uint8ClampedArray ? e[i] = Math.floor($r(e[i] / 255) * 255) : e[i] = $r(e[i]);
      return {
        data: e,
        width: t.width,
        height: t.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), t;
  }
}
let MV = 0;
class tl {
  /**
   * Constructs a new video texture.
   *
   * @param {any} [data=null] - The data definition of a texture.
   */
  constructor(t = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: MV++ }), this.uuid = Ya(), this.data = t, this.dataReady = !0, this.version = 0;
  }
  getSize(t) {
    const e = this.data;
    return e instanceof HTMLVideoElement ? t.set(e.videoWidth, e.videoHeight) : e !== null ? t.set(e.width, e.height, e.depth || 0) : t.set(0, 0, 0), t;
  }
  /**
   * When the property is set to `true`, the engine allocates the memory
   * for the texture (if necessary) and triggers the actual texture upload
   * to the GPU next time the source is used.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(t) {
    t === !0 && this.version++;
  }
  /**
   * Serializes the source into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized source.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(t) {
    const e = t === void 0 || typeof t == "string";
    if (!e && t.images[this.uuid] !== void 0)
      return t.images[this.uuid];
    const i = {
      uuid: this.uuid,
      url: ""
    }, a = this.data;
    if (a !== null) {
      let s;
      if (Array.isArray(a)) {
        s = [];
        for (let r = 0, l = a.length; r < l; r++)
          a[r].isDataTexture ? s.push(HS(a[r].image)) : s.push(HS(a[r]));
      } else
        s = HS(a);
      i.url = s;
    }
    return e || (t.images[this.uuid] = i), i;
  }
}
function HS(n) {
  return typeof HTMLImageElement < "u" && n instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && n instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && n instanceof ImageBitmap ? JL.getDataURL(n) : n.data ? {
    data: Array.from(n.data),
    width: n.width,
    height: n.height,
    type: n.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let bV = 0;
const FS = /* @__PURE__ */ new H();
class Sn extends gr {
  /**
   * Constructs a new texture.
   *
   * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(t = Sn.DEFAULT_IMAGE, e = Sn.DEFAULT_MAPPING, i = vs, a = vs, s = Qn, r = ar, l = zi, c = Ss, f = Sn.DEFAULT_ANISOTROPY, d = Gr) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: bV++ }), this.uuid = Ya(), this.name = "", this.source = new tl(t), this.mipmaps = [], this.mapping = e, this.channel = 0, this.wrapS = i, this.wrapT = a, this.magFilter = s, this.minFilter = r, this.anisotropy = f, this.format = l, this.internalFormat = null, this.type = c, this.offset = new ft(0, 0), this.repeat = new ft(1, 1), this.center = new ft(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new ge(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.colorSpace = d, this.userData = {}, this.updateRanges = [], this.version = 0, this.onUpdate = null, this.renderTarget = null, this.isRenderTargetTexture = !1, this.isArrayTexture = !!(t && t.depth && t.depth > 1), this.pmremVersion = 0;
  }
  /**
   * The width of the texture in pixels.
   */
  get width() {
    return this.source.getSize(FS).x;
  }
  /**
   * The height of the texture in pixels.
   */
  get height() {
    return this.source.getSize(FS).y;
  }
  /**
   * The depth of the texture in pixels.
   */
  get depth() {
    return this.source.getSize(FS).z;
  }
  /**
   * The image object holding the texture data.
   *
   * @type {?Object}
   */
  get image() {
    return this.source.data;
  }
  set image(t = null) {
    this.source.data = t;
  }
  /**
   * Updates the texture transformation matrix from the from the properties {@link Texture#offset},
   * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.
   */
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  /**
   * Adds a range of data in the data texture to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(t, e) {
    this.updateRanges.push({ start: t, count: e });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Returns a new texture with copied values from this instance.
   *
   * @return {Texture} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given texture to this instance.
   *
   * @param {Texture} source - The texture to copy.
   * @return {Texture} A reference to this instance.
   */
  copy(t) {
    return this.name = t.name, this.source = t.source, this.mipmaps = t.mipmaps.slice(0), this.mapping = t.mapping, this.channel = t.channel, this.wrapS = t.wrapS, this.wrapT = t.wrapT, this.magFilter = t.magFilter, this.minFilter = t.minFilter, this.anisotropy = t.anisotropy, this.format = t.format, this.internalFormat = t.internalFormat, this.type = t.type, this.offset.copy(t.offset), this.repeat.copy(t.repeat), this.center.copy(t.center), this.rotation = t.rotation, this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrix.copy(t.matrix), this.generateMipmaps = t.generateMipmaps, this.premultiplyAlpha = t.premultiplyAlpha, this.flipY = t.flipY, this.unpackAlignment = t.unpackAlignment, this.colorSpace = t.colorSpace, this.renderTarget = t.renderTarget, this.isRenderTargetTexture = t.isRenderTargetTexture, this.isArrayTexture = t.isArrayTexture, this.userData = JSON.parse(JSON.stringify(t.userData)), this.needsUpdate = !0, this;
  }
  /**
   * Sets this texture's properties based on `values`.
   * @param {Object} values - A container with texture parameters.
   */
  setValues(t) {
    for (const e in t) {
      const i = t[e];
      if (i === void 0) {
        console.warn(`THREE.Texture.setValues(): parameter '${e}' has value of undefined.`);
        continue;
      }
      const a = this[e];
      if (a === void 0) {
        console.warn(`THREE.Texture.setValues(): property '${e}' does not exist.`);
        continue;
      }
      a && i && a.isVector2 && i.isVector2 || a && i && a.isVector3 && i.isVector3 || a && i && a.isMatrix3 && i.isMatrix3 ? a.copy(i) : this[e] = i;
    }
  }
  /**
   * Serializes the texture into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized texture.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(t) {
    const e = t === void 0 || typeof t == "string";
    if (!e && t.textures[this.uuid] !== void 0)
      return t.textures[this.uuid];
    const i = {
      metadata: {
        version: 4.7,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(t).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (i.userData = this.userData), e || (t.textures[this.uuid] = i), i;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Texture#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Transforms the given uv vector with the textures uv transformation matrix.
   *
   * @param {Vector2} uv - The uv vector.
   * @return {Vector2} The transformed uv vector.
   */
  transformUv(t) {
    if (this.mapping !== X_) return t;
    if (t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1)
      switch (this.wrapS) {
        case Pp:
          t.x = t.x - Math.floor(t.x);
          break;
        case vs:
          t.x = t.x < 0 ? 0 : 1;
          break;
        case Ip:
          Math.abs(Math.floor(t.x) % 2) === 1 ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x);
          break;
      }
    if (t.y < 0 || t.y > 1)
      switch (this.wrapT) {
        case Pp:
          t.y = t.y - Math.floor(t.y);
          break;
        case vs:
          t.y = t.y < 0 ? 0 : 1;
          break;
        case Ip:
          Math.abs(Math.floor(t.y) % 2) === 1 ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y);
          break;
      }
    return this.flipY && (t.y = 1 - t.y), t;
  }
  /**
   * Setting this property to `true` indicates the engine the texture
   * must be updated in the next render. This triggers a texture upload
   * to the GPU and ensures correct texture parameter configuration.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(t) {
    t === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  /**
   * Setting this property to `true` indicates the engine the PMREM
   * must be regenerated.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsPMREMUpdate(t) {
    t === !0 && this.pmremVersion++;
  }
}
Sn.DEFAULT_IMAGE = null;
Sn.DEFAULT_MAPPING = X_;
Sn.DEFAULT_ANISOTROPY = 1;
class De {
  /**
   * Constructs a new 4D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   * @param {number} [z=0] - The z value of this vector.
   * @param {number} [w=1] - The w value of this vector.
   */
  constructor(t = 0, e = 0, i = 0, a = 1) {
    De.prototype.isVector4 = !0, this.x = t, this.y = e, this.z = i, this.w = a;
  }
  /**
   * Alias for {@link Vector4#z}.
   *
   * @type {number}
   */
  get width() {
    return this.z;
  }
  set width(t) {
    this.z = t;
  }
  /**
   * Alias for {@link Vector4#w}.
   *
   * @type {number}
   */
  get height() {
    return this.w;
  }
  set height(t) {
    this.w = t;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @param {number} z - The value of the z component.
   * @param {number} w - The value of the w component.
   * @return {Vector4} A reference to this vector.
   */
  set(t, e, i, a) {
    return this.x = t, this.y = e, this.z = i, this.w = a, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector4} A reference to this vector.
   */
  setScalar(t) {
    return this.x = t, this.y = t, this.z = t, this.w = t, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setX(t) {
    return this.x = t, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setY(t) {
    return this.y = t, this;
  }
  /**
   * Sets the vector's z component to the given value
   *
   * @param {number} z - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setZ(t) {
    return this.z = t, this;
  }
  /**
   * Sets the vector's w component to the given value
   *
   * @param {number} w - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setW(t) {
    return this.w = t, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y,
   * `2` equals to z, `3` equals to w.
   * @param {number} value - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setComponent(t, e) {
    switch (t) {
      case 0:
        this.x = e;
        break;
      case 1:
        this.y = e;
        break;
      case 2:
        this.z = e;
        break;
      case 3:
        this.w = e;
        break;
      default:
        throw new Error("index is out of range: " + t);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y,
   * `2` equals to z, `3` equals to w.
   * @return {number} A vector component value.
   */
  getComponent(t) {
    switch (t) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + t);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector4} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector3|Vector4} v - The vector to copy.
   * @return {Vector4} A reference to this vector.
   */
  copy(t) {
    return this.x = t.x, this.y = t.y, this.z = t.z, this.w = t.w !== void 0 ? t.w : 1, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector4} v - The vector to add.
   * @return {Vector4} A reference to this vector.
   */
  add(t) {
    return this.x += t.x, this.y += t.y, this.z += t.z, this.w += t.w, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector4} A reference to this vector.
   */
  addScalar(t) {
    return this.x += t, this.y += t, this.z += t, this.w += t, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector4} a - The first vector.
   * @param {Vector4} b - The second vector.
   * @return {Vector4} A reference to this vector.
   */
  addVectors(t, e) {
    return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this.w = t.w + e.w, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector4} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector4} A reference to this vector.
   */
  addScaledVector(t, e) {
    return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this.w += t.w * e, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector4} v - The vector to subtract.
   * @return {Vector4} A reference to this vector.
   */
  sub(t) {
    return this.x -= t.x, this.y -= t.y, this.z -= t.z, this.w -= t.w, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector4} A reference to this vector.
   */
  subScalar(t) {
    return this.x -= t, this.y -= t, this.z -= t, this.w -= t, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector4} a - The first vector.
   * @param {Vector4} b - The second vector.
   * @return {Vector4} A reference to this vector.
   */
  subVectors(t, e) {
    return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this.w = t.w - e.w, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector4} v - The vector to multiply.
   * @return {Vector4} A reference to this vector.
   */
  multiply(t) {
    return this.x *= t.x, this.y *= t.y, this.z *= t.z, this.w *= t.w, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector4} A reference to this vector.
   */
  multiplyScalar(t) {
    return this.x *= t, this.y *= t, this.z *= t, this.w *= t, this;
  }
  /**
   * Multiplies this vector with the given 4x4 matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector4} A reference to this vector.
   */
  applyMatrix4(t) {
    const e = this.x, i = this.y, a = this.z, s = this.w, r = t.elements;
    return this.x = r[0] * e + r[4] * i + r[8] * a + r[12] * s, this.y = r[1] * e + r[5] * i + r[9] * a + r[13] * s, this.z = r[2] * e + r[6] * i + r[10] * a + r[14] * s, this.w = r[3] * e + r[7] * i + r[11] * a + r[15] * s, this;
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector4} v - The vector to divide.
   * @return {Vector4} A reference to this vector.
   */
  divide(t) {
    return this.x /= t.x, this.y /= t.y, this.z /= t.z, this.w /= t.w, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector4} A reference to this vector.
   */
  divideScalar(t) {
    return this.multiplyScalar(1 / t);
  }
  /**
   * Sets the x, y and z components of this
   * vector to the quaternion's axis and w to the angle.
   *
   * @param {Quaternion} q - The Quaternion to set.
   * @return {Vector4} A reference to this vector.
   */
  setAxisAngleFromQuaternion(t) {
    this.w = 2 * Math.acos(t.w);
    const e = Math.sqrt(1 - t.w * t.w);
    return e < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = t.x / e, this.y = t.y / e, this.z = t.z / e), this;
  }
  /**
   * Sets the x, y and z components of this
   * vector to the axis of rotation and w to the angle.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.
   * @return {Vector4} A reference to this vector.
   */
  setAxisAngleFromRotationMatrix(t) {
    let e, i, a, s;
    const c = t.elements, f = c[0], d = c[4], p = c[8], m = c[1], g = c[5], y = c[9], x = c[2], M = c[6], v = c[10];
    if (Math.abs(d - m) < 0.01 && Math.abs(p - x) < 0.01 && Math.abs(y - M) < 0.01) {
      if (Math.abs(d + m) < 0.1 && Math.abs(p + x) < 0.1 && Math.abs(y + M) < 0.1 && Math.abs(f + g + v - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      e = Math.PI;
      const E = (f + 1) / 2, T = (g + 1) / 2, w = (v + 1) / 2, D = (d + m) / 4, U = (p + x) / 4, O = (y + M) / 4;
      return E > T && E > w ? E < 0.01 ? (i = 0, a = 0.707106781, s = 0.707106781) : (i = Math.sqrt(E), a = D / i, s = U / i) : T > w ? T < 0.01 ? (i = 0.707106781, a = 0, s = 0.707106781) : (a = Math.sqrt(T), i = D / a, s = O / a) : w < 0.01 ? (i = 0.707106781, a = 0.707106781, s = 0) : (s = Math.sqrt(w), i = U / s, a = O / s), this.set(i, a, s, e), this;
    }
    let S = Math.sqrt((M - y) * (M - y) + (p - x) * (p - x) + (m - d) * (m - d));
    return Math.abs(S) < 1e-3 && (S = 1), this.x = (M - y) / S, this.y = (p - x) / S, this.z = (m - d) / S, this.w = Math.acos((f + g + v - 1) / 2), this;
  }
  /**
   * Sets the vector components to the position elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector4} A reference to this vector.
   */
  setFromMatrixPosition(t) {
    const e = t.elements;
    return this.x = e[12], this.y = e[13], this.z = e[14], this.w = e[15], this;
  }
  /**
   * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector4} v - The vector.
   * @return {Vector4} A reference to this vector.
   */
  min(t) {
    return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this.w = Math.min(this.w, t.w), this;
  }
  /**
   * If this vector's x, y, z or w value is less than the given vector's x, y, z or w
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector4} v - The vector.
   * @return {Vector4} A reference to this vector.
   */
  max(t) {
    return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this.w = Math.max(this.w, t.w), this;
  }
  /**
   * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w
   * value, it is replaced by the corresponding value.
   * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector4} min - The minimum x, y and z values.
   * @param {Vector4} max - The maximum x, y and z values in the desired range.
   * @return {Vector4} A reference to this vector.
   */
  clamp(t, e) {
    return this.x = me(this.x, t.x, e.x), this.y = me(this.y, t.y, e.y), this.z = me(this.z, t.z, e.z), this.w = me(this.w, t.w, e.w), this;
  }
  /**
   * If this vector's x, y, z or w values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x, y, z or w values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector4} A reference to this vector.
   */
  clampScalar(t, e) {
    return this.x = me(this.x, t, e), this.y = me(this.y, t, e), this.z = me(this.z, t, e), this.w = me(this.w, t, e), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector4} A reference to this vector.
   */
  clampLength(t, e) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(me(i, t, e));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector4} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.
   *
   * @return {Vector4} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector4} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(t) {
    return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w;
  }
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector4} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector4} A reference to this vector.
   */
  setLength(t) {
    return this.normalize().multiplyScalar(t);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector4} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector4} A reference to this vector.
   */
  lerp(t, e) {
    return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this.w += (t.w - this.w) * e, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector4} v1 - The first vector.
   * @param {Vector4} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector4} A reference to this vector.
   */
  lerpVectors(t, e, i) {
    return this.x = t.x + (e.x - t.x) * i, this.y = t.y + (e.y - t.y) * i, this.z = t.z + (e.z - t.z) * i, this.w = t.w + (e.w - t.w) * i, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector4} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(t) {
    return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,
   * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector4} A reference to this vector.
   */
  fromArray(t, e = 0) {
    return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this.w = t[e + 3], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(t = [], e = 0) {
    return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t[e + 3] = this.w, t;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector4} A reference to this vector.
   */
  fromBufferAttribute(t, e) {
    return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this.w = t.getW(e), this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector4} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class $E extends gr {
  /**
   * Render target options.
   *
   * @typedef {Object} RenderTarget~Options
   * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.
   * @property {number} [magFilter=LinearFilter] - The mag filter.
   * @property {number} [minFilter=LinearFilter] - The min filter.
   * @property {number} [format=RGBAFormat] - The texture format.
   * @property {number} [type=UnsignedByteType] - The texture type.
   * @property {?string} [internalFormat=null] - The texture's internal format.
   * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.
   * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.
   * @property {number} [anisotropy=1] - The texture's anisotropy value.
   * @property {string} [colorSpace=NoColorSpace] - The texture's color space.
   * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.
   * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.
   * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.
   * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.
   * @property {?Texture} [depthTexture=null] - Reference to a depth texture.
   * @property {number} [samples=0] - The MSAA samples count.
   * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.
   * @property {number} [depth=1] - The texture depth.
   * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.
   */
  /**
   * Constructs a new render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(t = 1, e = 1, i = {}) {
    super(), i = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: Qn,
      depthBuffer: !0,
      stencilBuffer: !1,
      resolveDepthBuffer: !0,
      resolveStencilBuffer: !0,
      depthTexture: null,
      samples: 0,
      count: 1,
      depth: 1,
      multiview: !1
    }, i), this.isRenderTarget = !0, this.width = t, this.height = e, this.depth = i.depth, this.scissor = new De(0, 0, t, e), this.scissorTest = !1, this.viewport = new De(0, 0, t, e);
    const a = { width: t, height: e, depth: i.depth }, s = new Sn(a);
    this.textures = [];
    const r = i.count;
    for (let l = 0; l < r; l++)
      this.textures[l] = s.clone(), this.textures[l].isRenderTargetTexture = !0, this.textures[l].renderTarget = this;
    this._setTextureOptions(i), this.depthBuffer = i.depthBuffer, this.stencilBuffer = i.stencilBuffer, this.resolveDepthBuffer = i.resolveDepthBuffer, this.resolveStencilBuffer = i.resolveStencilBuffer, this._depthTexture = null, this.depthTexture = i.depthTexture, this.samples = i.samples, this.multiview = i.multiview;
  }
  _setTextureOptions(t = {}) {
    const e = {
      minFilter: Qn,
      generateMipmaps: !1,
      flipY: !1,
      internalFormat: null
    };
    t.mapping !== void 0 && (e.mapping = t.mapping), t.wrapS !== void 0 && (e.wrapS = t.wrapS), t.wrapT !== void 0 && (e.wrapT = t.wrapT), t.wrapR !== void 0 && (e.wrapR = t.wrapR), t.magFilter !== void 0 && (e.magFilter = t.magFilter), t.minFilter !== void 0 && (e.minFilter = t.minFilter), t.format !== void 0 && (e.format = t.format), t.type !== void 0 && (e.type = t.type), t.anisotropy !== void 0 && (e.anisotropy = t.anisotropy), t.colorSpace !== void 0 && (e.colorSpace = t.colorSpace), t.flipY !== void 0 && (e.flipY = t.flipY), t.generateMipmaps !== void 0 && (e.generateMipmaps = t.generateMipmaps), t.internalFormat !== void 0 && (e.internalFormat = t.internalFormat);
    for (let i = 0; i < this.textures.length; i++)
      this.textures[i].setValues(e);
  }
  /**
   * The texture representing the default color attachment.
   *
   * @type {Texture}
   */
  get texture() {
    return this.textures[0];
  }
  set texture(t) {
    this.textures[0] = t;
  }
  set depthTexture(t) {
    this._depthTexture !== null && (this._depthTexture.renderTarget = null), t !== null && (t.renderTarget = this), this._depthTexture = t;
  }
  /**
   * Instead of saving the depth in a renderbuffer, a texture
   * can be used instead which is useful for further processing
   * e.g. in context of post-processing.
   *
   * @type {?DepthTexture}
   * @default null
   */
  get depthTexture() {
    return this._depthTexture;
  }
  /**
   * Sets the size of this render target.
   *
   * @param {number} width - The width.
   * @param {number} height - The height.
   * @param {number} [depth=1] - The depth.
   */
  setSize(t, e, i = 1) {
    if (this.width !== t || this.height !== e || this.depth !== i) {
      this.width = t, this.height = e, this.depth = i;
      for (let a = 0, s = this.textures.length; a < s; a++)
        this.textures[a].image.width = t, this.textures[a].image.height = e, this.textures[a].image.depth = i, this.textures[a].isArrayTexture = this.textures[a].image.depth > 1;
      this.dispose();
    }
    this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e);
  }
  /**
   * Returns a new render target with copied values from this instance.
   *
   * @return {RenderTarget} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the settings of the given render target. This is a structural copy so
   * no resources are shared between render targets after the copy. That includes
   * all MRT textures and the depth texture.
   *
   * @param {RenderTarget} source - The render target to copy.
   * @return {RenderTarget} A reference to this instance.
   */
  copy(t) {
    this.width = t.width, this.height = t.height, this.depth = t.depth, this.scissor.copy(t.scissor), this.scissorTest = t.scissorTest, this.viewport.copy(t.viewport), this.textures.length = 0;
    for (let e = 0, i = t.textures.length; e < i; e++) {
      this.textures[e] = t.textures[e].clone(), this.textures[e].isRenderTargetTexture = !0, this.textures[e].renderTarget = this;
      const a = Object.assign({}, t.textures[e].image);
      this.textures[e].source = new tl(a);
    }
    return this.depthBuffer = t.depthBuffer, this.stencilBuffer = t.stencilBuffer, this.resolveDepthBuffer = t.resolveDepthBuffer, this.resolveStencilBuffer = t.resolveStencilBuffer, t.depthTexture !== null && (this.depthTexture = t.depthTexture.clone()), this.samples = t.samples, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires RenderTarget#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class dr extends $E {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(t = 1, e = 1, i = {}) {
    super(t, e, i), this.isWebGLRenderTarget = !0;
  }
}
class K_ extends Sn {
  /**
   * Constructs a new data array texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(t = null, e = 1, i = 1, a = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: t, width: e, height: i, depth: a }, this.magFilter = xi, this.minFilter = xi, this.wrapR = vs, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  /**
   * Describes that a specific layer of the texture needs to be updated.
   * Normally when {@link Texture#needsUpdate} is set to `true`, the
   * entire data texture array is sent to the GPU. Marking specific
   * layers will only transmit subsets of all mipmaps associated with a
   * specific depth in the array which is often much more performant.
   *
   * @param {number} layerIndex - The layer index that should be updated.
   */
  addLayerUpdate(t) {
    this.layerUpdates.add(t);
  }
  /**
   * Resets the layer updates registry.
   */
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class EV extends dr {
  /**
   * Constructs a new array render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(t = 1, e = 1, i = 1, a = {}) {
    super(t, e, a), this.isWebGLArrayRenderTarget = !0, this.depth = i, this.texture = new K_(null, t, e, i), this._setTextureOptions(a), this.texture.isRenderTargetTexture = !0;
  }
}
class J_ extends Sn {
  /**
   * Constructs a new data array texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(t = null, e = 1, i = 1, a = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: t, width: e, height: i, depth: a }, this.magFilter = xi, this.minFilter = xi, this.wrapR = vs, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class TV extends dr {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(t = 1, e = 1, i = 1, a = {}) {
    super(t, e, a), this.isWebGL3DRenderTarget = !0, this.depth = i, this.texture = new J_(null, t, e, i), this._setTextureOptions(a), this.texture.isRenderTargetTexture = !0;
  }
}
class Pi {
  /**
   * Constructs a new bounding box.
   *
   * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.
   * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
   */
  constructor(t = new H(1 / 0, 1 / 0, 1 / 0), e = new H(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = t, this.max = e;
  }
  /**
   * Sets the lower and upper boundaries of this box.
   * Please note that this method only copies the values from the given objects.
   *
   * @param {Vector3} min - The lower boundary of the box.
   * @param {Vector3} max - The upper boundary of the box.
   * @return {Box3} A reference to this bounding box.
   */
  set(t, e) {
    return this.min.copy(t), this.max.copy(e), this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<number>} array - An array holding 3D position data.
   * @return {Box3} A reference to this bounding box.
   */
  setFromArray(t) {
    this.makeEmpty();
    for (let e = 0, i = t.length; e < i; e += 3)
      this.expandByPoint(Ds.fromArray(t, e));
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.
   * @return {Box3} A reference to this bounding box.
   */
  setFromBufferAttribute(t) {
    this.makeEmpty();
    for (let e = 0, i = t.count; e < i; e++)
      this.expandByPoint(Ds.fromBufferAttribute(t, e));
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.
   * @return {Box3} A reference to this bounding box.
   */
  setFromPoints(t) {
    this.makeEmpty();
    for (let e = 0, i = t.length; e < i; e++)
      this.expandByPoint(t[e]);
    return this;
  }
  /**
   * Centers this box on the given center vector and sets this box's width, height and
   * depth to the given size values.
   *
   * @param {Vector3} center - The center of the box.
   * @param {Vector3} size - The x, y and z dimensions of the box.
   * @return {Box3} A reference to this bounding box.
   */
  setFromCenterAndSize(t, e) {
    const i = Ds.copy(e).multiplyScalar(0.5);
    return this.min.copy(t).sub(i), this.max.copy(t).add(i), this;
  }
  /**
   * Computes the world-axis-aligned bounding box for the given 3D object
   * (including its children), accounting for the object's, and children's,
   * world transforms. The function may result in a larger box than strictly necessary.
   *
   * @param {Object3D} object - The 3D object to compute the bounding box for.
   * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest
   * world-axis-aligned bounding box at the expense of more computation.
   * @return {Box3} A reference to this bounding box.
   */
  setFromObject(t, e = !1) {
    return this.makeEmpty(), this.expandByObject(t, e);
  }
  /**
   * Returns a new box with copied values from this instance.
   *
   * @return {Box3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given box to this instance.
   *
   * @param {Box3} box - The box to copy.
   * @return {Box3} A reference to this bounding box.
   */
  copy(t) {
    return this.min.copy(t.min), this.max.copy(t.max), this;
  }
  /**
   * Makes this box empty which means in encloses a zero space in 3D.
   *
   * @return {Box3} A reference to this bounding box.
   */
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  /**
   * Returns true if this box includes zero points within its bounds.
   * Note that a box with equal lower and upper bounds still includes one
   * point, the one both bounds share.
   *
   * @return {boolean} Whether this box is empty or not.
   */
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  /**
   * Returns the center point of this box.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The center point.
   */
  getCenter(t) {
    return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  /**
   * Returns the dimensions of this box.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The size.
   */
  getSize(t) {
    return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min);
  }
  /**
   * Expands the boundaries of this box to include the given point.
   *
   * @param {Vector3} point - The point that should be included by the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByPoint(t) {
    return this.min.min(t), this.max.max(t), this;
  }
  /**
   * Expands this box equilaterally by the given vector. The width of this
   * box will be expanded by the x component of the vector in both
   * directions. The height of this box will be expanded by the y component of
   * the vector in both directions. The depth of this box will be
   * expanded by the z component of the vector in both directions.
   *
   * @param {Vector3} vector - The vector that should expand the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByVector(t) {
    return this.min.sub(t), this.max.add(t), this;
  }
  /**
   * Expands each dimension of the box by the given scalar. If negative, the
   * dimensions of the box will be contracted.
   *
   * @param {number} scalar - The scalar value that should expand the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByScalar(t) {
    return this.min.addScalar(-t), this.max.addScalar(t), this;
  }
  /**
   * Expands the boundaries of this box to include the given 3D object and
   * its children, accounting for the object's, and children's, world
   * transforms. The function may result in a larger box than strictly
   * necessary (unless the precise parameter is set to true).
   *
   * @param {Object3D} object - The 3D object that should expand the bounding box.
   * @param {boolean} precise - If set to `true`, the method expands the bounding box
   * as little as necessary at the expense of more computation.
   * @return {Box3} A reference to this bounding box.
   */
  expandByObject(t, e = !1) {
    t.updateWorldMatrix(!1, !1);
    const i = t.geometry;
    if (i !== void 0) {
      const s = i.getAttribute("position");
      if (e === !0 && s !== void 0 && t.isInstancedMesh !== !0)
        for (let r = 0, l = s.count; r < l; r++)
          t.isMesh === !0 ? t.getVertexPosition(r, Ds) : Ds.fromBufferAttribute(s, r), Ds.applyMatrix4(t.matrixWorld), this.expandByPoint(Ds);
      else
        t.boundingBox !== void 0 ? (t.boundingBox === null && t.computeBoundingBox(), wg.copy(t.boundingBox)) : (i.boundingBox === null && i.computeBoundingBox(), wg.copy(i.boundingBox)), wg.applyMatrix4(t.matrixWorld), this.union(wg);
    }
    const a = t.children;
    for (let s = 0, r = a.length; s < r; s++)
      this.expandByObject(a[s], e);
    return this;
  }
  /**
   * Returns `true` if the given point lies within or on the boundaries of this box.
   *
   * @param {Vector3} point - The point to test.
   * @return {boolean} Whether the bounding box contains the given point or not.
   */
  containsPoint(t) {
    return t.x >= this.min.x && t.x <= this.max.x && t.y >= this.min.y && t.y <= this.max.y && t.z >= this.min.z && t.z <= this.max.z;
  }
  /**
   * Returns `true` if this bounding box includes the entirety of the given bounding box.
   * If this box and the given one are identical, this function also returns `true`.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the bounding box contains the given bounding box or not.
   */
  containsBox(t) {
    return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z;
  }
  /**
   * Returns a point as a proportion of this box's width, height and depth.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} A point as a proportion of this box's width, height and depth.
   */
  getParameter(t, e) {
    return e.set(
      (t.x - this.min.x) / (this.max.x - this.min.x),
      (t.y - this.min.y) / (this.max.y - this.min.y),
      (t.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  /**
   * Returns `true` if the given bounding box intersects with this bounding box.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with this bounding box.
   */
  intersectsBox(t) {
    return t.max.x >= this.min.x && t.min.x <= this.max.x && t.max.y >= this.min.y && t.min.y <= this.max.y && t.max.z >= this.min.z && t.min.z <= this.max.z;
  }
  /**
   * Returns `true` if the given bounding sphere intersects with this bounding box.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the given bounding sphere intersects with this bounding box.
   */
  intersectsSphere(t) {
    return this.clampPoint(t.center, Ds), Ds.distanceToSquared(t.center) <= t.radius * t.radius;
  }
  /**
   * Returns `true` if the given plane intersects with this bounding box.
   *
   * @param {Plane} plane - The plane to test.
   * @return {boolean} Whether the given plane intersects with this bounding box.
   */
  intersectsPlane(t) {
    let e, i;
    return t.normal.x > 0 ? (e = t.normal.x * this.min.x, i = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x, i = t.normal.x * this.min.x), t.normal.y > 0 ? (e += t.normal.y * this.min.y, i += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y, i += t.normal.y * this.min.y), t.normal.z > 0 ? (e += t.normal.z * this.min.z, i += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z, i += t.normal.z * this.min.z), e <= -t.constant && i >= -t.constant;
  }
  /**
   * Returns `true` if the given triangle intersects with this bounding box.
   *
   * @param {Triangle} triangle - The triangle to test.
   * @return {boolean} Whether the given triangle intersects with this bounding box.
   */
  intersectsTriangle(t) {
    if (this.isEmpty())
      return !1;
    this.getCenter(fd), Dg.subVectors(this.max, fd), Lc.subVectors(t.a, fd), zc.subVectors(t.b, fd), Bc.subVectors(t.c, fd), Do.subVectors(zc, Lc), Uo.subVectors(Bc, zc), jl.subVectors(Lc, Bc);
    let e = [
      0,
      -Do.z,
      Do.y,
      0,
      -Uo.z,
      Uo.y,
      0,
      -jl.z,
      jl.y,
      Do.z,
      0,
      -Do.x,
      Uo.z,
      0,
      -Uo.x,
      jl.z,
      0,
      -jl.x,
      -Do.y,
      Do.x,
      0,
      -Uo.y,
      Uo.x,
      0,
      -jl.y,
      jl.x,
      0
    ];
    return !VS(e, Lc, zc, Bc, Dg) || (e = [1, 0, 0, 0, 1, 0, 0, 0, 1], !VS(e, Lc, zc, Bc, Dg)) ? !1 : (Ug.crossVectors(Do, Uo), e = [Ug.x, Ug.y, Ug.z], VS(e, Lc, zc, Bc, Dg));
  }
  /**
   * Clamps the given point within the bounds of this box.
   *
   * @param {Vector3} point - The point to clamp.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The clamped point.
   */
  clampPoint(t, e) {
    return e.copy(t).clamp(this.min, this.max);
  }
  /**
   * Returns the euclidean distance from any edge of this box to the specified point. If
   * the given point lies inside of this box, the distance will be `0`.
   *
   * @param {Vector3} point - The point to compute the distance to.
   * @return {number} The euclidean distance.
   */
  distanceToPoint(t) {
    return this.clampPoint(t, Ds).distanceTo(t);
  }
  /**
   * Returns a bounding sphere that encloses this bounding box.
   *
   * @param {Sphere} target - The target sphere that is used to store the method's result.
   * @return {Sphere} The bounding sphere that encloses this bounding box.
   */
  getBoundingSphere(t) {
    return this.isEmpty() ? t.makeEmpty() : (this.getCenter(t.center), t.radius = this.getSize(Ds).length() * 0.5), t;
  }
  /**
   * Computes the intersection of this bounding box and the given one, setting the upper
   * bound of this box to the lesser of the two boxes' upper bounds and the
   * lower bound of this box to the greater of the two boxes' lower bounds. If
   * there's no overlap, makes this box empty.
   *
   * @param {Box3} box - The bounding box to intersect with.
   * @return {Box3} A reference to this bounding box.
   */
  intersect(t) {
    return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this;
  }
  /**
   * Computes the union of this box and another and the given one, setting the upper
   * bound of this box to the greater of the two boxes' upper bounds and the
   * lower bound of this box to the lesser of the two boxes' lower bounds.
   *
   * @param {Box3} box - The bounding box that will be unioned with this instance.
   * @return {Box3} A reference to this bounding box.
   */
  union(t) {
    return this.min.min(t.min), this.max.max(t.max), this;
  }
  /**
   * Transforms this bounding box by the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Box3} A reference to this bounding box.
   */
  applyMatrix4(t) {
    return this.isEmpty() ? this : (Or[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t), Or[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t), Or[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t), Or[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t), Or[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t), Or[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t), Or[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t), Or[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t), this.setFromPoints(Or), this);
  }
  /**
   * Adds the given offset to both the upper and lower bounds of this bounding box,
   * effectively moving it in 3D space.
   *
   * @param {Vector3} offset - The offset that should be used to translate the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  translate(t) {
    return this.min.add(t), this.max.add(t), this;
  }
  /**
   * Returns `true` if this bounding box is equal with the given one.
   *
   * @param {Box3} box - The box to test for equality.
   * @return {boolean} Whether this bounding box is equal with the given one.
   */
  equals(t) {
    return t.min.equals(this.min) && t.max.equals(this.max);
  }
  /**
   * Returns a serialized structure of the bounding box.
   *
   * @return {Object} Serialized structure with fields representing the object state.
   */
  toJSON() {
    return {
      min: this.min.toArray(),
      max: this.max.toArray()
    };
  }
  /**
   * Returns a serialized structure of the bounding box.
   *
   * @param {Object} json - The serialized json to set the box from.
   * @return {Box3} A reference to this bounding box.
   */
  fromJSON(t) {
    return this.min.fromArray(t.min), this.max.fromArray(t.max), this;
  }
}
const Or = [
  /* @__PURE__ */ new H(),
  /* @__PURE__ */ new H(),
  /* @__PURE__ */ new H(),
  /* @__PURE__ */ new H(),
  /* @__PURE__ */ new H(),
  /* @__PURE__ */ new H(),
  /* @__PURE__ */ new H(),
  /* @__PURE__ */ new H()
], Ds = /* @__PURE__ */ new H(), wg = /* @__PURE__ */ new Pi(), Lc = /* @__PURE__ */ new H(), zc = /* @__PURE__ */ new H(), Bc = /* @__PURE__ */ new H(), Do = /* @__PURE__ */ new H(), Uo = /* @__PURE__ */ new H(), jl = /* @__PURE__ */ new H(), fd = /* @__PURE__ */ new H(), Dg = /* @__PURE__ */ new H(), Ug = /* @__PURE__ */ new H(), Ql = /* @__PURE__ */ new H();
function VS(n, t, e, i, a) {
  for (let s = 0, r = n.length - 3; s <= r; s += 3) {
    Ql.fromArray(n, s);
    const l = a.x * Math.abs(Ql.x) + a.y * Math.abs(Ql.y) + a.z * Math.abs(Ql.z), c = t.dot(Ql), f = e.dot(Ql), d = i.dot(Ql);
    if (Math.max(-Math.max(c, f, d), Math.min(c, f, d)) > l)
      return !1;
  }
  return !0;
}
const AV = /* @__PURE__ */ new Pi(), hd = /* @__PURE__ */ new H(), GS = /* @__PURE__ */ new H();
class Si {
  /**
   * Constructs a new sphere.
   *
   * @param {Vector3} [center=(0,0,0)] - The center of the sphere
   * @param {number} [radius=-1] - The radius of the sphere.
   */
  constructor(t = new H(), e = -1) {
    this.isSphere = !0, this.center = t, this.radius = e;
  }
  /**
   * Sets the sphere's components by copying the given values.
   *
   * @param {Vector3} center - The center.
   * @param {number} radius - The radius.
   * @return {Sphere} A reference to this sphere.
   */
  set(t, e) {
    return this.center.copy(t), this.radius = e, this;
  }
  /**
   * Computes the minimum bounding sphere for list of points.
   * If the optional center point is given, it is used as the sphere's
   * center. Otherwise, the center of the axis-aligned bounding box
   * encompassing the points is calculated.
   *
   * @param {Array<Vector3>} points - A list of points in 3D space.
   * @param {Vector3} [optionalCenter] - The center of the sphere.
   * @return {Sphere} A reference to this sphere.
   */
  setFromPoints(t, e) {
    const i = this.center;
    e !== void 0 ? i.copy(e) : AV.setFromPoints(t).getCenter(i);
    let a = 0;
    for (let s = 0, r = t.length; s < r; s++)
      a = Math.max(a, i.distanceToSquared(t[s]));
    return this.radius = Math.sqrt(a), this;
  }
  /**
   * Copies the values of the given sphere to this instance.
   *
   * @param {Sphere} sphere - The sphere to copy.
   * @return {Sphere} A reference to this sphere.
   */
  copy(t) {
    return this.center.copy(t.center), this.radius = t.radius, this;
  }
  /**
   * Returns `true` if the sphere is empty (the radius set to a negative number).
   *
   * Spheres with a radius of `0` contain only their center point and are not
   * considered to be empty.
   *
   * @return {boolean} Whether this sphere is empty or not.
   */
  isEmpty() {
    return this.radius < 0;
  }
  /**
   * Makes this sphere empty which means in encloses a zero space in 3D.
   *
   * @return {Sphere} A reference to this sphere.
   */
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  /**
   * Returns `true` if this sphere contains the given point inclusive of
   * the surface of the sphere.
   *
   * @param {Vector3} point - The point to check.
   * @return {boolean} Whether this sphere contains the given point or not.
   */
  containsPoint(t) {
    return t.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  /**
   * Returns the closest distance from the boundary of the sphere to the
   * given point. If the sphere contains the point, the distance will
   * be negative.
   *
   * @param {Vector3} point - The point to compute the distance to.
   * @return {number} The distance to the point.
   */
  distanceToPoint(t) {
    return t.distanceTo(this.center) - this.radius;
  }
  /**
   * Returns `true` if this sphere intersects with the given one.
   *
   * @param {Sphere} sphere - The sphere to test.
   * @return {boolean} Whether this sphere intersects with the given one or not.
   */
  intersectsSphere(t) {
    const e = this.radius + t.radius;
    return t.center.distanceToSquared(this.center) <= e * e;
  }
  /**
   * Returns `true` if this sphere intersects with the given box.
   *
   * @param {Box3} box - The box to test.
   * @return {boolean} Whether this sphere intersects with the given box or not.
   */
  intersectsBox(t) {
    return t.intersectsSphere(this);
  }
  /**
   * Returns `true` if this sphere intersects with the given plane.
   *
   * @param {Plane} plane - The plane to test.
   * @return {boolean} Whether this sphere intersects with the given plane or not.
   */
  intersectsPlane(t) {
    return Math.abs(t.distanceToPoint(this.center)) <= this.radius;
  }
  /**
   * Clamps a point within the sphere. If the point is outside the sphere, it
   * will clamp it to the closest point on the edge of the sphere. Points
   * already inside the sphere will not be affected.
   *
   * @param {Vector3} point - The plane to clamp.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The clamped point.
   */
  clampPoint(t, e) {
    const i = this.center.distanceToSquared(t);
    return e.copy(t), i > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)), e;
  }
  /**
   * Returns a bounding box that encloses this sphere.
   *
   * @param {Box3} target - The target box that is used to store the method's result.
   * @return {Box3} The bounding box that encloses this sphere.
   */
  getBoundingBox(t) {
    return this.isEmpty() ? (t.makeEmpty(), t) : (t.set(this.center, this.center), t.expandByScalar(this.radius), t);
  }
  /**
   * Transforms this sphere with the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Sphere} A reference to this sphere.
   */
  applyMatrix4(t) {
    return this.center.applyMatrix4(t), this.radius = this.radius * t.getMaxScaleOnAxis(), this;
  }
  /**
   * Translates the sphere's center by the given offset.
   *
   * @param {Vector3} offset - The offset.
   * @return {Sphere} A reference to this sphere.
   */
  translate(t) {
    return this.center.add(t), this;
  }
  /**
   * Expands the boundaries of this sphere to include the given point.
   *
   * @param {Vector3} point - The point to include.
   * @return {Sphere} A reference to this sphere.
   */
  expandByPoint(t) {
    if (this.isEmpty())
      return this.center.copy(t), this.radius = 0, this;
    hd.subVectors(t, this.center);
    const e = hd.lengthSq();
    if (e > this.radius * this.radius) {
      const i = Math.sqrt(e), a = (i - this.radius) * 0.5;
      this.center.addScaledVector(hd, a / i), this.radius += a;
    }
    return this;
  }
  /**
   * Expands this sphere to enclose both the original sphere and the given sphere.
   *
   * @param {Sphere} sphere - The sphere to include.
   * @return {Sphere} A reference to this sphere.
   */
  union(t) {
    return t.isEmpty() ? this : this.isEmpty() ? (this.copy(t), this) : (this.center.equals(t.center) === !0 ? this.radius = Math.max(this.radius, t.radius) : (GS.subVectors(t.center, this.center).setLength(t.radius), this.expandByPoint(hd.copy(t.center).add(GS)), this.expandByPoint(hd.copy(t.center).sub(GS))), this);
  }
  /**
   * Returns `true` if this sphere is equal with the given one.
   *
   * @param {Sphere} sphere - The sphere to test for equality.
   * @return {boolean} Whether this bounding sphere is equal with the given one.
   */
  equals(t) {
    return t.center.equals(this.center) && t.radius === this.radius;
  }
  /**
   * Returns a new sphere with copied values from this instance.
   *
   * @return {Sphere} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Returns a serialized structure of the bounding sphere.
   *
   * @return {Object} Serialized structure with fields representing the object state.
   */
  toJSON() {
    return {
      radius: this.radius,
      center: this.center.toArray()
    };
  }
  /**
   * Returns a serialized structure of the bounding sphere.
   *
   * @param {Object} json - The serialized json to set the sphere from.
   * @return {Box3} A reference to this bounding sphere.
   */
  fromJSON(t) {
    return this.radius = t.radius, this.center.fromArray(t.center), this;
  }
}
const Nr = /* @__PURE__ */ new H(), XS = /* @__PURE__ */ new H(), Og = /* @__PURE__ */ new H(), Oo = /* @__PURE__ */ new H(), qS = /* @__PURE__ */ new H(), Ng = /* @__PURE__ */ new H(), YS = /* @__PURE__ */ new H();
class bh {
  /**
   * Constructs a new ray.
   *
   * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.
   * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.
   */
  constructor(t = new H(), e = new H(0, 0, -1)) {
    this.origin = t, this.direction = e;
  }
  /**
   * Sets the ray's components by copying the given values.
   *
   * @param {Vector3} origin - The origin.
   * @param {Vector3} direction - The direction.
   * @return {Ray} A reference to this ray.
   */
  set(t, e) {
    return this.origin.copy(t), this.direction.copy(e), this;
  }
  /**
   * Copies the values of the given ray to this instance.
   *
   * @param {Ray} ray - The ray to copy.
   * @return {Ray} A reference to this ray.
   */
  copy(t) {
    return this.origin.copy(t.origin), this.direction.copy(t.direction), this;
  }
  /**
   * Returns a vector that is located at a given distance along this ray.
   *
   * @param {number} t - The distance along the ray to retrieve a position for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} A position on the ray.
   */
  at(t, e) {
    return e.copy(this.origin).addScaledVector(this.direction, t);
  }
  /**
   * Adjusts the direction of the ray to point at the given vector in world space.
   *
   * @param {Vector3} v - The target position.
   * @return {Ray} A reference to this ray.
   */
  lookAt(t) {
    return this.direction.copy(t).sub(this.origin).normalize(), this;
  }
  /**
   * Shift the origin of this ray along its direction by the given distance.
   *
   * @param {number} t - The distance along the ray to interpolate.
   * @return {Ray} A reference to this ray.
   */
  recast(t) {
    return this.origin.copy(this.at(t, Nr)), this;
  }
  /**
   * Returns the point along this ray that is closest to the given point.
   *
   * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on this ray.
   */
  closestPointToPoint(t, e) {
    e.subVectors(t, this.origin);
    const i = e.dot(this.direction);
    return i < 0 ? e.copy(this.origin) : e.copy(this.origin).addScaledVector(this.direction, i);
  }
  /**
   * Returns the distance of the closest approach between this ray and the given point.
   *
   * @param {Vector3} point - A point in 3D space to compute the distance to.
   * @return {number} The distance.
   */
  distanceToPoint(t) {
    return Math.sqrt(this.distanceSqToPoint(t));
  }
  /**
   * Returns the squared distance of the closest approach between this ray and the given point.
   *
   * @param {Vector3} point - A point in 3D space to compute the distance to.
   * @return {number} The squared distance.
   */
  distanceSqToPoint(t) {
    const e = Nr.subVectors(t, this.origin).dot(this.direction);
    return e < 0 ? this.origin.distanceToSquared(t) : (Nr.copy(this.origin).addScaledVector(this.direction, e), Nr.distanceToSquared(t));
  }
  /**
   * Returns the squared distance between this ray and the given line segment.
   *
   * @param {Vector3} v0 - The start point of the line segment.
   * @param {Vector3} v1 - The end point of the line segment.
   * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.
   * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.
   * @return {number} The squared distance.
   */
  distanceSqToSegment(t, e, i, a) {
    XS.copy(t).add(e).multiplyScalar(0.5), Og.copy(e).sub(t).normalize(), Oo.copy(this.origin).sub(XS);
    const s = t.distanceTo(e) * 0.5, r = -this.direction.dot(Og), l = Oo.dot(this.direction), c = -Oo.dot(Og), f = Oo.lengthSq(), d = Math.abs(1 - r * r);
    let p, m, g, y;
    if (d > 0)
      if (p = r * c - l, m = r * l - c, y = s * d, p >= 0)
        if (m >= -y)
          if (m <= y) {
            const x = 1 / d;
            p *= x, m *= x, g = p * (p + r * m + 2 * l) + m * (r * p + m + 2 * c) + f;
          } else
            m = s, p = Math.max(0, -(r * m + l)), g = -p * p + m * (m + 2 * c) + f;
        else
          m = -s, p = Math.max(0, -(r * m + l)), g = -p * p + m * (m + 2 * c) + f;
      else
        m <= -y ? (p = Math.max(0, -(-r * s + l)), m = p > 0 ? -s : Math.min(Math.max(-s, -c), s), g = -p * p + m * (m + 2 * c) + f) : m <= y ? (p = 0, m = Math.min(Math.max(-s, -c), s), g = m * (m + 2 * c) + f) : (p = Math.max(0, -(r * s + l)), m = p > 0 ? s : Math.min(Math.max(-s, -c), s), g = -p * p + m * (m + 2 * c) + f);
    else
      m = r > 0 ? -s : s, p = Math.max(0, -(r * m + l)), g = -p * p + m * (m + 2 * c) + f;
    return i && i.copy(this.origin).addScaledVector(this.direction, p), a && a.copy(XS).addScaledVector(Og, m), g;
  }
  /**
   * Intersects this ray with the given sphere, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Sphere} sphere - The sphere to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectSphere(t, e) {
    Nr.subVectors(t.center, this.origin);
    const i = Nr.dot(this.direction), a = Nr.dot(Nr) - i * i, s = t.radius * t.radius;
    if (a > s) return null;
    const r = Math.sqrt(s - a), l = i - r, c = i + r;
    return c < 0 ? null : l < 0 ? this.at(c, e) : this.at(l, e);
  }
  /**
   * Returns `true` if this ray intersects with the given sphere.
   *
   * @param {Sphere} sphere - The sphere to intersect.
   * @return {boolean} Whether this ray intersects with the given sphere or not.
   */
  intersectsSphere(t) {
    return t.radius < 0 ? !1 : this.distanceSqToPoint(t.center) <= t.radius * t.radius;
  }
  /**
   * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray
   * does not intersect with the plane.
   *
   * @param {Plane} plane - The plane to compute the distance to.
   * @return {?number} Whether this ray intersects with the given sphere or not.
   */
  distanceToPlane(t) {
    const e = t.normal.dot(this.direction);
    if (e === 0)
      return t.distanceToPoint(this.origin) === 0 ? 0 : null;
    const i = -(this.origin.dot(t.normal) + t.constant) / e;
    return i >= 0 ? i : null;
  }
  /**
   * Intersects this ray with the given plane, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Plane} plane - The plane to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectPlane(t, e) {
    const i = this.distanceToPlane(t);
    return i === null ? null : this.at(i, e);
  }
  /**
   * Returns `true` if this ray intersects with the given plane.
   *
   * @param {Plane} plane - The plane to intersect.
   * @return {boolean} Whether this ray intersects with the given plane or not.
   */
  intersectsPlane(t) {
    const e = t.distanceToPoint(this.origin);
    return e === 0 || t.normal.dot(this.direction) * e < 0;
  }
  /**
   * Intersects this ray with the given bounding box, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Box3} box - The box to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectBox(t, e) {
    let i, a, s, r, l, c;
    const f = 1 / this.direction.x, d = 1 / this.direction.y, p = 1 / this.direction.z, m = this.origin;
    return f >= 0 ? (i = (t.min.x - m.x) * f, a = (t.max.x - m.x) * f) : (i = (t.max.x - m.x) * f, a = (t.min.x - m.x) * f), d >= 0 ? (s = (t.min.y - m.y) * d, r = (t.max.y - m.y) * d) : (s = (t.max.y - m.y) * d, r = (t.min.y - m.y) * d), i > r || s > a || ((s > i || isNaN(i)) && (i = s), (r < a || isNaN(a)) && (a = r), p >= 0 ? (l = (t.min.z - m.z) * p, c = (t.max.z - m.z) * p) : (l = (t.max.z - m.z) * p, c = (t.min.z - m.z) * p), i > c || l > a) || ((l > i || i !== i) && (i = l), (c < a || a !== a) && (a = c), a < 0) ? null : this.at(i >= 0 ? i : a, e);
  }
  /**
   * Returns `true` if this ray intersects with the given box.
   *
   * @param {Box3} box - The box to intersect.
   * @return {boolean} Whether this ray intersects with the given box or not.
   */
  intersectsBox(t) {
    return this.intersectBox(t, Nr) !== null;
  }
  /**
   * Intersects this ray with the given triangle, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Vector3} a - The first vertex of the triangle.
   * @param {Vector3} b - The second vertex of the triangle.
   * @param {Vector3} c - The third vertex of the triangle.
   * @param {boolean} backfaceCulling - Whether to use backface culling or not.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectTriangle(t, e, i, a, s) {
    qS.subVectors(e, t), Ng.subVectors(i, t), YS.crossVectors(qS, Ng);
    let r = this.direction.dot(YS), l;
    if (r > 0) {
      if (a) return null;
      l = 1;
    } else if (r < 0)
      l = -1, r = -r;
    else
      return null;
    Oo.subVectors(this.origin, t);
    const c = l * this.direction.dot(Ng.crossVectors(Oo, Ng));
    if (c < 0)
      return null;
    const f = l * this.direction.dot(qS.cross(Oo));
    if (f < 0 || c + f > r)
      return null;
    const d = -l * Oo.dot(YS);
    return d < 0 ? null : this.at(d / r, s);
  }
  /**
   * Transforms this ray with the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix4 - The transformation matrix.
   * @return {Ray} A reference to this ray.
   */
  applyMatrix4(t) {
    return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this;
  }
  /**
   * Returns `true` if this ray is equal with the given one.
   *
   * @param {Ray} ray - The ray to test for equality.
   * @return {boolean} Whether this ray is equal with the given one.
   */
  equals(t) {
    return t.origin.equals(this.origin) && t.direction.equals(this.direction);
  }
  /**
   * Returns a new ray with copied values from this instance.
   *
   * @return {Ray} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class ae {
  /**
   * Constructs a new 4x4 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n14] - 1-4 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n24] - 2-4 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @param {number} [n34] - 3-4 matrix element.
   * @param {number} [n41] - 4-1 matrix element.
   * @param {number} [n42] - 4-2 matrix element.
   * @param {number} [n43] - 4-3 matrix element.
   * @param {number} [n44] - 4-4 matrix element.
   */
  constructor(t, e, i, a, s, r, l, c, f, d, p, m, g, y, x, M) {
    ae.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], t !== void 0 && this.set(t, e, i, a, s, r, l, c, f, d, p, m, g, y, x, M);
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n14] - 1-4 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n24] - 2-4 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @param {number} [n34] - 3-4 matrix element.
   * @param {number} [n41] - 4-1 matrix element.
   * @param {number} [n42] - 4-2 matrix element.
   * @param {number} [n43] - 4-3 matrix element.
   * @param {number} [n44] - 4-4 matrix element.
   * @return {Matrix4} A reference to this matrix.
   */
  set(t, e, i, a, s, r, l, c, f, d, p, m, g, y, x, M) {
    const v = this.elements;
    return v[0] = t, v[4] = e, v[8] = i, v[12] = a, v[1] = s, v[5] = r, v[9] = l, v[13] = c, v[2] = f, v[6] = d, v[10] = p, v[14] = m, v[3] = g, v[7] = y, v[11] = x, v[15] = M, this;
  }
  /**
   * Sets this matrix to the 4x4 identity matrix.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Returns a matrix with copied values from this instance.
   *
   * @return {Matrix4} A clone of this instance.
   */
  clone() {
    return new ae().fromArray(this.elements);
  }
  /**
   * Copies the values of the given matrix to this instance.
   *
   * @param {Matrix4} m - The matrix to copy.
   * @return {Matrix4} A reference to this matrix.
   */
  copy(t) {
    const e = this.elements, i = t.elements;
    return e[0] = i[0], e[1] = i[1], e[2] = i[2], e[3] = i[3], e[4] = i[4], e[5] = i[5], e[6] = i[6], e[7] = i[7], e[8] = i[8], e[9] = i[9], e[10] = i[10], e[11] = i[11], e[12] = i[12], e[13] = i[13], e[14] = i[14], e[15] = i[15], this;
  }
  /**
   * Copies the translation component of the given matrix
   * into this matrix's translation component.
   *
   * @param {Matrix4} m - The matrix to copy the translation component.
   * @return {Matrix4} A reference to this matrix.
   */
  copyPosition(t) {
    const e = this.elements, i = t.elements;
    return e[12] = i[12], e[13] = i[13], e[14] = i[14], this;
  }
  /**
   * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  setFromMatrix3(t) {
    const e = t.elements;
    return this.set(
      e[0],
      e[3],
      e[6],
      0,
      e[1],
      e[4],
      e[7],
      0,
      e[2],
      e[5],
      e[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Extracts the basis of this matrix into the three axis vectors provided.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  extractBasis(t, e, i) {
    return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), i.setFromMatrixColumn(this, 2), this;
  }
  /**
   * Sets the given basis vectors to this matrix.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeBasis(t, e, i) {
    return this.set(
      t.x,
      e.x,
      i.x,
      0,
      t.y,
      e.y,
      i.y,
      0,
      t.z,
      e.z,
      i.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Extracts the rotation component of the given matrix
   * into this matrix's rotation component.
   *
   * Note: This method does not support reflection matrices.
   *
   * @param {Matrix4} m - The matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  extractRotation(t) {
    const e = this.elements, i = t.elements, a = 1 / Pc.setFromMatrixColumn(t, 0).length(), s = 1 / Pc.setFromMatrixColumn(t, 1).length(), r = 1 / Pc.setFromMatrixColumn(t, 2).length();
    return e[0] = i[0] * a, e[1] = i[1] * a, e[2] = i[2] * a, e[3] = 0, e[4] = i[4] * s, e[5] = i[5] * s, e[6] = i[6] * s, e[7] = 0, e[8] = i[8] * r, e[9] = i[9] * r, e[10] = i[10] * r, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this;
  }
  /**
   * Sets the rotation component (the upper left 3x3 matrix) of this matrix to
   * the rotation specified by the given Euler angles. The rest of
   * the matrix is set to the identity. Depending on the {@link Euler#order},
   * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}
   * for a complete list.
   *
   * @param {Euler} euler - The Euler angles.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationFromEuler(t) {
    const e = this.elements, i = t.x, a = t.y, s = t.z, r = Math.cos(i), l = Math.sin(i), c = Math.cos(a), f = Math.sin(a), d = Math.cos(s), p = Math.sin(s);
    if (t.order === "XYZ") {
      const m = r * d, g = r * p, y = l * d, x = l * p;
      e[0] = c * d, e[4] = -c * p, e[8] = f, e[1] = g + y * f, e[5] = m - x * f, e[9] = -l * c, e[2] = x - m * f, e[6] = y + g * f, e[10] = r * c;
    } else if (t.order === "YXZ") {
      const m = c * d, g = c * p, y = f * d, x = f * p;
      e[0] = m + x * l, e[4] = y * l - g, e[8] = r * f, e[1] = r * p, e[5] = r * d, e[9] = -l, e[2] = g * l - y, e[6] = x + m * l, e[10] = r * c;
    } else if (t.order === "ZXY") {
      const m = c * d, g = c * p, y = f * d, x = f * p;
      e[0] = m - x * l, e[4] = -r * p, e[8] = y + g * l, e[1] = g + y * l, e[5] = r * d, e[9] = x - m * l, e[2] = -r * f, e[6] = l, e[10] = r * c;
    } else if (t.order === "ZYX") {
      const m = r * d, g = r * p, y = l * d, x = l * p;
      e[0] = c * d, e[4] = y * f - g, e[8] = m * f + x, e[1] = c * p, e[5] = x * f + m, e[9] = g * f - y, e[2] = -f, e[6] = l * c, e[10] = r * c;
    } else if (t.order === "YZX") {
      const m = r * c, g = r * f, y = l * c, x = l * f;
      e[0] = c * d, e[4] = x - m * p, e[8] = y * p + g, e[1] = p, e[5] = r * d, e[9] = -l * d, e[2] = -f * d, e[6] = g * p + y, e[10] = m - x * p;
    } else if (t.order === "XZY") {
      const m = r * c, g = r * f, y = l * c, x = l * f;
      e[0] = c * d, e[4] = -p, e[8] = f * d, e[1] = m * p + x, e[5] = r * d, e[9] = g * p - y, e[2] = y * p - g, e[6] = l * d, e[10] = x * p + m;
    }
    return e[3] = 0, e[7] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this;
  }
  /**
   * Sets the rotation component of this matrix to the rotation specified by
   * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}
   * The rest of the matrix is set to the identity.
   *
   * @param {Quaternion} q - The Quaternion.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationFromQuaternion(t) {
    return this.compose(RV, t, CV);
  }
  /**
   * Sets the rotation component of the transformation matrix, looking from `eye` towards
   * `target`, and oriented by the up-direction.
   *
   * @param {Vector3} eye - The eye vector.
   * @param {Vector3} target - The target vector.
   * @param {Vector3} up - The up vector.
   * @return {Matrix4} A reference to this matrix.
   */
  lookAt(t, e, i) {
    const a = this.elements;
    return Na.subVectors(t, e), Na.lengthSq() === 0 && (Na.z = 1), Na.normalize(), No.crossVectors(i, Na), No.lengthSq() === 0 && (Math.abs(i.z) === 1 ? Na.x += 1e-4 : Na.z += 1e-4, Na.normalize(), No.crossVectors(i, Na)), No.normalize(), Lg.crossVectors(Na, No), a[0] = No.x, a[4] = Lg.x, a[8] = Na.x, a[1] = No.y, a[5] = Lg.y, a[9] = Na.y, a[2] = No.z, a[6] = Lg.z, a[10] = Na.z, this;
  }
  /**
   * Post-multiplies this matrix by the given 4x4 matrix.
   *
   * @param {Matrix4} m - The matrix to multiply with.
   * @return {Matrix4} A reference to this matrix.
   */
  multiply(t) {
    return this.multiplyMatrices(this, t);
  }
  /**
   * Pre-multiplies this matrix by the given 4x4 matrix.
   *
   * @param {Matrix4} m - The matrix to multiply with.
   * @return {Matrix4} A reference to this matrix.
   */
  premultiply(t) {
    return this.multiplyMatrices(t, this);
  }
  /**
   * Multiples the given 4x4 matrices and stores the result
   * in this matrix.
   *
   * @param {Matrix4} a - The first matrix.
   * @param {Matrix4} b - The second matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  multiplyMatrices(t, e) {
    const i = t.elements, a = e.elements, s = this.elements, r = i[0], l = i[4], c = i[8], f = i[12], d = i[1], p = i[5], m = i[9], g = i[13], y = i[2], x = i[6], M = i[10], v = i[14], S = i[3], E = i[7], T = i[11], w = i[15], D = a[0], U = a[4], O = a[8], R = a[12], C = a[1], B = a[5], Y = a[9], V = a[13], Q = a[2], J = a[6], P = a[10], q = a[14], G = a[3], it = a[7], lt = a[11], mt = a[15];
    return s[0] = r * D + l * C + c * Q + f * G, s[4] = r * U + l * B + c * J + f * it, s[8] = r * O + l * Y + c * P + f * lt, s[12] = r * R + l * V + c * q + f * mt, s[1] = d * D + p * C + m * Q + g * G, s[5] = d * U + p * B + m * J + g * it, s[9] = d * O + p * Y + m * P + g * lt, s[13] = d * R + p * V + m * q + g * mt, s[2] = y * D + x * C + M * Q + v * G, s[6] = y * U + x * B + M * J + v * it, s[10] = y * O + x * Y + M * P + v * lt, s[14] = y * R + x * V + M * q + v * mt, s[3] = S * D + E * C + T * Q + w * G, s[7] = S * U + E * B + T * J + w * it, s[11] = S * O + E * Y + T * P + w * lt, s[15] = S * R + E * V + T * q + w * mt, this;
  }
  /**
   * Multiplies every component of the matrix by the given scalar.
   *
   * @param {number} s - The scalar.
   * @return {Matrix4} A reference to this matrix.
   */
  multiplyScalar(t) {
    const e = this.elements;
    return e[0] *= t, e[4] *= t, e[8] *= t, e[12] *= t, e[1] *= t, e[5] *= t, e[9] *= t, e[13] *= t, e[2] *= t, e[6] *= t, e[10] *= t, e[14] *= t, e[3] *= t, e[7] *= t, e[11] *= t, e[15] *= t, this;
  }
  /**
   * Computes and returns the determinant of this matrix.
   *
   * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.
   *
   * @return {number} The determinant.
   */
  determinant() {
    const t = this.elements, e = t[0], i = t[4], a = t[8], s = t[12], r = t[1], l = t[5], c = t[9], f = t[13], d = t[2], p = t[6], m = t[10], g = t[14], y = t[3], x = t[7], M = t[11], v = t[15];
    return y * (+s * c * p - a * f * p - s * l * m + i * f * m + a * l * g - i * c * g) + x * (+e * c * g - e * f * m + s * r * m - a * r * g + a * f * d - s * c * d) + M * (+e * f * p - e * l * g - s * r * p + i * r * g + s * l * d - i * f * d) + v * (-a * l * d - e * c * p + e * l * m + a * r * p - i * r * m + i * c * d);
  }
  /**
   * Transposes this matrix in place.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  transpose() {
    const t = this.elements;
    let e;
    return e = t[1], t[1] = t[4], t[4] = e, e = t[2], t[2] = t[8], t[8] = e, e = t[6], t[6] = t[9], t[9] = e, e = t[3], t[3] = t[12], t[12] = e, e = t[7], t[7] = t[13], t[13] = e, e = t[11], t[11] = t[14], t[14] = e, this;
  }
  /**
   * Sets the position component for this matrix from the given vector,
   * without affecting the rest of the matrix.
   *
   * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.
   * @param {number} y - The y component of the vector.
   * @param {number} z - The z component of the vector.
   * @return {Matrix4} A reference to this matrix.
   */
  setPosition(t, e, i) {
    const a = this.elements;
    return t.isVector3 ? (a[12] = t.x, a[13] = t.y, a[14] = t.z) : (a[12] = t, a[13] = e, a[14] = i), this;
  }
  /**
   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
   * You can not invert with a determinant of zero. If you attempt this, the method produces
   * a zero matrix instead.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  invert() {
    const t = this.elements, e = t[0], i = t[1], a = t[2], s = t[3], r = t[4], l = t[5], c = t[6], f = t[7], d = t[8], p = t[9], m = t[10], g = t[11], y = t[12], x = t[13], M = t[14], v = t[15], S = p * M * f - x * m * f + x * c * g - l * M * g - p * c * v + l * m * v, E = y * m * f - d * M * f - y * c * g + r * M * g + d * c * v - r * m * v, T = d * x * f - y * p * f + y * l * g - r * x * g - d * l * v + r * p * v, w = y * p * c - d * x * c - y * l * m + r * x * m + d * l * M - r * p * M, D = e * S + i * E + a * T + s * w;
    if (D === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const U = 1 / D;
    return t[0] = S * U, t[1] = (x * m * s - p * M * s - x * a * g + i * M * g + p * a * v - i * m * v) * U, t[2] = (l * M * s - x * c * s + x * a * f - i * M * f - l * a * v + i * c * v) * U, t[3] = (p * c * s - l * m * s - p * a * f + i * m * f + l * a * g - i * c * g) * U, t[4] = E * U, t[5] = (d * M * s - y * m * s + y * a * g - e * M * g - d * a * v + e * m * v) * U, t[6] = (y * c * s - r * M * s - y * a * f + e * M * f + r * a * v - e * c * v) * U, t[7] = (r * m * s - d * c * s + d * a * f - e * m * f - r * a * g + e * c * g) * U, t[8] = T * U, t[9] = (y * p * s - d * x * s - y * i * g + e * x * g + d * i * v - e * p * v) * U, t[10] = (r * x * s - y * l * s + y * i * f - e * x * f - r * i * v + e * l * v) * U, t[11] = (d * l * s - r * p * s - d * i * f + e * p * f + r * i * g - e * l * g) * U, t[12] = w * U, t[13] = (d * x * a - y * p * a + y * i * m - e * x * m - d * i * M + e * p * M) * U, t[14] = (y * l * a - r * x * a - y * i * c + e * x * c + r * i * M - e * l * M) * U, t[15] = (r * p * a - d * l * a + d * i * c - e * p * c - r * i * m + e * l * m) * U, this;
  }
  /**
   * Multiplies the columns of this matrix by the given vector.
   *
   * @param {Vector3} v - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  scale(t) {
    const e = this.elements, i = t.x, a = t.y, s = t.z;
    return e[0] *= i, e[4] *= a, e[8] *= s, e[1] *= i, e[5] *= a, e[9] *= s, e[2] *= i, e[6] *= a, e[10] *= s, e[3] *= i, e[7] *= a, e[11] *= s, this;
  }
  /**
   * Gets the maximum scale value of the three axes.
   *
   * @return {number} The maximum scale.
   */
  getMaxScaleOnAxis() {
    const t = this.elements, e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2], i = t[4] * t[4] + t[5] * t[5] + t[6] * t[6], a = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
    return Math.sqrt(Math.max(e, i, a));
  }
  /**
   * Sets this matrix as a translation transform from the given vector.
   *
   * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.
   * @param {number} y - The amount to translate in the Y axis.
   * @param {number} z - The amount to translate in the z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeTranslation(t, e, i) {
    return t.isVector3 ? this.set(
      1,
      0,
      0,
      t.x,
      0,
      1,
      0,
      t.y,
      0,
      0,
      1,
      t.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      t,
      0,
      1,
      0,
      e,
      0,
      0,
      1,
      i,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the X axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationX(t) {
    const e = Math.cos(t), i = Math.sin(t);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      e,
      -i,
      0,
      0,
      i,
      e,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the Y axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationY(t) {
    const e = Math.cos(t), i = Math.sin(t);
    return this.set(
      e,
      0,
      i,
      0,
      0,
      1,
      0,
      0,
      -i,
      0,
      e,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the Z axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationZ(t) {
    const e = Math.cos(t), i = Math.sin(t);
    return this.set(
      e,
      -i,
      0,
      0,
      i,
      e,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the given axis by
   * the given angle.
   *
   * This is a somewhat controversial but mathematically sound alternative to
   * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.
   *
   * @param {Vector3} axis - The normalized rotation axis.
   * @param {number} angle - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationAxis(t, e) {
    const i = Math.cos(e), a = Math.sin(e), s = 1 - i, r = t.x, l = t.y, c = t.z, f = s * r, d = s * l;
    return this.set(
      f * r + i,
      f * l - a * c,
      f * c + a * l,
      0,
      f * l + a * c,
      d * l + i,
      d * c - a * r,
      0,
      f * c - a * l,
      d * c + a * r,
      s * c * c + i,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a scale transformation.
   *
   * @param {number} x - The amount to scale in the X axis.
   * @param {number} y - The amount to scale in the Y axis.
   * @param {number} z - The amount to scale in the Z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeScale(t, e, i) {
    return this.set(
      t,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      i,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a shear transformation.
   *
   * @param {number} xy - The amount to shear X by Y.
   * @param {number} xz - The amount to shear X by Z.
   * @param {number} yx - The amount to shear Y by X.
   * @param {number} yz - The amount to shear Y by Z.
   * @param {number} zx - The amount to shear Z by X.
   * @param {number} zy - The amount to shear Z by Y.
   * @return {Matrix4} A reference to this matrix.
   */
  makeShear(t, e, i, a, s, r) {
    return this.set(
      1,
      i,
      s,
      0,
      t,
      1,
      r,
      0,
      e,
      a,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix to the transformation composed of the given position,
   * rotation (Quaternion) and scale.
   *
   * @param {Vector3} position - The position vector.
   * @param {Quaternion} quaternion - The rotation as a Quaternion.
   * @param {Vector3} scale - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  compose(t, e, i) {
    const a = this.elements, s = e._x, r = e._y, l = e._z, c = e._w, f = s + s, d = r + r, p = l + l, m = s * f, g = s * d, y = s * p, x = r * d, M = r * p, v = l * p, S = c * f, E = c * d, T = c * p, w = i.x, D = i.y, U = i.z;
    return a[0] = (1 - (x + v)) * w, a[1] = (g + T) * w, a[2] = (y - E) * w, a[3] = 0, a[4] = (g - T) * D, a[5] = (1 - (m + v)) * D, a[6] = (M + S) * D, a[7] = 0, a[8] = (y + E) * U, a[9] = (M - S) * U, a[10] = (1 - (m + x)) * U, a[11] = 0, a[12] = t.x, a[13] = t.y, a[14] = t.z, a[15] = 1, this;
  }
  /**
   * Decomposes this matrix into its position, rotation and scale components
   * and provides the result in the given objects.
   *
   * Note: Not all matrices are decomposable in this way. For example, if an
   * object has a non-uniformly scaled parent, then the object's world matrix
   * may not be decomposable, and this method may not be appropriate.
   *
   * @param {Vector3} position - The position vector.
   * @param {Quaternion} quaternion - The rotation as a Quaternion.
   * @param {Vector3} scale - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  decompose(t, e, i) {
    const a = this.elements;
    let s = Pc.set(a[0], a[1], a[2]).length();
    const r = Pc.set(a[4], a[5], a[6]).length(), l = Pc.set(a[8], a[9], a[10]).length();
    this.determinant() < 0 && (s = -s), t.x = a[12], t.y = a[13], t.z = a[14], Us.copy(this);
    const f = 1 / s, d = 1 / r, p = 1 / l;
    return Us.elements[0] *= f, Us.elements[1] *= f, Us.elements[2] *= f, Us.elements[4] *= d, Us.elements[5] *= d, Us.elements[6] *= d, Us.elements[8] *= p, Us.elements[9] *= p, Us.elements[10] *= p, e.setFromRotationMatrix(Us), i.x = s, i.y = r, i.z = l, this;
  }
  /**
  	 * Creates a perspective projection matrix. This is used internally by
  	 * {@link PerspectiveCamera#updateProjectionMatrix}.
  
  	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
  	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
  	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
  	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
  	 * @param {number} near - The distance from the camera to the near plane.
  	 * @param {number} far - The distance from the camera to the far plane.
  	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
  	 * @return {Matrix4} A reference to this matrix.
  	 */
  makePerspective(t, e, i, a, s, r, l = _s) {
    const c = this.elements, f = 2 * s / (e - t), d = 2 * s / (i - a), p = (e + t) / (e - t), m = (i + a) / (i - a);
    let g, y;
    if (l === _s)
      g = -(r + s) / (r - s), y = -2 * r * s / (r - s);
    else if (l === Xp)
      g = -r / (r - s), y = -r * s / (r - s);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + l);
    return c[0] = f, c[4] = 0, c[8] = p, c[12] = 0, c[1] = 0, c[5] = d, c[9] = m, c[13] = 0, c[2] = 0, c[6] = 0, c[10] = g, c[14] = y, c[3] = 0, c[7] = 0, c[11] = -1, c[15] = 0, this;
  }
  /**
  	 * Creates a orthographic projection matrix. This is used internally by
  	 * {@link OrthographicCamera#updateProjectionMatrix}.
  
  	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
  	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
  	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
  	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
  	 * @param {number} near - The distance from the camera to the near plane.
  	 * @param {number} far - The distance from the camera to the far plane.
  	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
  	 * @return {Matrix4} A reference to this matrix.
  	 */
  makeOrthographic(t, e, i, a, s, r, l = _s) {
    const c = this.elements, f = 1 / (e - t), d = 1 / (i - a), p = 1 / (r - s), m = (e + t) * f, g = (i + a) * d;
    let y, x;
    if (l === _s)
      y = (r + s) * p, x = -2 * p;
    else if (l === Xp)
      y = s * p, x = -1 * p;
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + l);
    return c[0] = 2 * f, c[4] = 0, c[8] = 0, c[12] = -m, c[1] = 0, c[5] = 2 * d, c[9] = 0, c[13] = -g, c[2] = 0, c[6] = 0, c[10] = x, c[14] = -y, c[3] = 0, c[7] = 0, c[11] = 0, c[15] = 1, this;
  }
  /**
   * Returns `true` if this matrix is equal with the given one.
   *
   * @param {Matrix4} matrix - The matrix to test for equality.
   * @return {boolean} Whether this matrix is equal with the given one.
   */
  equals(t) {
    const e = this.elements, i = t.elements;
    for (let a = 0; a < 16; a++)
      if (e[a] !== i[a]) return !1;
    return !0;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix4} A reference to this matrix.
   */
  fromArray(t, e = 0) {
    for (let i = 0; i < 16; i++)
      this.elements[i] = t[i + e];
    return this;
  }
  /**
   * Writes the elements of this matrix to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The matrix elements in column-major order.
   */
  toArray(t = [], e = 0) {
    const i = this.elements;
    return t[e] = i[0], t[e + 1] = i[1], t[e + 2] = i[2], t[e + 3] = i[3], t[e + 4] = i[4], t[e + 5] = i[5], t[e + 6] = i[6], t[e + 7] = i[7], t[e + 8] = i[8], t[e + 9] = i[9], t[e + 10] = i[10], t[e + 11] = i[11], t[e + 12] = i[12], t[e + 13] = i[13], t[e + 14] = i[14], t[e + 15] = i[15], t;
  }
}
const Pc = /* @__PURE__ */ new H(), Us = /* @__PURE__ */ new ae(), RV = /* @__PURE__ */ new H(0, 0, 0), CV = /* @__PURE__ */ new H(1, 1, 1), No = /* @__PURE__ */ new H(), Lg = /* @__PURE__ */ new H(), Na = /* @__PURE__ */ new H(), HC = /* @__PURE__ */ new ae(), FC = /* @__PURE__ */ new Jn();
class _a {
  /**
   * Constructs a new euler instance.
   *
   * @param {number} [x=0] - The angle of the x axis in radians.
   * @param {number} [y=0] - The angle of the y axis in radians.
   * @param {number} [z=0] - The angle of the z axis in radians.
   * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.
   */
  constructor(t = 0, e = 0, i = 0, a = _a.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = t, this._y = e, this._z = i, this._order = a;
  }
  /**
   * The angle of the x axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get x() {
    return this._x;
  }
  set x(t) {
    this._x = t, this._onChangeCallback();
  }
  /**
   * The angle of the y axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get y() {
    return this._y;
  }
  set y(t) {
    this._y = t, this._onChangeCallback();
  }
  /**
   * The angle of the z axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get z() {
    return this._z;
  }
  set z(t) {
    this._z = t, this._onChangeCallback();
  }
  /**
   * A string representing the order that the rotations are applied.
   *
   * @type {string}
   * @default 'XYZ'
   */
  get order() {
    return this._order;
  }
  set order(t) {
    this._order = t, this._onChangeCallback();
  }
  /**
   * Sets the Euler components.
   *
   * @param {number} x - The angle of the x axis in radians.
   * @param {number} y - The angle of the y axis in radians.
   * @param {number} z - The angle of the z axis in radians.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  set(t, e, i, a = this._order) {
    return this._x = t, this._y = e, this._z = i, this._order = a, this._onChangeCallback(), this;
  }
  /**
   * Returns a new Euler instance with copied values from this instance.
   *
   * @return {Euler} A clone of this instance.
   */
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  /**
   * Copies the values of the given Euler instance to this instance.
   *
   * @param {Euler} euler - The Euler instance to copy.
   * @return {Euler} A reference to this Euler instance.
   */
  copy(t) {
    return this._x = t._x, this._y = t._y, this._z = t._z, this._order = t._order, this._onChangeCallback(), this;
  }
  /**
   * Sets the angles of this Euler instance from a pure rotation matrix.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromRotationMatrix(t, e = this._order, i = !0) {
    const a = t.elements, s = a[0], r = a[4], l = a[8], c = a[1], f = a[5], d = a[9], p = a[2], m = a[6], g = a[10];
    switch (e) {
      case "XYZ":
        this._y = Math.asin(me(l, -1, 1)), Math.abs(l) < 0.9999999 ? (this._x = Math.atan2(-d, g), this._z = Math.atan2(-r, s)) : (this._x = Math.atan2(m, f), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-me(d, -1, 1)), Math.abs(d) < 0.9999999 ? (this._y = Math.atan2(l, g), this._z = Math.atan2(c, f)) : (this._y = Math.atan2(-p, s), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(me(m, -1, 1)), Math.abs(m) < 0.9999999 ? (this._y = Math.atan2(-p, g), this._z = Math.atan2(-r, f)) : (this._y = 0, this._z = Math.atan2(c, s));
        break;
      case "ZYX":
        this._y = Math.asin(-me(p, -1, 1)), Math.abs(p) < 0.9999999 ? (this._x = Math.atan2(m, g), this._z = Math.atan2(c, s)) : (this._x = 0, this._z = Math.atan2(-r, f));
        break;
      case "YZX":
        this._z = Math.asin(me(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(-d, f), this._y = Math.atan2(-p, s)) : (this._x = 0, this._y = Math.atan2(l, g));
        break;
      case "XZY":
        this._z = Math.asin(-me(r, -1, 1)), Math.abs(r) < 0.9999999 ? (this._x = Math.atan2(m, f), this._y = Math.atan2(l, s)) : (this._x = Math.atan2(-d, g), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e);
    }
    return this._order = e, i === !0 && this._onChangeCallback(), this;
  }
  /**
   * Sets the angles of this Euler instance from a normalized quaternion.
   *
   * @param {Quaternion} q - A normalized Quaternion.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromQuaternion(t, e, i) {
    return HC.makeRotationFromQuaternion(t), this.setFromRotationMatrix(HC, e, i);
  }
  /**
   * Sets the angles of this Euler instance from the given vector.
   *
   * @param {Vector3} v - The vector.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromVector3(t, e = this._order) {
    return this.set(t.x, t.y, t.z, e);
  }
  /**
   * Resets the euler angle with a new order by creating a quaternion from this
   * euler angle and then setting this euler angle with the quaternion and the
   * new order.
   *
   * Warning: This discards revolution information.
   *
   * @param {string} [newOrder] - A string representing the new order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  reorder(t) {
    return FC.setFromEuler(this), this.setFromQuaternion(FC, t);
  }
  /**
   * Returns `true` if this Euler instance is equal with the given one.
   *
   * @param {Euler} euler - The Euler instance to test for equality.
   * @return {boolean} Whether this Euler instance is equal with the given one.
   */
  equals(t) {
    return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order;
  }
  /**
   * Sets this Euler instance's components to values from the given array. The first three
   * entries of the array are assign to the x,y and z components. An optional fourth entry
   * defines the Euler order.
   *
   * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.
   * @return {Euler} A reference to this Euler instance.
   */
  fromArray(t) {
    return this._x = t[0], this._y = t[1], this._z = t[2], t[3] !== void 0 && (this._order = t[3]), this._onChangeCallback(), this;
  }
  /**
   * Writes the components of this Euler instance to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number,number,number,string>} The Euler components.
   */
  toArray(t = [], e = 0) {
    return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._order, t;
  }
  _onChange(t) {
    return this._onChangeCallback = t, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
_a.DEFAULT_ORDER = "XYZ";
class lh {
  /**
   * Constructs a new layers instance, with membership
   * initially set to layer `0`.
   */
  constructor() {
    this.mask = 1;
  }
  /**
   * Sets membership to the given layer, and remove membership all other layers.
   *
   * @param {number} layer - The layer to set.
   */
  set(t) {
    this.mask = (1 << t | 0) >>> 0;
  }
  /**
   * Adds membership of the given layer.
   *
   * @param {number} layer - The layer to enable.
   */
  enable(t) {
    this.mask |= 1 << t | 0;
  }
  /**
   * Adds membership to all layers.
   */
  enableAll() {
    this.mask = -1;
  }
  /**
   * Toggles the membership of the given layer.
   *
   * @param {number} layer - The layer to toggle.
   */
  toggle(t) {
    this.mask ^= 1 << t | 0;
  }
  /**
   * Removes membership of the given layer.
   *
   * @param {number} layer - The layer to enable.
   */
  disable(t) {
    this.mask &= ~(1 << t | 0);
  }
  /**
   * Removes the membership from all layers.
   */
  disableAll() {
    this.mask = 0;
  }
  /**
   * Returns `true` if this and the given layers object have at least one
   * layer in common.
   *
   * @param {Layers} layers - The layers to test.
   * @return {boolean } Whether this and the given layers object have at least one layer in common or not.
   */
  test(t) {
    return (this.mask & t.mask) !== 0;
  }
  /**
   * Returns `true` if the given layer is enabled.
   *
   * @param {number} layer - The layer to test.
   * @return {boolean } Whether the given layer is enabled or not.
   */
  isEnabled(t) {
    return (this.mask & (1 << t | 0)) !== 0;
  }
}
let wV = 0;
const VC = /* @__PURE__ */ new H(), Ic = /* @__PURE__ */ new Jn(), Lr = /* @__PURE__ */ new ae(), zg = /* @__PURE__ */ new H(), dd = /* @__PURE__ */ new H(), DV = /* @__PURE__ */ new H(), UV = /* @__PURE__ */ new Jn(), GC = /* @__PURE__ */ new H(1, 0, 0), XC = /* @__PURE__ */ new H(0, 1, 0), qC = /* @__PURE__ */ new H(0, 0, 1), YC = { type: "added" }, OV = { type: "removed" }, Hc = { type: "childadded", child: null }, kS = { type: "childremoved", child: null };
class He extends gr {
  /**
   * Constructs a new 3D object.
   */
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: wV++ }), this.uuid = Ya(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = He.DEFAULT_UP.clone();
    const t = new H(), e = new _a(), i = new Jn(), a = new H(1, 1, 1);
    function s() {
      i.setFromEuler(e, !1);
    }
    function r() {
      e.setFromQuaternion(i, void 0, !1);
    }
    e._onChange(s), i._onChange(r), Object.defineProperties(this, {
      /**
       * Represents the object's local position.
       *
       * @name Object3D#position
       * @type {Vector3}
       * @default (0,0,0)
       */
      position: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      /**
       * Represents the object's local rotation as Euler angles, in radians.
       *
       * @name Object3D#rotation
       * @type {Euler}
       * @default (0,0,0)
       */
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      /**
       * Represents the object's local rotation as Quaternions.
       *
       * @name Object3D#quaternion
       * @type {Quaternion}
       */
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: i
      },
      /**
       * Represents the object's local scale.
       *
       * @name Object3D#scale
       * @type {Vector3}
       * @default (1,1,1)
       */
      scale: {
        configurable: !0,
        enumerable: !0,
        value: a
      },
      /**
       * Represents the object's model-view matrix.
       *
       * @name Object3D#modelViewMatrix
       * @type {Matrix4}
       */
      modelViewMatrix: {
        value: new ae()
      },
      /**
       * Represents the object's normal matrix.
       *
       * @name Object3D#normalMatrix
       * @type {Matrix3}
       */
      normalMatrix: {
        value: new ge()
      }
    }), this.matrix = new ae(), this.matrixWorld = new ae(), this.matrixAutoUpdate = He.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = He.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.layers = new lh(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.customDepthMaterial = void 0, this.customDistanceMaterial = void 0, this.userData = {};
  }
  /**
   * A callback that is executed immediately before a 3D object is rendered to a shadow map.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Camera} shadowCamera - The shadow camera.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} depthMaterial - The depth material.
   * @param {Object} group - The geometry group data.
   */
  onBeforeShadow() {
  }
  /**
   * A callback that is executed immediately after a 3D object is rendered to a shadow map.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Camera} shadowCamera - The shadow camera.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} depthMaterial - The depth material.
   * @param {Object} group - The geometry group data.
   */
  onAfterShadow() {
  }
  /**
   * A callback that is executed immediately before a 3D object is rendered.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {Object} group - The geometry group data.
   */
  onBeforeRender() {
  }
  /**
   * A callback that is executed immediately after a 3D object is rendered.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {Object} group - The geometry group data.
   */
  onAfterRender() {
  }
  /**
   * Applies the given transformation matrix to the object and updates the object's position,
   * rotation and scale.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   */
  applyMatrix4(t) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  /**
   * Applies a rotation represented by given the quaternion to the 3D object.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Object3D} A reference to this instance.
   */
  applyQuaternion(t) {
    return this.quaternion.premultiply(t), this;
  }
  /**
   * Sets the given rotation represented as an axis/angle couple to the 3D object.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   */
  setRotationFromAxisAngle(t, e) {
    this.quaternion.setFromAxisAngle(t, e);
  }
  /**
   * Sets the given rotation represented as Euler angles to the 3D object.
   *
   * @param {Euler} euler - The Euler angles.
   */
  setRotationFromEuler(t) {
    this.quaternion.setFromEuler(t, !0);
  }
  /**
   * Sets the given rotation represented as rotation matrix to the 3D object.
   *
   * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be
   * a pure rotation matrix (i.e, unscaled).
   */
  setRotationFromMatrix(t) {
    this.quaternion.setFromRotationMatrix(t);
  }
  /**
   * Sets the given rotation represented as a Quaternion to the 3D object.
   *
   * @param {Quaternion} q - The Quaternion
   */
  setRotationFromQuaternion(t) {
    this.quaternion.copy(t);
  }
  /**
   * Rotates the 3D object along an axis in local space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateOnAxis(t, e) {
    return Ic.setFromAxisAngle(t, e), this.quaternion.multiply(Ic), this;
  }
  /**
   * Rotates the 3D object along an axis in world space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateOnWorldAxis(t, e) {
    return Ic.setFromAxisAngle(t, e), this.quaternion.premultiply(Ic), this;
  }
  /**
   * Rotates the 3D object around its X axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateX(t) {
    return this.rotateOnAxis(GC, t);
  }
  /**
   * Rotates the 3D object around its Y axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateY(t) {
    return this.rotateOnAxis(XC, t);
  }
  /**
   * Rotates the 3D object around its Z axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateZ(t) {
    return this.rotateOnAxis(qC, t);
  }
  /**
   * Translate the 3D object by a distance along the given axis in local space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateOnAxis(t, e) {
    return VC.copy(t).applyQuaternion(this.quaternion), this.position.add(VC.multiplyScalar(e)), this;
  }
  /**
   * Translate the 3D object by a distance along its X-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateX(t) {
    return this.translateOnAxis(GC, t);
  }
  /**
   * Translate the 3D object by a distance along its Y-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateY(t) {
    return this.translateOnAxis(XC, t);
  }
  /**
   * Translate the 3D object by a distance along its Z-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateZ(t) {
    return this.translateOnAxis(qC, t);
  }
  /**
   * Converts the given vector from this 3D object's local space to world space.
   *
   * @param {Vector3} vector - The vector to convert.
   * @return {Vector3} The converted vector.
   */
  localToWorld(t) {
    return this.updateWorldMatrix(!0, !1), t.applyMatrix4(this.matrixWorld);
  }
  /**
   * Converts the given vector from this 3D object's word space to local space.
   *
   * @param {Vector3} vector - The vector to convert.
   * @return {Vector3} The converted vector.
   */
  worldToLocal(t) {
    return this.updateWorldMatrix(!0, !1), t.applyMatrix4(Lr.copy(this.matrixWorld).invert());
  }
  /**
   * Rotates the object to face a point in world space.
   *
   * This method does not support objects having non-uniformly-scaled parent(s).
   *
   * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space
   * @param {number} [y] - The y coordinate in world space.
   * @param {number} [z] - The z coordinate in world space.
   */
  lookAt(t, e, i) {
    t.isVector3 ? zg.copy(t) : zg.set(t, e, i);
    const a = this.parent;
    this.updateWorldMatrix(!0, !1), dd.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Lr.lookAt(dd, zg, this.up) : Lr.lookAt(zg, dd, this.up), this.quaternion.setFromRotationMatrix(Lr), a && (Lr.extractRotation(a.matrixWorld), Ic.setFromRotationMatrix(Lr), this.quaternion.premultiply(Ic.invert()));
  }
  /**
   * Adds the given 3D object as a child to this 3D object. An arbitrary number of
   * objects may be added. Any current parent on an object passed in here will be
   * removed, since an object can have at most one parent.
   *
   * @fires Object3D#added
   * @fires Object3D#childadded
   * @param {Object3D} object - The 3D object to add.
   * @return {Object3D} A reference to this instance.
   */
  add(t) {
    if (arguments.length > 1) {
      for (let e = 0; e < arguments.length; e++)
        this.add(arguments[e]);
      return this;
    }
    return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this) : (t && t.isObject3D ? (t.removeFromParent(), t.parent = this, this.children.push(t), t.dispatchEvent(YC), Hc.child = t, this.dispatchEvent(Hc), Hc.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t), this);
  }
  /**
   * Removes the given 3D object as child from this 3D object.
   * An arbitrary number of objects may be removed.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @param {Object3D} object - The 3D object to remove.
   * @return {Object3D} A reference to this instance.
   */
  remove(t) {
    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++)
        this.remove(arguments[i]);
      return this;
    }
    const e = this.children.indexOf(t);
    return e !== -1 && (t.parent = null, this.children.splice(e, 1), t.dispatchEvent(OV), kS.child = t, this.dispatchEvent(kS), kS.child = null), this;
  }
  /**
   * Removes this 3D object from its current parent.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @return {Object3D} A reference to this instance.
   */
  removeFromParent() {
    const t = this.parent;
    return t !== null && t.remove(this), this;
  }
  /**
   * Removes all child objects.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @return {Object3D} A reference to this instance.
   */
  clear() {
    return this.remove(...this.children);
  }
  /**
   * Adds the given 3D object as a child of this 3D object, while maintaining the object's world
   * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).
   *
   * @fires Object3D#added
   * @fires Object3D#childadded
   * @param {Object3D} object - The 3D object to attach.
   * @return {Object3D} A reference to this instance.
   */
  attach(t) {
    return this.updateWorldMatrix(!0, !1), Lr.copy(this.matrixWorld).invert(), t.parent !== null && (t.parent.updateWorldMatrix(!0, !1), Lr.multiply(t.parent.matrixWorld)), t.applyMatrix4(Lr), t.removeFromParent(), t.parent = this, this.children.push(t), t.updateWorldMatrix(!1, !0), t.dispatchEvent(YC), Hc.child = t, this.dispatchEvent(Hc), Hc.child = null, this;
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching ID.
   *
   * @param {number} id - The id.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectById(t) {
    return this.getObjectByProperty("id", t);
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching name.
   *
   * @param {string} name - The name.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectByName(t) {
    return this.getObjectByProperty("name", t);
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching property value.
   *
   * @param {string} name - The name of the property.
   * @param {any} value - The value.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectByProperty(t, e) {
    if (this[t] === e) return this;
    for (let i = 0, a = this.children.length; i < a; i++) {
      const r = this.children[i].getObjectByProperty(t, e);
      if (r !== void 0)
        return r;
    }
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns all 3D objects with a matching property value.
   *
   * @param {string} name - The name of the property.
   * @param {any} value - The value.
   * @param {Array<Object3D>} result - The method stores the result in this array.
   * @return {Array<Object3D>} The found 3D objects.
   */
  getObjectsByProperty(t, e, i = []) {
    this[t] === e && i.push(this);
    const a = this.children;
    for (let s = 0, r = a.length; s < r; s++)
      a[s].getObjectsByProperty(t, e, i);
    return i;
  }
  /**
   * Returns a vector representing the position of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's position in world space.
   */
  getWorldPosition(t) {
    return this.updateWorldMatrix(!0, !1), t.setFromMatrixPosition(this.matrixWorld);
  }
  /**
   * Returns a Quaternion representing the position of the 3D object in world space.
   *
   * @param {Quaternion} target - The target Quaternion the result is stored to.
   * @return {Quaternion} The 3D object's rotation in world space.
   */
  getWorldQuaternion(t) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(dd, t, DV), t;
  }
  /**
   * Returns a vector representing the scale of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's scale in world space.
   */
  getWorldScale(t) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(dd, UV, t), t;
  }
  /**
   * Returns a vector representing the ("look") direction of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's direction in world space.
   */
  getWorldDirection(t) {
    this.updateWorldMatrix(!0, !1);
    const e = this.matrixWorld.elements;
    return t.set(e[8], e[9], e[10]).normalize();
  }
  /**
   * Abstract method to get intersections between a casted ray and this
   * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}
   * implement this method in order to use raycasting.
   *
   * @abstract
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - An array holding the result of the method.
   */
  raycast() {
  }
  /**
   * Executes the callback on this 3D object and all descendants.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverse(t) {
    t(this);
    const e = this.children;
    for (let i = 0, a = e.length; i < a; i++)
      e[i].traverse(t);
  }
  /**
   * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.
   * Descendants of invisible 3D objects are not traversed.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverseVisible(t) {
    if (this.visible === !1) return;
    t(this);
    const e = this.children;
    for (let i = 0, a = e.length; i < a; i++)
      e[i].traverseVisible(t);
  }
  /**
   * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverseAncestors(t) {
    const e = this.parent;
    e !== null && (t(e), e.traverseAncestors(t));
  }
  /**
   * Updates the transformation matrix in local space by computing it from the current
   * position, rotation and scale values.
   */
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  /**
   * Updates the transformation matrix in world space of this 3D objects and its descendants.
   *
   * To ensure correct results, this method also recomputes the 3D object's transformation matrix in
   * local space. The computation of the local and world matrix can be controlled with the
   * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both
   * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.
   *
   * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even
   * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.
   */
  updateMatrixWorld(t) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || t) && (this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), this.matrixWorldNeedsUpdate = !1, t = !0);
    const e = this.children;
    for (let i = 0, a = e.length; i < a; i++)
      e[i].updateMatrixWorld(t);
  }
  /**
   * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the
   * update of ancestor and descendant nodes.
   *
   * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.
   * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.
   */
  updateWorldMatrix(t, e) {
    const i = this.parent;
    if (t === !0 && i !== null && i.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), e === !0) {
      const a = this.children;
      for (let s = 0, r = a.length; s < r; s++)
        a[s].updateWorldMatrix(!1, !0);
    }
  }
  /**
   * Serializes the 3D object into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized 3D object.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(t) {
    const e = t === void 0 || typeof t == "string", i = {};
    e && (t = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, i.metadata = {
      version: 4.7,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const a = {};
    a.uuid = this.uuid, a.type = this.type, this.name !== "" && (a.name = this.name), this.castShadow === !0 && (a.castShadow = !0), this.receiveShadow === !0 && (a.receiveShadow = !0), this.visible === !1 && (a.visible = !1), this.frustumCulled === !1 && (a.frustumCulled = !1), this.renderOrder !== 0 && (a.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (a.userData = this.userData), a.layers = this.layers.mask, a.matrix = this.matrix.toArray(), a.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (a.matrixAutoUpdate = !1), this.isInstancedMesh && (a.type = "InstancedMesh", a.count = this.count, a.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (a.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (a.type = "BatchedMesh", a.perObjectFrustumCulled = this.perObjectFrustumCulled, a.sortObjects = this.sortObjects, a.drawRanges = this._drawRanges, a.reservedRanges = this._reservedRanges, a.geometryInfo = this._geometryInfo.map((l) => ({
      ...l,
      boundingBox: l.boundingBox ? l.boundingBox.toJSON() : void 0,
      boundingSphere: l.boundingSphere ? l.boundingSphere.toJSON() : void 0
    })), a.instanceInfo = this._instanceInfo.map((l) => ({ ...l })), a.availableInstanceIds = this._availableInstanceIds.slice(), a.availableGeometryIds = this._availableGeometryIds.slice(), a.nextIndexStart = this._nextIndexStart, a.nextVertexStart = this._nextVertexStart, a.geometryCount = this._geometryCount, a.maxInstanceCount = this._maxInstanceCount, a.maxVertexCount = this._maxVertexCount, a.maxIndexCount = this._maxIndexCount, a.geometryInitialized = this._geometryInitialized, a.matricesTexture = this._matricesTexture.toJSON(t), a.indirectTexture = this._indirectTexture.toJSON(t), this._colorsTexture !== null && (a.colorsTexture = this._colorsTexture.toJSON(t)), this.boundingSphere !== null && (a.boundingSphere = this.boundingSphere.toJSON()), this.boundingBox !== null && (a.boundingBox = this.boundingBox.toJSON()));
    function s(l, c) {
      return l[c.uuid] === void 0 && (l[c.uuid] = c.toJSON(t)), c.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? a.background = this.background.toJSON() : this.background.isTexture && (a.background = this.background.toJSON(t).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (a.environment = this.environment.toJSON(t).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      a.geometry = s(t.geometries, this.geometry);
      const l = this.geometry.parameters;
      if (l !== void 0 && l.shapes !== void 0) {
        const c = l.shapes;
        if (Array.isArray(c))
          for (let f = 0, d = c.length; f < d; f++) {
            const p = c[f];
            s(t.shapes, p);
          }
        else
          s(t.shapes, c);
      }
    }
    if (this.isSkinnedMesh && (a.bindMode = this.bindMode, a.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (s(t.skeletons, this.skeleton), a.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const l = [];
        for (let c = 0, f = this.material.length; c < f; c++)
          l.push(s(t.materials, this.material[c]));
        a.material = l;
      } else
        a.material = s(t.materials, this.material);
    if (this.children.length > 0) {
      a.children = [];
      for (let l = 0; l < this.children.length; l++)
        a.children.push(this.children[l].toJSON(t).object);
    }
    if (this.animations.length > 0) {
      a.animations = [];
      for (let l = 0; l < this.animations.length; l++) {
        const c = this.animations[l];
        a.animations.push(s(t.animations, c));
      }
    }
    if (e) {
      const l = r(t.geometries), c = r(t.materials), f = r(t.textures), d = r(t.images), p = r(t.shapes), m = r(t.skeletons), g = r(t.animations), y = r(t.nodes);
      l.length > 0 && (i.geometries = l), c.length > 0 && (i.materials = c), f.length > 0 && (i.textures = f), d.length > 0 && (i.images = d), p.length > 0 && (i.shapes = p), m.length > 0 && (i.skeletons = m), g.length > 0 && (i.animations = g), y.length > 0 && (i.nodes = y);
    }
    return i.object = a, i;
    function r(l) {
      const c = [];
      for (const f in l) {
        const d = l[f];
        delete d.metadata, c.push(d);
      }
      return c;
    }
  }
  /**
   * Returns a new 3D object with copied values from this instance.
   *
   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.
   * @return {Object3D} A clone of this instance.
   */
  clone(t) {
    return new this.constructor().copy(this, t);
  }
  /**
   * Copies the values of the given 3D object to this instance.
   *
   * @param {Object3D} source - The 3D object to copy.
   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.
   * @return {Object3D} A reference to this instance.
   */
  copy(t, e = !0) {
    if (this.name = t.name, this.up.copy(t.up), this.position.copy(t.position), this.rotation.order = t.rotation.order, this.quaternion.copy(t.quaternion), this.scale.copy(t.scale), this.matrix.copy(t.matrix), this.matrixWorld.copy(t.matrixWorld), this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrixWorldAutoUpdate = t.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate, this.layers.mask = t.layers.mask, this.visible = t.visible, this.castShadow = t.castShadow, this.receiveShadow = t.receiveShadow, this.frustumCulled = t.frustumCulled, this.renderOrder = t.renderOrder, this.animations = t.animations.slice(), this.userData = JSON.parse(JSON.stringify(t.userData)), e === !0)
      for (let i = 0; i < t.children.length; i++) {
        const a = t.children[i];
        this.add(a.clone());
      }
    return this;
  }
}
He.DEFAULT_UP = /* @__PURE__ */ new H(0, 1, 0);
He.DEFAULT_MATRIX_AUTO_UPDATE = !0;
He.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const Os = /* @__PURE__ */ new H(), zr = /* @__PURE__ */ new H(), WS = /* @__PURE__ */ new H(), Br = /* @__PURE__ */ new H(), Fc = /* @__PURE__ */ new H(), Vc = /* @__PURE__ */ new H(), kC = /* @__PURE__ */ new H(), ZS = /* @__PURE__ */ new H(), jS = /* @__PURE__ */ new H(), QS = /* @__PURE__ */ new H(), KS = /* @__PURE__ */ new De(), JS = /* @__PURE__ */ new De(), $S = /* @__PURE__ */ new De();
class ca {
  /**
   * Constructs a new triangle.
   *
   * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.
   * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.
   * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.
   */
  constructor(t = new H(), e = new H(), i = new H()) {
    this.a = t, this.b = e, this.c = i;
  }
  /**
   * Computes the normal vector of a triangle.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's normal.
   */
  static getNormal(t, e, i, a) {
    a.subVectors(i, e), Os.subVectors(t, e), a.cross(Os);
    const s = a.lengthSq();
    return s > 0 ? a.multiplyScalar(1 / Math.sqrt(s)) : a.set(0, 0, 0);
  }
  /**
   * Computes a barycentric coordinates from the given vector.
   * Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The barycentric coordinates for the given point
   */
  static getBarycoord(t, e, i, a, s) {
    Os.subVectors(a, e), zr.subVectors(i, e), WS.subVectors(t, e);
    const r = Os.dot(Os), l = Os.dot(zr), c = Os.dot(WS), f = zr.dot(zr), d = zr.dot(WS), p = r * f - l * l;
    if (p === 0)
      return s.set(0, 0, 0), null;
    const m = 1 / p, g = (f * c - l * d) * m, y = (r * d - l * c) * m;
    return s.set(1 - g - y, y, g);
  }
  /**
   * Returns `true` if the given point, when projected onto the plane of the
   * triangle, lies within the triangle.
   *
   * @param {Vector3} point - The point in 3D space to test.
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @return {boolean} Whether the given point, when projected onto the plane of the
   * triangle, lies within the triangle or not.
   */
  static containsPoint(t, e, i, a) {
    return this.getBarycoord(t, e, i, a, Br) === null ? !1 : Br.x >= 0 && Br.y >= 0 && Br.x + Br.y <= 1;
  }
  /**
   * Computes the value barycentrically interpolated for the given point on the
   * triangle. Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - Position of interpolated point.
   * @param {Vector3} p1 - The first corner of the triangle.
   * @param {Vector3} p2 - The second corner of the triangle.
   * @param {Vector3} p3 - The third corner of the triangle.
   * @param {Vector3} v1 - Value to interpolate of first vertex.
   * @param {Vector3} v2 - Value to interpolate of second vertex.
   * @param {Vector3} v3 - Value to interpolate of third vertex.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The interpolated value.
   */
  static getInterpolation(t, e, i, a, s, r, l, c) {
    return this.getBarycoord(t, e, i, a, Br) === null ? (c.x = 0, c.y = 0, "z" in c && (c.z = 0), "w" in c && (c.w = 0), null) : (c.setScalar(0), c.addScaledVector(s, Br.x), c.addScaledVector(r, Br.y), c.addScaledVector(l, Br.z), c);
  }
  /**
   * Computes the value barycentrically interpolated for the given attribute and indices.
   *
   * @param {BufferAttribute} attr - The attribute to interpolate.
   * @param {number} i1 - Index of first vertex.
   * @param {number} i2 - Index of second vertex.
   * @param {number} i3 - Index of third vertex.
   * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The interpolated attribute value.
   */
  static getInterpolatedAttribute(t, e, i, a, s, r) {
    return KS.setScalar(0), JS.setScalar(0), $S.setScalar(0), KS.fromBufferAttribute(t, e), JS.fromBufferAttribute(t, i), $S.fromBufferAttribute(t, a), r.setScalar(0), r.addScaledVector(KS, s.x), r.addScaledVector(JS, s.y), r.addScaledVector($S, s.z), r;
  }
  /**
   * Returns `true` if the triangle is oriented towards the given direction.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} direction - The (normalized) direction vector.
   * @return {boolean} Whether the triangle is oriented towards the given direction or not.
   */
  static isFrontFacing(t, e, i, a) {
    return Os.subVectors(i, e), zr.subVectors(t, e), Os.cross(zr).dot(a) < 0;
  }
  /**
   * Sets the triangle's vertices by copying the given values.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  set(t, e, i) {
    return this.a.copy(t), this.b.copy(e), this.c.copy(i), this;
  }
  /**
   * Sets the triangle's vertices by copying the given array values.
   *
   * @param {Array<Vector3>} points - An array with 3D points.
   * @param {number} i0 - The array index representing the first corner of the triangle.
   * @param {number} i1 - The array index representing the second corner of the triangle.
   * @param {number} i2 - The array index representing the third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  setFromPointsAndIndices(t, e, i, a) {
    return this.a.copy(t[e]), this.b.copy(t[i]), this.c.copy(t[a]), this;
  }
  /**
   * Sets the triangle's vertices by copying the given attribute values.
   *
   * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.
   * @param {number} i0 - The attribute index representing the first corner of the triangle.
   * @param {number} i1 - The attribute index representing the second corner of the triangle.
   * @param {number} i2 - The attribute index representing the third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  setFromAttributeAndIndices(t, e, i, a) {
    return this.a.fromBufferAttribute(t, e), this.b.fromBufferAttribute(t, i), this.c.fromBufferAttribute(t, a), this;
  }
  /**
   * Returns a new triangle with copied values from this instance.
   *
   * @return {Triangle} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given triangle to this instance.
   *
   * @param {Triangle} triangle - The triangle to copy.
   * @return {Triangle} A reference to this triangle.
   */
  copy(t) {
    return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this;
  }
  /**
   * Computes the area of the triangle.
   *
   * @return {number} The triangle's area.
   */
  getArea() {
    return Os.subVectors(this.c, this.b), zr.subVectors(this.a, this.b), Os.cross(zr).length() * 0.5;
  }
  /**
   * Computes the midpoint of the triangle.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's midpoint.
   */
  getMidpoint(t) {
    return t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  /**
   * Computes the normal of the triangle.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's normal.
   */
  getNormal(t) {
    return ca.getNormal(this.a, this.b, this.c, t);
  }
  /**
   * Computes a plane the triangle lies within.
   *
   * @param {Plane} target - The target vector that is used to store the method's result.
   * @return {Plane} The plane the triangle lies within.
   */
  getPlane(t) {
    return t.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  /**
   * Computes a barycentric coordinates from the given vector.
   * Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The barycentric coordinates for the given point
   */
  getBarycoord(t, e) {
    return ca.getBarycoord(t, this.a, this.b, this.c, e);
  }
  /**
   * Computes the value barycentrically interpolated for the given point on the
   * triangle. Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - Position of interpolated point.
   * @param {Vector3} v1 - Value to interpolate of first vertex.
   * @param {Vector3} v2 - Value to interpolate of second vertex.
   * @param {Vector3} v3 - Value to interpolate of third vertex.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The interpolated value.
   */
  getInterpolation(t, e, i, a, s) {
    return ca.getInterpolation(t, this.a, this.b, this.c, e, i, a, s);
  }
  /**
   * Returns `true` if the given point, when projected onto the plane of the
   * triangle, lies within the triangle.
   *
   * @param {Vector3} point - The point in 3D space to test.
   * @return {boolean} Whether the given point, when projected onto the plane of the
   * triangle, lies within the triangle or not.
   */
  containsPoint(t) {
    return ca.containsPoint(t, this.a, this.b, this.c);
  }
  /**
   * Returns `true` if the triangle is oriented towards the given direction.
   *
   * @param {Vector3} direction - The (normalized) direction vector.
   * @return {boolean} Whether the triangle is oriented towards the given direction or not.
   */
  isFrontFacing(t) {
    return ca.isFrontFacing(this.a, this.b, this.c, t);
  }
  /**
   * Returns `true` if this triangle intersects with the given box.
   *
   * @param {Box3} box - The box to intersect.
   * @return {boolean} Whether this triangle intersects with the given box or not.
   */
  intersectsBox(t) {
    return t.intersectsTriangle(this);
  }
  /**
   * Returns the closest point on the triangle to the given point.
   *
   * @param {Vector3} p - The point to compute the closest point for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on the triangle.
   */
  closestPointToPoint(t, e) {
    const i = this.a, a = this.b, s = this.c;
    let r, l;
    Fc.subVectors(a, i), Vc.subVectors(s, i), ZS.subVectors(t, i);
    const c = Fc.dot(ZS), f = Vc.dot(ZS);
    if (c <= 0 && f <= 0)
      return e.copy(i);
    jS.subVectors(t, a);
    const d = Fc.dot(jS), p = Vc.dot(jS);
    if (d >= 0 && p <= d)
      return e.copy(a);
    const m = c * p - d * f;
    if (m <= 0 && c >= 0 && d <= 0)
      return r = c / (c - d), e.copy(i).addScaledVector(Fc, r);
    QS.subVectors(t, s);
    const g = Fc.dot(QS), y = Vc.dot(QS);
    if (y >= 0 && g <= y)
      return e.copy(s);
    const x = g * f - c * y;
    if (x <= 0 && f >= 0 && y <= 0)
      return l = f / (f - y), e.copy(i).addScaledVector(Vc, l);
    const M = d * y - g * p;
    if (M <= 0 && p - d >= 0 && g - y >= 0)
      return kC.subVectors(s, a), l = (p - d) / (p - d + (g - y)), e.copy(a).addScaledVector(kC, l);
    const v = 1 / (M + x + m);
    return r = x * v, l = m * v, e.copy(i).addScaledVector(Fc, r).addScaledVector(Vc, l);
  }
  /**
   * Returns `true` if this triangle is equal with the given one.
   *
   * @param {Triangle} triangle - The triangle to test for equality.
   * @return {boolean} Whether this triangle is equal with the given one.
   */
  equals(t) {
    return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c);
  }
}
const $L = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, Lo = { h: 0, s: 0, l: 0 }, Bg = { h: 0, s: 0, l: 0 };
function t1(n, t, e) {
  return e < 0 && (e += 1), e > 1 && (e -= 1), e < 1 / 6 ? n + (t - n) * 6 * e : e < 1 / 2 ? t : e < 2 / 3 ? n + (t - n) * 6 * (2 / 3 - e) : n;
}
class Pt {
  /**
   * Constructs a new color.
   *
   * Note that standard method of specifying color in three.js is with a hexadecimal triplet,
   * and that method is used throughout the rest of the documentation.
   *
   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
   * @param {number} [g] - The green component.
   * @param {number} [b] - The blue component.
   */
  constructor(t, e, i) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(t, e, i);
  }
  /**
   * Sets the colors's components from the given values.
   *
   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
   * @param {number} [g] - The green component.
   * @param {number} [b] - The blue component.
   * @return {Color} A reference to this color.
   */
  set(t, e, i) {
    if (e === void 0 && i === void 0) {
      const a = t;
      a && a.isColor ? this.copy(a) : typeof a == "number" ? this.setHex(a) : typeof a == "string" && this.setStyle(a);
    } else
      this.setRGB(t, e, i);
    return this;
  }
  /**
   * Sets the colors's components to the given scalar value.
   *
   * @param {number} scalar - The scalar value.
   * @return {Color} A reference to this color.
   */
  setScalar(t) {
    return this.r = t, this.g = t, this.b = t, this;
  }
  /**
   * Sets this color from a hexadecimal value.
   *
   * @param {number} hex - The hexadecimal value.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setHex(t, e = Di) {
    return t = Math.floor(t), this.r = (t >> 16 & 255) / 255, this.g = (t >> 8 & 255) / 255, this.b = (t & 255) / 255, Oe.colorSpaceToWorking(this, e), this;
  }
  /**
   * Sets this color from RGB values.
   *
   * @param {number} r - Red channel value between `0.0` and `1.0`.
   * @param {number} g - Green channel value between `0.0` and `1.0`.
   * @param {number} b - Blue channel value between `0.0` and `1.0`.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setRGB(t, e, i, a = Oe.workingColorSpace) {
    return this.r = t, this.g = e, this.b = i, Oe.colorSpaceToWorking(this, a), this;
  }
  /**
   * Sets this color from RGB values.
   *
   * @param {number} h - Hue value between `0.0` and `1.0`.
   * @param {number} s - Saturation value between `0.0` and `1.0`.
   * @param {number} l - Lightness value between `0.0` and `1.0`.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setHSL(t, e, i, a = Oe.workingColorSpace) {
    if (t = JE(t, 1), e = me(e, 0, 1), i = me(i, 0, 1), e === 0)
      this.r = this.g = this.b = i;
    else {
      const s = i <= 0.5 ? i * (1 + e) : i + e - i * e, r = 2 * i - s;
      this.r = t1(r, s, t + 1 / 3), this.g = t1(r, s, t), this.b = t1(r, s, t - 1 / 3);
    }
    return Oe.colorSpaceToWorking(this, a), this;
  }
  /**
   * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,
   * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or
   * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -
   * all 140 color names are supported).
   *
   * @param {string} style - Color as a CSS-style string.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setStyle(t, e = Di) {
    function i(s) {
      s !== void 0 && parseFloat(s) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.");
    }
    let a;
    if (a = /^(\w+)\(([^\)]*)\)/.exec(t)) {
      let s;
      const r = a[1], l = a[2];
      switch (r) {
        case "rgb":
        case "rgba":
          if (s = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))
            return i(s[4]), this.setRGB(
              Math.min(255, parseInt(s[1], 10)) / 255,
              Math.min(255, parseInt(s[2], 10)) / 255,
              Math.min(255, parseInt(s[3], 10)) / 255,
              e
            );
          if (s = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))
            return i(s[4]), this.setRGB(
              Math.min(100, parseInt(s[1], 10)) / 100,
              Math.min(100, parseInt(s[2], 10)) / 100,
              Math.min(100, parseInt(s[3], 10)) / 100,
              e
            );
          break;
        case "hsl":
        case "hsla":
          if (s = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))
            return i(s[4]), this.setHSL(
              parseFloat(s[1]) / 360,
              parseFloat(s[2]) / 100,
              parseFloat(s[3]) / 100,
              e
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + t);
      }
    } else if (a = /^\#([A-Fa-f\d]+)$/.exec(t)) {
      const s = a[1], r = s.length;
      if (r === 3)
        return this.setRGB(
          parseInt(s.charAt(0), 16) / 15,
          parseInt(s.charAt(1), 16) / 15,
          parseInt(s.charAt(2), 16) / 15,
          e
        );
      if (r === 6)
        return this.setHex(parseInt(s, 16), e);
      console.warn("THREE.Color: Invalid hex color " + t);
    } else if (t && t.length > 0)
      return this.setColorName(t, e);
    return this;
  }
  /**
   * Sets this color from a color name. Faster than {@link Color#setStyle} if
   * you don't need the other CSS-style formats.
   *
   * For convenience, the list of names is exposed in `Color.NAMES` as a hash.
   * ```js
   * Color.NAMES.aliceblue // returns 0xF0F8FF
   * ```
   *
   * @param {string} style - The color name.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setColorName(t, e = Di) {
    const i = $L[t.toLowerCase()];
    return i !== void 0 ? this.setHex(i, e) : console.warn("THREE.Color: Unknown color " + t), this;
  }
  /**
   * Returns a new color with copied values from this instance.
   *
   * @return {Color} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  /**
   * Copies the values of the given color to this instance.
   *
   * @param {Color} color - The color to copy.
   * @return {Color} A reference to this color.
   */
  copy(t) {
    return this.r = t.r, this.g = t.g, this.b = t.b, this;
  }
  /**
   * Copies the given color into this color, and then converts this color from
   * `SRGBColorSpace` to `LinearSRGBColorSpace`.
   *
   * @param {Color} color - The color to copy/convert.
   * @return {Color} A reference to this color.
   */
  copySRGBToLinear(t) {
    return this.r = $r(t.r), this.g = $r(t.g), this.b = $r(t.b), this;
  }
  /**
   * Copies the given color into this color, and then converts this color from
   * `LinearSRGBColorSpace` to `SRGBColorSpace`.
   *
   * @param {Color} color - The color to copy/convert.
   * @return {Color} A reference to this color.
   */
  copyLinearToSRGB(t) {
    return this.r = If(t.r), this.g = If(t.g), this.b = If(t.b), this;
  }
  /**
   * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.
   *
   * @return {Color} A reference to this color.
   */
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  /**
   * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.
   *
   * @return {Color} A reference to this color.
   */
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  /**
   * Returns the hexadecimal value of this color.
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {number} The hexadecimal value.
   */
  getHex(t = Di) {
    return Oe.workingToColorSpace(Ci.copy(this), t), Math.round(me(Ci.r * 255, 0, 255)) * 65536 + Math.round(me(Ci.g * 255, 0, 255)) * 256 + Math.round(me(Ci.b * 255, 0, 255));
  }
  /**
   * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {string} The hexadecimal value as a string.
   */
  getHexString(t = Di) {
    return ("000000" + this.getHex(t).toString(16)).slice(-6);
  }
  /**
   * Converts the colors RGB values into the HSL format and stores them into the
   * given target object.
   *
   * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {{h:number,s:number,l:number}} The HSL representation of this color.
   */
  getHSL(t, e = Oe.workingColorSpace) {
    Oe.workingToColorSpace(Ci.copy(this), e);
    const i = Ci.r, a = Ci.g, s = Ci.b, r = Math.max(i, a, s), l = Math.min(i, a, s);
    let c, f;
    const d = (l + r) / 2;
    if (l === r)
      c = 0, f = 0;
    else {
      const p = r - l;
      switch (f = d <= 0.5 ? p / (r + l) : p / (2 - r - l), r) {
        case i:
          c = (a - s) / p + (a < s ? 6 : 0);
          break;
        case a:
          c = (s - i) / p + 2;
          break;
        case s:
          c = (i - a) / p + 4;
          break;
      }
      c /= 6;
    }
    return t.h = c, t.s = f, t.l = d, t;
  }
  /**
   * Returns the RGB values of this color and stores them into the given target object.
   *
   * @param {Color} target - The target color that is used to store the method's result.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} The RGB representation of this color.
   */
  getRGB(t, e = Oe.workingColorSpace) {
    return Oe.workingToColorSpace(Ci.copy(this), e), t.r = Ci.r, t.g = Ci.g, t.b = Ci.b, t;
  }
  /**
   * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {string} The CSS representation of this color.
   */
  getStyle(t = Di) {
    Oe.workingToColorSpace(Ci.copy(this), t);
    const e = Ci.r, i = Ci.g, a = Ci.b;
    return t !== Di ? `color(${t} ${e.toFixed(3)} ${i.toFixed(3)} ${a.toFixed(3)})` : `rgb(${Math.round(e * 255)},${Math.round(i * 255)},${Math.round(a * 255)})`;
  }
  /**
   * Adds the given HSL values to this color's values.
   * Internally, this converts the color's RGB values to HSL, adds HSL
   * and then converts the color back to RGB.
   *
   * @param {number} h - Hue value between `0.0` and `1.0`.
   * @param {number} s - Saturation value between `0.0` and `1.0`.
   * @param {number} l - Lightness value between `0.0` and `1.0`.
   * @return {Color} A reference to this color.
   */
  offsetHSL(t, e, i) {
    return this.getHSL(Lo), this.setHSL(Lo.h + t, Lo.s + e, Lo.l + i);
  }
  /**
   * Adds the RGB values of the given color to the RGB values of this color.
   *
   * @param {Color} color - The color to add.
   * @return {Color} A reference to this color.
   */
  add(t) {
    return this.r += t.r, this.g += t.g, this.b += t.b, this;
  }
  /**
   * Adds the RGB values of the given colors and stores the result in this instance.
   *
   * @param {Color} color1 - The first color.
   * @param {Color} color2 - The second color.
   * @return {Color} A reference to this color.
   */
  addColors(t, e) {
    return this.r = t.r + e.r, this.g = t.g + e.g, this.b = t.b + e.b, this;
  }
  /**
   * Adds the given scalar value to the RGB values of this color.
   *
   * @param {number} s - The scalar to add.
   * @return {Color} A reference to this color.
   */
  addScalar(t) {
    return this.r += t, this.g += t, this.b += t, this;
  }
  /**
   * Subtracts the RGB values of the given color from the RGB values of this color.
   *
   * @param {Color} color - The color to subtract.
   * @return {Color} A reference to this color.
   */
  sub(t) {
    return this.r = Math.max(0, this.r - t.r), this.g = Math.max(0, this.g - t.g), this.b = Math.max(0, this.b - t.b), this;
  }
  /**
   * Multiplies the RGB values of the given color with the RGB values of this color.
   *
   * @param {Color} color - The color to multiply.
   * @return {Color} A reference to this color.
   */
  multiply(t) {
    return this.r *= t.r, this.g *= t.g, this.b *= t.b, this;
  }
  /**
   * Multiplies the given scalar value with the RGB values of this color.
   *
   * @param {number} s - The scalar to multiply.
   * @return {Color} A reference to this color.
   */
  multiplyScalar(t) {
    return this.r *= t, this.g *= t, this.b *= t, this;
  }
  /**
   * Linearly interpolates this color's RGB values toward the RGB values of the
   * given color. The alpha argument can be thought of as the ratio between
   * the two colors, where `0.0` is this color and `1.0` is the first argument.
   *
   * @param {Color} color - The color to converge on.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerp(t, e) {
    return this.r += (t.r - this.r) * e, this.g += (t.g - this.g) * e, this.b += (t.b - this.b) * e, this;
  }
  /**
   * Linearly interpolates between the given colors and stores the result in this instance.
   * The alpha argument can be thought of as the ratio between the two colors, where `0.0`
   * is the first and `1.0` is the second color.
   *
   * @param {Color} color1 - The first color.
   * @param {Color} color2 - The second color.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerpColors(t, e, i) {
    return this.r = t.r + (e.r - t.r) * i, this.g = t.g + (e.g - t.g) * i, this.b = t.b + (e.b - t.b) * i, this;
  }
  /**
   * Linearly interpolates this color's HSL values toward the HSL values of the
   * given color. It differs from {@link Color#lerp} by not interpolating straight
   * from one color to the other, but instead going through all the hues in between
   * those two colors. The alpha argument can be thought of as the ratio between
   * the two colors, where 0.0 is this color and 1.0 is the first argument.
   *
   * @param {Color} color - The color to converge on.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerpHSL(t, e) {
    this.getHSL(Lo), t.getHSL(Bg);
    const i = up(Lo.h, Bg.h, e), a = up(Lo.s, Bg.s, e), s = up(Lo.l, Bg.l, e);
    return this.setHSL(i, a, s), this;
  }
  /**
   * Sets the color's RGB components from the given 3D vector.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Color} A reference to this color.
   */
  setFromVector3(t) {
    return this.r = t.x, this.g = t.y, this.b = t.z, this;
  }
  /**
   * Transforms this color with the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix.
   * @return {Color} A reference to this color.
   */
  applyMatrix3(t) {
    const e = this.r, i = this.g, a = this.b, s = t.elements;
    return this.r = s[0] * e + s[3] * i + s[6] * a, this.g = s[1] * e + s[4] * i + s[7] * a, this.b = s[2] * e + s[5] * i + s[8] * a, this;
  }
  /**
   * Returns `true` if this color is equal with the given one.
   *
   * @param {Color} c - The color to test for equality.
   * @return {boolean} Whether this bounding color is equal with the given one.
   */
  equals(t) {
    return t.r === this.r && t.g === this.g && t.b === this.b;
  }
  /**
   * Sets this color's RGB components from the given array.
   *
   * @param {Array<number>} array - An array holding the RGB values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Color} A reference to this color.
   */
  fromArray(t, e = 0) {
    return this.r = t[e], this.g = t[e + 1], this.b = t[e + 2], this;
  }
  /**
   * Writes the RGB components of this color to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the color components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The color components.
   */
  toArray(t = [], e = 0) {
    return t[e] = this.r, t[e + 1] = this.g, t[e + 2] = this.b, t;
  }
  /**
   * Sets the components of this color from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding color data.
   * @param {number} index - The index into the attribute.
   * @return {Color} A reference to this color.
   */
  fromBufferAttribute(t, e) {
    return this.r = t.getX(e), this.g = t.getY(e), this.b = t.getZ(e), this;
  }
  /**
   * This methods defines the serialization result of this class. Returns the color
   * as a hexadecimal value.
   *
   * @return {number} The hexadecimal value.
   */
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const Ci = /* @__PURE__ */ new Pt();
Pt.NAMES = $L;
let NV = 0;
class Ii extends gr {
  /**
   * Constructs a new material.
   */
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: NV++ }), this.uuid = Ya(), this.name = "", this.type = "Material", this.blending = zu, this.side = ro, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = wv, this.blendDst = Dv, this.blendEquation = Yo, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new Pt(0, 0, 0), this.blendAlpha = 0, this.depthFunc = Xu, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = KM, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = pu, this.stencilZFail = pu, this.stencilZPass = pu, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.allowOverride = !0, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  /**
   * Sets the alpha value to be used when running an alpha test. The material
   * will not be rendered if the opacity is lower than this value.
   *
   * @type {number}
   * @readonly
   * @default 0
   */
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(t) {
    this._alphaTest > 0 != t > 0 && this.version++, this._alphaTest = t;
  }
  /**
   * An optional callback that is executed immediately before the material is used to render a 3D object.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Object3D} object - The 3D object.
   * @param {Object} group - The geometry group data.
   */
  onBeforeRender() {
  }
  /**
   * An optional callback that is executed immediately before the shader
   * program is compiled. This function is called with the shader source code
   * as a parameter. Useful for the modification of built-in materials.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}. The
   * recommended approach when customizing materials is to use `WebGPURenderer` with the new
   * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.
   *
   * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.
   * @param {WebGLRenderer} renderer - A reference to the renderer.
   */
  onBeforeCompile() {
  }
  /**
   * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify
   * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached
   * shader or recompile the shader for this material as needed.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}.
   *
   * @return {string} The custom program cache key.
   */
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  /**
   * This method can be used to set default values from parameter objects.
   * It is a generic implementation so it can be used with different types
   * of materials.
   *
   * @param {Object} [values] - The material values to set.
   */
  setValues(t) {
    if (t !== void 0)
      for (const e in t) {
        const i = t[e];
        if (i === void 0) {
          console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);
          continue;
        }
        const a = this[e];
        if (a === void 0) {
          console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);
          continue;
        }
        a && a.isColor ? a.set(i) : a && a.isVector3 && i && i.isVector3 ? a.copy(i) : this[e] = i;
      }
  }
  /**
   * Serializes the material into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized material.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(t) {
    const e = t === void 0 || typeof t == "string";
    e && (t = {
      textures: {},
      images: {}
    });
    const i = {
      metadata: {
        version: 4.7,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.color && this.color.isColor && (i.color = this.color.getHex()), this.roughness !== void 0 && (i.roughness = this.roughness), this.metalness !== void 0 && (i.metalness = this.metalness), this.sheen !== void 0 && (i.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (i.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (i.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (i.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (i.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (i.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (i.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (i.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (i.shininess = this.shininess), this.clearcoat !== void 0 && (i.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (i.clearcoatMap = this.clearcoatMap.toJSON(t).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (i.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (i.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid, i.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.dispersion !== void 0 && (i.dispersion = this.dispersion), this.iridescence !== void 0 && (i.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (i.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (i.iridescenceMap = this.iridescenceMap.toJSON(t).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (i.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(t).uuid), this.anisotropy !== void 0 && (i.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (i.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (i.anisotropyMap = this.anisotropyMap.toJSON(t).uuid), this.map && this.map.isTexture && (i.map = this.map.toJSON(t).uuid), this.matcap && this.matcap.isTexture && (i.matcap = this.matcap.toJSON(t).uuid), this.alphaMap && this.alphaMap.isTexture && (i.alphaMap = this.alphaMap.toJSON(t).uuid), this.lightMap && this.lightMap.isTexture && (i.lightMap = this.lightMap.toJSON(t).uuid, i.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (i.aoMap = this.aoMap.toJSON(t).uuid, i.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (i.bumpMap = this.bumpMap.toJSON(t).uuid, i.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (i.normalMap = this.normalMap.toJSON(t).uuid, i.normalMapType = this.normalMapType, i.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (i.displacementMap = this.displacementMap.toJSON(t).uuid, i.displacementScale = this.displacementScale, i.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (i.roughnessMap = this.roughnessMap.toJSON(t).uuid), this.metalnessMap && this.metalnessMap.isTexture && (i.metalnessMap = this.metalnessMap.toJSON(t).uuid), this.emissiveMap && this.emissiveMap.isTexture && (i.emissiveMap = this.emissiveMap.toJSON(t).uuid), this.specularMap && this.specularMap.isTexture && (i.specularMap = this.specularMap.toJSON(t).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (i.specularIntensityMap = this.specularIntensityMap.toJSON(t).uuid), this.specularColorMap && this.specularColorMap.isTexture && (i.specularColorMap = this.specularColorMap.toJSON(t).uuid), this.envMap && this.envMap.isTexture && (i.envMap = this.envMap.toJSON(t).uuid, this.combine !== void 0 && (i.combine = this.combine)), this.envMapRotation !== void 0 && (i.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (i.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (i.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (i.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (i.gradientMap = this.gradientMap.toJSON(t).uuid), this.transmission !== void 0 && (i.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (i.transmissionMap = this.transmissionMap.toJSON(t).uuid), this.thickness !== void 0 && (i.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (i.thicknessMap = this.thicknessMap.toJSON(t).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (i.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (i.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (i.size = this.size), this.shadowSide !== null && (i.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (i.sizeAttenuation = this.sizeAttenuation), this.blending !== zu && (i.blending = this.blending), this.side !== ro && (i.side = this.side), this.vertexColors === !0 && (i.vertexColors = !0), this.opacity < 1 && (i.opacity = this.opacity), this.transparent === !0 && (i.transparent = !0), this.blendSrc !== wv && (i.blendSrc = this.blendSrc), this.blendDst !== Dv && (i.blendDst = this.blendDst), this.blendEquation !== Yo && (i.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (i.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (i.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (i.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (i.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (i.blendAlpha = this.blendAlpha), this.depthFunc !== Xu && (i.depthFunc = this.depthFunc), this.depthTest === !1 && (i.depthTest = this.depthTest), this.depthWrite === !1 && (i.depthWrite = this.depthWrite), this.colorWrite === !1 && (i.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (i.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== KM && (i.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (i.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (i.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== pu && (i.stencilFail = this.stencilFail), this.stencilZFail !== pu && (i.stencilZFail = this.stencilZFail), this.stencilZPass !== pu && (i.stencilZPass = this.stencilZPass), this.stencilWrite === !0 && (i.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (i.rotation = this.rotation), this.polygonOffset === !0 && (i.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (i.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (i.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (i.linewidth = this.linewidth), this.dashSize !== void 0 && (i.dashSize = this.dashSize), this.gapSize !== void 0 && (i.gapSize = this.gapSize), this.scale !== void 0 && (i.scale = this.scale), this.dithering === !0 && (i.dithering = !0), this.alphaTest > 0 && (i.alphaTest = this.alphaTest), this.alphaHash === !0 && (i.alphaHash = !0), this.alphaToCoverage === !0 && (i.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (i.premultipliedAlpha = !0), this.forceSinglePass === !0 && (i.forceSinglePass = !0), this.wireframe === !0 && (i.wireframe = !0), this.wireframeLinewidth > 1 && (i.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (i.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (i.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (i.flatShading = !0), this.visible === !1 && (i.visible = !1), this.toneMapped === !1 && (i.toneMapped = !1), this.fog === !1 && (i.fog = !1), Object.keys(this.userData).length > 0 && (i.userData = this.userData);
    function a(s) {
      const r = [];
      for (const l in s) {
        const c = s[l];
        delete c.metadata, r.push(c);
      }
      return r;
    }
    if (e) {
      const s = a(t.textures), r = a(t.images);
      s.length > 0 && (i.textures = s), r.length > 0 && (i.images = r);
    }
    return i;
  }
  /**
   * Returns a new material with copied values from this instance.
   *
   * @return {Material} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given material to this instance.
   *
   * @param {Material} source - The material to copy.
   * @return {Material} A reference to this instance.
   */
  copy(t) {
    this.name = t.name, this.blending = t.blending, this.side = t.side, this.vertexColors = t.vertexColors, this.opacity = t.opacity, this.transparent = t.transparent, this.blendSrc = t.blendSrc, this.blendDst = t.blendDst, this.blendEquation = t.blendEquation, this.blendSrcAlpha = t.blendSrcAlpha, this.blendDstAlpha = t.blendDstAlpha, this.blendEquationAlpha = t.blendEquationAlpha, this.blendColor.copy(t.blendColor), this.blendAlpha = t.blendAlpha, this.depthFunc = t.depthFunc, this.depthTest = t.depthTest, this.depthWrite = t.depthWrite, this.stencilWriteMask = t.stencilWriteMask, this.stencilFunc = t.stencilFunc, this.stencilRef = t.stencilRef, this.stencilFuncMask = t.stencilFuncMask, this.stencilFail = t.stencilFail, this.stencilZFail = t.stencilZFail, this.stencilZPass = t.stencilZPass, this.stencilWrite = t.stencilWrite;
    const e = t.clippingPlanes;
    let i = null;
    if (e !== null) {
      const a = e.length;
      i = new Array(a);
      for (let s = 0; s !== a; ++s)
        i[s] = e[s].clone();
    }
    return this.clippingPlanes = i, this.clipIntersection = t.clipIntersection, this.clipShadows = t.clipShadows, this.shadowSide = t.shadowSide, this.colorWrite = t.colorWrite, this.precision = t.precision, this.polygonOffset = t.polygonOffset, this.polygonOffsetFactor = t.polygonOffsetFactor, this.polygonOffsetUnits = t.polygonOffsetUnits, this.dithering = t.dithering, this.alphaTest = t.alphaTest, this.alphaHash = t.alphaHash, this.alphaToCoverage = t.alphaToCoverage, this.premultipliedAlpha = t.premultipliedAlpha, this.forceSinglePass = t.forceSinglePass, this.visible = t.visible, this.toneMapped = t.toneMapped, this.userData = JSON.parse(JSON.stringify(t.userData)), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Material#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Setting this property to `true` indicates the engine the material
   * needs to be recompiled.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(t) {
    t === !0 && this.version++;
  }
}
class bl extends Ii {
  /**
   * Constructs a new mesh basic material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new Pt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new _a(), this.combine = vm, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.fog = t.fog, this;
  }
}
const Xr = /* @__PURE__ */ LV();
function LV() {
  const n = new ArrayBuffer(4), t = new Float32Array(n), e = new Uint32Array(n), i = new Uint32Array(512), a = new Uint32Array(512);
  for (let c = 0; c < 256; ++c) {
    const f = c - 127;
    f < -27 ? (i[c] = 0, i[c | 256] = 32768, a[c] = 24, a[c | 256] = 24) : f < -14 ? (i[c] = 1024 >> -f - 14, i[c | 256] = 1024 >> -f - 14 | 32768, a[c] = -f - 1, a[c | 256] = -f - 1) : f <= 15 ? (i[c] = f + 15 << 10, i[c | 256] = f + 15 << 10 | 32768, a[c] = 13, a[c | 256] = 13) : f < 128 ? (i[c] = 31744, i[c | 256] = 64512, a[c] = 24, a[c | 256] = 24) : (i[c] = 31744, i[c | 256] = 64512, a[c] = 13, a[c | 256] = 13);
  }
  const s = new Uint32Array(2048), r = new Uint32Array(64), l = new Uint32Array(64);
  for (let c = 1; c < 1024; ++c) {
    let f = c << 13, d = 0;
    for (; !(f & 8388608); )
      f <<= 1, d -= 8388608;
    f &= -8388609, d += 947912704, s[c] = f | d;
  }
  for (let c = 1024; c < 2048; ++c)
    s[c] = 939524096 + (c - 1024 << 13);
  for (let c = 1; c < 31; ++c)
    r[c] = c << 23;
  r[31] = 1199570944, r[32] = 2147483648;
  for (let c = 33; c < 63; ++c)
    r[c] = 2147483648 + (c - 32 << 23);
  r[63] = 3347054592;
  for (let c = 1; c < 64; ++c)
    c !== 32 && (l[c] = 1024);
  return {
    floatView: t,
    uint32View: e,
    baseTable: i,
    shiftTable: a,
    mantissaTable: s,
    exponentTable: r,
    offsetTable: l
  };
}
function ra(n) {
  Math.abs(n) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), n = me(n, -65504, 65504), Xr.floatView[0] = n;
  const t = Xr.uint32View[0], e = t >> 23 & 511;
  return Xr.baseTable[e] + ((t & 8388607) >> Xr.shiftTable[e]);
}
function zd(n) {
  const t = n >> 10;
  return Xr.uint32View[0] = Xr.mantissaTable[Xr.offsetTable[t] + (n & 1023)] + Xr.exponentTable[t], Xr.floatView[0];
}
class zV {
  /**
   * Returns a half precision floating point value (FP16) from the given single
   * precision floating point value (FP32).
   *
   * @param {number} val - A single precision floating point value.
   * @return {number} The FP16 value.
   */
  static toHalfFloat(t) {
    return ra(t);
  }
  /**
   * Returns a single precision floating point value (FP32) from the given half
   * precision floating point value (FP16).
   *
   * @param {number} val - A half precision floating point value.
   * @return {number} The FP32 value.
   */
  static fromHalfFloat(t) {
    return zd(t);
  }
}
const Vn = /* @__PURE__ */ new H(), Pg = /* @__PURE__ */ new ft();
let BV = 0;
class an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {TypedArray} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i = !1) {
    if (Array.isArray(t))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, Object.defineProperty(this, "id", { value: BV++ }), this.name = "", this.array = t, this.itemSize = e, this.count = t !== void 0 ? t.length / e : 0, this.normalized = i, this.usage = Gp, this.updateRanges = [], this.gpuType = fa, this.version = 0;
  }
  /**
   * A callback function that is executed after the renderer has transferred the attribute
   * array data to the GPU.
   */
  onUploadCallback() {
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(t) {
    t === !0 && this.version++;
  }
  /**
   * Sets the usage of this buffer attribute.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {BufferAttribute} A reference to this buffer attribute.
   */
  setUsage(t) {
    return this.usage = t, this;
  }
  /**
   * Adds a range of data in the data array to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(t, e) {
    this.updateRanges.push({ start: t, count: e });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Copies the values of the given buffer attribute to this instance.
   *
   * @param {BufferAttribute} source - The buffer attribute to copy.
   * @return {BufferAttribute} A reference to this instance.
   */
  copy(t) {
    return this.name = t.name, this.array = new t.array.constructor(t.array), this.itemSize = t.itemSize, this.count = t.count, this.normalized = t.normalized, this.usage = t.usage, this.gpuType = t.gpuType, this;
  }
  /**
   * Copies a vector from the given buffer attribute to this one. The start
   * and destination position in the attribute buffers are represented by the
   * given indices.
   *
   * @param {number} index1 - The destination index into this buffer attribute.
   * @param {BufferAttribute} attribute - The buffer attribute to copy from.
   * @param {number} index2 - The source index into the given buffer attribute.
   * @return {BufferAttribute} A reference to this instance.
   */
  copyAt(t, e, i) {
    t *= this.itemSize, i *= e.itemSize;
    for (let a = 0, s = this.itemSize; a < s; a++)
      this.array[t + a] = e.array[i + a];
    return this;
  }
  /**
   * Copies the given array data into this buffer attribute.
   *
   * @param {(TypedArray|Array)} array - The array to copy.
   * @return {BufferAttribute} A reference to this instance.
   */
  copyArray(t) {
    return this.array.set(t), this;
  }
  /**
   * Applies the given 3x3 matrix to the given attribute. Works with
   * item size `2` and `3`.
   *
   * @param {Matrix3} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyMatrix3(t) {
    if (this.itemSize === 2)
      for (let e = 0, i = this.count; e < i; e++)
        Pg.fromBufferAttribute(this, e), Pg.applyMatrix3(t), this.setXY(e, Pg.x, Pg.y);
    else if (this.itemSize === 3)
      for (let e = 0, i = this.count; e < i; e++)
        Vn.fromBufferAttribute(this, e), Vn.applyMatrix3(t), this.setXYZ(e, Vn.x, Vn.y, Vn.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyMatrix4(t) {
    for (let e = 0, i = this.count; e < i; e++)
      Vn.fromBufferAttribute(this, e), Vn.applyMatrix4(t), this.setXYZ(e, Vn.x, Vn.y, Vn.z);
    return this;
  }
  /**
   * Applies the given 3x3 normal matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix3} m - The normal matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyNormalMatrix(t) {
    for (let e = 0, i = this.count; e < i; e++)
      Vn.fromBufferAttribute(this, e), Vn.applyNormalMatrix(t), this.setXYZ(e, Vn.x, Vn.y, Vn.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3` and with direction vectors.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  transformDirection(t) {
    for (let e = 0, i = this.count; e < i; e++)
      Vn.fromBufferAttribute(this, e), Vn.transformDirection(t), this.setXYZ(e, Vn.x, Vn.y, Vn.z);
    return this;
  }
  /**
   * Sets the given array data in the buffer attribute.
   *
   * @param {(TypedArray|Array)} value - The array data to set.
   * @param {number} [offset=0] - The offset in this buffer attribute's array.
   * @return {BufferAttribute} A reference to this instance.
   */
  set(t, e = 0) {
    return this.array.set(t, e), this;
  }
  /**
   * Returns the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @return {number} The returned value.
   */
  getComponent(t, e) {
    let i = this.array[t * this.itemSize + e];
    return this.normalized && (i = ji(i, this.array)), i;
  }
  /**
   * Sets the given value to the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @param {number} value - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setComponent(t, e, i) {
    return this.normalized && (i = _e(i, this.array)), this.array[t * this.itemSize + e] = i, this;
  }
  /**
   * Returns the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The x component.
   */
  getX(t) {
    let e = this.array[t * this.itemSize];
    return this.normalized && (e = ji(e, this.array)), e;
  }
  /**
   * Sets the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setX(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.array[t * this.itemSize] = e, this;
  }
  /**
   * Returns the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The y component.
   */
  getY(t) {
    let e = this.array[t * this.itemSize + 1];
    return this.normalized && (e = ji(e, this.array)), e;
  }
  /**
   * Sets the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} y - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setY(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.array[t * this.itemSize + 1] = e, this;
  }
  /**
   * Returns the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The z component.
   */
  getZ(t) {
    let e = this.array[t * this.itemSize + 2];
    return this.normalized && (e = ji(e, this.array)), e;
  }
  /**
   * Sets the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} z - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setZ(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.array[t * this.itemSize + 2] = e, this;
  }
  /**
   * Returns the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The w component.
   */
  getW(t) {
    let e = this.array[t * this.itemSize + 3];
    return this.normalized && (e = ji(e, this.array)), e;
  }
  /**
   * Sets the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} w - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setW(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.array[t * this.itemSize + 3] = e, this;
  }
  /**
   * Sets the x and y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXY(t, e, i) {
    return t *= this.itemSize, this.normalized && (e = _e(e, this.array), i = _e(i, this.array)), this.array[t + 0] = e, this.array[t + 1] = i, this;
  }
  /**
   * Sets the x, y and z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXYZ(t, e, i, a) {
    return t *= this.itemSize, this.normalized && (e = _e(e, this.array), i = _e(i, this.array), a = _e(a, this.array)), this.array[t + 0] = e, this.array[t + 1] = i, this.array[t + 2] = a, this;
  }
  /**
   * Sets the x, y, z and w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @param {number} w - The value for the w component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXYZW(t, e, i, a, s) {
    return t *= this.itemSize, this.normalized && (e = _e(e, this.array), i = _e(i, this.array), a = _e(a, this.array), s = _e(s, this.array)), this.array[t + 0] = e, this.array[t + 1] = i, this.array[t + 2] = a, this.array[t + 3] = s, this;
  }
  /**
   * Sets the given callback function that is executed after the Renderer has transferred
   * the attribute array data to the GPU. Can be used to perform clean-up operations after
   * the upload when attribute data are not needed anymore on the CPU side.
   *
   * @param {Function} callback - The `onUpload()` callback.
   * @return {BufferAttribute} A reference to this instance.
   */
  onUpload(t) {
    return this.onUploadCallback = t, this;
  }
  /**
   * Returns a new buffer attribute with copied values from this instance.
   *
   * @return {BufferAttribute} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  /**
   * Serializes the buffer attribute into JSON.
   *
   * @return {Object} A JSON object representing the serialized buffer attribute.
   */
  toJSON() {
    const t = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (t.name = this.name), this.usage !== Gp && (t.usage = this.usage), t;
  }
}
class PV extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Int8Array(t), e, i);
  }
}
class IV extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Uint8Array(t), e, i);
  }
}
class HV extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Uint8ClampedArray(t), e, i);
  }
}
class FV extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Int16Array(t), e, i);
  }
}
class tT extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Uint16Array(t), e, i);
  }
}
class VV extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Int32Array(t), e, i);
  }
}
class eT extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Uint32Array(t), e, i);
  }
}
class GV extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Uint16Array(t), e, i), this.isFloat16BufferAttribute = !0;
  }
  getX(t) {
    let e = zd(this.array[t * this.itemSize]);
    return this.normalized && (e = ji(e, this.array)), e;
  }
  setX(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.array[t * this.itemSize] = ra(e), this;
  }
  getY(t) {
    let e = zd(this.array[t * this.itemSize + 1]);
    return this.normalized && (e = ji(e, this.array)), e;
  }
  setY(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.array[t * this.itemSize + 1] = ra(e), this;
  }
  getZ(t) {
    let e = zd(this.array[t * this.itemSize + 2]);
    return this.normalized && (e = ji(e, this.array)), e;
  }
  setZ(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.array[t * this.itemSize + 2] = ra(e), this;
  }
  getW(t) {
    let e = zd(this.array[t * this.itemSize + 3]);
    return this.normalized && (e = ji(e, this.array)), e;
  }
  setW(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.array[t * this.itemSize + 3] = ra(e), this;
  }
  setXY(t, e, i) {
    return t *= this.itemSize, this.normalized && (e = _e(e, this.array), i = _e(i, this.array)), this.array[t + 0] = ra(e), this.array[t + 1] = ra(i), this;
  }
  setXYZ(t, e, i, a) {
    return t *= this.itemSize, this.normalized && (e = _e(e, this.array), i = _e(i, this.array), a = _e(a, this.array)), this.array[t + 0] = ra(e), this.array[t + 1] = ra(i), this.array[t + 2] = ra(a), this;
  }
  setXYZW(t, e, i, a, s) {
    return t *= this.itemSize, this.normalized && (e = _e(e, this.array), i = _e(i, this.array), a = _e(a, this.array), s = _e(s, this.array)), this.array[t + 0] = ra(e), this.array[t + 1] = ra(i), this.array[t + 2] = ra(a), this.array[t + 3] = ra(s), this;
  }
}
class Zt extends an {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i) {
    super(new Float32Array(t), e, i);
  }
}
let XV = 0;
const ss = /* @__PURE__ */ new ae(), e1 = /* @__PURE__ */ new He(), Gc = /* @__PURE__ */ new H(), La = /* @__PURE__ */ new Pi(), pd = /* @__PURE__ */ new Pi(), si = /* @__PURE__ */ new H();
class ye extends gr {
  /**
   * Constructs a new geometry.
   */
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: XV++ }), this.uuid = Ya(), this.name = "", this.type = "BufferGeometry", this.index = null, this.indirect = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  /**
   * Returns the index of this geometry.
   *
   * @return {?BufferAttribute} The index. Returns `null` if no index is defined.
   */
  getIndex() {
    return this.index;
  }
  /**
   * Sets the given index to this geometry.
   *
   * @param {Array<number>|BufferAttribute} index - The index to set.
   * @return {BufferGeometry} A reference to this instance.
   */
  setIndex(t) {
    return Array.isArray(t) ? this.index = new (QL(t) ? eT : tT)(t, 1) : this.index = t, this;
  }
  /**
   * Sets the given indirect attribute to this geometry.
   *
   * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.
   * @return {BufferGeometry} A reference to this instance.
   */
  setIndirect(t) {
    return this.indirect = t, this;
  }
  /**
   * Returns the indirect attribute of this geometry.
   *
   * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.
   */
  getIndirect() {
    return this.indirect;
  }
  /**
   * Returns the buffer attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.
   * Returns `undefined` if not attribute has been found.
   */
  getAttribute(t) {
    return this.attributes[t];
  }
  /**
   * Sets the given attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.
   * @return {BufferGeometry} A reference to this instance.
   */
  setAttribute(t, e) {
    return this.attributes[t] = e, this;
  }
  /**
   * Deletes the attribute for the given name.
   *
   * @param {string} name - The attribute name to delete.
   * @return {BufferGeometry} A reference to this instance.
   */
  deleteAttribute(t) {
    return delete this.attributes[t], this;
  }
  /**
   * Returns `true` if this geometry has an attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @return {boolean} Whether this geometry has an attribute for the given name or not.
   */
  hasAttribute(t) {
    return this.attributes[t] !== void 0;
  }
  /**
   * Adds a group to this geometry.
   *
   * @param {number} start - The first element in this draw call. That is the first
   * vertex for non-indexed geometry, otherwise the first triangle index.
   * @param {number} count - Specifies how many vertices (or indices) are part of this group.
   * @param {number} [materialIndex=0] - The material array index to use.
   */
  addGroup(t, e, i = 0) {
    this.groups.push({
      start: t,
      count: e,
      materialIndex: i
    });
  }
  /**
   * Clears all groups.
   */
  clearGroups() {
    this.groups = [];
  }
  /**
   * Sets the draw range for this geometry.
   *
   * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.
   * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.
   * For indexed BufferGeometry, `count` is the number of indices to render.
   */
  setDrawRange(t, e) {
    this.drawRange.start = t, this.drawRange.count = e;
  }
  /**
   * Applies the given 4x4 transformation matrix to the geometry.
   *
   * @param {Matrix4} matrix - The matrix to apply.
   * @return {BufferGeometry} A reference to this instance.
   */
  applyMatrix4(t) {
    const e = this.attributes.position;
    e !== void 0 && (e.applyMatrix4(t), e.needsUpdate = !0);
    const i = this.attributes.normal;
    if (i !== void 0) {
      const s = new ge().getNormalMatrix(t);
      i.applyNormalMatrix(s), i.needsUpdate = !0;
    }
    const a = this.attributes.tangent;
    return a !== void 0 && (a.transformDirection(t), a.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  /**
   * Applies the rotation represented by the Quaternion to the geometry.
   *
   * @param {Quaternion} q - The Quaternion to apply.
   * @return {BufferGeometry} A reference to this instance.
   */
  applyQuaternion(t) {
    return ss.makeRotationFromQuaternion(t), this.applyMatrix4(ss), this;
  }
  /**
   * Rotates the geometry about the X axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateX(t) {
    return ss.makeRotationX(t), this.applyMatrix4(ss), this;
  }
  /**
   * Rotates the geometry about the Y axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateY(t) {
    return ss.makeRotationY(t), this.applyMatrix4(ss), this;
  }
  /**
   * Rotates the geometry about the Z axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateZ(t) {
    return ss.makeRotationZ(t), this.applyMatrix4(ss), this;
  }
  /**
   * Translates the geometry. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#position} for typical
   * real-time mesh rotation.
   *
   * @param {number} x - The x offset.
   * @param {number} y - The y offset.
   * @param {number} z - The z offset.
   * @return {BufferGeometry} A reference to this instance.
   */
  translate(t, e, i) {
    return ss.makeTranslation(t, e, i), this.applyMatrix4(ss), this;
  }
  /**
   * Scales the geometry. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#scale} for typical
   * real-time mesh rotation.
   *
   * @param {number} x - The x scale.
   * @param {number} y - The y scale.
   * @param {number} z - The z scale.
   * @return {BufferGeometry} A reference to this instance.
   */
  scale(t, e, i) {
    return ss.makeScale(t, e, i), this.applyMatrix4(ss), this;
  }
  /**
   * Rotates the geometry to face a point in 3D space. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#lookAt} for typical
   * real-time mesh rotation.
   *
   * @param {Vector3} vector - The target point.
   * @return {BufferGeometry} A reference to this instance.
   */
  lookAt(t) {
    return e1.lookAt(t), e1.updateMatrix(), this.applyMatrix4(e1.matrix), this;
  }
  /**
   * Center the geometry based on its bounding box.
   *
   * @return {BufferGeometry} A reference to this instance.
   */
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(Gc).negate(), this.translate(Gc.x, Gc.y, Gc.z), this;
  }
  /**
   * Defines a geometry by creating a `position` attribute based on the given array of points. The array
   * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is
   * set to `0`.
   *
   * If the method is used with an existing `position` attribute, the vertex data are overwritten with the
   * data from the array. The length of the array must match the vertex count.
   *
   * @param {Array<Vector2>|Array<Vector3>} points - The points.
   * @return {BufferGeometry} A reference to this instance.
   */
  setFromPoints(t) {
    const e = this.getAttribute("position");
    if (e === void 0) {
      const i = [];
      for (let a = 0, s = t.length; a < s; a++) {
        const r = t[a];
        i.push(r.x, r.y, r.z || 0);
      }
      this.setAttribute("position", new Zt(i, 3));
    } else {
      const i = Math.min(t.length, e.count);
      for (let a = 0; a < i; a++) {
        const s = t[a];
        e.setXYZ(a, s.x, s.y, s.z || 0);
      }
      t.length > e.count && console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."), e.needsUpdate = !0;
    }
    return this;
  }
  /**
   * Computes the bounding box of the geometry, and updates the `boundingBox` member.
   * The bounding box is not computed by the engine; it must be computed by your app.
   * You may need to recompute the bounding box if the geometry vertices are modified.
   */
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Pi());
    const t = this.attributes.position, e = this.morphAttributes.position;
    if (t && t.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(
        new H(-1 / 0, -1 / 0, -1 / 0),
        new H(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (t !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(t), e)
        for (let i = 0, a = e.length; i < a; i++) {
          const s = e[i];
          La.setFromBufferAttribute(s), this.morphTargetsRelative ? (si.addVectors(this.boundingBox.min, La.min), this.boundingBox.expandByPoint(si), si.addVectors(this.boundingBox.max, La.max), this.boundingBox.expandByPoint(si)) : (this.boundingBox.expandByPoint(La.min), this.boundingBox.expandByPoint(La.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  /**
   * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.
   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
   * You may need to recompute the bounding sphere if the geometry vertices are modified.
   */
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new Si());
    const t = this.attributes.position, e = this.morphAttributes.position;
    if (t && t.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new H(), 1 / 0);
      return;
    }
    if (t) {
      const i = this.boundingSphere.center;
      if (La.setFromBufferAttribute(t), e)
        for (let s = 0, r = e.length; s < r; s++) {
          const l = e[s];
          pd.setFromBufferAttribute(l), this.morphTargetsRelative ? (si.addVectors(La.min, pd.min), La.expandByPoint(si), si.addVectors(La.max, pd.max), La.expandByPoint(si)) : (La.expandByPoint(pd.min), La.expandByPoint(pd.max));
        }
      La.getCenter(i);
      let a = 0;
      for (let s = 0, r = t.count; s < r; s++)
        si.fromBufferAttribute(t, s), a = Math.max(a, i.distanceToSquared(si));
      if (e)
        for (let s = 0, r = e.length; s < r; s++) {
          const l = e[s], c = this.morphTargetsRelative;
          for (let f = 0, d = l.count; f < d; f++)
            si.fromBufferAttribute(l, f), c && (Gc.fromBufferAttribute(t, f), si.add(Gc)), a = Math.max(a, i.distanceToSquared(si));
        }
      this.boundingSphere.radius = Math.sqrt(a), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  /**
   * Calculates and adds a tangent attribute to this geometry.
   *
   * The computation is only supported for indexed geometries and if position, normal, and uv attributes
   * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by
   * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.
   */
  computeTangents() {
    const t = this.index, e = this.attributes;
    if (t === null || e.position === void 0 || e.normal === void 0 || e.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const i = e.position, a = e.normal, s = e.uv;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new an(new Float32Array(4 * i.count), 4));
    const r = this.getAttribute("tangent"), l = [], c = [];
    for (let O = 0; O < i.count; O++)
      l[O] = new H(), c[O] = new H();
    const f = new H(), d = new H(), p = new H(), m = new ft(), g = new ft(), y = new ft(), x = new H(), M = new H();
    function v(O, R, C) {
      f.fromBufferAttribute(i, O), d.fromBufferAttribute(i, R), p.fromBufferAttribute(i, C), m.fromBufferAttribute(s, O), g.fromBufferAttribute(s, R), y.fromBufferAttribute(s, C), d.sub(f), p.sub(f), g.sub(m), y.sub(m);
      const B = 1 / (g.x * y.y - y.x * g.y);
      isFinite(B) && (x.copy(d).multiplyScalar(y.y).addScaledVector(p, -g.y).multiplyScalar(B), M.copy(p).multiplyScalar(g.x).addScaledVector(d, -y.x).multiplyScalar(B), l[O].add(x), l[R].add(x), l[C].add(x), c[O].add(M), c[R].add(M), c[C].add(M));
    }
    let S = this.groups;
    S.length === 0 && (S = [{
      start: 0,
      count: t.count
    }]);
    for (let O = 0, R = S.length; O < R; ++O) {
      const C = S[O], B = C.start, Y = C.count;
      for (let V = B, Q = B + Y; V < Q; V += 3)
        v(
          t.getX(V + 0),
          t.getX(V + 1),
          t.getX(V + 2)
        );
    }
    const E = new H(), T = new H(), w = new H(), D = new H();
    function U(O) {
      w.fromBufferAttribute(a, O), D.copy(w);
      const R = l[O];
      E.copy(R), E.sub(w.multiplyScalar(w.dot(R))).normalize(), T.crossVectors(D, R);
      const B = T.dot(c[O]) < 0 ? -1 : 1;
      r.setXYZW(O, E.x, E.y, E.z, B);
    }
    for (let O = 0, R = S.length; O < R; ++O) {
      const C = S[O], B = C.start, Y = C.count;
      for (let V = B, Q = B + Y; V < Q; V += 3)
        U(t.getX(V + 0)), U(t.getX(V + 1)), U(t.getX(V + 2));
    }
  }
  /**
   * Computes vertex normals for the given vertex data. For indexed geometries, the method sets
   * each vertex normal to be the average of the face normals of the faces that share that vertex.
   * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal
   * to be the same as the face normal.
   */
  computeVertexNormals() {
    const t = this.index, e = this.getAttribute("position");
    if (e !== void 0) {
      let i = this.getAttribute("normal");
      if (i === void 0)
        i = new an(new Float32Array(e.count * 3), 3), this.setAttribute("normal", i);
      else
        for (let m = 0, g = i.count; m < g; m++)
          i.setXYZ(m, 0, 0, 0);
      const a = new H(), s = new H(), r = new H(), l = new H(), c = new H(), f = new H(), d = new H(), p = new H();
      if (t)
        for (let m = 0, g = t.count; m < g; m += 3) {
          const y = t.getX(m + 0), x = t.getX(m + 1), M = t.getX(m + 2);
          a.fromBufferAttribute(e, y), s.fromBufferAttribute(e, x), r.fromBufferAttribute(e, M), d.subVectors(r, s), p.subVectors(a, s), d.cross(p), l.fromBufferAttribute(i, y), c.fromBufferAttribute(i, x), f.fromBufferAttribute(i, M), l.add(d), c.add(d), f.add(d), i.setXYZ(y, l.x, l.y, l.z), i.setXYZ(x, c.x, c.y, c.z), i.setXYZ(M, f.x, f.y, f.z);
        }
      else
        for (let m = 0, g = e.count; m < g; m += 3)
          a.fromBufferAttribute(e, m + 0), s.fromBufferAttribute(e, m + 1), r.fromBufferAttribute(e, m + 2), d.subVectors(r, s), p.subVectors(a, s), d.cross(p), i.setXYZ(m + 0, d.x, d.y, d.z), i.setXYZ(m + 1, d.x, d.y, d.z), i.setXYZ(m + 2, d.x, d.y, d.z);
      this.normalizeNormals(), i.needsUpdate = !0;
    }
  }
  /**
   * Ensures every normal vector in a geometry will have a magnitude of `1`. This will
   * correct lighting on the geometry surfaces.
   */
  normalizeNormals() {
    const t = this.attributes.normal;
    for (let e = 0, i = t.count; e < i; e++)
      si.fromBufferAttribute(t, e), si.normalize(), t.setXYZ(e, si.x, si.y, si.z);
  }
  /**
   * Return a new non-index version of this indexed geometry. If the geometry
   * is already non-indexed, the method is a NOOP.
   *
   * @return {BufferGeometry} The non-indexed version of this indexed geometry.
   */
  toNonIndexed() {
    function t(l, c) {
      const f = l.array, d = l.itemSize, p = l.normalized, m = new f.constructor(c.length * d);
      let g = 0, y = 0;
      for (let x = 0, M = c.length; x < M; x++) {
        l.isInterleavedBufferAttribute ? g = c[x] * l.data.stride + l.offset : g = c[x] * d;
        for (let v = 0; v < d; v++)
          m[y++] = f[g++];
      }
      return new an(m, d, p);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const e = new ye(), i = this.index.array, a = this.attributes;
    for (const l in a) {
      const c = a[l], f = t(c, i);
      e.setAttribute(l, f);
    }
    const s = this.morphAttributes;
    for (const l in s) {
      const c = [], f = s[l];
      for (let d = 0, p = f.length; d < p; d++) {
        const m = f[d], g = t(m, i);
        c.push(g);
      }
      e.morphAttributes[l] = c;
    }
    e.morphTargetsRelative = this.morphTargetsRelative;
    const r = this.groups;
    for (let l = 0, c = r.length; l < c; l++) {
      const f = r[l];
      e.addGroup(f.start, f.count, f.materialIndex);
    }
    return e;
  }
  /**
   * Serializes the geometry into JSON.
   *
   * @return {Object} A JSON object representing the serialized geometry.
   */
  toJSON() {
    const t = {
      metadata: {
        version: 4.7,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (t.uuid = this.uuid, t.type = this.type, this.name !== "" && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), this.parameters !== void 0) {
      const c = this.parameters;
      for (const f in c)
        c[f] !== void 0 && (t[f] = c[f]);
      return t;
    }
    t.data = { attributes: {} };
    const e = this.index;
    e !== null && (t.data.index = {
      type: e.array.constructor.name,
      array: Array.prototype.slice.call(e.array)
    });
    const i = this.attributes;
    for (const c in i) {
      const f = i[c];
      t.data.attributes[c] = f.toJSON(t.data);
    }
    const a = {};
    let s = !1;
    for (const c in this.morphAttributes) {
      const f = this.morphAttributes[c], d = [];
      for (let p = 0, m = f.length; p < m; p++) {
        const g = f[p];
        d.push(g.toJSON(t.data));
      }
      d.length > 0 && (a[c] = d, s = !0);
    }
    s && (t.data.morphAttributes = a, t.data.morphTargetsRelative = this.morphTargetsRelative);
    const r = this.groups;
    r.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(r)));
    const l = this.boundingSphere;
    return l !== null && (t.data.boundingSphere = l.toJSON()), t;
  }
  /**
   * Returns a new geometry with copied values from this instance.
   *
   * @return {BufferGeometry} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given geometry to this instance.
   *
   * @param {BufferGeometry} source - The geometry to copy.
   * @return {BufferGeometry} A reference to this instance.
   */
  copy(t) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const e = {};
    this.name = t.name;
    const i = t.index;
    i !== null && this.setIndex(i.clone());
    const a = t.attributes;
    for (const f in a) {
      const d = a[f];
      this.setAttribute(f, d.clone(e));
    }
    const s = t.morphAttributes;
    for (const f in s) {
      const d = [], p = s[f];
      for (let m = 0, g = p.length; m < g; m++)
        d.push(p[m].clone(e));
      this.morphAttributes[f] = d;
    }
    this.morphTargetsRelative = t.morphTargetsRelative;
    const r = t.groups;
    for (let f = 0, d = r.length; f < d; f++) {
      const p = r[f];
      this.addGroup(p.start, p.count, p.materialIndex);
    }
    const l = t.boundingBox;
    l !== null && (this.boundingBox = l.clone());
    const c = t.boundingSphere;
    return c !== null && (this.boundingSphere = c.clone()), this.drawRange.start = t.drawRange.start, this.drawRange.count = t.drawRange.count, this.userData = t.userData, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires BufferGeometry#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const WC = /* @__PURE__ */ new ae(), Kl = /* @__PURE__ */ new bh(), Ig = /* @__PURE__ */ new Si(), ZC = /* @__PURE__ */ new H(), Hg = /* @__PURE__ */ new H(), Fg = /* @__PURE__ */ new H(), Vg = /* @__PURE__ */ new H(), n1 = /* @__PURE__ */ new H(), Gg = /* @__PURE__ */ new H(), jC = /* @__PURE__ */ new H(), Xg = /* @__PURE__ */ new H();
class Yn extends He {
  /**
   * Constructs a new mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(t = new ye(), e = new bl()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = t, this.material = e, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.count = 1, this.updateMorphTargets();
  }
  copy(t, e) {
    return super.copy(t, e), t.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = t.morphTargetInfluences.slice()), t.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
  }
  /**
   * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const e = this.geometry.morphAttributes, i = Object.keys(e);
    if (i.length > 0) {
      const a = e[i[0]];
      if (a !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, r = a.length; s < r; s++) {
          const l = a[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[l] = s;
        }
      }
    }
  }
  /**
   * Returns the local-space position of the vertex at the given index, taking into
   * account the current animation state of both morph targets and skinning.
   *
   * @param {number} index - The vertex index.
   * @param {Vector3} target - The target object that is used to store the method's result.
   * @return {Vector3} The vertex position in local space.
   */
  getVertexPosition(t, e) {
    const i = this.geometry, a = i.attributes.position, s = i.morphAttributes.position, r = i.morphTargetsRelative;
    e.fromBufferAttribute(a, t);
    const l = this.morphTargetInfluences;
    if (s && l) {
      Gg.set(0, 0, 0);
      for (let c = 0, f = s.length; c < f; c++) {
        const d = l[c], p = s[c];
        d !== 0 && (n1.fromBufferAttribute(p, t), r ? Gg.addScaledVector(n1, d) : Gg.addScaledVector(n1.sub(e), d));
      }
      e.add(Gg);
    }
    return e;
  }
  /**
   * Computes intersection points between a casted ray and this line.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(t, e) {
    const i = this.geometry, a = this.material, s = this.matrixWorld;
    a !== void 0 && (i.boundingSphere === null && i.computeBoundingSphere(), Ig.copy(i.boundingSphere), Ig.applyMatrix4(s), Kl.copy(t.ray).recast(t.near), !(Ig.containsPoint(Kl.origin) === !1 && (Kl.intersectSphere(Ig, ZC) === null || Kl.origin.distanceToSquared(ZC) > (t.far - t.near) ** 2)) && (WC.copy(s).invert(), Kl.copy(t.ray).applyMatrix4(WC), !(i.boundingBox !== null && Kl.intersectsBox(i.boundingBox) === !1) && this._computeIntersections(t, e, Kl)));
  }
  _computeIntersections(t, e, i) {
    let a;
    const s = this.geometry, r = this.material, l = s.index, c = s.attributes.position, f = s.attributes.uv, d = s.attributes.uv1, p = s.attributes.normal, m = s.groups, g = s.drawRange;
    if (l !== null)
      if (Array.isArray(r))
        for (let y = 0, x = m.length; y < x; y++) {
          const M = m[y], v = r[M.materialIndex], S = Math.max(M.start, g.start), E = Math.min(l.count, Math.min(M.start + M.count, g.start + g.count));
          for (let T = S, w = E; T < w; T += 3) {
            const D = l.getX(T), U = l.getX(T + 1), O = l.getX(T + 2);
            a = qg(this, v, t, i, f, d, p, D, U, O), a && (a.faceIndex = Math.floor(T / 3), a.face.materialIndex = M.materialIndex, e.push(a));
          }
        }
      else {
        const y = Math.max(0, g.start), x = Math.min(l.count, g.start + g.count);
        for (let M = y, v = x; M < v; M += 3) {
          const S = l.getX(M), E = l.getX(M + 1), T = l.getX(M + 2);
          a = qg(this, r, t, i, f, d, p, S, E, T), a && (a.faceIndex = Math.floor(M / 3), e.push(a));
        }
      }
    else if (c !== void 0)
      if (Array.isArray(r))
        for (let y = 0, x = m.length; y < x; y++) {
          const M = m[y], v = r[M.materialIndex], S = Math.max(M.start, g.start), E = Math.min(c.count, Math.min(M.start + M.count, g.start + g.count));
          for (let T = S, w = E; T < w; T += 3) {
            const D = T, U = T + 1, O = T + 2;
            a = qg(this, v, t, i, f, d, p, D, U, O), a && (a.faceIndex = Math.floor(T / 3), a.face.materialIndex = M.materialIndex, e.push(a));
          }
        }
      else {
        const y = Math.max(0, g.start), x = Math.min(c.count, g.start + g.count);
        for (let M = y, v = x; M < v; M += 3) {
          const S = M, E = M + 1, T = M + 2;
          a = qg(this, r, t, i, f, d, p, S, E, T), a && (a.faceIndex = Math.floor(M / 3), e.push(a));
        }
      }
  }
}
function qV(n, t, e, i, a, s, r, l) {
  let c;
  if (t.side === Ki ? c = i.intersectTriangle(r, s, a, !0, l) : c = i.intersectTriangle(a, s, r, t.side === ro, l), c === null) return null;
  Xg.copy(l), Xg.applyMatrix4(n.matrixWorld);
  const f = e.ray.origin.distanceTo(Xg);
  return f < e.near || f > e.far ? null : {
    distance: f,
    point: Xg.clone(),
    object: n
  };
}
function qg(n, t, e, i, a, s, r, l, c, f) {
  n.getVertexPosition(l, Hg), n.getVertexPosition(c, Fg), n.getVertexPosition(f, Vg);
  const d = qV(n, t, e, i, Hg, Fg, Vg, jC);
  if (d) {
    const p = new H();
    ca.getBarycoord(jC, Hg, Fg, Vg, p), a && (d.uv = ca.getInterpolatedAttribute(a, l, c, f, p, new ft())), s && (d.uv1 = ca.getInterpolatedAttribute(s, l, c, f, p, new ft())), r && (d.normal = ca.getInterpolatedAttribute(r, l, c, f, p, new H()), d.normal.dot(i.direction) > 0 && d.normal.multiplyScalar(-1));
    const m = {
      a: l,
      b: c,
      c: f,
      normal: new H(),
      materialIndex: 0
    };
    ca.getNormal(Hg, Fg, Vg, m.normal), d.face = m, d.barycoord = p;
  }
  return d;
}
class tc extends ye {
  /**
   * Constructs a new box geometry.
   *
   * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.
   * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.
   * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.
   * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.
   * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.
   * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.
   */
  constructor(t = 1, e = 1, i = 1, a = 1, s = 1, r = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: t,
      height: e,
      depth: i,
      widthSegments: a,
      heightSegments: s,
      depthSegments: r
    };
    const l = this;
    a = Math.floor(a), s = Math.floor(s), r = Math.floor(r);
    const c = [], f = [], d = [], p = [];
    let m = 0, g = 0;
    y("z", "y", "x", -1, -1, i, e, t, r, s, 0), y("z", "y", "x", 1, -1, i, e, -t, r, s, 1), y("x", "z", "y", 1, 1, t, i, e, a, r, 2), y("x", "z", "y", 1, -1, t, i, -e, a, r, 3), y("x", "y", "z", 1, -1, t, e, i, a, s, 4), y("x", "y", "z", -1, -1, t, e, -i, a, s, 5), this.setIndex(c), this.setAttribute("position", new Zt(f, 3)), this.setAttribute("normal", new Zt(d, 3)), this.setAttribute("uv", new Zt(p, 2));
    function y(x, M, v, S, E, T, w, D, U, O, R) {
      const C = T / U, B = w / O, Y = T / 2, V = w / 2, Q = D / 2, J = U + 1, P = O + 1;
      let q = 0, G = 0;
      const it = new H();
      for (let lt = 0; lt < P; lt++) {
        const mt = lt * B - V;
        for (let Rt = 0; Rt < J; Rt++) {
          const Qt = Rt * C - Y;
          it[x] = Qt * S, it[M] = mt * E, it[v] = Q, f.push(it.x, it.y, it.z), it[x] = 0, it[M] = 0, it[v] = D > 0 ? 1 : -1, d.push(it.x, it.y, it.z), p.push(Rt / U), p.push(1 - lt / O), q += 1;
        }
      }
      for (let lt = 0; lt < O; lt++)
        for (let mt = 0; mt < U; mt++) {
          const Rt = m + mt + J * lt, Qt = m + mt + J * (lt + 1), $ = m + (mt + 1) + J * (lt + 1), ht = m + (mt + 1) + J * lt;
          c.push(Rt, Qt, ht), c.push(Qt, $, ht), G += 6;
        }
      l.addGroup(g, G, R), g += G, m += q;
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {BoxGeometry} A new instance.
   */
  static fromJSON(t) {
    return new tc(t.width, t.height, t.depth, t.widthSegments, t.heightSegments, t.depthSegments);
  }
}
function uh(n) {
  const t = {};
  for (const e in n) {
    t[e] = {};
    for (const i in n[e]) {
      const a = n[e][i];
      a && (a.isColor || a.isMatrix3 || a.isMatrix4 || a.isVector2 || a.isVector3 || a.isVector4 || a.isTexture || a.isQuaternion) ? a.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), t[e][i] = null) : t[e][i] = a.clone() : Array.isArray(a) ? t[e][i] = a.slice() : t[e][i] = a;
    }
  }
  return t;
}
function qi(n) {
  const t = {};
  for (let e = 0; e < n.length; e++) {
    const i = uh(n[e]);
    for (const a in i)
      t[a] = i[a];
  }
  return t;
}
function YV(n) {
  const t = [];
  for (let e = 0; e < n.length; e++)
    t.push(n[e].clone());
  return t;
}
function tz(n) {
  const t = n.getRenderTarget();
  return t === null ? n.outputColorSpace : t.isXRRenderTarget === !0 ? t.texture.colorSpace : Oe.workingColorSpace;
}
const nT = { clone: uh, merge: qi };
var kV = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, WV = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class Ms extends Ii {
  /**
   * Constructs a new shader material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = kV, this.fragmentShader = WV, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      clipCullDistance: !1,
      // set to use vertex shader clipping
      multiDraw: !1
      // set to use vertex shader multi_draw / enable gl_DrawID
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, t !== void 0 && this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.fragmentShader = t.fragmentShader, this.vertexShader = t.vertexShader, this.uniforms = uh(t.uniforms), this.uniformsGroups = YV(t.uniformsGroups), this.defines = Object.assign({}, t.defines), this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.fog = t.fog, this.lights = t.lights, this.clipping = t.clipping, this.extensions = Object.assign({}, t.extensions), this.glslVersion = t.glslVersion, this;
  }
  toJSON(t) {
    const e = super.toJSON(t);
    e.glslVersion = this.glslVersion, e.uniforms = {};
    for (const a in this.uniforms) {
      const r = this.uniforms[a].value;
      r && r.isTexture ? e.uniforms[a] = {
        type: "t",
        value: r.toJSON(t).uuid
      } : r && r.isColor ? e.uniforms[a] = {
        type: "c",
        value: r.getHex()
      } : r && r.isVector2 ? e.uniforms[a] = {
        type: "v2",
        value: r.toArray()
      } : r && r.isVector3 ? e.uniforms[a] = {
        type: "v3",
        value: r.toArray()
      } : r && r.isVector4 ? e.uniforms[a] = {
        type: "v4",
        value: r.toArray()
      } : r && r.isMatrix3 ? e.uniforms[a] = {
        type: "m3",
        value: r.toArray()
      } : r && r.isMatrix4 ? e.uniforms[a] = {
        type: "m4",
        value: r.toArray()
      } : e.uniforms[a] = {
        value: r
      };
    }
    Object.keys(this.defines).length > 0 && (e.defines = this.defines), e.vertexShader = this.vertexShader, e.fragmentShader = this.fragmentShader, e.lights = this.lights, e.clipping = this.clipping;
    const i = {};
    for (const a in this.extensions)
      this.extensions[a] === !0 && (i[a] = !0);
    return Object.keys(i).length > 0 && (e.extensions = i), e;
  }
}
class $_ extends He {
  /**
   * Constructs a new camera.
   */
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new ae(), this.projectionMatrix = new ae(), this.projectionMatrixInverse = new ae(), this.coordinateSystem = _s;
  }
  copy(t, e) {
    return super.copy(t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this.projectionMatrixInverse.copy(t.projectionMatrixInverse), this.coordinateSystem = t.coordinateSystem, this;
  }
  /**
   * Returns a vector representing the ("look") direction of the 3D object in world space.
   *
   * This method is overwritten since cameras have a different forward vector compared to other
   * 3D objects. A camera looks down its local, negative z-axis by default.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's direction in world space.
   */
  getWorldDirection(t) {
    return super.getWorldDirection(t).negate();
  }
  updateMatrixWorld(t) {
    super.updateMatrixWorld(t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(t, e) {
    super.updateWorldMatrix(t, e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const zo = /* @__PURE__ */ new H(), QC = /* @__PURE__ */ new ft(), KC = /* @__PURE__ */ new ft();
class li extends $_ {
  /**
   * Constructs a new perspective camera.
   *
   * @param {number} [fov=50] - The vertical field of view.
   * @param {number} [aspect=1] - The aspect ratio.
   * @param {number} [near=0.1] - The camera's near plane.
   * @param {number} [far=2000] - The camera's far plane.
   */
  constructor(t = 50, e = 1, i = 0.1, a = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = t, this.zoom = 1, this.near = i, this.far = a, this.focus = 10, this.aspect = e, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(t, e) {
    return super.copy(t, e), this.fov = t.fov, this.zoom = t.zoom, this.near = t.near, this.far = t.far, this.focus = t.focus, this.aspect = t.aspect, this.view = t.view === null ? null : Object.assign({}, t.view), this.filmGauge = t.filmGauge, this.filmOffset = t.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(t) {
    const e = 0.5 * this.getFilmHeight() / t;
    this.fov = oh * 2 * Math.atan(e), this.updateProjectionMatrix();
  }
  /**
   * Returns the focal length from the current {@link PerspectiveCamera#fov} and
   * {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The computed focal length.
   */
  getFocalLength() {
    const t = Math.tan(Bu * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / t;
  }
  /**
   * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.
   *
   * @return {number} The effective FOV.
   */
  getEffectiveFOV() {
    return oh * 2 * Math.atan(
      Math.tan(Bu * 0.5 * this.fov) / this.zoom
    );
  }
  /**
   * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The film width.
   */
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  /**
   * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The film width.
   */
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.
   *
   * @param {number} distance - The viewing distance.
   * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.
   * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.
   */
  getViewBounds(t, e, i) {
    zo.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), e.set(zo.x, zo.y).multiplyScalar(-t / zo.z), zo.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), i.set(zo.x, zo.y).multiplyScalar(-t / zo.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   *
   * @param {number} distance - The viewing distance.
   * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.
   * @returns {Vector2} The view size.
   */
  getViewSize(t, e) {
    return this.getViewBounds(t, QC, KC), e.subVectors(KC, QC);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *```
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *```
   * then for each monitor you would call it like this:
   *```js
   * const w = 1920;
   * const h = 1080;
   * const fullWidth = w * 3;
   * const fullHeight = h * 2;
   *
   * // --A--
   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   * // --B--
   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   * // --C--
   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   * // --D--
   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   * // --E--
   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   * // --F--
   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   * ```
   *
   * Note there is no reason monitors have to be the same size or in a grid.
   *
   * @param {number} fullWidth - The full width of multiview setup.
   * @param {number} fullHeight - The full height of multiview setup.
   * @param {number} x - The horizontal offset of the subcamera.
   * @param {number} y - The vertical offset of the subcamera.
   * @param {number} width - The width of subcamera.
   * @param {number} height - The height of subcamera.
   */
  setViewOffset(t, e, i, a, s, r) {
    this.aspect = t / e, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = i, this.view.offsetY = a, this.view.width = s, this.view.height = r, this.updateProjectionMatrix();
  }
  /**
   * Removes the view offset from the projection matrix.
   */
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  /**
   * Updates the camera's projection matrix. Must be called after any change of
   * camera properties.
   */
  updateProjectionMatrix() {
    const t = this.near;
    let e = t * Math.tan(Bu * 0.5 * this.fov) / this.zoom, i = 2 * e, a = this.aspect * i, s = -0.5 * a;
    const r = this.view;
    if (this.view !== null && this.view.enabled) {
      const c = r.fullWidth, f = r.fullHeight;
      s += r.offsetX * a / c, e -= r.offsetY * i / f, a *= r.width / c, i *= r.height / f;
    }
    const l = this.filmOffset;
    l !== 0 && (s += t * l / this.getFilmWidth()), this.projectionMatrix.makePerspective(s, s + a, e, e - i, t, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(t) {
    const e = super.toJSON(t);
    return e.object.fov = this.fov, e.object.zoom = this.zoom, e.object.near = this.near, e.object.far = this.far, e.object.focus = this.focus, e.object.aspect = this.aspect, this.view !== null && (e.object.view = Object.assign({}, this.view)), e.object.filmGauge = this.filmGauge, e.object.filmOffset = this.filmOffset, e;
  }
}
const Xc = -90, qc = 1;
class ez extends He {
  /**
   * Constructs a new cube camera.
   *
   * @param {number} near - The camera's near plane.
   * @param {number} far - The camera's far plane.
   * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.
   */
  constructor(t, e, i) {
    super(), this.type = "CubeCamera", this.renderTarget = i, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const a = new li(Xc, qc, t, e);
    a.layers = this.layers, this.add(a);
    const s = new li(Xc, qc, t, e);
    s.layers = this.layers, this.add(s);
    const r = new li(Xc, qc, t, e);
    r.layers = this.layers, this.add(r);
    const l = new li(Xc, qc, t, e);
    l.layers = this.layers, this.add(l);
    const c = new li(Xc, qc, t, e);
    c.layers = this.layers, this.add(c);
    const f = new li(Xc, qc, t, e);
    f.layers = this.layers, this.add(f);
  }
  /**
   * Must be called when the coordinate system of the cube camera is changed.
   */
  updateCoordinateSystem() {
    const t = this.coordinateSystem, e = this.children.concat(), [i, a, s, r, l, c] = e;
    for (const f of e) this.remove(f);
    if (t === _s)
      i.up.set(0, 1, 0), i.lookAt(1, 0, 0), a.up.set(0, 1, 0), a.lookAt(-1, 0, 0), s.up.set(0, 0, -1), s.lookAt(0, 1, 0), r.up.set(0, 0, 1), r.lookAt(0, -1, 0), l.up.set(0, 1, 0), l.lookAt(0, 0, 1), c.up.set(0, 1, 0), c.lookAt(0, 0, -1);
    else if (t === Xp)
      i.up.set(0, -1, 0), i.lookAt(-1, 0, 0), a.up.set(0, -1, 0), a.lookAt(1, 0, 0), s.up.set(0, 0, 1), s.lookAt(0, 1, 0), r.up.set(0, 0, -1), r.lookAt(0, -1, 0), l.up.set(0, -1, 0), l.lookAt(0, 0, 1), c.up.set(0, -1, 0), c.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + t);
    for (const f of e)
      this.add(f), f.updateMatrixWorld();
  }
  /**
   * Calling this method will render the given scene with the given renderer
   * into the cube render target of the camera.
   *
   * @param {(Renderer|WebGLRenderer)} renderer - The renderer.
   * @param {Scene} scene - The scene to render.
   */
  update(t, e) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: i, activeMipmapLevel: a } = this;
    this.coordinateSystem !== t.coordinateSystem && (this.coordinateSystem = t.coordinateSystem, this.updateCoordinateSystem());
    const [s, r, l, c, f, d] = this.children, p = t.getRenderTarget(), m = t.getActiveCubeFace(), g = t.getActiveMipmapLevel(), y = t.xr.enabled;
    t.xr.enabled = !1;
    const x = i.texture.generateMipmaps;
    i.texture.generateMipmaps = !1, t.setRenderTarget(i, 0, a), t.render(e, s), t.setRenderTarget(i, 1, a), t.render(e, r), t.setRenderTarget(i, 2, a), t.render(e, l), t.setRenderTarget(i, 3, a), t.render(e, c), t.setRenderTarget(i, 4, a), t.render(e, f), i.texture.generateMipmaps = x, t.setRenderTarget(i, 5, a), t.render(e, d), t.setRenderTarget(p, m, g), t.xr.enabled = y, i.texture.needsPMREMUpdate = !0;
  }
}
class ym extends Sn {
  /**
   * Constructs a new cube texture.
   *
   * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.
   * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space value.
   */
  constructor(t = [], e = oo, i, a, s, r, l, c, f, d) {
    super(t, e, i, a, s, r, l, c, f, d), this.isCubeTexture = !0, this.flipY = !1;
  }
  /**
   * Alias for {@link CubeTexture#image}.
   *
   * @type {Array<Image>}
   */
  get images() {
    return this.image;
  }
  set images(t) {
    this.image = t;
  }
}
class nz extends dr {
  /**
   * Constructs a new cube render target.
   *
   * @param {number} [size=1] - The size of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(t = 1, e = {}) {
    super(t, t, e), this.isWebGLCubeRenderTarget = !0;
    const i = { width: t, height: t, depth: 1 }, a = [i, i, i, i, i, i];
    this.texture = new ym(a), this._setTextureOptions(e), this.texture.isRenderTargetTexture = !0;
  }
  /**
   * Converts the given equirectangular texture to a cube map.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Texture} texture - The equirectangular texture.
   * @return {WebGLCubeRenderTarget} A reference to this cube render target.
   */
  fromEquirectangularTexture(t, e) {
    this.texture.type = e.type, this.texture.colorSpace = e.colorSpace, this.texture.generateMipmaps = e.generateMipmaps, this.texture.minFilter = e.minFilter, this.texture.magFilter = e.magFilter;
    const i = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, a = new tc(5, 5, 5), s = new Ms({
      name: "CubemapFromEquirect",
      uniforms: uh(i.uniforms),
      vertexShader: i.vertexShader,
      fragmentShader: i.fragmentShader,
      side: Ki,
      blending: Jr
    });
    s.uniforms.tEquirect.value = e;
    const r = new Yn(a, s), l = e.minFilter;
    return e.minFilter === ar && (e.minFilter = Qn), new ez(1, 10, this).update(t, r), e.minFilter = l, r.geometry.dispose(), r.material.dispose(), this;
  }
  /**
   * Clears this cube render target.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
   * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
   * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
   */
  clear(t, e = !0, i = !0, a = !0) {
    const s = t.getRenderTarget();
    for (let r = 0; r < 6; r++)
      t.setRenderTarget(this, r), t.clear(e, i, a);
    t.setRenderTarget(s);
  }
}
class Ef extends He {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const ZV = { type: "move" };
class G0 {
  /**
   * Constructs a new XR controller.
   */
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  /**
   * Returns a group representing the hand space of the XR controller.
   *
   * @return {Group} A group representing the hand space of the XR controller.
   */
  getHandSpace() {
    return this._hand === null && (this._hand = new Ef(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  /**
   * Returns a group representing the target ray space of the XR controller.
   *
   * @return {Group} A group representing the target ray space of the XR controller.
   */
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new Ef(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new H(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new H()), this._targetRay;
  }
  /**
   * Returns a group representing the grip space of the XR controller.
   *
   * @return {Group} A group representing the grip space of the XR controller.
   */
  getGripSpace() {
    return this._grip === null && (this._grip = new Ef(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new H(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new H()), this._grip;
  }
  /**
   * Dispatches the given event to the groups representing
   * the different coordinate spaces of the XR controller.
   *
   * @param {Object} event - The event to dispatch.
   * @return {WebXRController} A reference to this instance.
   */
  dispatchEvent(t) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(t), this._grip !== null && this._grip.dispatchEvent(t), this._hand !== null && this._hand.dispatchEvent(t), this;
  }
  /**
   * Connects the controller with the given XR input source.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @return {WebXRController} A reference to this instance.
   */
  connect(t) {
    if (t && t.hand) {
      const e = this._hand;
      if (e)
        for (const i of t.hand.values())
          this._getHandJoint(e, i);
    }
    return this.dispatchEvent({ type: "connected", data: t }), this;
  }
  /**
   * Disconnects the controller from the given XR input source.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @return {WebXRController} A reference to this instance.
   */
  disconnect(t) {
    return this.dispatchEvent({ type: "disconnected", data: t }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  /**
   * Updates the controller with the given input source, XR frame and reference space.
   * This updates the transformations of the groups that represent the different
   * coordinate systems of the controller.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @param {XRFrame} frame - The XR frame.
   * @param {XRReferenceSpace} referenceSpace - The reference space.
   * @return {WebXRController} A reference to this instance.
   */
  update(t, e, i) {
    let a = null, s = null, r = null;
    const l = this._targetRay, c = this._grip, f = this._hand;
    if (t && e.session.visibilityState !== "visible-blurred") {
      if (f && t.hand) {
        r = !0;
        for (const x of t.hand.values()) {
          const M = e.getJointPose(x, i), v = this._getHandJoint(f, x);
          M !== null && (v.matrix.fromArray(M.transform.matrix), v.matrix.decompose(v.position, v.rotation, v.scale), v.matrixWorldNeedsUpdate = !0, v.jointRadius = M.radius), v.visible = M !== null;
        }
        const d = f.joints["index-finger-tip"], p = f.joints["thumb-tip"], m = d.position.distanceTo(p.position), g = 0.02, y = 5e-3;
        f.inputState.pinching && m > g + y ? (f.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: t.handedness,
          target: this
        })) : !f.inputState.pinching && m <= g - y && (f.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: t.handedness,
          target: this
        }));
      } else
        c !== null && t.gripSpace && (s = e.getPose(t.gripSpace, i), s !== null && (c.matrix.fromArray(s.transform.matrix), c.matrix.decompose(c.position, c.rotation, c.scale), c.matrixWorldNeedsUpdate = !0, s.linearVelocity ? (c.hasLinearVelocity = !0, c.linearVelocity.copy(s.linearVelocity)) : c.hasLinearVelocity = !1, s.angularVelocity ? (c.hasAngularVelocity = !0, c.angularVelocity.copy(s.angularVelocity)) : c.hasAngularVelocity = !1));
      l !== null && (a = e.getPose(t.targetRaySpace, i), a === null && s !== null && (a = s), a !== null && (l.matrix.fromArray(a.transform.matrix), l.matrix.decompose(l.position, l.rotation, l.scale), l.matrixWorldNeedsUpdate = !0, a.linearVelocity ? (l.hasLinearVelocity = !0, l.linearVelocity.copy(a.linearVelocity)) : l.hasLinearVelocity = !1, a.angularVelocity ? (l.hasAngularVelocity = !0, l.angularVelocity.copy(a.angularVelocity)) : l.hasAngularVelocity = !1, this.dispatchEvent(ZV)));
    }
    return l !== null && (l.visible = a !== null), c !== null && (c.visible = s !== null), f !== null && (f.visible = r !== null), this;
  }
  /**
   * Returns a group representing the hand joint for the given input joint.
   *
   * @private
   * @param {Group} hand - The group representing the hand space.
   * @param {XRJointSpace} inputjoint - The hand joint data.
   * @return {Group} A group representing the hand joint for the given input joint.
   */
  _getHandJoint(t, e) {
    if (t.joints[e.jointName] === void 0) {
      const i = new Ef();
      i.matrixAutoUpdate = !1, i.visible = !1, t.joints[e.jointName] = i, t.add(i);
    }
    return t.joints[e.jointName];
  }
}
class ty {
  /**
   * Constructs a new fog.
   *
   * @param {number|Color} color - The fog's color.
   * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.
   */
  constructor(t, e = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new Pt(t), this.density = e;
  }
  /**
   * Returns a new fog with copied values from this instance.
   *
   * @return {FogExp2} A clone of this instance.
   */
  clone() {
    return new ty(this.color, this.density);
  }
  /**
   * Serializes the fog into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized fog
   */
  toJSON() {
    return {
      type: "FogExp2",
      name: this.name,
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class ey {
  /**
   * Constructs a new fog.
   *
   * @param {number|Color} color - The fog's color.
   * @param {number} [near=1] - The minimum distance to start applying fog.
   * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.
   */
  constructor(t, e = 1, i = 1e3) {
    this.isFog = !0, this.name = "", this.color = new Pt(t), this.near = e, this.far = i;
  }
  /**
   * Returns a new fog with copied values from this instance.
   *
   * @return {Fog} A clone of this instance.
   */
  clone() {
    return new ey(this.color, this.near, this.far);
  }
  /**
   * Serializes the fog into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized fog
   */
  toJSON() {
    return {
      type: "Fog",
      name: this.name,
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
let iT = class extends He {
  /**
   * Constructs a new scene.
   */
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new _a(), this.environmentIntensity = 1, this.environmentRotation = new _a(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(t, e) {
    return super.copy(t, e), t.background !== null && (this.background = t.background.clone()), t.environment !== null && (this.environment = t.environment.clone()), t.fog !== null && (this.fog = t.fog.clone()), this.backgroundBlurriness = t.backgroundBlurriness, this.backgroundIntensity = t.backgroundIntensity, this.backgroundRotation.copy(t.backgroundRotation), this.environmentIntensity = t.environmentIntensity, this.environmentRotation.copy(t.environmentRotation), t.overrideMaterial !== null && (this.overrideMaterial = t.overrideMaterial.clone()), this.matrixAutoUpdate = t.matrixAutoUpdate, this;
  }
  toJSON(t) {
    const e = super.toJSON(t);
    return this.fog !== null && (e.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (e.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (e.object.backgroundIntensity = this.backgroundIntensity), e.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (e.object.environmentIntensity = this.environmentIntensity), e.object.environmentRotation = this.environmentRotation.toArray(), e;
  }
};
class ny {
  /**
   * Constructs a new interleaved buffer.
   *
   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
   * @param {number} stride - The number of typed-array elements per vertex.
   */
  constructor(t, e) {
    this.isInterleavedBuffer = !0, this.array = t, this.stride = e, this.count = t !== void 0 ? t.length / e : 0, this.usage = Gp, this.updateRanges = [], this.version = 0, this.uuid = Ya();
  }
  /**
   * A callback function that is executed after the renderer has transferred the attribute array
   * data to the GPU.
   */
  onUploadCallback() {
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(t) {
    t === !0 && this.version++;
  }
  /**
   * Sets the usage of this interleaved buffer.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {InterleavedBuffer} A reference to this interleaved buffer.
   */
  setUsage(t) {
    return this.usage = t, this;
  }
  /**
   * Adds a range of data in the data array to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(t, e) {
    this.updateRanges.push({ start: t, count: e });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Copies the values of the given interleaved buffer to this instance.
   *
   * @param {InterleavedBuffer} source - The interleaved buffer to copy.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  copy(t) {
    return this.array = new t.array.constructor(t.array), this.count = t.count, this.stride = t.stride, this.usage = t.usage, this;
  }
  /**
   * Copies a vector from the given interleaved buffer to this one. The start
   * and destination position in the attribute buffers are represented by the
   * given indices.
   *
   * @param {number} index1 - The destination index into this interleaved buffer.
   * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.
   * @param {number} index2 - The source index into the given interleaved buffer.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  copyAt(t, e, i) {
    t *= this.stride, i *= e.stride;
    for (let a = 0, s = this.stride; a < s; a++)
      this.array[t + a] = e.array[i + a];
    return this;
  }
  /**
   * Sets the given array data in the interleaved buffer.
   *
   * @param {(TypedArray|Array)} value - The array data to set.
   * @param {number} [offset=0] - The offset in this interleaved buffer's array.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  set(t, e = 0) {
    return this.array.set(t, e), this;
  }
  /**
   * Returns a new interleaved buffer with copied values from this instance.
   *
   * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.
   * @return {InterleavedBuffer} A clone of this instance.
   */
  clone(t) {
    t.arrayBuffers === void 0 && (t.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Ya()), t.arrayBuffers[this.array.buffer._uuid] === void 0 && (t.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const e = new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]), i = new this.constructor(e, this.stride);
    return i.setUsage(this.usage), i;
  }
  /**
   * Sets the given callback function that is executed after the Renderer has transferred
   * the array data to the GPU. Can be used to perform clean-up operations after
   * the upload when data are not needed anymore on the CPU side.
   *
   * @param {Function} callback - The `onUpload()` callback.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  onUpload(t) {
    return this.onUploadCallback = t, this;
  }
  /**
   * Serializes the interleaved buffer into JSON.
   *
   * @param {Object} [data] - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized interleaved buffer.
   */
  toJSON(t) {
    return t.arrayBuffers === void 0 && (t.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Ya()), t.arrayBuffers[this.array.buffer._uuid] === void 0 && (t.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const Xi = /* @__PURE__ */ new H();
class qu {
  /**
   * Constructs a new interleaved buffer attribute.
   *
   * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.
   * @param {number} itemSize - The item size.
   * @param {number} offset - The attribute offset into the buffer.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(t, e, i, a = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = t, this.itemSize = e, this.offset = i, this.normalized = a;
  }
  /**
   * The item count of this buffer attribute.
   *
   * @type {number}
   * @readonly
   */
  get count() {
    return this.data.count;
  }
  /**
   * The array holding the interleaved buffer attribute data.
   *
   * @type {TypedArray}
   */
  get array() {
    return this.data.array;
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(t) {
    this.data.needsUpdate = t;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  applyMatrix4(t) {
    for (let e = 0, i = this.data.count; e < i; e++)
      Xi.fromBufferAttribute(this, e), Xi.applyMatrix4(t), this.setXYZ(e, Xi.x, Xi.y, Xi.z);
    return this;
  }
  /**
   * Applies the given 3x3 normal matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix3} m - The normal matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  applyNormalMatrix(t) {
    for (let e = 0, i = this.count; e < i; e++)
      Xi.fromBufferAttribute(this, e), Xi.applyNormalMatrix(t), this.setXYZ(e, Xi.x, Xi.y, Xi.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3` and with direction vectors.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  transformDirection(t) {
    for (let e = 0, i = this.count; e < i; e++)
      Xi.fromBufferAttribute(this, e), Xi.transformDirection(t), this.setXYZ(e, Xi.x, Xi.y, Xi.z);
    return this;
  }
  /**
   * Returns the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @return {number} The returned value.
   */
  getComponent(t, e) {
    let i = this.array[t * this.data.stride + this.offset + e];
    return this.normalized && (i = ji(i, this.array)), i;
  }
  /**
   * Sets the given value to the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @param {number} value - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setComponent(t, e, i) {
    return this.normalized && (i = _e(i, this.array)), this.data.array[t * this.data.stride + this.offset + e] = i, this;
  }
  /**
   * Sets the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setX(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.data.array[t * this.data.stride + this.offset] = e, this;
  }
  /**
   * Sets the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} y - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setY(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.data.array[t * this.data.stride + this.offset + 1] = e, this;
  }
  /**
   * Sets the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} z - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setZ(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.data.array[t * this.data.stride + this.offset + 2] = e, this;
  }
  /**
   * Sets the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} w - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setW(t, e) {
    return this.normalized && (e = _e(e, this.array)), this.data.array[t * this.data.stride + this.offset + 3] = e, this;
  }
  /**
   * Returns the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The x component.
   */
  getX(t) {
    let e = this.data.array[t * this.data.stride + this.offset];
    return this.normalized && (e = ji(e, this.array)), e;
  }
  /**
   * Returns the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The y component.
   */
  getY(t) {
    let e = this.data.array[t * this.data.stride + this.offset + 1];
    return this.normalized && (e = ji(e, this.array)), e;
  }
  /**
   * Returns the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The z component.
   */
  getZ(t) {
    let e = this.data.array[t * this.data.stride + this.offset + 2];
    return this.normalized && (e = ji(e, this.array)), e;
  }
  /**
   * Returns the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The w component.
   */
  getW(t) {
    let e = this.data.array[t * this.data.stride + this.offset + 3];
    return this.normalized && (e = ji(e, this.array)), e;
  }
  /**
   * Sets the x and y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXY(t, e, i) {
    return t = t * this.data.stride + this.offset, this.normalized && (e = _e(e, this.array), i = _e(i, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = i, this;
  }
  /**
   * Sets the x, y and z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXYZ(t, e, i, a) {
    return t = t * this.data.stride + this.offset, this.normalized && (e = _e(e, this.array), i = _e(i, this.array), a = _e(a, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = i, this.data.array[t + 2] = a, this;
  }
  /**
   * Sets the x, y, z and w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @param {number} w - The value for the w component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXYZW(t, e, i, a, s) {
    return t = t * this.data.stride + this.offset, this.normalized && (e = _e(e, this.array), i = _e(i, this.array), a = _e(a, this.array), s = _e(s, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = i, this.data.array[t + 2] = a, this.data.array[t + 3] = s, this;
  }
  /**
   * Returns a new buffer attribute with copied values from this instance.
   *
   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
   *
   * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.
   * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.
   */
  clone(t) {
    if (t === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const e = [];
      for (let i = 0; i < this.count; i++) {
        const a = i * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++)
          e.push(this.data.array[a + s]);
      }
      return new an(new this.array.constructor(e), this.itemSize, this.normalized);
    } else
      return t.interleavedBuffers === void 0 && (t.interleavedBuffers = {}), t.interleavedBuffers[this.data.uuid] === void 0 && (t.interleavedBuffers[this.data.uuid] = this.data.clone(t)), new qu(t.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  /**
   * Serializes the buffer attribute into JSON.
   *
   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
   *
   * @param {Object} [data] - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized buffer attribute.
   */
  toJSON(t) {
    if (t === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const e = [];
      for (let i = 0; i < this.count; i++) {
        const a = i * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++)
          e.push(this.data.array[a + s]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: e,
        normalized: this.normalized
      };
    } else
      return t.interleavedBuffers === void 0 && (t.interleavedBuffers = {}), t.interleavedBuffers[this.data.uuid] === void 0 && (t.interleavedBuffers[this.data.uuid] = this.data.toJSON(t)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class aT extends Ii {
  /**
   * Constructs a new sprite material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new Pt(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.rotation = t.rotation, this.sizeAttenuation = t.sizeAttenuation, this.fog = t.fog, this;
  }
}
let Yc;
const md = /* @__PURE__ */ new H(), kc = /* @__PURE__ */ new H(), Wc = /* @__PURE__ */ new H(), Zc = /* @__PURE__ */ new ft(), gd = /* @__PURE__ */ new ft(), iz = /* @__PURE__ */ new ae(), Yg = /* @__PURE__ */ new H(), vd = /* @__PURE__ */ new H(), kg = /* @__PURE__ */ new H(), JC = /* @__PURE__ */ new ft(), i1 = /* @__PURE__ */ new ft(), $C = /* @__PURE__ */ new ft();
class az extends He {
  /**
   * Constructs a new sprite.
   *
   * @param {SpriteMaterial} [material] - The sprite material.
   */
  constructor(t = new aT()) {
    if (super(), this.isSprite = !0, this.type = "Sprite", Yc === void 0) {
      Yc = new ye();
      const e = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), i = new ny(e, 5);
      Yc.setIndex([0, 1, 2, 0, 2, 3]), Yc.setAttribute("position", new qu(i, 3, 0, !1)), Yc.setAttribute("uv", new qu(i, 2, 3, !1));
    }
    this.geometry = Yc, this.material = t, this.center = new ft(0.5, 0.5), this.count = 1;
  }
  /**
   * Computes intersection points between a casted ray and this sprite.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(t, e) {
    t.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), kc.setFromMatrixScale(this.matrixWorld), iz.copy(t.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse, this.matrixWorld), Wc.setFromMatrixPosition(this.modelViewMatrix), t.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && kc.multiplyScalar(-Wc.z);
    const i = this.material.rotation;
    let a, s;
    i !== 0 && (s = Math.cos(i), a = Math.sin(i));
    const r = this.center;
    Wg(Yg.set(-0.5, -0.5, 0), Wc, r, kc, a, s), Wg(vd.set(0.5, -0.5, 0), Wc, r, kc, a, s), Wg(kg.set(0.5, 0.5, 0), Wc, r, kc, a, s), JC.set(0, 0), i1.set(1, 0), $C.set(1, 1);
    let l = t.ray.intersectTriangle(Yg, vd, kg, !1, md);
    if (l === null && (Wg(vd.set(-0.5, 0.5, 0), Wc, r, kc, a, s), i1.set(0, 1), l = t.ray.intersectTriangle(Yg, kg, vd, !1, md), l === null))
      return;
    const c = t.ray.origin.distanceTo(md);
    c < t.near || c > t.far || e.push({
      distance: c,
      point: md.clone(),
      uv: ca.getInterpolation(md, Yg, vd, kg, JC, i1, $C, new ft()),
      face: null,
      object: this
    });
  }
  copy(t, e) {
    return super.copy(t, e), t.center !== void 0 && this.center.copy(t.center), this.material = t.material, this;
  }
}
function Wg(n, t, e, i, a, s) {
  Zc.subVectors(n, e).addScalar(0.5).multiply(i), a !== void 0 ? (gd.x = s * Zc.x - a * Zc.y, gd.y = a * Zc.x + s * Zc.y) : gd.copy(Zc), n.copy(t), n.x += gd.x, n.y += gd.y, n.applyMatrix4(iz);
}
const Zg = /* @__PURE__ */ new H(), tw = /* @__PURE__ */ new H();
class sz extends He {
  /**
   * Constructs a new LOD.
   */
  constructor() {
    super(), this.isLOD = !0, this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      /**
       * This array holds the LOD levels.
       *
       * @name LOD#levels
       * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}
       */
      levels: {
        enumerable: !0,
        value: []
      }
    }), this.autoUpdate = !0;
  }
  copy(t) {
    super.copy(t, !1);
    const e = t.levels;
    for (let i = 0, a = e.length; i < a; i++) {
      const s = e[i];
      this.addLevel(s.object.clone(), s.distance, s.hysteresis);
    }
    return this.autoUpdate = t.autoUpdate, this;
  }
  /**
   * Adds a mesh that will display at a certain distance and greater. Typically
   * the further away the distance, the lower the detail on the mesh.
   *
   * @param {Object3D} object - The 3D object to display at this level.
   * @param {number} [distance=0] - The distance at which to display this level of detail.
   * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.
   * @return {LOD} A reference to this instance.
   */
  addLevel(t, e = 0, i = 0) {
    e = Math.abs(e);
    const a = this.levels;
    let s;
    for (s = 0; s < a.length && !(e < a[s].distance); s++)
      ;
    return a.splice(s, 0, { distance: e, hysteresis: i, object: t }), this.add(t), this;
  }
  /**
   * Removes an existing level, based on the distance from the camera.
   * Returns `true` when the level has been removed. Otherwise `false`.
   *
   * @param {number} distance - Distance of the level to remove.
   * @return {boolean} Whether the level has been removed or not.
   */
  removeLevel(t) {
    const e = this.levels;
    for (let i = 0; i < e.length; i++)
      if (e[i].distance === t) {
        const a = e.splice(i, 1);
        return this.remove(a[0].object), !0;
      }
    return !1;
  }
  /**
   * Returns the currently active LOD level index.
   *
   * @return {number} The current active LOD level index.
   */
  getCurrentLevel() {
    return this._currentLevel;
  }
  /**
   * Returns a reference to the first 3D object that is greater than
   * the given distance.
   *
   * @param {number} distance - The LOD distance.
   * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.
   */
  getObjectForDistance(t) {
    const e = this.levels;
    if (e.length > 0) {
      let i, a;
      for (i = 1, a = e.length; i < a; i++) {
        let s = e[i].distance;
        if (e[i].object.visible && (s -= s * e[i].hysteresis), t < s)
          break;
      }
      return e[i - 1].object;
    }
    return null;
  }
  /**
   * Computes intersection points between a casted ray and this LOD.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(t, e) {
    if (this.levels.length > 0) {
      Zg.setFromMatrixPosition(this.matrixWorld);
      const a = t.ray.origin.distanceTo(Zg);
      this.getObjectForDistance(a).raycast(t, e);
    }
  }
  /**
   * Updates the LOD by computing which LOD level should be visible according
   * to the current distance of the given camera.
   *
   * @param {Camera} camera - The camera the scene is rendered with.
   */
  update(t) {
    const e = this.levels;
    if (e.length > 1) {
      Zg.setFromMatrixPosition(t.matrixWorld), tw.setFromMatrixPosition(this.matrixWorld);
      const i = Zg.distanceTo(tw) / t.zoom;
      e[0].object.visible = !0;
      let a, s;
      for (a = 1, s = e.length; a < s; a++) {
        let r = e[a].distance;
        if (e[a].object.visible && (r -= r * e[a].hysteresis), i >= r)
          e[a - 1].object.visible = !1, e[a].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = a - 1; a < s; a++)
        e[a].object.visible = !1;
    }
  }
  toJSON(t) {
    const e = super.toJSON(t);
    this.autoUpdate === !1 && (e.object.autoUpdate = !1), e.object.levels = [];
    const i = this.levels;
    for (let a = 0, s = i.length; a < s; a++) {
      const r = i[a];
      e.object.levels.push({
        object: r.object.uuid,
        distance: r.distance,
        hysteresis: r.hysteresis
      });
    }
    return e;
  }
}
const ew = /* @__PURE__ */ new H(), nw = /* @__PURE__ */ new De(), iw = /* @__PURE__ */ new De(), jV = /* @__PURE__ */ new H(), aw = /* @__PURE__ */ new ae(), jg = /* @__PURE__ */ new H(), a1 = /* @__PURE__ */ new Si(), sw = /* @__PURE__ */ new ae(), s1 = /* @__PURE__ */ new bh();
class rz extends Yn {
  /**
   * Constructs a new skinned mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(t, e) {
    super(t, e), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = QM, this.bindMatrix = new ae(), this.bindMatrixInverse = new ae(), this.boundingBox = null, this.boundingSphere = null;
  }
  /**
   * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.
   * The bounding box is not automatically computed by the engine; this method must be called by your app.
   * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect
   * the current animation state.
   */
  computeBoundingBox() {
    const t = this.geometry;
    this.boundingBox === null && (this.boundingBox = new Pi()), this.boundingBox.makeEmpty();
    const e = t.getAttribute("position");
    for (let i = 0; i < e.count; i++)
      this.getVertexPosition(i, jg), this.boundingBox.expandByPoint(jg);
  }
  /**
   * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.
   * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting
   * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed
   * per frame in order to reflect the current animation state.
   */
  computeBoundingSphere() {
    const t = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new Si()), this.boundingSphere.makeEmpty();
    const e = t.getAttribute("position");
    for (let i = 0; i < e.count; i++)
      this.getVertexPosition(i, jg), this.boundingSphere.expandByPoint(jg);
  }
  copy(t, e) {
    return super.copy(t, e), this.bindMode = t.bindMode, this.bindMatrix.copy(t.bindMatrix), this.bindMatrixInverse.copy(t.bindMatrixInverse), this.skeleton = t.skeleton, t.boundingBox !== null && (this.boundingBox = t.boundingBox.clone()), t.boundingSphere !== null && (this.boundingSphere = t.boundingSphere.clone()), this;
  }
  raycast(t, e) {
    const i = this.material, a = this.matrixWorld;
    i !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), a1.copy(this.boundingSphere), a1.applyMatrix4(a), t.ray.intersectsSphere(a1) !== !1 && (sw.copy(a).invert(), s1.copy(t.ray).applyMatrix4(sw), !(this.boundingBox !== null && s1.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(t, e, s1)));
  }
  getVertexPosition(t, e) {
    return super.getVertexPosition(t, e), this.applyBoneTransform(t, e), e;
  }
  /**
   * Binds the given skeleton to the skinned mesh.
   *
   * @param {Skeleton} skeleton - The skeleton to bind.
   * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,
   * the skinned mesh's world matrix will be used instead.
   */
  bind(t, e) {
    this.skeleton = t, e === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), e = this.matrixWorld), this.bindMatrix.copy(e), this.bindMatrixInverse.copy(e).invert();
  }
  /**
   * This method sets the skinned mesh in the rest pose).
   */
  pose() {
    this.skeleton.pose();
  }
  /**
   * Normalizes the skin weights which are defined as a buffer attribute
   * in the skinned mesh's geometry.
   */
  normalizeSkinWeights() {
    const t = new De(), e = this.geometry.attributes.skinWeight;
    for (let i = 0, a = e.count; i < a; i++) {
      t.fromBufferAttribute(e, i);
      const s = 1 / t.manhattanLength();
      s !== 1 / 0 ? t.multiplyScalar(s) : t.set(1, 0, 0, 0), e.setXYZW(i, t.x, t.y, t.z, t.w);
    }
  }
  updateMatrixWorld(t) {
    super.updateMatrixWorld(t), this.bindMode === QM ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === zL ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  /**
   * Applies the bone transform associated with the given index to the given
   * vertex position. Returns the updated vector.
   *
   * @param {number} index - The vertex index.
   * @param {Vector3} target - The target object that is used to store the method's result.
   * the skinned mesh's world matrix will be used instead.
   * @return {Vector3} The updated vertex position.
   */
  applyBoneTransform(t, e) {
    const i = this.skeleton, a = this.geometry;
    nw.fromBufferAttribute(a.attributes.skinIndex, t), iw.fromBufferAttribute(a.attributes.skinWeight, t), ew.copy(e).applyMatrix4(this.bindMatrix), e.set(0, 0, 0);
    for (let s = 0; s < 4; s++) {
      const r = iw.getComponent(s);
      if (r !== 0) {
        const l = nw.getComponent(s);
        aw.multiplyMatrices(i.bones[l].matrixWorld, i.boneInverses[l]), e.addScaledVector(jV.copy(ew).applyMatrix4(aw), r);
      }
    }
    return e.applyMatrix4(this.bindMatrixInverse);
  }
}
class sT extends He {
  /**
   * Constructs a new bone.
   */
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class fr extends Sn {
  /**
   * Constructs a new data texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=NearestFilter] - The mag filter value.
   * @param {number} [minFilter=NearestFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(t = null, e = 1, i = 1, a, s, r, l, c, f = xi, d = xi, p, m) {
    super(null, r, l, c, f, d, a, s, p, m), this.isDataTexture = !0, this.image = { data: t, width: e, height: i }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const rw = /* @__PURE__ */ new ae(), QV = /* @__PURE__ */ new ae();
class iy {
  /**
   * Constructs a new skeleton.
   *
   * @param {Array<Bone>} [bones] - An array of bones.
   * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.
   * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.
   */
  constructor(t = [], e = []) {
    this.uuid = Ya(), this.bones = t.slice(0), this.boneInverses = e, this.boneMatrices = null, this.boneTexture = null, this.init();
  }
  /**
   * Initializes the skeleton. This method gets automatically called by the constructor
   * but depending on how the skeleton is created it might be necessary to call this method
   * manually.
   */
  init() {
    const t = this.bones, e = this.boneInverses;
    if (this.boneMatrices = new Float32Array(t.length * 16), e.length === 0)
      this.calculateInverses();
    else if (t.length !== e.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let i = 0, a = this.bones.length; i < a; i++)
        this.boneInverses.push(new ae());
    }
  }
  /**
   * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}
   * and fills it with new matrices.
   */
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let t = 0, e = this.bones.length; t < e; t++) {
      const i = new ae();
      this.bones[t] && i.copy(this.bones[t].matrixWorld).invert(), this.boneInverses.push(i);
    }
  }
  /**
   * Resets the skeleton to the base pose.
   */
  pose() {
    for (let t = 0, e = this.bones.length; t < e; t++) {
      const i = this.bones[t];
      i && i.matrixWorld.copy(this.boneInverses[t]).invert();
    }
    for (let t = 0, e = this.bones.length; t < e; t++) {
      const i = this.bones[t];
      i && (i.parent && i.parent.isBone ? (i.matrix.copy(i.parent.matrixWorld).invert(), i.matrix.multiply(i.matrixWorld)) : i.matrix.copy(i.matrixWorld), i.matrix.decompose(i.position, i.quaternion, i.scale));
    }
  }
  /**
   * Resets the skeleton to the base pose.
   */
  update() {
    const t = this.bones, e = this.boneInverses, i = this.boneMatrices, a = this.boneTexture;
    for (let s = 0, r = t.length; s < r; s++) {
      const l = t[s] ? t[s].matrixWorld : QV;
      rw.multiplyMatrices(l, e[s]), rw.toArray(i, s * 16);
    }
    a !== null && (a.needsUpdate = !0);
  }
  /**
   * Returns a new skeleton with copied values from this instance.
   *
   * @return {Skeleton} A clone of this instance.
   */
  clone() {
    return new iy(this.bones, this.boneInverses);
  }
  /**
   * Computes a data texture for passing bone data to the vertex shader.
   *
   * @return {Skeleton} A reference of this instance.
   */
  computeBoneTexture() {
    let t = Math.sqrt(this.bones.length * 4);
    t = Math.ceil(t / 4) * 4, t = Math.max(t, 4);
    const e = new Float32Array(t * t * 4);
    e.set(this.boneMatrices);
    const i = new fr(e, t, t, zi, fa);
    return i.needsUpdate = !0, this.boneMatrices = e, this.boneTexture = i, this;
  }
  /**
   * Searches through the skeleton's bone array and returns the first with a
   * matching name.
   *
   * @param {string} name - The name of the bone.
   * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.
   */
  getBoneByName(t) {
    for (let e = 0, i = this.bones.length; e < i; e++) {
      const a = this.bones[e];
      if (a.name === t)
        return a;
    }
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  /**
   * Setups the skeleton by the given JSON and bones.
   *
   * @param {Object} json - The skeleton as serialized JSON.
   * @param {Object<string, Bone>} bones - An array of bones.
   * @return {Skeleton} A reference of this instance.
   */
  fromJSON(t, e) {
    this.uuid = t.uuid;
    for (let i = 0, a = t.bones.length; i < a; i++) {
      const s = t.bones[i];
      let r = e[s];
      r === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", s), r = new sT()), this.bones.push(r), this.boneInverses.push(new ae().fromArray(t.boneInverses[i]));
    }
    return this.init(), this;
  }
  /**
   * Serializes the skeleton into JSON.
   *
   * @return {Object} A JSON object representing the serialized skeleton.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const t = {
      metadata: {
        version: 4.7,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    t.uuid = this.uuid;
    const e = this.bones, i = this.boneInverses;
    for (let a = 0, s = e.length; a < s; a++) {
      const r = e[a];
      t.bones.push(r.uuid);
      const l = i[a];
      t.boneInverses.push(l.toArray());
    }
    return t;
  }
}
class ch extends an {
  /**
   * Constructs a new instanced buffer attribute.
   *
   * @param {TypedArray} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.
   */
  constructor(t, e, i, a = 1) {
    super(t, e, i), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = a;
  }
  copy(t) {
    return super.copy(t), this.meshPerAttribute = t.meshPerAttribute, this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.meshPerAttribute = this.meshPerAttribute, t.isInstancedBufferAttribute = !0, t;
  }
}
const jc = /* @__PURE__ */ new ae(), ow = /* @__PURE__ */ new ae(), Qg = [], lw = /* @__PURE__ */ new Pi(), KV = /* @__PURE__ */ new ae(), _d = /* @__PURE__ */ new Yn(), yd = /* @__PURE__ */ new Si();
class oz extends Yn {
  /**
   * Constructs a new instanced mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   * @param {number} count - The number of instances.
   */
  constructor(t, e, i) {
    super(t, e), this.isInstancedMesh = !0, this.instanceMatrix = new ch(new Float32Array(i * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = i, this.boundingBox = null, this.boundingSphere = null;
    for (let a = 0; a < i; a++)
      this.setMatrixAt(a, KV);
  }
  /**
   * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.
   * The bounding box is not automatically computed by the engine; this method must be called by your app.
   * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.
   */
  computeBoundingBox() {
    const t = this.geometry, e = this.count;
    this.boundingBox === null && (this.boundingBox = new Pi()), t.boundingBox === null && t.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let i = 0; i < e; i++)
      this.getMatrixAt(i, jc), lw.copy(t.boundingBox).applyMatrix4(jc), this.boundingBox.union(lw);
  }
  /**
   * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}
   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
   * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.
   */
  computeBoundingSphere() {
    const t = this.geometry, e = this.count;
    this.boundingSphere === null && (this.boundingSphere = new Si()), t.boundingSphere === null && t.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let i = 0; i < e; i++)
      this.getMatrixAt(i, jc), yd.copy(t.boundingSphere).applyMatrix4(jc), this.boundingSphere.union(yd);
  }
  copy(t, e) {
    return super.copy(t, e), this.instanceMatrix.copy(t.instanceMatrix), t.morphTexture !== null && (this.morphTexture = t.morphTexture.clone()), t.instanceColor !== null && (this.instanceColor = t.instanceColor.clone()), this.count = t.count, t.boundingBox !== null && (this.boundingBox = t.boundingBox.clone()), t.boundingSphere !== null && (this.boundingSphere = t.boundingSphere.clone()), this;
  }
  /**
   * Gets the color of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Color} color - The target object that is used to store the method's result.
   */
  getColorAt(t, e) {
    e.fromArray(this.instanceColor.array, t * 3);
  }
  /**
   * Gets the local transformation matrix of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Matrix4} matrix - The target object that is used to store the method's result.
   */
  getMatrixAt(t, e) {
    e.fromArray(this.instanceMatrix.array, t * 16);
  }
  /**
   * Gets the morph target weights of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Mesh} object - The target object that is used to store the method's result.
   */
  getMorphAt(t, e) {
    const i = e.morphTargetInfluences, a = this.morphTexture.source.data.data, s = i.length + 1, r = t * s + 1;
    for (let l = 0; l < i.length; l++)
      i[l] = a[r + l];
  }
  raycast(t, e) {
    const i = this.matrixWorld, a = this.count;
    if (_d.geometry = this.geometry, _d.material = this.material, _d.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), yd.copy(this.boundingSphere), yd.applyMatrix4(i), t.ray.intersectsSphere(yd) !== !1))
      for (let s = 0; s < a; s++) {
        this.getMatrixAt(s, jc), ow.multiplyMatrices(i, jc), _d.matrixWorld = ow, _d.raycast(t, Qg);
        for (let r = 0, l = Qg.length; r < l; r++) {
          const c = Qg[r];
          c.instanceId = s, c.object = this, e.push(c);
        }
        Qg.length = 0;
      }
  }
  /**
   * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.
   *
   * @param {number} index - The instance index.
   * @param {Color} color - The instance color.
   */
  setColorAt(t, e) {
    this.instanceColor === null && (this.instanceColor = new ch(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3)), e.toArray(this.instanceColor.array, t * 3);
  }
  /**
   * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.
   *
   * @param {number} index - The instance index.
   * @param {Matrix4} matrix - The local transformation.
   */
  setMatrixAt(t, e) {
    e.toArray(this.instanceMatrix.array, t * 16);
  }
  /**
   * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.
   *
   * @param {number} index - The instance index.
   * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights
   * of a single instance.
   */
  setMorphAt(t, e) {
    const i = e.morphTargetInfluences, a = i.length + 1;
    this.morphTexture === null && (this.morphTexture = new fr(new Float32Array(a * this.count), a, this.count, W_, fa));
    const s = this.morphTexture.source.data.data;
    let r = 0;
    for (let f = 0; f < i.length; f++)
      r += i[f];
    const l = this.geometry.morphTargetsRelative ? 1 : 1 - r, c = a * t;
    s[c] = l, s.set(i, c + 1);
  }
  updateMorphTargets() {
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" }), this.morphTexture !== null && (this.morphTexture.dispose(), this.morphTexture = null);
  }
}
const r1 = /* @__PURE__ */ new H(), JV = /* @__PURE__ */ new H(), $V = /* @__PURE__ */ new ge();
class Fo {
  /**
   * Constructs a new plane.
   *
   * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.
   * @param {number} [constant=0] - The signed distance from the origin to the plane.
   */
  constructor(t = new H(1, 0, 0), e = 0) {
    this.isPlane = !0, this.normal = t, this.constant = e;
  }
  /**
   * Sets the plane components by copying the given values.
   *
   * @param {Vector3} normal - The normal.
   * @param {number} constant - The constant.
   * @return {Plane} A reference to this plane.
   */
  set(t, e) {
    return this.normal.copy(t), this.constant = e, this;
  }
  /**
   * Sets the plane components by defining `x`, `y`, `z` as the
   * plane normal and `w` as the constant.
   *
   * @param {number} x - The value for the normal's x component.
   * @param {number} y - The value for the normal's y component.
   * @param {number} z - The value for the normal's z component.
   * @param {number} w - The constant value.
   * @return {Plane} A reference to this plane.
   */
  setComponents(t, e, i, a) {
    return this.normal.set(t, e, i), this.constant = a, this;
  }
  /**
   * Sets the plane from the given normal and coplanar point (that is a point
   * that lies onto the plane).
   *
   * @param {Vector3} normal - The normal.
   * @param {Vector3} point - A coplanar point.
   * @return {Plane} A reference to this plane.
   */
  setFromNormalAndCoplanarPoint(t, e) {
    return this.normal.copy(t), this.constant = -e.dot(this.normal), this;
  }
  /**
   * Sets the plane from three coplanar points. The winding order is
   * assumed to be counter-clockwise, and determines the direction of
   * the plane normal.
   *
   * @param {Vector3} a - The first coplanar point.
   * @param {Vector3} b - The second coplanar point.
   * @param {Vector3} c - The third coplanar point.
   * @return {Plane} A reference to this plane.
   */
  setFromCoplanarPoints(t, e, i) {
    const a = r1.subVectors(i, e).cross(JV.subVectors(t, e)).normalize();
    return this.setFromNormalAndCoplanarPoint(a, t), this;
  }
  /**
   * Copies the values of the given plane to this instance.
   *
   * @param {Plane} plane - The plane to copy.
   * @return {Plane} A reference to this plane.
   */
  copy(t) {
    return this.normal.copy(t.normal), this.constant = t.constant, this;
  }
  /**
   * Normalizes the plane normal and adjusts the constant accordingly.
   *
   * @return {Plane} A reference to this plane.
   */
  normalize() {
    const t = 1 / this.normal.length();
    return this.normal.multiplyScalar(t), this.constant *= t, this;
  }
  /**
   * Negates both the plane normal and the constant.
   *
   * @return {Plane} A reference to this plane.
   */
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  /**
   * Returns the signed distance from the given point to this plane.
   *
   * @param {Vector3} point - The point to compute the distance for.
   * @return {number} The signed distance.
   */
  distanceToPoint(t) {
    return this.normal.dot(t) + this.constant;
  }
  /**
   * Returns the signed distance from the given sphere to this plane.
   *
   * @param {Sphere} sphere - The sphere to compute the distance for.
   * @return {number} The signed distance.
   */
  distanceToSphere(t) {
    return this.distanceToPoint(t.center) - t.radius;
  }
  /**
   * Projects a the given point onto the plane.
   *
   * @param {Vector3} point - The point to project.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The projected point on the plane.
   */
  projectPoint(t, e) {
    return e.copy(t).addScaledVector(this.normal, -this.distanceToPoint(t));
  }
  /**
   * Returns the intersection point of the passed line and the plane. Returns
   * `null` if the line does not intersect. Returns the line's starting point if
   * the line is coplanar with the plane.
   *
   * @param {Line3} line - The line to compute the intersection for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectLine(t, e) {
    const i = t.delta(r1), a = this.normal.dot(i);
    if (a === 0)
      return this.distanceToPoint(t.start) === 0 ? e.copy(t.start) : null;
    const s = -(t.start.dot(this.normal) + this.constant) / a;
    return s < 0 || s > 1 ? null : e.copy(t.start).addScaledVector(i, s);
  }
  /**
   * Returns `true` if the given line segment intersects with (passes through) the plane.
   *
   * @param {Line3} line - The line to test.
   * @return {boolean} Whether the given line segment intersects with the plane or not.
   */
  intersectsLine(t) {
    const e = this.distanceToPoint(t.start), i = this.distanceToPoint(t.end);
    return e < 0 && i > 0 || i < 0 && e > 0;
  }
  /**
   * Returns `true` if the given bounding box intersects with the plane.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with the plane or not.
   */
  intersectsBox(t) {
    return t.intersectsPlane(this);
  }
  /**
   * Returns `true` if the given bounding sphere intersects with the plane.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the given bounding sphere intersects with the plane or not.
   */
  intersectsSphere(t) {
    return t.intersectsPlane(this);
  }
  /**
   * Returns a coplanar vector to the plane, by calculating the
   * projection of the normal at the origin onto the plane.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The coplanar point.
   */
  coplanarPoint(t) {
    return t.copy(this.normal).multiplyScalar(-this.constant);
  }
  /**
   * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.
   *
   * The optional normal matrix can be pre-computed like so:
   * ```js
   * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
   * ```
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.
   * @return {Plane} A reference to this plane.
   */
  applyMatrix4(t, e) {
    const i = e || $V.getNormalMatrix(t), a = this.coplanarPoint(r1).applyMatrix4(t), s = this.normal.applyMatrix3(i).normalize();
    return this.constant = -a.dot(s), this;
  }
  /**
   * Translates the plane by the distance defined by the given offset vector.
   * Note that this only affects the plane constant and will not affect the normal vector.
   *
   * @param {Vector3} offset - The offset vector.
   * @return {Plane} A reference to this plane.
   */
  translate(t) {
    return this.constant -= t.dot(this.normal), this;
  }
  /**
   * Returns `true` if this plane is equal with the given one.
   *
   * @param {Plane} plane - The plane to test for equality.
   * @return {boolean} Whether this plane is equal with the given one.
   */
  equals(t) {
    return t.normal.equals(this.normal) && t.constant === this.constant;
  }
  /**
   * Returns a new plane with copied values from this instance.
   *
   * @return {Plane} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const Jl = /* @__PURE__ */ new Si(), Kg = /* @__PURE__ */ new H();
class Eh {
  /**
   * Constructs a new frustum.
   *
   * @param {Plane} [p0] - The first plane that encloses the frustum.
   * @param {Plane} [p1] - The second plane that encloses the frustum.
   * @param {Plane} [p2] - The third plane that encloses the frustum.
   * @param {Plane} [p3] - The fourth plane that encloses the frustum.
   * @param {Plane} [p4] - The fifth plane that encloses the frustum.
   * @param {Plane} [p5] - The sixth plane that encloses the frustum.
   */
  constructor(t = new Fo(), e = new Fo(), i = new Fo(), a = new Fo(), s = new Fo(), r = new Fo()) {
    this.planes = [t, e, i, a, s, r];
  }
  /**
   * Sets the frustum planes by copying the given planes.
   *
   * @param {Plane} [p0] - The first plane that encloses the frustum.
   * @param {Plane} [p1] - The second plane that encloses the frustum.
   * @param {Plane} [p2] - The third plane that encloses the frustum.
   * @param {Plane} [p3] - The fourth plane that encloses the frustum.
   * @param {Plane} [p4] - The fifth plane that encloses the frustum.
   * @param {Plane} [p5] - The sixth plane that encloses the frustum.
   * @return {Frustum} A reference to this frustum.
   */
  set(t, e, i, a, s, r) {
    const l = this.planes;
    return l[0].copy(t), l[1].copy(e), l[2].copy(i), l[3].copy(a), l[4].copy(s), l[5].copy(r), this;
  }
  /**
   * Copies the values of the given frustum to this instance.
   *
   * @param {Frustum} frustum - The frustum to copy.
   * @return {Frustum} A reference to this frustum.
   */
  copy(t) {
    const e = this.planes;
    for (let i = 0; i < 6; i++)
      e[i].copy(t.planes[i]);
    return this;
  }
  /**
   * Sets the frustum planes from the given projection matrix.
   *
   * @param {Matrix4} m - The projection matrix.
   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.
   * @return {Frustum} A reference to this frustum.
   */
  setFromProjectionMatrix(t, e = _s) {
    const i = this.planes, a = t.elements, s = a[0], r = a[1], l = a[2], c = a[3], f = a[4], d = a[5], p = a[6], m = a[7], g = a[8], y = a[9], x = a[10], M = a[11], v = a[12], S = a[13], E = a[14], T = a[15];
    if (i[0].setComponents(c - s, m - f, M - g, T - v).normalize(), i[1].setComponents(c + s, m + f, M + g, T + v).normalize(), i[2].setComponents(c + r, m + d, M + y, T + S).normalize(), i[3].setComponents(c - r, m - d, M - y, T - S).normalize(), i[4].setComponents(c - l, m - p, M - x, T - E).normalize(), e === _s)
      i[5].setComponents(c + l, m + p, M + x, T + E).normalize();
    else if (e === Xp)
      i[5].setComponents(l, p, x, E).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + e);
    return this;
  }
  /**
   * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.
   *
   * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.
   *
   * @param {Object3D} object - The 3D object to test.
   * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.
   */
  intersectsObject(t) {
    if (t.boundingSphere !== void 0)
      t.boundingSphere === null && t.computeBoundingSphere(), Jl.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);
    else {
      const e = t.geometry;
      e.boundingSphere === null && e.computeBoundingSphere(), Jl.copy(e.boundingSphere).applyMatrix4(t.matrixWorld);
    }
    return this.intersectsSphere(Jl);
  }
  /**
   * Returns `true` if the given sprite is intersecting this frustum.
   *
   * @param {Sprite} sprite - The sprite to test.
   * @return {boolean} Whether the sprite is intersecting this frustum or not.
   */
  intersectsSprite(t) {
    return Jl.center.set(0, 0, 0), Jl.radius = 0.7071067811865476, Jl.applyMatrix4(t.matrixWorld), this.intersectsSphere(Jl);
  }
  /**
   * Returns `true` if the given bounding sphere is intersecting this frustum.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.
   */
  intersectsSphere(t) {
    const e = this.planes, i = t.center, a = -t.radius;
    for (let s = 0; s < 6; s++)
      if (e[s].distanceToPoint(i) < a)
        return !1;
    return !0;
  }
  /**
   * Returns `true` if the given bounding box is intersecting this frustum.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the bounding box is intersecting this frustum or not.
   */
  intersectsBox(t) {
    const e = this.planes;
    for (let i = 0; i < 6; i++) {
      const a = e[i];
      if (Kg.x = a.normal.x > 0 ? t.max.x : t.min.x, Kg.y = a.normal.y > 0 ? t.max.y : t.min.y, Kg.z = a.normal.z > 0 ? t.max.z : t.min.z, a.distanceToPoint(Kg) < 0)
        return !1;
    }
    return !0;
  }
  /**
   * Returns `true` if the given point lies within the frustum.
   *
   * @param {Vector3} point - The point to test.
   * @return {boolean} Whether the point lies within this frustum or not.
   */
  containsPoint(t) {
    const e = this.planes;
    for (let i = 0; i < 6; i++)
      if (e[i].distanceToPoint(t) < 0)
        return !1;
    return !0;
  }
  /**
   * Returns a new frustum with copied values from this instance.
   *
   * @return {Frustum} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const Ks = /* @__PURE__ */ new ae(), Js = /* @__PURE__ */ new Eh();
class ay {
  /**
   * Constructs a new frustum array.
   *
   */
  constructor() {
    this.coordinateSystem = _s;
  }
  /**
   * Returns `true` if the 3D object's bounding sphere is intersecting any frustum
   * from the camera array.
   *
   * @param {Object3D} object - The 3D object to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the 3D object is visible in any camera.
   */
  intersectsObject(t, e) {
    if (!e.isArrayCamera || e.cameras.length === 0)
      return !1;
    for (let i = 0; i < e.cameras.length; i++) {
      const a = e.cameras[i];
      if (Ks.multiplyMatrices(
        a.projectionMatrix,
        a.matrixWorldInverse
      ), Js.setFromProjectionMatrix(
        Ks,
        this.coordinateSystem
      ), Js.intersectsObject(t))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given sprite is intersecting any frustum
   * from the camera array.
   *
   * @param {Sprite} sprite - The sprite to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the sprite is visible in any camera.
   */
  intersectsSprite(t, e) {
    if (!e || !e.cameras || e.cameras.length === 0)
      return !1;
    for (let i = 0; i < e.cameras.length; i++) {
      const a = e.cameras[i];
      if (Ks.multiplyMatrices(
        a.projectionMatrix,
        a.matrixWorldInverse
      ), Js.setFromProjectionMatrix(
        Ks,
        this.coordinateSystem
      ), Js.intersectsSprite(t))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given bounding sphere is intersecting any frustum
   * from the camera array.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the sphere is visible in any camera.
   */
  intersectsSphere(t, e) {
    if (!e || !e.cameras || e.cameras.length === 0)
      return !1;
    for (let i = 0; i < e.cameras.length; i++) {
      const a = e.cameras[i];
      if (Ks.multiplyMatrices(
        a.projectionMatrix,
        a.matrixWorldInverse
      ), Js.setFromProjectionMatrix(
        Ks,
        this.coordinateSystem
      ), Js.intersectsSphere(t))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given bounding box is intersecting any frustum
   * from the camera array.
   *
   * @param {Box3} box - The bounding box to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the box is visible in any camera.
   */
  intersectsBox(t, e) {
    if (!e || !e.cameras || e.cameras.length === 0)
      return !1;
    for (let i = 0; i < e.cameras.length; i++) {
      const a = e.cameras[i];
      if (Ks.multiplyMatrices(
        a.projectionMatrix,
        a.matrixWorldInverse
      ), Js.setFromProjectionMatrix(
        Ks,
        this.coordinateSystem
      ), Js.intersectsBox(t))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given point lies within any frustum
   * from the camera array.
   *
   * @param {Vector3} point - The point to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the point is visible in any camera.
   */
  containsPoint(t, e) {
    if (!e || !e.cameras || e.cameras.length === 0)
      return !1;
    for (let i = 0; i < e.cameras.length; i++) {
      const a = e.cameras[i];
      if (Ks.multiplyMatrices(
        a.projectionMatrix,
        a.matrixWorldInverse
      ), Js.setFromProjectionMatrix(
        Ks,
        this.coordinateSystem
      ), Js.containsPoint(t))
        return !0;
    }
    return !1;
  }
  /**
   * Returns a new frustum array with copied values from this instance.
   *
   * @return {FrustumArray} A clone of this instance.
   */
  clone() {
    return new ay();
  }
}
function o1(n, t) {
  return n - t;
}
function t8(n, t) {
  return n.z - t.z;
}
function e8(n, t) {
  return t.z - n.z;
}
class n8 {
  constructor() {
    this.index = 0, this.pool = [], this.list = [];
  }
  push(t, e, i, a) {
    const s = this.pool, r = this.list;
    this.index >= s.length && s.push({
      start: -1,
      count: -1,
      z: -1,
      index: -1
    });
    const l = s[this.index];
    r.push(l), this.index++, l.start = t, l.count = e, l.z = i, l.index = a;
  }
  reset() {
    this.list.length = 0, this.index = 0;
  }
}
const sa = /* @__PURE__ */ new ae(), i8 = /* @__PURE__ */ new Pt(1, 1, 1), uw = /* @__PURE__ */ new Eh(), a8 = /* @__PURE__ */ new ay(), Jg = /* @__PURE__ */ new Pi(), $l = /* @__PURE__ */ new Si(), xd = /* @__PURE__ */ new H(), cw = /* @__PURE__ */ new H(), s8 = /* @__PURE__ */ new H(), l1 = /* @__PURE__ */ new n8(), wi = /* @__PURE__ */ new Yn(), $g = [];
function r8(n, t, e = 0) {
  const i = t.itemSize;
  if (n.isInterleavedBufferAttribute || n.array.constructor !== t.array.constructor) {
    const a = n.count;
    for (let s = 0; s < a; s++)
      for (let r = 0; r < i; r++)
        t.setComponent(s + e, r, n.getComponent(s, r));
  } else
    t.array.set(n.array, e * i);
  t.needsUpdate = !0;
}
function tu(n, t) {
  if (n.constructor !== t.constructor) {
    const e = Math.min(n.length, t.length);
    for (let i = 0; i < e; i++)
      t[i] = n[i];
  } else {
    const e = Math.min(n.length, t.length);
    t.set(new n.constructor(n.buffer, 0, e));
  }
}
class lz extends Yn {
  /**
   * Constructs a new batched mesh.
   *
   * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.
   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.
   * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(t, e, i = e * 2, a) {
    super(new ye(), a), this.isBatchedMesh = !0, this.perObjectFrustumCulled = !0, this.sortObjects = !0, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._instanceInfo = [], this._geometryInfo = [], this._availableInstanceIds = [], this._availableGeometryIds = [], this._nextIndexStart = 0, this._nextVertexStart = 0, this._geometryCount = 0, this._visibilityChanged = !0, this._geometryInitialized = !1, this._maxInstanceCount = t, this._maxVertexCount = e, this._maxIndexCount = i, this._multiDrawCounts = new Int32Array(t), this._multiDrawStarts = new Int32Array(t), this._multiDrawCount = 0, this._multiDrawInstances = null, this._matricesTexture = null, this._indirectTexture = null, this._colorsTexture = null, this._initMatricesTexture(), this._initIndirectTexture();
  }
  /**
   * The maximum number of individual instances that can be stored in the batch.
   *
   * @type {number}
   * @readonly
   */
  get maxInstanceCount() {
    return this._maxInstanceCount;
  }
  /**
   * The instance count.
   *
   * @type {number}
   * @readonly
   */
  get instanceCount() {
    return this._instanceInfo.length - this._availableInstanceIds.length;
  }
  /**
   * The number of unused vertices.
   *
   * @type {number}
   * @readonly
   */
  get unusedVertexCount() {
    return this._maxVertexCount - this._nextVertexStart;
  }
  /**
   * The number of unused indices.
   *
   * @type {number}
   * @readonly
   */
  get unusedIndexCount() {
    return this._maxIndexCount - this._nextIndexStart;
  }
  _initMatricesTexture() {
    let t = Math.sqrt(this._maxInstanceCount * 4);
    t = Math.ceil(t / 4) * 4, t = Math.max(t, 4);
    const e = new Float32Array(t * t * 4), i = new fr(e, t, t, zi, fa);
    this._matricesTexture = i;
  }
  _initIndirectTexture() {
    let t = Math.sqrt(this._maxInstanceCount);
    t = Math.ceil(t);
    const e = new Uint32Array(t * t), i = new fr(e, t, t, _m, lo);
    this._indirectTexture = i;
  }
  _initColorsTexture() {
    let t = Math.sqrt(this._maxInstanceCount);
    t = Math.ceil(t);
    const e = new Float32Array(t * t * 4).fill(1), i = new fr(e, t, t, zi, fa);
    i.colorSpace = Oe.workingColorSpace, this._colorsTexture = i;
  }
  _initializeGeometry(t) {
    const e = this.geometry, i = this._maxVertexCount, a = this._maxIndexCount;
    if (this._geometryInitialized === !1) {
      for (const s in t.attributes) {
        const r = t.getAttribute(s), { array: l, itemSize: c, normalized: f } = r, d = new l.constructor(i * c), p = new an(d, c, f);
        e.setAttribute(s, p);
      }
      if (t.getIndex() !== null) {
        const s = i > 65535 ? new Uint32Array(a) : new Uint16Array(a);
        e.setIndex(new an(s, 1));
      }
      this._geometryInitialized = !0;
    }
  }
  // Make sure the geometry is compatible with the existing combined geometry attributes
  _validateGeometry(t) {
    const e = this.geometry;
    if (!!t.getIndex() != !!e.getIndex())
      throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');
    for (const i in e.attributes) {
      if (!t.hasAttribute(i))
        throw new Error(`THREE.BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);
      const a = t.getAttribute(i), s = e.getAttribute(i);
      if (a.itemSize !== s.itemSize || a.normalized !== s.normalized)
        throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
    }
  }
  /**
   * Validates the instance defined by the given ID.
   *
   * @param {number} instanceId - The instance to validate.
   */
  validateInstanceId(t) {
    const e = this._instanceInfo;
    if (t < 0 || t >= e.length || e[t].active === !1)
      throw new Error(`THREE.BatchedMesh: Invalid instanceId ${t}. Instance is either out of range or has been deleted.`);
  }
  /**
   * Validates the geometry defined by the given ID.
   *
   * @param {number} geometryId - The geometry to validate.
   */
  validateGeometryId(t) {
    const e = this._geometryInfo;
    if (t < 0 || t >= e.length || e[t].active === !1)
      throw new Error(`THREE.BatchedMesh: Invalid geometryId ${t}. Geometry is either out of range or has been deleted.`);
  }
  /**
   * Takes a sort a function that is run before render. The function takes a list of instances to
   * sort and a camera. The objects in the list include a "z" field to perform a depth-ordered sort with.
   *
   * @param {Function} func - The custom sort function.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setCustomSort(t) {
    return this.customSort = t, this;
  }
  /**
   * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.
   * Bounding boxes aren't computed by default. They need to be explicitly computed,
   * otherwise they are `null`.
   */
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Pi());
    const t = this.boundingBox, e = this._instanceInfo;
    t.makeEmpty();
    for (let i = 0, a = e.length; i < a; i++) {
      if (e[i].active === !1) continue;
      const s = e[i].geometryIndex;
      this.getMatrixAt(i, sa), this.getBoundingBoxAt(s, Jg).applyMatrix4(sa), t.union(Jg);
    }
  }
  /**
   * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.
   * Bounding spheres aren't computed by default. They need to be explicitly computed,
   * otherwise they are `null`.
   */
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new Si());
    const t = this.boundingSphere, e = this._instanceInfo;
    t.makeEmpty();
    for (let i = 0, a = e.length; i < a; i++) {
      if (e[i].active === !1) continue;
      const s = e[i].geometryIndex;
      this.getMatrixAt(i, sa), this.getBoundingSphereAt(s, $l).applyMatrix4(sa), t.union($l);
    }
  }
  /**
   * Adds a new instance to the batch using the geometry of the given ID and returns
   * a new id referring to the new instance to be used by other functions.
   *
   * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.
   * @return {number} The instance ID.
   */
  addInstance(t) {
    if (this._instanceInfo.length >= this.maxInstanceCount && this._availableInstanceIds.length === 0)
      throw new Error("THREE.BatchedMesh: Maximum item count reached.");
    const i = {
      visible: !0,
      active: !0,
      geometryIndex: t
    };
    let a = null;
    this._availableInstanceIds.length > 0 ? (this._availableInstanceIds.sort(o1), a = this._availableInstanceIds.shift(), this._instanceInfo[a] = i) : (a = this._instanceInfo.length, this._instanceInfo.push(i));
    const s = this._matricesTexture;
    sa.identity().toArray(s.image.data, a * 16), s.needsUpdate = !0;
    const r = this._colorsTexture;
    return r && (i8.toArray(r.image.data, a * 4), r.needsUpdate = !0), this._visibilityChanged = !0, a;
  }
  /**
   * Adds the given geometry to the batch and returns the associated
   * geometry id referring to it to be used in other functions.
   *
   * @param {BufferGeometry} geometry - The geometry to add.
   * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of
   * vertex buffer space to reserve for the added geometry. This is necessary if it is planned
   * to set a new geometry at this index at a later time that is larger than the original geometry.
   * Defaults to the length of the given geometry vertex buffer.
   * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index
   * buffer space to reserve for the added geometry. This is necessary if it is planned to set a
   * new geometry at this index at a later time that is larger than the original geometry. Defaults to
   * the length of the given geometry index buffer.
   * @return {number} The geometry ID.
   */
  addGeometry(t, e = -1, i = -1) {
    this._initializeGeometry(t), this._validateGeometry(t);
    const a = {
      // geometry information
      vertexStart: -1,
      vertexCount: -1,
      reservedVertexCount: -1,
      indexStart: -1,
      indexCount: -1,
      reservedIndexCount: -1,
      // draw range information
      start: -1,
      count: -1,
      // state
      boundingBox: null,
      boundingSphere: null,
      active: !0
    }, s = this._geometryInfo;
    a.vertexStart = this._nextVertexStart, a.reservedVertexCount = e === -1 ? t.getAttribute("position").count : e;
    const r = t.getIndex();
    if (r !== null && (a.indexStart = this._nextIndexStart, a.reservedIndexCount = i === -1 ? r.count : i), a.indexStart !== -1 && a.indexStart + a.reservedIndexCount > this._maxIndexCount || a.vertexStart + a.reservedVertexCount > this._maxVertexCount)
      throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");
    let c;
    return this._availableGeometryIds.length > 0 ? (this._availableGeometryIds.sort(o1), c = this._availableGeometryIds.shift(), s[c] = a) : (c = this._geometryCount, this._geometryCount++, s.push(a)), this.setGeometryAt(c, t), this._nextIndexStart = a.indexStart + a.reservedIndexCount, this._nextVertexStart = a.vertexStart + a.reservedVertexCount, c;
  }
  /**
   * Replaces the geometry at the given ID with the provided geometry. Throws an error if there
   * is not enough space reserved for geometry. Calling this will change all instances that are
   * rendering that geometry.
   *
   * @param {number} geometryId - The ID of the geometry that should be replaced with the given geometry.
   * @param {BufferGeometry} geometry - The new geometry.
   * @return {number} The geometry ID.
   */
  setGeometryAt(t, e) {
    if (t >= this._geometryCount)
      throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");
    this._validateGeometry(e);
    const i = this.geometry, a = i.getIndex() !== null, s = i.getIndex(), r = e.getIndex(), l = this._geometryInfo[t];
    if (a && r.count > l.reservedIndexCount || e.attributes.position.count > l.reservedVertexCount)
      throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");
    const c = l.vertexStart, f = l.reservedVertexCount;
    l.vertexCount = e.getAttribute("position").count;
    for (const d in i.attributes) {
      const p = e.getAttribute(d), m = i.getAttribute(d);
      r8(p, m, c);
      const g = p.itemSize;
      for (let y = p.count, x = f; y < x; y++) {
        const M = c + y;
        for (let v = 0; v < g; v++)
          m.setComponent(M, v, 0);
      }
      m.needsUpdate = !0, m.addUpdateRange(c * g, f * g);
    }
    if (a) {
      const d = l.indexStart, p = l.reservedIndexCount;
      l.indexCount = e.getIndex().count;
      for (let m = 0; m < r.count; m++)
        s.setX(d + m, c + r.getX(m));
      for (let m = r.count, g = p; m < g; m++)
        s.setX(d + m, c);
      s.needsUpdate = !0, s.addUpdateRange(d, l.reservedIndexCount);
    }
    return l.start = a ? l.indexStart : l.vertexStart, l.count = a ? l.indexCount : l.vertexCount, l.boundingBox = null, e.boundingBox !== null && (l.boundingBox = e.boundingBox.clone()), l.boundingSphere = null, e.boundingSphere !== null && (l.boundingSphere = e.boundingSphere.clone()), this._visibilityChanged = !0, t;
  }
  /**
   * Deletes the geometry defined by the given ID from this batch. Any instances referencing
   * this geometry will also be removed as a side effect.
   *
   * @param {number} geometryId - The ID of the geometry to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  deleteGeometry(t) {
    const e = this._geometryInfo;
    if (t >= e.length || e[t].active === !1)
      return this;
    const i = this._instanceInfo;
    for (let a = 0, s = i.length; a < s; a++)
      i[a].active && i[a].geometryIndex === t && this.deleteInstance(a);
    return e[t].active = !1, this._availableGeometryIds.push(t), this._visibilityChanged = !0, this;
  }
  /**
   * Deletes an existing instance from the batch using the given ID.
   *
   * @param {number} instanceId - The ID of the instance to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  deleteInstance(t) {
    return this.validateInstanceId(t), this._instanceInfo[t].active = !1, this._availableInstanceIds.push(t), this._visibilityChanged = !0, this;
  }
  /**
   * Repacks the sub geometries in [name] to remove any unused space remaining from
   * previously deleted geometry, freeing up space to add new geometry.
   *
   * @param {number} instanceId - The ID of the instance to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  optimize() {
    let t = 0, e = 0;
    const i = this._geometryInfo, a = i.map((r, l) => l).sort((r, l) => i[r].vertexStart - i[l].vertexStart), s = this.geometry;
    for (let r = 0, l = i.length; r < l; r++) {
      const c = a[r], f = i[c];
      if (f.active !== !1) {
        if (s.index !== null) {
          if (f.indexStart !== e) {
            const { indexStart: d, vertexStart: p, reservedIndexCount: m } = f, g = s.index, y = g.array, x = t - p;
            for (let M = d; M < d + m; M++)
              y[M] = y[M] + x;
            g.array.copyWithin(e, d, d + m), g.addUpdateRange(e, m), f.indexStart = e;
          }
          e += f.reservedIndexCount;
        }
        if (f.vertexStart !== t) {
          const { vertexStart: d, reservedVertexCount: p } = f, m = s.attributes;
          for (const g in m) {
            const y = m[g], { array: x, itemSize: M } = y;
            x.copyWithin(t * M, d * M, (d + p) * M), y.addUpdateRange(t * M, p * M);
          }
          f.vertexStart = t;
        }
        t += f.reservedVertexCount, f.start = s.index ? f.indexStart : f.vertexStart, this._nextIndexStart = s.index ? f.indexStart + f.reservedIndexCount : 0, this._nextVertexStart = f.vertexStart + f.reservedVertexCount;
      }
    }
    return this;
  }
  /**
   * Returns the bounding box for the given geometry.
   *
   * @param {number} geometryId - The ID of the geometry to return the bounding box for.
   * @param {Box3} target - The target object that is used to store the method's result.
   * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.
   */
  getBoundingBoxAt(t, e) {
    if (t >= this._geometryCount)
      return null;
    const i = this.geometry, a = this._geometryInfo[t];
    if (a.boundingBox === null) {
      const s = new Pi(), r = i.index, l = i.attributes.position;
      for (let c = a.start, f = a.start + a.count; c < f; c++) {
        let d = c;
        r && (d = r.getX(d)), s.expandByPoint(xd.fromBufferAttribute(l, d));
      }
      a.boundingBox = s;
    }
    return e.copy(a.boundingBox), e;
  }
  /**
   * Returns the bounding sphere for the given geometry.
   *
   * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.
   * @param {Sphere} target - The target object that is used to store the method's result.
   * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.
   */
  getBoundingSphereAt(t, e) {
    if (t >= this._geometryCount)
      return null;
    const i = this.geometry, a = this._geometryInfo[t];
    if (a.boundingSphere === null) {
      const s = new Si();
      this.getBoundingBoxAt(t, Jg), Jg.getCenter(s.center);
      const r = i.index, l = i.attributes.position;
      let c = 0;
      for (let f = a.start, d = a.start + a.count; f < d; f++) {
        let p = f;
        r && (p = r.getX(p)), xd.fromBufferAttribute(l, p), c = Math.max(c, s.center.distanceToSquared(xd));
      }
      s.radius = Math.sqrt(c), a.boundingSphere = s;
    }
    return e.copy(a.boundingSphere), e;
  }
  /**
   * Sets the given local transformation matrix to the defined instance.
   * Negatively scaled matrices are not supported.
   *
   * @param {number} instanceId - The ID of an instance to set the matrix of.
   * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setMatrixAt(t, e) {
    this.validateInstanceId(t);
    const i = this._matricesTexture, a = this._matricesTexture.image.data;
    return e.toArray(a, t * 16), i.needsUpdate = !0, this;
  }
  /**
   * Returns the local transformation matrix of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the matrix of.
   * @param {Matrix4} matrix - The target object that is used to store the method's result.
   * @return {Matrix4} The instance's local transformation matrix.
   */
  getMatrixAt(t, e) {
    return this.validateInstanceId(t), e.fromArray(this._matricesTexture.image.data, t * 16);
  }
  /**
   * Sets the given color to the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to set the color of.
   * @param {Color} color - The color to set the instance to.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setColorAt(t, e) {
    return this.validateInstanceId(t), this._colorsTexture === null && this._initColorsTexture(), e.toArray(this._colorsTexture.image.data, t * 4), this._colorsTexture.needsUpdate = !0, this;
  }
  /**
   * Returns the color of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the color of.
   * @param {Color} color - The target object that is used to store the method's result.
   * @return {Color} The instance's color.
   */
  getColorAt(t, e) {
    return this.validateInstanceId(t), e.fromArray(this._colorsTexture.image.data, t * 4);
  }
  /**
   * Sets the visibility of the instance.
   *
   * @param {number} instanceId - The id of the instance to set the visibility of.
   * @param {boolean} visible - Whether the instance is visible or not.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setVisibleAt(t, e) {
    return this.validateInstanceId(t), this._instanceInfo[t].visible === e ? this : (this._instanceInfo[t].visible = e, this._visibilityChanged = !0, this);
  }
  /**
   * Returns the visibility state of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the visibility state of.
   * @return {boolean} Whether the instance is visible or not.
   */
  getVisibleAt(t) {
    return this.validateInstanceId(t), this._instanceInfo[t].visible;
  }
  /**
   * Sets the geometry ID of the instance at the given index.
   *
   * @param {number} instanceId - The ID of the instance to set the geometry ID of.
   * @param {number} geometryId - The geometry ID to be use by the instance.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setGeometryIdAt(t, e) {
    return this.validateInstanceId(t), this.validateGeometryId(e), this._instanceInfo[t].geometryIndex = e, this;
  }
  /**
   * Returns the geometry ID of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the geometry ID of.
   * @return {number} The instance's geometry ID.
   */
  getGeometryIdAt(t) {
    return this.validateInstanceId(t), this._instanceInfo[t].geometryIndex;
  }
  /**
   * Get the range representing the subset of triangles related to the attached geometry,
   * indicating the starting offset and count, or `null` if invalid.
   *
   * @param {number} geometryId - The id of the geometry to get the range of.
   * @param {Object} [target] - The target object that is used to store the method's result.
   * @return {{
   * 	vertexStart:number,vertexCount:number,reservedVertexCount:number,
   * 	indexStart:number,indexCount:number,reservedIndexCount:number,
   * 	start:number,count:number
   * }} The result object with range data.
   */
  getGeometryRangeAt(t, e = {}) {
    this.validateGeometryId(t);
    const i = this._geometryInfo[t];
    return e.vertexStart = i.vertexStart, e.vertexCount = i.vertexCount, e.reservedVertexCount = i.reservedVertexCount, e.indexStart = i.indexStart, e.indexCount = i.indexCount, e.reservedIndexCount = i.reservedIndexCount, e.start = i.start, e.count = i.count, e;
  }
  /**
   * Resizes the necessary buffers to support the provided number of instances.
   * If the provided arguments shrink the number of instances but there are not enough
   * unused Ids at the end of the list then an error is thrown.
   *
   * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.
  */
  setInstanceCount(t) {
    const e = this._availableInstanceIds, i = this._instanceInfo;
    for (e.sort(o1); e[e.length - 1] === i.length; )
      i.pop(), e.pop();
    if (t < i.length)
      throw new Error(`BatchedMesh: Instance ids outside the range ${t} are being used. Cannot shrink instance count.`);
    const a = new Int32Array(t), s = new Int32Array(t);
    tu(this._multiDrawCounts, a), tu(this._multiDrawStarts, s), this._multiDrawCounts = a, this._multiDrawStarts = s, this._maxInstanceCount = t;
    const r = this._indirectTexture, l = this._matricesTexture, c = this._colorsTexture;
    r.dispose(), this._initIndirectTexture(), tu(r.image.data, this._indirectTexture.image.data), l.dispose(), this._initMatricesTexture(), tu(l.image.data, this._matricesTexture.image.data), c && (c.dispose(), this._initColorsTexture(), tu(c.image.data, this._colorsTexture.image.data));
  }
  /**
   * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.
   * If the provided arguments shrink the geometry buffers but there is not enough unused space at the
   * end of the geometry attributes then an error is thrown.
   *
   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.
   * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.
  */
  setGeometrySize(t, e) {
    const i = [...this._geometryInfo].filter((l) => l.active);
    if (Math.max(...i.map((l) => l.vertexStart + l.reservedVertexCount)) > t)
      throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${e}. Cannot shrink further.`);
    if (this.geometry.index && Math.max(...i.map((c) => c.indexStart + c.reservedIndexCount)) > e)
      throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${e}. Cannot shrink further.`);
    const s = this.geometry;
    s.dispose(), this._maxVertexCount = t, this._maxIndexCount = e, this._geometryInitialized && (this._geometryInitialized = !1, this.geometry = new ye(), this._initializeGeometry(s));
    const r = this.geometry;
    s.index && tu(s.index.array, r.index.array);
    for (const l in s.attributes)
      tu(s.attributes[l].array, r.attributes[l].array);
  }
  raycast(t, e) {
    const i = this._instanceInfo, a = this._geometryInfo, s = this.matrixWorld, r = this.geometry;
    wi.material = this.material, wi.geometry.index = r.index, wi.geometry.attributes = r.attributes, wi.geometry.boundingBox === null && (wi.geometry.boundingBox = new Pi()), wi.geometry.boundingSphere === null && (wi.geometry.boundingSphere = new Si());
    for (let l = 0, c = i.length; l < c; l++) {
      if (!i[l].visible || !i[l].active)
        continue;
      const f = i[l].geometryIndex, d = a[f];
      wi.geometry.setDrawRange(d.start, d.count), this.getMatrixAt(l, wi.matrixWorld).premultiply(s), this.getBoundingBoxAt(f, wi.geometry.boundingBox), this.getBoundingSphereAt(f, wi.geometry.boundingSphere), wi.raycast(t, $g);
      for (let p = 0, m = $g.length; p < m; p++) {
        const g = $g[p];
        g.object = this, g.batchId = l, e.push(g);
      }
      $g.length = 0;
    }
    wi.material = null, wi.geometry.index = null, wi.geometry.attributes = {}, wi.geometry.setDrawRange(0, 1 / 0);
  }
  copy(t) {
    return super.copy(t), this.geometry = t.geometry.clone(), this.perObjectFrustumCulled = t.perObjectFrustumCulled, this.sortObjects = t.sortObjects, this.boundingBox = t.boundingBox !== null ? t.boundingBox.clone() : null, this.boundingSphere = t.boundingSphere !== null ? t.boundingSphere.clone() : null, this._geometryInfo = t._geometryInfo.map((e) => ({
      ...e,
      boundingBox: e.boundingBox !== null ? e.boundingBox.clone() : null,
      boundingSphere: e.boundingSphere !== null ? e.boundingSphere.clone() : null
    })), this._instanceInfo = t._instanceInfo.map((e) => ({ ...e })), this._availableInstanceIds = t._availableInstanceIds.slice(), this._availableGeometryIds = t._availableGeometryIds.slice(), this._nextIndexStart = t._nextIndexStart, this._nextVertexStart = t._nextVertexStart, this._geometryCount = t._geometryCount, this._maxInstanceCount = t._maxInstanceCount, this._maxVertexCount = t._maxVertexCount, this._maxIndexCount = t._maxIndexCount, this._geometryInitialized = t._geometryInitialized, this._multiDrawCounts = t._multiDrawCounts.slice(), this._multiDrawStarts = t._multiDrawStarts.slice(), this._indirectTexture = t._indirectTexture.clone(), this._indirectTexture.image.data = this._indirectTexture.image.data.slice(), this._matricesTexture = t._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.data.slice(), this._colorsTexture !== null && (this._colorsTexture = t._colorsTexture.clone(), this._colorsTexture.image.data = this._colorsTexture.image.data.slice()), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this._indirectTexture.dispose(), this._indirectTexture = null, this._colorsTexture !== null && (this._colorsTexture.dispose(), this._colorsTexture = null);
  }
  onBeforeRender(t, e, i, a, s) {
    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects)
      return;
    const r = a.getIndex(), l = r === null ? 1 : r.array.BYTES_PER_ELEMENT, c = this._instanceInfo, f = this._multiDrawStarts, d = this._multiDrawCounts, p = this._geometryInfo, m = this.perObjectFrustumCulled, g = this._indirectTexture, y = g.image.data, x = i.isArrayCamera ? a8 : uw;
    m && !i.isArrayCamera && (sa.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse).multiply(this.matrixWorld), uw.setFromProjectionMatrix(
      sa,
      t.coordinateSystem
    ));
    let M = 0;
    if (this.sortObjects) {
      sa.copy(this.matrixWorld).invert(), xd.setFromMatrixPosition(i.matrixWorld).applyMatrix4(sa), cw.set(0, 0, -1).transformDirection(i.matrixWorld).transformDirection(sa);
      for (let E = 0, T = c.length; E < T; E++)
        if (c[E].visible && c[E].active) {
          const w = c[E].geometryIndex;
          this.getMatrixAt(E, sa), this.getBoundingSphereAt(w, $l).applyMatrix4(sa);
          let D = !1;
          if (m && (D = !x.intersectsSphere($l, i)), !D) {
            const U = p[w], O = s8.subVectors($l.center, xd).dot(cw);
            l1.push(U.start, U.count, O, E);
          }
        }
      const v = l1.list, S = this.customSort;
      S === null ? v.sort(s.transparent ? e8 : t8) : S.call(this, v, i);
      for (let E = 0, T = v.length; E < T; E++) {
        const w = v[E];
        f[M] = w.start * l, d[M] = w.count, y[M] = w.index, M++;
      }
      l1.reset();
    } else
      for (let v = 0, S = c.length; v < S; v++)
        if (c[v].visible && c[v].active) {
          const E = c[v].geometryIndex;
          let T = !1;
          if (m && (this.getMatrixAt(v, sa), this.getBoundingSphereAt(E, $l).applyMatrix4(sa), T = !x.intersectsSphere($l, i)), !T) {
            const w = p[E];
            f[M] = w.start * l, d[M] = w.count, y[M] = v, M++;
          }
        }
    g.needsUpdate = !0, this._multiDrawCount = M, this._visibilityChanged = !1;
  }
  onBeforeShadow(t, e, i, a, s, r) {
    this.onBeforeRender(t, null, a, s, r);
  }
}
class $i extends Ii {
  /**
   * Constructs a new line basic material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new Pt(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.linewidth = t.linewidth, this.linecap = t.linecap, this.linejoin = t.linejoin, this.fog = t.fog, this;
  }
}
const f_ = /* @__PURE__ */ new H(), h_ = /* @__PURE__ */ new H(), fw = /* @__PURE__ */ new ae(), Sd = /* @__PURE__ */ new bh(), t0 = /* @__PURE__ */ new Si(), u1 = /* @__PURE__ */ new H(), hw = /* @__PURE__ */ new H();
class _l extends He {
  /**
   * Constructs a new line.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(t = new ye(), e = new $i()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = t, this.material = e, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
  }
  copy(t, e) {
    return super.copy(t, e), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
  }
  /**
   * Computes an array of distance values which are necessary for rendering dashed lines.
   * For each vertex in the geometry, the method calculates the cumulative length from the
   * current point to the very beginning of the line.
   *
   * @return {Line} A reference to this line.
   */
  computeLineDistances() {
    const t = this.geometry;
    if (t.index === null) {
      const e = t.attributes.position, i = [0];
      for (let a = 1, s = e.count; a < s; a++)
        f_.fromBufferAttribute(e, a - 1), h_.fromBufferAttribute(e, a), i[a] = i[a - 1], i[a] += f_.distanceTo(h_);
      t.setAttribute("lineDistance", new Zt(i, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  /**
   * Computes intersection points between a casted ray and this line.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(t, e) {
    const i = this.geometry, a = this.matrixWorld, s = t.params.Line.threshold, r = i.drawRange;
    if (i.boundingSphere === null && i.computeBoundingSphere(), t0.copy(i.boundingSphere), t0.applyMatrix4(a), t0.radius += s, t.ray.intersectsSphere(t0) === !1) return;
    fw.copy(a).invert(), Sd.copy(t.ray).applyMatrix4(fw);
    const l = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = l * l, f = this.isLineSegments ? 2 : 1, d = i.index, m = i.attributes.position;
    if (d !== null) {
      const g = Math.max(0, r.start), y = Math.min(d.count, r.start + r.count);
      for (let x = g, M = y - 1; x < M; x += f) {
        const v = d.getX(x), S = d.getX(x + 1), E = e0(this, t, Sd, c, v, S, x);
        E && e.push(E);
      }
      if (this.isLineLoop) {
        const x = d.getX(y - 1), M = d.getX(g), v = e0(this, t, Sd, c, x, M, y - 1);
        v && e.push(v);
      }
    } else {
      const g = Math.max(0, r.start), y = Math.min(m.count, r.start + r.count);
      for (let x = g, M = y - 1; x < M; x += f) {
        const v = e0(this, t, Sd, c, x, x + 1, x);
        v && e.push(v);
      }
      if (this.isLineLoop) {
        const x = e0(this, t, Sd, c, y - 1, g, y - 1);
        x && e.push(x);
      }
    }
  }
  /**
   * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const e = this.geometry.morphAttributes, i = Object.keys(e);
    if (i.length > 0) {
      const a = e[i[0]];
      if (a !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, r = a.length; s < r; s++) {
          const l = a[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[l] = s;
        }
      }
    }
  }
}
function e0(n, t, e, i, a, s, r) {
  const l = n.geometry.attributes.position;
  if (f_.fromBufferAttribute(l, a), h_.fromBufferAttribute(l, s), e.distanceSqToSegment(f_, h_, u1, hw) > i) return;
  u1.applyMatrix4(n.matrixWorld);
  const f = t.ray.origin.distanceTo(u1);
  if (!(f < t.near || f > t.far))
    return {
      distance: f,
      // What do we want? intersection point on the ray or on the segment??
      // point: raycaster.ray.at( distance ),
      point: hw.clone().applyMatrix4(n.matrixWorld),
      index: r,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: n
    };
}
const dw = /* @__PURE__ */ new H(), pw = /* @__PURE__ */ new H();
class vr extends _l {
  /**
   * Constructs a new line segments.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(t, e) {
    super(t, e), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const t = this.geometry;
    if (t.index === null) {
      const e = t.attributes.position, i = [];
      for (let a = 0, s = e.count; a < s; a += 2)
        dw.fromBufferAttribute(e, a), pw.fromBufferAttribute(e, a + 1), i[a] = a === 0 ? 0 : i[a - 1], i[a + 1] = i[a] + dw.distanceTo(pw);
      t.setAttribute("lineDistance", new Zt(i, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class uz extends _l {
  /**
   * Constructs a new line loop.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(t, e) {
    super(t, e), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class rT extends Ii {
  /**
   * Constructs a new points material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new Pt(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.size = t.size, this.sizeAttenuation = t.sizeAttenuation, this.fog = t.fog, this;
  }
}
const mw = /* @__PURE__ */ new ae(), $M = /* @__PURE__ */ new bh(), n0 = /* @__PURE__ */ new Si(), i0 = /* @__PURE__ */ new H();
class cz extends He {
  /**
   * Constructs a new point cloud.
   *
   * @param {BufferGeometry} [geometry] - The points geometry.
   * @param {Material|Array<Material>} [material] - The points material.
   */
  constructor(t = new ye(), e = new rT()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = t, this.material = e, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
  }
  copy(t, e) {
    return super.copy(t, e), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
  }
  /**
   * Computes intersection points between a casted ray and this point cloud.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(t, e) {
    const i = this.geometry, a = this.matrixWorld, s = t.params.Points.threshold, r = i.drawRange;
    if (i.boundingSphere === null && i.computeBoundingSphere(), n0.copy(i.boundingSphere), n0.applyMatrix4(a), n0.radius += s, t.ray.intersectsSphere(n0) === !1) return;
    mw.copy(a).invert(), $M.copy(t.ray).applyMatrix4(mw);
    const l = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = l * l, f = i.index, p = i.attributes.position;
    if (f !== null) {
      const m = Math.max(0, r.start), g = Math.min(f.count, r.start + r.count);
      for (let y = m, x = g; y < x; y++) {
        const M = f.getX(y);
        i0.fromBufferAttribute(p, M), gw(i0, M, c, a, t, e, this);
      }
    } else {
      const m = Math.max(0, r.start), g = Math.min(p.count, r.start + r.count);
      for (let y = m, x = g; y < x; y++)
        i0.fromBufferAttribute(p, y), gw(i0, y, c, a, t, e, this);
    }
  }
  /**
   * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const e = this.geometry.morphAttributes, i = Object.keys(e);
    if (i.length > 0) {
      const a = e[i[0]];
      if (a !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, r = a.length; s < r; s++) {
          const l = a[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[l] = s;
        }
      }
    }
  }
}
function gw(n, t, e, i, a, s, r) {
  const l = $M.distanceSqToPoint(n);
  if (l < e) {
    const c = new H();
    $M.closestPointToPoint(n, c), c.applyMatrix4(i);
    const f = a.ray.origin.distanceTo(c);
    if (f < a.near || f > a.far) return;
    s.push({
      distance: f,
      distanceToRay: Math.sqrt(l),
      point: c,
      index: t,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: r
    });
  }
}
class fz extends Sn {
  /**
   * Constructs a new video texture.
   *
   * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(t, e, i, a, s = Qn, r = Qn, l, c, f) {
    super(t, e, i, a, s, r, l, c, f), this.isVideoTexture = !0, this.generateMipmaps = !1;
    const d = this;
    function p() {
      d.needsUpdate = !0, t.requestVideoFrameCallback(p);
    }
    "requestVideoFrameCallback" in t && t.requestVideoFrameCallback(p);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  /**
   * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}
   * to `true` every time a new frame is available.
   *
   * Only relevant if `requestVideoFrameCallback` is not supported in the browser.
   */
  update() {
    const t = this.image;
    "requestVideoFrameCallback" in t === !1 && t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class o8 extends fz {
  /**
   * Constructs a new video frame texture.
   *
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(t, e, i, a, s, r, l, c) {
    super({}, t, e, i, a, s, r, l, c), this.isVideoFrameTexture = !0;
  }
  /**
   * This method overwritten with an empty implementation since
   * this type of texture is updated via `setFrame()`.
   */
  update() {
  }
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Sets the current frame of the video. This will automatically update the texture
   * so the data can be used for rendering.
   *
   * @param {VideoFrame} frame - The video frame.
   */
  setFrame(t) {
    this.image = t, this.needsUpdate = !0;
  }
}
class l8 extends Sn {
  /**
   * Constructs a new framebuffer texture.
   *
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   */
  constructor(t, e) {
    super({ width: t, height: e }), this.isFramebufferTexture = !0, this.magFilter = xi, this.minFilter = xi, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class sy extends Sn {
  /**
   * Constructs a new compressed texture.
   *
   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)
   * the data and dimensions.
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(t, e, i, a, s, r, l, c, f, d, p, m) {
    super(null, r, l, c, f, d, a, s, p, m), this.isCompressedTexture = !0, this.image = { width: e, height: i }, this.mipmaps = t, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class u8 extends sy {
  /**
   * Constructs a new compressed array texture.
   *
   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)
   * the data and dimensions.
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} depth - The depth of the texture.
   * @param {number} [format=RGBAFormat] - The min filter value.
   * @param {number} [type=UnsignedByteType] - The min filter value.
   */
  constructor(t, e, i, a, s, r) {
    super(t, e, i, s, r), this.isCompressedArrayTexture = !0, this.image.depth = a, this.wrapR = vs, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  /**
   * Describes that a specific layer of the texture needs to be updated.
   * Normally when {@link Texture#needsUpdate} is set to `true`, the
   * entire compressed texture array is sent to the GPU. Marking specific
   * layers will only transmit subsets of all mipmaps associated with a
   * specific depth in the array which is often much more performant.
   *
   * @param {number} layerIndex - The layer index that should be updated.
   */
  addLayerUpdate(t) {
    this.layerUpdates.add(t);
  }
  /**
   * Resets the layer updates registry.
   */
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class c8 extends sy {
  /**
   * Constructs a new compressed texture.
   *
   * @param {Array<CompressedTexture>} images - An array of compressed textures.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   */
  constructor(t, e, i) {
    super(void 0, t[0].width, t[0].height, e, i, oo), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = t;
  }
}
class f8 extends Sn {
  /**
   * Constructs a new texture.
   *
   * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(t, e, i, a, s, r, l, c, f) {
    super(t, e, i, a, s, r, l, c, f), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class oT extends Sn {
  /**
   * Constructs a new depth texture.
   *
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} [type=UnsignedIntType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {number} [format=DepthFormat] - The texture format.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(t, e, i = lo, a, s, r, l = xi, c = xi, f, d = sh, p = 1) {
    if (d !== sh && d !== rh)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    const m = { width: t, height: e, depth: p };
    super(m, a, s, r, l, c, d, i, f), this.isDepthTexture = !0, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(t) {
    return super.copy(t), this.source = new tl(Object.assign({}, t.image)), this.compareFunction = t.compareFunction, this;
  }
  toJSON(t) {
    const e = super.toJSON(t);
    return this.compareFunction !== null && (e.compareFunction = this.compareFunction), e;
  }
}
class ry extends ye {
  /**
   * Constructs a new capsule geometry.
   *
   * @param {number} [radius=1] - Radius of the capsule.
   * @param {number} [height=1] - Height of the middle section.
   * @param {number} [capSegments=4] - Number of curve segments used to build each cap.
   * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule. Must be an integer >= 3.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the middle section. Must be an integer >= 1.
   */
  constructor(t = 1, e = 1, i = 4, a = 8, s = 1) {
    super(), this.type = "CapsuleGeometry", this.parameters = {
      radius: t,
      height: e,
      capSegments: i,
      radialSegments: a,
      heightSegments: s
    }, e = Math.max(0, e), i = Math.max(1, Math.floor(i)), a = Math.max(3, Math.floor(a)), s = Math.max(1, Math.floor(s));
    const r = [], l = [], c = [], f = [], d = e / 2, p = Math.PI / 2 * t, m = e, g = 2 * p + m, y = i * 2 + s, x = a + 1, M = new H(), v = new H();
    for (let S = 0; S <= y; S++) {
      let E = 0, T = 0, w = 0, D = 0;
      if (S <= i) {
        const R = S / i, C = R * Math.PI / 2;
        T = -d - t * Math.cos(C), w = t * Math.sin(C), D = -t * Math.cos(C), E = R * p;
      } else if (S <= i + s) {
        const R = (S - i) / s;
        T = -d + R * e, w = t, D = 0, E = p + R * m;
      } else {
        const R = (S - i - s) / i, C = R * Math.PI / 2;
        T = d + t * Math.sin(C), w = t * Math.cos(C), D = t * Math.sin(C), E = p + m + R * p;
      }
      const U = Math.max(0, Math.min(1, E / g));
      let O = 0;
      S === 0 ? O = 0.5 / a : S === y && (O = -0.5 / a);
      for (let R = 0; R <= a; R++) {
        const C = R / a, B = C * Math.PI * 2, Y = Math.sin(B), V = Math.cos(B);
        v.x = -w * V, v.y = T, v.z = w * Y, l.push(v.x, v.y, v.z), M.set(
          -w * V,
          D,
          w * Y
        ), M.normalize(), c.push(M.x, M.y, M.z), f.push(C + O, U);
      }
      if (S > 0) {
        const R = (S - 1) * x;
        for (let C = 0; C < a; C++) {
          const B = R + C, Y = R + C + 1, V = S * x + C, Q = S * x + C + 1;
          r.push(B, Y, V), r.push(Y, Q, V);
        }
      }
    }
    this.setIndex(r), this.setAttribute("position", new Zt(l, 3)), this.setAttribute("normal", new Zt(c, 3)), this.setAttribute("uv", new Zt(f, 2));
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CapsuleGeometry} A new instance.
   */
  static fromJSON(t) {
    return new ry(t.radius, t.height, t.capSegments, t.radialSegments, t.heightSegments);
  }
}
class oy extends ye {
  /**
   * Constructs a new circle geometry.
   *
   * @param {number} [radius=1] - Radius of the circle.
   * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.
   * @param {number} [thetaStart=0] - Start angle for first segment in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,
   * of the circular sector in radians. The default value results in a complete circle.
   */
  constructor(t = 1, e = 32, i = 0, a = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: t,
      segments: e,
      thetaStart: i,
      thetaLength: a
    }, e = Math.max(3, e);
    const s = [], r = [], l = [], c = [], f = new H(), d = new ft();
    r.push(0, 0, 0), l.push(0, 0, 1), c.push(0.5, 0.5);
    for (let p = 0, m = 3; p <= e; p++, m += 3) {
      const g = i + p / e * a;
      f.x = t * Math.cos(g), f.y = t * Math.sin(g), r.push(f.x, f.y, f.z), l.push(0, 0, 1), d.x = (r[m] / t + 1) / 2, d.y = (r[m + 1] / t + 1) / 2, c.push(d.x, d.y);
    }
    for (let p = 1; p <= e; p++)
      s.push(p, p + 1, 0);
    this.setIndex(s), this.setAttribute("position", new Zt(r, 3)), this.setAttribute("normal", new Zt(l, 3)), this.setAttribute("uv", new Zt(c, 2));
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CircleGeometry} A new instance.
   */
  static fromJSON(t) {
    return new oy(t.radius, t.segments, t.thetaStart, t.thetaLength);
  }
}
class xm extends ye {
  /**
   * Constructs a new cylinder geometry.
   *
   * @param {number} [radiusTop=1] - Radius of the cylinder at the top.
   * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.
   * @param {number} [height=1] - Height of the cylinder.
   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.
   * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.
   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
   * The default value results in a complete cylinder.
   */
  constructor(t = 1, e = 1, i = 1, a = 32, s = 1, r = !1, l = 0, c = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: t,
      radiusBottom: e,
      height: i,
      radialSegments: a,
      heightSegments: s,
      openEnded: r,
      thetaStart: l,
      thetaLength: c
    };
    const f = this;
    a = Math.floor(a), s = Math.floor(s);
    const d = [], p = [], m = [], g = [];
    let y = 0;
    const x = [], M = i / 2;
    let v = 0;
    S(), r === !1 && (t > 0 && E(!0), e > 0 && E(!1)), this.setIndex(d), this.setAttribute("position", new Zt(p, 3)), this.setAttribute("normal", new Zt(m, 3)), this.setAttribute("uv", new Zt(g, 2));
    function S() {
      const T = new H(), w = new H();
      let D = 0;
      const U = (e - t) / i;
      for (let O = 0; O <= s; O++) {
        const R = [], C = O / s, B = C * (e - t) + t;
        for (let Y = 0; Y <= a; Y++) {
          const V = Y / a, Q = V * c + l, J = Math.sin(Q), P = Math.cos(Q);
          w.x = B * J, w.y = -C * i + M, w.z = B * P, p.push(w.x, w.y, w.z), T.set(J, U, P).normalize(), m.push(T.x, T.y, T.z), g.push(V, 1 - C), R.push(y++);
        }
        x.push(R);
      }
      for (let O = 0; O < a; O++)
        for (let R = 0; R < s; R++) {
          const C = x[R][O], B = x[R + 1][O], Y = x[R + 1][O + 1], V = x[R][O + 1];
          (t > 0 || R !== 0) && (d.push(C, B, V), D += 3), (e > 0 || R !== s - 1) && (d.push(B, Y, V), D += 3);
        }
      f.addGroup(v, D, 0), v += D;
    }
    function E(T) {
      const w = y, D = new ft(), U = new H();
      let O = 0;
      const R = T === !0 ? t : e, C = T === !0 ? 1 : -1;
      for (let Y = 1; Y <= a; Y++)
        p.push(0, M * C, 0), m.push(0, C, 0), g.push(0.5, 0.5), y++;
      const B = y;
      for (let Y = 0; Y <= a; Y++) {
        const Q = Y / a * c + l, J = Math.cos(Q), P = Math.sin(Q);
        U.x = R * P, U.y = M * C, U.z = R * J, p.push(U.x, U.y, U.z), m.push(0, C, 0), D.x = J * 0.5 + 0.5, D.y = P * 0.5 * C + 0.5, g.push(D.x, D.y), y++;
      }
      for (let Y = 0; Y < a; Y++) {
        const V = w + Y, Q = B + Y;
        T === !0 ? d.push(Q, Q + 1, V) : d.push(Q + 1, Q, V), O += 3;
      }
      f.addGroup(v, O, T === !0 ? 1 : 2), v += O;
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CylinderGeometry} A new instance.
   */
  static fromJSON(t) {
    return new xm(t.radiusTop, t.radiusBottom, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength);
  }
}
class Sm extends xm {
  /**
   * Constructs a new cone geometry.
   *
   * @param {number} [radius=1] - Radius of the cone base.
   * @param {number} [height=1] - Height of the cone.
   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.
   * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.
   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
   * The default value results in a complete cone.
   */
  constructor(t = 1, e = 1, i = 32, a = 1, s = !1, r = 0, l = Math.PI * 2) {
    super(0, t, e, i, a, s, r, l), this.type = "ConeGeometry", this.parameters = {
      radius: t,
      height: e,
      radialSegments: i,
      heightSegments: a,
      openEnded: s,
      thetaStart: r,
      thetaLength: l
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {ConeGeometry} A new instance.
   */
  static fromJSON(t) {
    return new Sm(t.radius, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength);
  }
}
class El extends ye {
  /**
   * Constructs a new polyhedron geometry.
   *
   * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.
   * @param {Array<number>} [indices] - A flat array of indices describing the base shape.
   * @param {number} [radius=1] - The radius of the shape.
   * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.
   */
  constructor(t = [], e = [], i = 1, a = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: t,
      indices: e,
      radius: i,
      detail: a
    };
    const s = [], r = [];
    l(a), f(i), d(), this.setAttribute("position", new Zt(s, 3)), this.setAttribute("normal", new Zt(s.slice(), 3)), this.setAttribute("uv", new Zt(r, 2)), a === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function l(S) {
      const E = new H(), T = new H(), w = new H();
      for (let D = 0; D < e.length; D += 3)
        g(e[D + 0], E), g(e[D + 1], T), g(e[D + 2], w), c(E, T, w, S);
    }
    function c(S, E, T, w) {
      const D = w + 1, U = [];
      for (let O = 0; O <= D; O++) {
        U[O] = [];
        const R = S.clone().lerp(T, O / D), C = E.clone().lerp(T, O / D), B = D - O;
        for (let Y = 0; Y <= B; Y++)
          Y === 0 && O === D ? U[O][Y] = R : U[O][Y] = R.clone().lerp(C, Y / B);
      }
      for (let O = 0; O < D; O++)
        for (let R = 0; R < 2 * (D - O) - 1; R++) {
          const C = Math.floor(R / 2);
          R % 2 === 0 ? (m(U[O][C + 1]), m(U[O + 1][C]), m(U[O][C])) : (m(U[O][C + 1]), m(U[O + 1][C + 1]), m(U[O + 1][C]));
        }
    }
    function f(S) {
      const E = new H();
      for (let T = 0; T < s.length; T += 3)
        E.x = s[T + 0], E.y = s[T + 1], E.z = s[T + 2], E.normalize().multiplyScalar(S), s[T + 0] = E.x, s[T + 1] = E.y, s[T + 2] = E.z;
    }
    function d() {
      const S = new H();
      for (let E = 0; E < s.length; E += 3) {
        S.x = s[E + 0], S.y = s[E + 1], S.z = s[E + 2];
        const T = M(S) / 2 / Math.PI + 0.5, w = v(S) / Math.PI + 0.5;
        r.push(T, 1 - w);
      }
      y(), p();
    }
    function p() {
      for (let S = 0; S < r.length; S += 6) {
        const E = r[S + 0], T = r[S + 2], w = r[S + 4], D = Math.max(E, T, w), U = Math.min(E, T, w);
        D > 0.9 && U < 0.1 && (E < 0.2 && (r[S + 0] += 1), T < 0.2 && (r[S + 2] += 1), w < 0.2 && (r[S + 4] += 1));
      }
    }
    function m(S) {
      s.push(S.x, S.y, S.z);
    }
    function g(S, E) {
      const T = S * 3;
      E.x = t[T + 0], E.y = t[T + 1], E.z = t[T + 2];
    }
    function y() {
      const S = new H(), E = new H(), T = new H(), w = new H(), D = new ft(), U = new ft(), O = new ft();
      for (let R = 0, C = 0; R < s.length; R += 9, C += 6) {
        S.set(s[R + 0], s[R + 1], s[R + 2]), E.set(s[R + 3], s[R + 4], s[R + 5]), T.set(s[R + 6], s[R + 7], s[R + 8]), D.set(r[C + 0], r[C + 1]), U.set(r[C + 2], r[C + 3]), O.set(r[C + 4], r[C + 5]), w.copy(S).add(E).add(T).divideScalar(3);
        const B = M(w);
        x(D, C + 0, S, B), x(U, C + 2, E, B), x(O, C + 4, T, B);
      }
    }
    function x(S, E, T, w) {
      w < 0 && S.x === 1 && (r[E] = S.x - 1), T.x === 0 && T.z === 0 && (r[E] = w / 2 / Math.PI + 0.5);
    }
    function M(S) {
      return Math.atan2(S.z, -S.x);
    }
    function v(S) {
      return Math.atan2(-S.y, Math.sqrt(S.x * S.x + S.z * S.z));
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {PolyhedronGeometry} A new instance.
   */
  static fromJSON(t) {
    return new El(t.vertices, t.indices, t.radius, t.details);
  }
}
class ly extends El {
  /**
   * Constructs a new dodecahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the dodecahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.
   */
  constructor(t = 1, e = 0) {
    const i = (1 + Math.sqrt(5)) / 2, a = 1 / i, s = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -a,
      -i,
      0,
      -a,
      i,
      0,
      a,
      -i,
      0,
      a,
      i,
      // (±1/φ, ±φ, 0)
      -a,
      -i,
      0,
      -a,
      i,
      0,
      a,
      -i,
      0,
      a,
      i,
      0,
      // (±φ, 0, ±1/φ)
      -i,
      0,
      -a,
      i,
      0,
      -a,
      -i,
      0,
      a,
      i,
      0,
      a
    ], r = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(s, r, t, e), this.type = "DodecahedronGeometry", this.parameters = {
      radius: t,
      detail: e
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {DodecahedronGeometry} A new instance.
   */
  static fromJSON(t) {
    return new ly(t.radius, t.detail);
  }
}
const a0 = /* @__PURE__ */ new H(), s0 = /* @__PURE__ */ new H(), c1 = /* @__PURE__ */ new H(), r0 = /* @__PURE__ */ new ca();
class hz extends ye {
  /**
   * Constructs a new edges geometry.
   *
   * @param {?BufferGeometry} [geometry=null] - The geometry.
   * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)
   * between the face normals of the adjoining faces exceeds this value.
   */
  constructor(t = null, e = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: t,
      thresholdAngle: e
    }, t !== null) {
      const a = Math.pow(10, 4), s = Math.cos(Bu * e), r = t.getIndex(), l = t.getAttribute("position"), c = r ? r.count : l.count, f = [0, 0, 0], d = ["a", "b", "c"], p = new Array(3), m = {}, g = [];
      for (let y = 0; y < c; y += 3) {
        r ? (f[0] = r.getX(y), f[1] = r.getX(y + 1), f[2] = r.getX(y + 2)) : (f[0] = y, f[1] = y + 1, f[2] = y + 2);
        const { a: x, b: M, c: v } = r0;
        if (x.fromBufferAttribute(l, f[0]), M.fromBufferAttribute(l, f[1]), v.fromBufferAttribute(l, f[2]), r0.getNormal(c1), p[0] = `${Math.round(x.x * a)},${Math.round(x.y * a)},${Math.round(x.z * a)}`, p[1] = `${Math.round(M.x * a)},${Math.round(M.y * a)},${Math.round(M.z * a)}`, p[2] = `${Math.round(v.x * a)},${Math.round(v.y * a)},${Math.round(v.z * a)}`, !(p[0] === p[1] || p[1] === p[2] || p[2] === p[0]))
          for (let S = 0; S < 3; S++) {
            const E = (S + 1) % 3, T = p[S], w = p[E], D = r0[d[S]], U = r0[d[E]], O = `${T}_${w}`, R = `${w}_${T}`;
            R in m && m[R] ? (c1.dot(m[R].normal) <= s && (g.push(D.x, D.y, D.z), g.push(U.x, U.y, U.z)), m[R] = null) : O in m || (m[O] = {
              index0: f[S],
              index1: f[E],
              normal: c1.clone()
            });
          }
      }
      for (const y in m)
        if (m[y]) {
          const { index0: x, index1: M } = m[y];
          a0.fromBufferAttribute(l, x), s0.fromBufferAttribute(l, M), g.push(a0.x, a0.y, a0.z), g.push(s0.x, s0.y, s0.z);
        }
      this.setAttribute("position", new Zt(g, 3));
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
}
class Gs {
  /**
   * Constructs a new curve.
   */
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200, this.needsUpdate = !1, this.cacheArcLengths = null;
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definition)
   * for the given interpolation factor.
   *
   * @abstract
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPoint() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definition)
   * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length
   * of the curve which equidistant samples.
   *
   * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPointAt(t, e) {
    const i = this.getUtoTmapping(t);
    return this.getPoint(i, e);
  }
  /**
   * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing
   * the curve shape.
   *
   * @param {number} [divisions=5] - The number of divisions.
   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.
   */
  getPoints(t = 5) {
    const e = [];
    for (let i = 0; i <= t; i++)
      e.push(this.getPoint(i / t));
    return e;
  }
  // Get sequence of points using getPointAt( u )
  /**
   * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing
   * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire
   * curve.
   *
   * @param {number} [divisions=5] - The number of divisions.
   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.
   */
  getSpacedPoints(t = 5) {
    const e = [];
    for (let i = 0; i <= t; i++)
      e.push(this.getPointAt(i / t));
    return e;
  }
  /**
   * Returns the total arc length of the curve.
   *
   * @return {number} The length of the curve.
   */
  getLength() {
    const t = this.getLengths();
    return t[t.length - 1];
  }
  /**
   * Returns an array of cumulative segment lengths of the curve.
   *
   * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.
   * @return {Array<number>} An array holding the cumulative segment lengths.
   */
  getLengths(t = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const e = [];
    let i, a = this.getPoint(0), s = 0;
    e.push(0);
    for (let r = 1; r <= t; r++)
      i = this.getPoint(r / t), s += i.distanceTo(a), e.push(s), a = i;
    return this.cacheArcLengths = e, e;
  }
  /**
   * Update the cumulative segment distance cache. The method must be called
   * every time curve parameters are changed. If an updated curve is part of a
   * composed curve like {@link CurvePath}, this method must be called on the
   * composed curve, too.
   */
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  /**
   * Given an interpolation factor in the range `[0,1]`, this method returns an updated
   * interpolation factor in the same range that can be ued to sample equidistant points
   * from a curve.
   *
   * @param {number} u - The interpolation factor.
   * @param {?number} distance - An optional distance on the curve.
   * @return {number} The updated interpolation factor.
   */
  getUtoTmapping(t, e = null) {
    const i = this.getLengths();
    let a = 0;
    const s = i.length;
    let r;
    e ? r = e : r = t * i[s - 1];
    let l = 0, c = s - 1, f;
    for (; l <= c; )
      if (a = Math.floor(l + (c - l) / 2), f = i[a] - r, f < 0)
        l = a + 1;
      else if (f > 0)
        c = a - 1;
      else {
        c = a;
        break;
      }
    if (a = c, i[a] === r)
      return a / (s - 1);
    const d = i[a], m = i[a + 1] - d, g = (r - d) / m;
    return (a + g) / (s - 1);
  }
  /**
   * Returns a unit vector tangent for the given interpolation factor.
   * If the derived curve does not implement its tangent derivation,
   * two points a small delta apart will be used to find its gradient
   * which seems to give a reasonable approximation.
   *
   * @param {number} t - The interpolation factor.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The tangent vector.
   */
  getTangent(t, e) {
    let a = t - 1e-4, s = t + 1e-4;
    a < 0 && (a = 0), s > 1 && (s = 1);
    const r = this.getPoint(a), l = this.getPoint(s), c = e || (r.isVector2 ? new ft() : new H());
    return c.copy(l).sub(r).normalize(), c;
  }
  /**
   * Same as {@link Curve#getTangent} but with equidistant samples.
   *
   * @param {number} u - The interpolation factor.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The tangent vector.
   * @see {@link Curve#getPointAt}
   */
  getTangentAt(t, e) {
    const i = this.getUtoTmapping(t);
    return this.getTangent(i, e);
  }
  /**
   * Generates the Frenet Frames. Requires a curve definition in 3D space. Used
   * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.
   *
   * @param {number} segments - The number of segments.
   * @param {boolean} [closed=false] - Whether the curve is closed or not.
   * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.
   */
  computeFrenetFrames(t, e = !1) {
    const i = new H(), a = [], s = [], r = [], l = new H(), c = new ae();
    for (let g = 0; g <= t; g++) {
      const y = g / t;
      a[g] = this.getTangentAt(y, new H());
    }
    s[0] = new H(), r[0] = new H();
    let f = Number.MAX_VALUE;
    const d = Math.abs(a[0].x), p = Math.abs(a[0].y), m = Math.abs(a[0].z);
    d <= f && (f = d, i.set(1, 0, 0)), p <= f && (f = p, i.set(0, 1, 0)), m <= f && i.set(0, 0, 1), l.crossVectors(a[0], i).normalize(), s[0].crossVectors(a[0], l), r[0].crossVectors(a[0], s[0]);
    for (let g = 1; g <= t; g++) {
      if (s[g] = s[g - 1].clone(), r[g] = r[g - 1].clone(), l.crossVectors(a[g - 1], a[g]), l.length() > Number.EPSILON) {
        l.normalize();
        const y = Math.acos(me(a[g - 1].dot(a[g]), -1, 1));
        s[g].applyMatrix4(c.makeRotationAxis(l, y));
      }
      r[g].crossVectors(a[g], s[g]);
    }
    if (e === !0) {
      let g = Math.acos(me(s[0].dot(s[t]), -1, 1));
      g /= t, a[0].dot(l.crossVectors(s[0], s[t])) > 0 && (g = -g);
      for (let y = 1; y <= t; y++)
        s[y].applyMatrix4(c.makeRotationAxis(a[y], g * y)), r[y].crossVectors(a[y], s[y]);
    }
    return {
      tangents: a,
      normals: s,
      binormals: r
    };
  }
  /**
   * Returns a new curve with copied values from this instance.
   *
   * @return {Curve} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given curve to this instance.
   *
   * @param {Curve} source - The curve to copy.
   * @return {Curve} A reference to this curve.
   */
  copy(t) {
    return this.arcLengthDivisions = t.arcLengthDivisions, this;
  }
  /**
   * Serializes the curve into JSON.
   *
   * @return {Object} A JSON object representing the serialized curve.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const t = {
      metadata: {
        version: 4.7,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return t.arcLengthDivisions = this.arcLengthDivisions, t.type = this.type, t;
  }
  /**
   * Deserializes the curve from the given JSON.
   *
   * @param {Object} json - The JSON holding the serialized curve.
   * @return {Curve} A reference to this curve.
   */
  fromJSON(t) {
    return this.arcLengthDivisions = t.arcLengthDivisions, this;
  }
}
class uy extends Gs {
  /**
   * Constructs a new ellipse curve.
   *
   * @param {number} [aX=0] - The X center of the ellipse.
   * @param {number} [aY=0] - The Y center of the ellipse.
   * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.
   * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.
   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.
   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   */
  constructor(t = 0, e = 0, i = 1, a = 1, s = 0, r = Math.PI * 2, l = !1, c = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = t, this.aY = e, this.xRadius = i, this.yRadius = a, this.aStartAngle = s, this.aEndAngle = r, this.aClockwise = l, this.aRotation = c;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(t, e = new ft()) {
    const i = e, a = Math.PI * 2;
    let s = this.aEndAngle - this.aStartAngle;
    const r = Math.abs(s) < Number.EPSILON;
    for (; s < 0; ) s += a;
    for (; s > a; ) s -= a;
    s < Number.EPSILON && (r ? s = 0 : s = a), this.aClockwise === !0 && !r && (s === a ? s = -a : s = s - a);
    const l = this.aStartAngle + t * s;
    let c = this.aX + this.xRadius * Math.cos(l), f = this.aY + this.yRadius * Math.sin(l);
    if (this.aRotation !== 0) {
      const d = Math.cos(this.aRotation), p = Math.sin(this.aRotation), m = c - this.aX, g = f - this.aY;
      c = m * d - g * p + this.aX, f = m * p + g * d + this.aY;
    }
    return i.set(c, f);
  }
  copy(t) {
    return super.copy(t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.aX = this.aX, t.aY = this.aY, t.xRadius = this.xRadius, t.yRadius = this.yRadius, t.aStartAngle = this.aStartAngle, t.aEndAngle = this.aEndAngle, t.aClockwise = this.aClockwise, t.aRotation = this.aRotation, t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this;
  }
}
class dz extends uy {
  /**
   * Constructs a new arc curve.
   *
   * @param {number} [aX=0] - The X center of the ellipse.
   * @param {number} [aY=0] - The Y center of the ellipse.
   * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.
   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.
   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.
   */
  constructor(t, e, i, a, s, r) {
    super(t, e, i, i, a, s, r), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function lT() {
  let n = 0, t = 0, e = 0, i = 0;
  function a(s, r, l, c) {
    n = s, t = l, e = -3 * s + 3 * r - 2 * l - c, i = 2 * s - 2 * r + l + c;
  }
  return {
    initCatmullRom: function(s, r, l, c, f) {
      a(r, l, f * (l - s), f * (c - r));
    },
    initNonuniformCatmullRom: function(s, r, l, c, f, d, p) {
      let m = (r - s) / f - (l - s) / (f + d) + (l - r) / d, g = (l - r) / d - (c - r) / (d + p) + (c - l) / p;
      m *= d, g *= d, a(r, l, m, g);
    },
    calc: function(s) {
      const r = s * s, l = r * s;
      return n + t * s + e * r + i * l;
    }
  };
}
const o0 = /* @__PURE__ */ new H(), f1 = /* @__PURE__ */ new lT(), h1 = /* @__PURE__ */ new lT(), d1 = /* @__PURE__ */ new lT();
class pz extends Gs {
  /**
   * Constructs a new Catmull-Rom curve.
   *
   * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.
   * @param {boolean} [closed=false] - Whether the curve is closed or not.
   * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.
   * @param {number} [tension=0.5] - Tension of the curve.
   */
  constructor(t = [], e = !1, i = "centripetal", a = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = t, this.closed = e, this.curveType = i, this.tension = a;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(t, e = new H()) {
    const i = e, a = this.points, s = a.length, r = (s - (this.closed ? 0 : 1)) * t;
    let l = Math.floor(r), c = r - l;
    this.closed ? l += l > 0 ? 0 : (Math.floor(Math.abs(l) / s) + 1) * s : c === 0 && l === s - 1 && (l = s - 2, c = 1);
    let f, d;
    this.closed || l > 0 ? f = a[(l - 1) % s] : (o0.subVectors(a[0], a[1]).add(a[0]), f = o0);
    const p = a[l % s], m = a[(l + 1) % s];
    if (this.closed || l + 2 < s ? d = a[(l + 2) % s] : (o0.subVectors(a[s - 1], a[s - 2]).add(a[s - 1]), d = o0), this.curveType === "centripetal" || this.curveType === "chordal") {
      const g = this.curveType === "chordal" ? 0.5 : 0.25;
      let y = Math.pow(f.distanceToSquared(p), g), x = Math.pow(p.distanceToSquared(m), g), M = Math.pow(m.distanceToSquared(d), g);
      x < 1e-4 && (x = 1), y < 1e-4 && (y = x), M < 1e-4 && (M = x), f1.initNonuniformCatmullRom(f.x, p.x, m.x, d.x, y, x, M), h1.initNonuniformCatmullRom(f.y, p.y, m.y, d.y, y, x, M), d1.initNonuniformCatmullRom(f.z, p.z, m.z, d.z, y, x, M);
    } else this.curveType === "catmullrom" && (f1.initCatmullRom(f.x, p.x, m.x, d.x, this.tension), h1.initCatmullRom(f.y, p.y, m.y, d.y, this.tension), d1.initCatmullRom(f.z, p.z, m.z, d.z, this.tension));
    return i.set(
      f1.calc(c),
      h1.calc(c),
      d1.calc(c)
    ), i;
  }
  copy(t) {
    super.copy(t), this.points = [];
    for (let e = 0, i = t.points.length; e < i; e++) {
      const a = t.points[e];
      this.points.push(a.clone());
    }
    return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this;
  }
  toJSON() {
    const t = super.toJSON();
    t.points = [];
    for (let e = 0, i = this.points.length; e < i; e++) {
      const a = this.points[e];
      t.points.push(a.toArray());
    }
    return t.closed = this.closed, t.curveType = this.curveType, t.tension = this.tension, t;
  }
  fromJSON(t) {
    super.fromJSON(t), this.points = [];
    for (let e = 0, i = t.points.length; e < i; e++) {
      const a = t.points[e];
      this.points.push(new H().fromArray(a));
    }
    return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this;
  }
}
function vw(n, t, e, i, a) {
  const s = (i - t) * 0.5, r = (a - e) * 0.5, l = n * n, c = n * l;
  return (2 * e - 2 * i + s + r) * c + (-3 * e + 3 * i - 2 * s - r) * l + s * n + e;
}
function h8(n, t) {
  const e = 1 - n;
  return e * e * t;
}
function d8(n, t) {
  return 2 * (1 - n) * n * t;
}
function p8(n, t) {
  return n * n * t;
}
function cp(n, t, e, i) {
  return h8(n, t) + d8(n, e) + p8(n, i);
}
function m8(n, t) {
  const e = 1 - n;
  return e * e * e * t;
}
function g8(n, t) {
  const e = 1 - n;
  return 3 * e * e * n * t;
}
function v8(n, t) {
  return 3 * (1 - n) * n * n * t;
}
function _8(n, t) {
  return n * n * n * t;
}
function fp(n, t, e, i, a) {
  return m8(n, t) + g8(n, e) + v8(n, i) + _8(n, a);
}
class uT extends Gs {
  /**
   * Constructs a new Cubic Bezier curve.
   *
   * @param {Vector2} [v0] - The start point.
   * @param {Vector2} [v1] - The first control point.
   * @param {Vector2} [v2] - The second control point.
   * @param {Vector2} [v3] - The end point.
   */
  constructor(t = new ft(), e = new ft(), i = new ft(), a = new ft()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = t, this.v1 = e, this.v2 = i, this.v3 = a;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(t, e = new ft()) {
    const i = e, a = this.v0, s = this.v1, r = this.v2, l = this.v3;
    return i.set(
      fp(t, a.x, s.x, r.x, l.x),
      fp(t, a.y, s.y, r.y, l.y)
    ), i;
  }
  copy(t) {
    return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
  }
}
class mz extends Gs {
  /**
   * Constructs a new Cubic Bezier curve.
   *
   * @param {Vector3} [v0] - The start point.
   * @param {Vector3} [v1] - The first control point.
   * @param {Vector3} [v2] - The second control point.
   * @param {Vector3} [v3] - The end point.
   */
  constructor(t = new H(), e = new H(), i = new H(), a = new H()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = t, this.v1 = e, this.v2 = i, this.v3 = a;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(t, e = new H()) {
    const i = e, a = this.v0, s = this.v1, r = this.v2, l = this.v3;
    return i.set(
      fp(t, a.x, s.x, r.x, l.x),
      fp(t, a.y, s.y, r.y, l.y),
      fp(t, a.z, s.z, r.z, l.z)
    ), i;
  }
  copy(t) {
    return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
  }
}
class cT extends Gs {
  /**
   * Constructs a new line curve.
   *
   * @param {Vector2} [v1] - The start point.
   * @param {Vector2} [v2] - The end point.
   */
  constructor(t = new ft(), e = new ft()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = t, this.v2 = e;
  }
  /**
   * Returns a point on the line.
   *
   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the line.
   */
  getPoint(t, e = new ft()) {
    const i = e;
    return t === 1 ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1), i.multiplyScalar(t).add(this.v1)), i;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(t, e) {
    return this.getPoint(t, e);
  }
  getTangent(t, e = new ft()) {
    return e.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(t, e) {
    return this.getTangent(t, e);
  }
  copy(t) {
    return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
  }
}
class gz extends Gs {
  /**
   * Constructs a new line curve.
   *
   * @param {Vector3} [v1] - The start point.
   * @param {Vector3} [v2] - The end point.
   */
  constructor(t = new H(), e = new H()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = t, this.v2 = e;
  }
  /**
   * Returns a point on the line.
   *
   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the line.
   */
  getPoint(t, e = new H()) {
    const i = e;
    return t === 1 ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1), i.multiplyScalar(t).add(this.v1)), i;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(t, e) {
    return this.getPoint(t, e);
  }
  getTangent(t, e = new H()) {
    return e.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(t, e) {
    return this.getTangent(t, e);
  }
  copy(t) {
    return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
  }
}
class fT extends Gs {
  /**
   * Constructs a new Quadratic Bezier curve.
   *
   * @param {Vector2} [v0] - The start point.
   * @param {Vector2} [v1] - The control point.
   * @param {Vector2} [v2] - The end point.
   */
  constructor(t = new ft(), e = new ft(), i = new ft()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = t, this.v1 = e, this.v2 = i;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(t, e = new ft()) {
    const i = e, a = this.v0, s = this.v1, r = this.v2;
    return i.set(
      cp(t, a.x, s.x, r.x),
      cp(t, a.y, s.y, r.y)
    ), i;
  }
  copy(t) {
    return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
  }
}
class hT extends Gs {
  /**
   * Constructs a new Quadratic Bezier curve.
   *
   * @param {Vector3} [v0] - The start point.
   * @param {Vector3} [v1] - The control point.
   * @param {Vector3} [v2] - The end point.
   */
  constructor(t = new H(), e = new H(), i = new H()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = t, this.v1 = e, this.v2 = i;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(t, e = new H()) {
    const i = e, a = this.v0, s = this.v1, r = this.v2;
    return i.set(
      cp(t, a.x, s.x, r.x),
      cp(t, a.y, s.y, r.y),
      cp(t, a.z, s.z, r.z)
    ), i;
  }
  copy(t) {
    return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
  }
}
class dT extends Gs {
  /**
   * Constructs a new 2D spline curve.
   *
   * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.
   */
  constructor(t = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = t;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(t, e = new ft()) {
    const i = e, a = this.points, s = (a.length - 1) * t, r = Math.floor(s), l = s - r, c = a[r === 0 ? r : r - 1], f = a[r], d = a[r > a.length - 2 ? a.length - 1 : r + 1], p = a[r > a.length - 3 ? a.length - 1 : r + 2];
    return i.set(
      vw(l, c.x, f.x, d.x, p.x),
      vw(l, c.y, f.y, d.y, p.y)
    ), i;
  }
  copy(t) {
    super.copy(t), this.points = [];
    for (let e = 0, i = t.points.length; e < i; e++) {
      const a = t.points[e];
      this.points.push(a.clone());
    }
    return this;
  }
  toJSON() {
    const t = super.toJSON();
    t.points = [];
    for (let e = 0, i = this.points.length; e < i; e++) {
      const a = this.points[e];
      t.points.push(a.toArray());
    }
    return t;
  }
  fromJSON(t) {
    super.fromJSON(t), this.points = [];
    for (let e = 0, i = t.points.length; e < i; e++) {
      const a = t.points[e];
      this.points.push(new ft().fromArray(a));
    }
    return this;
  }
}
var d_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: dz,
  CatmullRomCurve3: pz,
  CubicBezierCurve: uT,
  CubicBezierCurve3: mz,
  EllipseCurve: uy,
  LineCurve: cT,
  LineCurve3: gz,
  QuadraticBezierCurve: fT,
  QuadraticBezierCurve3: hT,
  SplineCurve: dT
});
class vz extends Gs {
  /**
   * Constructs a new curve path.
   */
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  /**
   * Adds a curve to this curve path.
   *
   * @param {Curve} curve - The curve to add.
   */
  add(t) {
    this.curves.push(t);
  }
  /**
   * Adds a line curve to close the path.
   *
   * @return {CurvePath} A reference to this curve path.
   */
  closePath() {
    const t = this.curves[0].getPoint(0), e = this.curves[this.curves.length - 1].getPoint(1);
    if (!t.equals(e)) {
      const i = t.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new d_[i](e, t));
    }
    return this;
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definitions)
   * for the given interpolation factor.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPoint(t, e) {
    const i = t * this.getLength(), a = this.getCurveLengths();
    let s = 0;
    for (; s < a.length; ) {
      if (a[s] >= i) {
        const r = a[s] - i, l = this.curves[s], c = l.getLength(), f = c === 0 ? 0 : 1 - r / c;
        return l.getPointAt(f, e);
      }
      s++;
    }
    return null;
  }
  getLength() {
    const t = this.getCurveLengths();
    return t[t.length - 1];
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  /**
   * Returns list of cumulative curve lengths of the defined curves.
   *
   * @return {Array<number>} The curve lengths.
   */
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const t = [];
    let e = 0;
    for (let i = 0, a = this.curves.length; i < a; i++)
      e += this.curves[i].getLength(), t.push(e);
    return this.cacheLengths = t, t;
  }
  getSpacedPoints(t = 40) {
    const e = [];
    for (let i = 0; i <= t; i++)
      e.push(this.getPoint(i / t));
    return this.autoClose && e.push(e[0]), e;
  }
  getPoints(t = 12) {
    const e = [];
    let i;
    for (let a = 0, s = this.curves; a < s.length; a++) {
      const r = s[a], l = r.isEllipseCurve ? t * 2 : r.isLineCurve || r.isLineCurve3 ? 1 : r.isSplineCurve ? t * r.points.length : t, c = r.getPoints(l);
      for (let f = 0; f < c.length; f++) {
        const d = c[f];
        i && i.equals(d) || (e.push(d), i = d);
      }
    }
    return this.autoClose && e.length > 1 && !e[e.length - 1].equals(e[0]) && e.push(e[0]), e;
  }
  copy(t) {
    super.copy(t), this.curves = [];
    for (let e = 0, i = t.curves.length; e < i; e++) {
      const a = t.curves[e];
      this.curves.push(a.clone());
    }
    return this.autoClose = t.autoClose, this;
  }
  toJSON() {
    const t = super.toJSON();
    t.autoClose = this.autoClose, t.curves = [];
    for (let e = 0, i = this.curves.length; e < i; e++) {
      const a = this.curves[e];
      t.curves.push(a.toJSON());
    }
    return t;
  }
  fromJSON(t) {
    super.fromJSON(t), this.autoClose = t.autoClose, this.curves = [];
    for (let e = 0, i = t.curves.length; e < i; e++) {
      const a = t.curves[e];
      this.curves.push(new d_[a.type]().fromJSON(a));
    }
    return this;
  }
}
class p_ extends vz {
  /**
   * Constructs a new path.
   *
   * @param {Array<Vector2>} [points] - An array of 2D points defining the path.
   */
  constructor(t) {
    super(), this.type = "Path", this.currentPoint = new ft(), t && this.setFromPoints(t);
  }
  /**
   * Creates a path from the given list of points. The points are added
   * to the path as instances of {@link LineCurve}.
   *
   * @param {Array<Vector2>} points - An array of 2D points.
   * @return {Path} A reference to this path.
   */
  setFromPoints(t) {
    this.moveTo(t[0].x, t[0].y);
    for (let e = 1, i = t.length; e < i; e++)
      this.lineTo(t[e].x, t[e].y);
    return this;
  }
  /**
   * Moves {@link Path#currentPoint} to the given point.
   *
   * @param {number} x - The x coordinate.
   * @param {number} y - The y coordinate.
   * @return {Path} A reference to this path.
   */
  moveTo(t, e) {
    return this.currentPoint.set(t, e), this;
  }
  /**
   * Adds an instance of {@link LineCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} x - The x coordinate of the end point.
   * @param {number} y - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  lineTo(t, e) {
    const i = new cT(this.currentPoint.clone(), new ft(t, e));
    return this.curves.push(i), this.currentPoint.set(t, e), this;
  }
  /**
   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCPx - The x coordinate of the control point.
   * @param {number} aCPy - The y coordinate of the control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  quadraticCurveTo(t, e, i, a) {
    const s = new fT(
      this.currentPoint.clone(),
      new ft(t, e),
      new ft(i, a)
    );
    return this.curves.push(s), this.currentPoint.set(i, a), this;
  }
  /**
   * Adds an instance of {@link CubicBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCP1x - The x coordinate of the first control point.
   * @param {number} aCP1y - The y coordinate of the first control point.
   * @param {number} aCP2x - The x coordinate of the second control point.
   * @param {number} aCP2y - The y coordinate of the second control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  bezierCurveTo(t, e, i, a, s, r) {
    const l = new uT(
      this.currentPoint.clone(),
      new ft(t, e),
      new ft(i, a),
      new ft(s, r)
    );
    return this.curves.push(l), this.currentPoint.set(s, r), this;
  }
  /**
   * Adds an instance of {@link SplineCurve} to the path by connecting
   * the current point with the given list of points.
   *
   * @param {Array<Vector2>} pts - An array of points in 2D space.
   * @return {Path} A reference to this path.
   */
  splineThru(t) {
    const e = [this.currentPoint.clone()].concat(t), i = new dT(e);
    return this.curves.push(i), this.currentPoint.copy(t[t.length - 1]), this;
  }
  /**
   * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative
   * to the current point.
   *
   * @param {number} aX - The x coordinate of the center of the arc offsetted from the previous curve.
   * @param {number} aY - The y coordinate of the center of the arc offsetted from the previous curve.
   * @param {number} aRadius - The radius of the arc.
   * @param {number} aStartAngle - The start angle in radians.
   * @param {number} aEndAngle - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.
   * @return {Path} A reference to this path.
   */
  arc(t, e, i, a, s, r) {
    const l = this.currentPoint.x, c = this.currentPoint.y;
    return this.absarc(
      t + l,
      e + c,
      i,
      a,
      s,
      r
    ), this;
  }
  /**
   * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.
   *
   * @param {number} aX - The x coordinate of the center of the arc.
   * @param {number} aY - The y coordinate of the center of the arc.
   * @param {number} aRadius - The radius of the arc.
   * @param {number} aStartAngle - The start angle in radians.
   * @param {number} aEndAngle - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.
   * @return {Path} A reference to this path.
   */
  absarc(t, e, i, a, s, r) {
    return this.absellipse(t, e, i, i, a, s, r), this;
  }
  /**
   * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative
   * to the current point
   *
   * @param {number} aX - The x coordinate of the center of the ellipse offsetted from the previous curve.
   * @param {number} aY - The y coordinate of the center of the ellipse offsetted from the previous curve.
   * @param {number} xRadius - The radius of the ellipse in the x axis.
   * @param {number} yRadius - The radius of the ellipse in the y axis.
   * @param {number} aStartAngle - The start angle in radians.
   * @param {number} aEndAngle - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   * @return {Path} A reference to this path.
   */
  ellipse(t, e, i, a, s, r, l, c) {
    const f = this.currentPoint.x, d = this.currentPoint.y;
    return this.absellipse(t + f, e + d, i, a, s, r, l, c), this;
  }
  /**
   * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.
   *
   * @param {number} aX - The x coordinate of the absolute center of the ellipse.
   * @param {number} aY - The y coordinate of the absolute center of the ellipse.
   * @param {number} xRadius - The radius of the ellipse in the x axis.
   * @param {number} yRadius - The radius of the ellipse in the y axis.
   * @param {number} aStartAngle - The start angle in radians.
   * @param {number} aEndAngle - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   * @return {Path} A reference to this path.
   */
  absellipse(t, e, i, a, s, r, l, c) {
    const f = new uy(t, e, i, a, s, r, l, c);
    if (this.curves.length > 0) {
      const p = f.getPoint(0);
      p.equals(this.currentPoint) || this.lineTo(p.x, p.y);
    }
    this.curves.push(f);
    const d = f.getPoint(1);
    return this.currentPoint.copy(d), this;
  }
  copy(t) {
    return super.copy(t), this.currentPoint.copy(t.currentPoint), this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.currentPoint = this.currentPoint.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.currentPoint.fromArray(t.currentPoint), this;
  }
}
class Pu extends p_ {
  /**
   * Constructs a new shape.
   *
   * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.
   */
  constructor(t) {
    super(t), this.uuid = Ya(), this.type = "Shape", this.holes = [];
  }
  /**
   * Returns an array representing each contour of the holes
   * as a list of 2D points.
   *
   * @param {number} divisions - The fineness of the result.
   * @return {Array<Array<Vector2>>} The holes as a series of 2D points.
   */
  getPointsHoles(t) {
    const e = [];
    for (let i = 0, a = this.holes.length; i < a; i++)
      e[i] = this.holes[i].getPoints(t);
    return e;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  /**
   * Returns an object that holds contour data for the shape and its holes as
   * arrays of 2D points.
   *
   * @param {number} divisions - The fineness of the result.
   * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.
   */
  extractPoints(t) {
    return {
      shape: this.getPoints(t),
      holes: this.getPointsHoles(t)
    };
  }
  copy(t) {
    super.copy(t), this.holes = [];
    for (let e = 0, i = t.holes.length; e < i; e++) {
      const a = t.holes[e];
      this.holes.push(a.clone());
    }
    return this;
  }
  toJSON() {
    const t = super.toJSON();
    t.uuid = this.uuid, t.holes = [];
    for (let e = 0, i = this.holes.length; e < i; e++) {
      const a = this.holes[e];
      t.holes.push(a.toJSON());
    }
    return t;
  }
  fromJSON(t) {
    super.fromJSON(t), this.uuid = t.uuid, this.holes = [];
    for (let e = 0, i = t.holes.length; e < i; e++) {
      const a = t.holes[e];
      this.holes.push(new p_().fromJSON(a));
    }
    return this;
  }
}
function y8(n, t, e = 2) {
  const i = t && t.length, a = i ? t[0] * e : n.length;
  let s = _z(n, 0, a, e, !0);
  const r = [];
  if (!s || s.next === s.prev) return r;
  let l, c, f;
  if (i && (s = E8(n, t, s, e)), n.length > 80 * e) {
    l = 1 / 0, c = 1 / 0;
    let d = -1 / 0, p = -1 / 0;
    for (let m = e; m < a; m += e) {
      const g = n[m], y = n[m + 1];
      g < l && (l = g), y < c && (c = y), g > d && (d = g), y > p && (p = y);
    }
    f = Math.max(d - l, p - c), f = f !== 0 ? 32767 / f : 0;
  }
  return Yp(s, r, e, l, c, f, 0), r;
}
function _z(n, t, e, i, a) {
  let s;
  if (a === z8(n, t, e, i) > 0)
    for (let r = t; r < e; r += i) s = _w(r / i | 0, n[r], n[r + 1], s);
  else
    for (let r = e - i; r >= t; r -= i) s = _w(r / i | 0, n[r], n[r + 1], s);
  return s && fh(s, s.next) && (Wp(s), s = s.next), s;
}
function Yu(n, t) {
  if (!n) return n;
  t || (t = n);
  let e = n, i;
  do
    if (i = !1, !e.steiner && (fh(e, e.next) || An(e.prev, e, e.next) === 0)) {
      if (Wp(e), e = t = e.prev, e === e.next) break;
      i = !0;
    } else
      e = e.next;
  while (i || e !== t);
  return t;
}
function Yp(n, t, e, i, a, s, r) {
  if (!n) return;
  !r && s && w8(n, i, a, s);
  let l = n;
  for (; n.prev !== n.next; ) {
    const c = n.prev, f = n.next;
    if (s ? S8(n, i, a, s) : x8(n)) {
      t.push(c.i, n.i, f.i), Wp(n), n = f.next, l = f.next;
      continue;
    }
    if (n = f, n === l) {
      r ? r === 1 ? (n = M8(Yu(n), t), Yp(n, t, e, i, a, s, 2)) : r === 2 && b8(n, t, e, i, a, s) : Yp(Yu(n), t, e, i, a, s, 1);
      break;
    }
  }
}
function x8(n) {
  const t = n.prev, e = n, i = n.next;
  if (An(t, e, i) >= 0) return !1;
  const a = t.x, s = e.x, r = i.x, l = t.y, c = e.y, f = i.y, d = Math.min(a, s, r), p = Math.min(l, c, f), m = Math.max(a, s, r), g = Math.max(l, c, f);
  let y = i.next;
  for (; y !== t; ) {
    if (y.x >= d && y.x <= m && y.y >= p && y.y <= g && Bd(a, l, s, c, r, f, y.x, y.y) && An(y.prev, y, y.next) >= 0) return !1;
    y = y.next;
  }
  return !0;
}
function S8(n, t, e, i) {
  const a = n.prev, s = n, r = n.next;
  if (An(a, s, r) >= 0) return !1;
  const l = a.x, c = s.x, f = r.x, d = a.y, p = s.y, m = r.y, g = Math.min(l, c, f), y = Math.min(d, p, m), x = Math.max(l, c, f), M = Math.max(d, p, m), v = tb(g, y, t, e, i), S = tb(x, M, t, e, i);
  let E = n.prevZ, T = n.nextZ;
  for (; E && E.z >= v && T && T.z <= S; ) {
    if (E.x >= g && E.x <= x && E.y >= y && E.y <= M && E !== a && E !== r && Bd(l, d, c, p, f, m, E.x, E.y) && An(E.prev, E, E.next) >= 0 || (E = E.prevZ, T.x >= g && T.x <= x && T.y >= y && T.y <= M && T !== a && T !== r && Bd(l, d, c, p, f, m, T.x, T.y) && An(T.prev, T, T.next) >= 0)) return !1;
    T = T.nextZ;
  }
  for (; E && E.z >= v; ) {
    if (E.x >= g && E.x <= x && E.y >= y && E.y <= M && E !== a && E !== r && Bd(l, d, c, p, f, m, E.x, E.y) && An(E.prev, E, E.next) >= 0) return !1;
    E = E.prevZ;
  }
  for (; T && T.z <= S; ) {
    if (T.x >= g && T.x <= x && T.y >= y && T.y <= M && T !== a && T !== r && Bd(l, d, c, p, f, m, T.x, T.y) && An(T.prev, T, T.next) >= 0) return !1;
    T = T.nextZ;
  }
  return !0;
}
function M8(n, t) {
  let e = n;
  do {
    const i = e.prev, a = e.next.next;
    !fh(i, a) && xz(i, e, e.next, a) && kp(i, a) && kp(a, i) && (t.push(i.i, e.i, a.i), Wp(e), Wp(e.next), e = n = a), e = e.next;
  } while (e !== n);
  return Yu(e);
}
function b8(n, t, e, i, a, s) {
  let r = n;
  do {
    let l = r.next.next;
    for (; l !== r.prev; ) {
      if (r.i !== l.i && O8(r, l)) {
        let c = Sz(r, l);
        r = Yu(r, r.next), c = Yu(c, c.next), Yp(r, t, e, i, a, s, 0), Yp(c, t, e, i, a, s, 0);
        return;
      }
      l = l.next;
    }
    r = r.next;
  } while (r !== n);
}
function E8(n, t, e, i) {
  const a = [];
  for (let s = 0, r = t.length; s < r; s++) {
    const l = t[s] * i, c = s < r - 1 ? t[s + 1] * i : n.length, f = _z(n, l, c, i, !1);
    f === f.next && (f.steiner = !0), a.push(U8(f));
  }
  a.sort(T8);
  for (let s = 0; s < a.length; s++)
    e = A8(a[s], e);
  return e;
}
function T8(n, t) {
  let e = n.x - t.x;
  if (e === 0 && (e = n.y - t.y, e === 0)) {
    const i = (n.next.y - n.y) / (n.next.x - n.x), a = (t.next.y - t.y) / (t.next.x - t.x);
    e = i - a;
  }
  return e;
}
function A8(n, t) {
  const e = R8(n, t);
  if (!e)
    return t;
  const i = Sz(e, n);
  return Yu(i, i.next), Yu(e, e.next);
}
function R8(n, t) {
  let e = t;
  const i = n.x, a = n.y;
  let s = -1 / 0, r;
  if (fh(n, e)) return e;
  do {
    if (fh(n, e.next)) return e.next;
    if (a <= e.y && a >= e.next.y && e.next.y !== e.y) {
      const p = e.x + (a - e.y) * (e.next.x - e.x) / (e.next.y - e.y);
      if (p <= i && p > s && (s = p, r = e.x < e.next.x ? e : e.next, p === i))
        return r;
    }
    e = e.next;
  } while (e !== t);
  if (!r) return null;
  const l = r, c = r.x, f = r.y;
  let d = 1 / 0;
  e = r;
  do {
    if (i >= e.x && e.x >= c && i !== e.x && yz(a < f ? i : s, a, c, f, a < f ? s : i, a, e.x, e.y)) {
      const p = Math.abs(a - e.y) / (i - e.x);
      kp(e, n) && (p < d || p === d && (e.x > r.x || e.x === r.x && C8(r, e))) && (r = e, d = p);
    }
    e = e.next;
  } while (e !== l);
  return r;
}
function C8(n, t) {
  return An(n.prev, n, t.prev) < 0 && An(t.next, n, n.next) < 0;
}
function w8(n, t, e, i) {
  let a = n;
  do
    a.z === 0 && (a.z = tb(a.x, a.y, t, e, i)), a.prevZ = a.prev, a.nextZ = a.next, a = a.next;
  while (a !== n);
  a.prevZ.nextZ = null, a.prevZ = null, D8(a);
}
function D8(n) {
  let t, e = 1;
  do {
    let i = n, a;
    n = null;
    let s = null;
    for (t = 0; i; ) {
      t++;
      let r = i, l = 0;
      for (let f = 0; f < e && (l++, r = r.nextZ, !!r); f++)
        ;
      let c = e;
      for (; l > 0 || c > 0 && r; )
        l !== 0 && (c === 0 || !r || i.z <= r.z) ? (a = i, i = i.nextZ, l--) : (a = r, r = r.nextZ, c--), s ? s.nextZ = a : n = a, a.prevZ = s, s = a;
      i = r;
    }
    s.nextZ = null, e *= 2;
  } while (t > 1);
  return n;
}
function tb(n, t, e, i, a) {
  return n = (n - e) * a | 0, t = (t - i) * a | 0, n = (n | n << 8) & 16711935, n = (n | n << 4) & 252645135, n = (n | n << 2) & 858993459, n = (n | n << 1) & 1431655765, t = (t | t << 8) & 16711935, t = (t | t << 4) & 252645135, t = (t | t << 2) & 858993459, t = (t | t << 1) & 1431655765, n | t << 1;
}
function U8(n) {
  let t = n, e = n;
  do
    (t.x < e.x || t.x === e.x && t.y < e.y) && (e = t), t = t.next;
  while (t !== n);
  return e;
}
function yz(n, t, e, i, a, s, r, l) {
  return (a - r) * (t - l) >= (n - r) * (s - l) && (n - r) * (i - l) >= (e - r) * (t - l) && (e - r) * (s - l) >= (a - r) * (i - l);
}
function Bd(n, t, e, i, a, s, r, l) {
  return !(n === r && t === l) && yz(n, t, e, i, a, s, r, l);
}
function O8(n, t) {
  return n.next.i !== t.i && n.prev.i !== t.i && !N8(n, t) && // dones't intersect other edges
  (kp(n, t) && kp(t, n) && L8(n, t) && // locally visible
  (An(n.prev, n, t.prev) || An(n, t.prev, t)) || // does not create opposite-facing sectors
  fh(n, t) && An(n.prev, n, n.next) > 0 && An(t.prev, t, t.next) > 0);
}
function An(n, t, e) {
  return (t.y - n.y) * (e.x - t.x) - (t.x - n.x) * (e.y - t.y);
}
function fh(n, t) {
  return n.x === t.x && n.y === t.y;
}
function xz(n, t, e, i) {
  const a = u0(An(n, t, e)), s = u0(An(n, t, i)), r = u0(An(e, i, n)), l = u0(An(e, i, t));
  return !!(a !== s && r !== l || a === 0 && l0(n, e, t) || s === 0 && l0(n, i, t) || r === 0 && l0(e, n, i) || l === 0 && l0(e, t, i));
}
function l0(n, t, e) {
  return t.x <= Math.max(n.x, e.x) && t.x >= Math.min(n.x, e.x) && t.y <= Math.max(n.y, e.y) && t.y >= Math.min(n.y, e.y);
}
function u0(n) {
  return n > 0 ? 1 : n < 0 ? -1 : 0;
}
function N8(n, t) {
  let e = n;
  do {
    if (e.i !== n.i && e.next.i !== n.i && e.i !== t.i && e.next.i !== t.i && xz(e, e.next, n, t)) return !0;
    e = e.next;
  } while (e !== n);
  return !1;
}
function kp(n, t) {
  return An(n.prev, n, n.next) < 0 ? An(n, t, n.next) >= 0 && An(n, n.prev, t) >= 0 : An(n, t, n.prev) < 0 || An(n, n.next, t) < 0;
}
function L8(n, t) {
  let e = n, i = !1;
  const a = (n.x + t.x) / 2, s = (n.y + t.y) / 2;
  do
    e.y > s != e.next.y > s && e.next.y !== e.y && a < (e.next.x - e.x) * (s - e.y) / (e.next.y - e.y) + e.x && (i = !i), e = e.next;
  while (e !== n);
  return i;
}
function Sz(n, t) {
  const e = eb(n.i, n.x, n.y), i = eb(t.i, t.x, t.y), a = n.next, s = t.prev;
  return n.next = t, t.prev = n, e.next = a, a.prev = e, i.next = e, e.prev = i, s.next = i, i.prev = s, i;
}
function _w(n, t, e, i) {
  const a = eb(n, t, e);
  return i ? (a.next = i.next, a.prev = i, i.next.prev = a, i.next = a) : (a.prev = a, a.next = a), a;
}
function Wp(n) {
  n.next.prev = n.prev, n.prev.next = n.next, n.prevZ && (n.prevZ.nextZ = n.nextZ), n.nextZ && (n.nextZ.prevZ = n.prevZ);
}
function eb(n, t, e) {
  return {
    i: n,
    // vertex index in coordinates array
    x: t,
    y: e,
    // vertex coordinates
    prev: null,
    // previous and next vertex nodes in a polygon ring
    next: null,
    z: 0,
    // z-order curve value
    prevZ: null,
    // previous and next nodes in z-order
    nextZ: null,
    steiner: !1
    // indicates whether this is a steiner point
  };
}
function z8(n, t, e, i) {
  let a = 0;
  for (let s = t, r = e - i; s < e; s += i)
    a += (n[r] - n[s]) * (n[s + 1] + n[r + 1]), r = s;
  return a;
}
class B8 {
  /**
   * Triangulates the given shape definition by returning an array of triangles.
   *
   * @param {Array<number>} data - An array with 2D points.
   * @param {Array<number>} holeIndices - An array with indices defining holes.
   * @param {number} [dim=2] - The number of coordinates per vertex in the input array.
   * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers
   * representing vertex indices.
   */
  static triangulate(t, e, i = 2) {
    return y8(t, e, i);
  }
}
class Is {
  /**
   * Calculate area of a ( 2D ) contour polygon.
   *
   * @param {Array<Vector2>} contour - An array of 2D points.
   * @return {number} The area.
   */
  static area(t) {
    const e = t.length;
    let i = 0;
    for (let a = e - 1, s = 0; s < e; a = s++)
      i += t[a].x * t[s].y - t[s].x * t[a].y;
    return i * 0.5;
  }
  /**
   * Returns `true` if the given contour uses a clockwise winding order.
   *
   * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.
   * @return {boolean} Whether the given contour uses a clockwise winding order or not.
   */
  static isClockWise(t) {
    return Is.area(t) < 0;
  }
  /**
   * Triangulates the given shape definition.
   *
   * @param {Array<Vector2>} contour - An array of 2D points defining the contour.
   * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.
   * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.
   */
  static triangulateShape(t, e) {
    const i = [], a = [], s = [];
    yw(t), xw(i, t);
    let r = t.length;
    e.forEach(yw);
    for (let c = 0; c < e.length; c++)
      a.push(r), r += e[c].length, xw(i, e[c]);
    const l = B8.triangulate(i, a);
    for (let c = 0; c < l.length; c += 3)
      s.push(l.slice(c, c + 3));
    return s;
  }
}
function yw(n) {
  const t = n.length;
  t > 2 && n[t - 1].equals(n[0]) && n.pop();
}
function xw(n, t) {
  for (let e = 0; e < t.length; e++)
    n.push(t[e].x), n.push(t[e].y);
}
class cy extends ye {
  /**
   * Constructs a new extrude geometry.
   *
   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.
   * @param {ExtrudeGeometry~Options} [options] - The extrude settings.
   */
  constructor(t = new Pu([new ft(0.5, 0.5), new ft(-0.5, 0.5), new ft(-0.5, -0.5), new ft(0.5, -0.5)]), e = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: t,
      options: e
    }, t = Array.isArray(t) ? t : [t];
    const i = this, a = [], s = [];
    for (let l = 0, c = t.length; l < c; l++) {
      const f = t[l];
      r(f);
    }
    this.setAttribute("position", new Zt(a, 3)), this.setAttribute("uv", new Zt(s, 2)), this.computeVertexNormals();
    function r(l) {
      const c = [], f = e.curveSegments !== void 0 ? e.curveSegments : 12, d = e.steps !== void 0 ? e.steps : 1, p = e.depth !== void 0 ? e.depth : 1;
      let m = e.bevelEnabled !== void 0 ? e.bevelEnabled : !0, g = e.bevelThickness !== void 0 ? e.bevelThickness : 0.2, y = e.bevelSize !== void 0 ? e.bevelSize : g - 0.1, x = e.bevelOffset !== void 0 ? e.bevelOffset : 0, M = e.bevelSegments !== void 0 ? e.bevelSegments : 3;
      const v = e.extrudePath, S = e.UVGenerator !== void 0 ? e.UVGenerator : P8;
      let E, T = !1, w, D, U, O;
      v && (E = v.getSpacedPoints(d), T = !0, m = !1, w = v.computeFrenetFrames(d, !1), D = new H(), U = new H(), O = new H()), m || (M = 0, g = 0, y = 0, x = 0);
      const R = l.extractPoints(f);
      let C = R.shape;
      const B = R.holes;
      if (!Is.isClockWise(C)) {
        C = C.reverse();
        for (let I = 0, Ct = B.length; I < Ct; I++) {
          const yt = B[I];
          Is.isClockWise(yt) && (B[I] = yt.reverse());
        }
      }
      function V(I) {
        const yt = 10000000000000001e-36;
        let Et = I[0];
        for (let ct = 1; ct <= I.length; ct++) {
          const Ht = ct % I.length, _t = I[Ht], It = _t.x - Et.x, he = _t.y - Et.y, F = It * It + he * he, N = Math.max(
            Math.abs(_t.x),
            Math.abs(_t.y),
            Math.abs(Et.x),
            Math.abs(Et.y)
          ), tt = yt * N * N;
          if (F <= tt) {
            I.splice(Ht, 1), ct--;
            continue;
          }
          Et = _t;
        }
      }
      V(C), B.forEach(V);
      const Q = B.length, J = C;
      for (let I = 0; I < Q; I++) {
        const Ct = B[I];
        C = C.concat(Ct);
      }
      function P(I, Ct, yt) {
        return Ct || console.error("THREE.ExtrudeGeometry: vec does not exist"), I.clone().addScaledVector(Ct, yt);
      }
      const q = C.length;
      function G(I, Ct, yt) {
        let Et, ct, Ht;
        const _t = I.x - Ct.x, It = I.y - Ct.y, he = yt.x - I.x, F = yt.y - I.y, N = _t * _t + It * It, tt = _t * F - It * he;
        if (Math.abs(tt) > Number.EPSILON) {
          const rt = Math.sqrt(N), gt = Math.sqrt(he * he + F * F), ot = Ct.x - It / rt, Kt = Ct.y + _t / rt, Dt = yt.x - F / gt, qt = yt.y + he / gt, jt = ((Dt - ot) * F - (qt - Kt) * he) / (_t * F - It * he);
          Et = ot + _t * jt - I.x, ct = Kt + It * jt - I.y;
          const pt = Et * Et + ct * ct;
          if (pt <= 2)
            return new ft(Et, ct);
          Ht = Math.sqrt(pt / 2);
        } else {
          let rt = !1;
          _t > Number.EPSILON ? he > Number.EPSILON && (rt = !0) : _t < -Number.EPSILON ? he < -Number.EPSILON && (rt = !0) : Math.sign(It) === Math.sign(F) && (rt = !0), rt ? (Et = -It, ct = _t, Ht = Math.sqrt(N)) : (Et = _t, ct = It, Ht = Math.sqrt(N / 2));
        }
        return new ft(Et / Ht, ct / Ht);
      }
      const it = [];
      for (let I = 0, Ct = J.length, yt = Ct - 1, Et = I + 1; I < Ct; I++, yt++, Et++)
        yt === Ct && (yt = 0), Et === Ct && (Et = 0), it[I] = G(J[I], J[yt], J[Et]);
      const lt = [];
      let mt, Rt = it.concat();
      for (let I = 0, Ct = Q; I < Ct; I++) {
        const yt = B[I];
        mt = [];
        for (let Et = 0, ct = yt.length, Ht = ct - 1, _t = Et + 1; Et < ct; Et++, Ht++, _t++)
          Ht === ct && (Ht = 0), _t === ct && (_t = 0), mt[Et] = G(yt[Et], yt[Ht], yt[_t]);
        lt.push(mt), Rt = Rt.concat(mt);
      }
      let Qt;
      if (M === 0)
        Qt = Is.triangulateShape(J, B);
      else {
        const I = [], Ct = [];
        for (let yt = 0; yt < M; yt++) {
          const Et = yt / M, ct = g * Math.cos(Et * Math.PI / 2), Ht = y * Math.sin(Et * Math.PI / 2) + x;
          for (let _t = 0, It = J.length; _t < It; _t++) {
            const he = P(J[_t], it[_t], Ht);
            pe(he.x, he.y, -ct), Et === 0 && I.push(he);
          }
          for (let _t = 0, It = Q; _t < It; _t++) {
            const he = B[_t];
            mt = lt[_t];
            const F = [];
            for (let N = 0, tt = he.length; N < tt; N++) {
              const rt = P(he[N], mt[N], Ht);
              pe(rt.x, rt.y, -ct), Et === 0 && F.push(rt);
            }
            Et === 0 && Ct.push(F);
          }
        }
        Qt = Is.triangulateShape(I, Ct);
      }
      const $ = Qt.length, ht = y + x;
      for (let I = 0; I < q; I++) {
        const Ct = m ? P(C[I], Rt[I], ht) : C[I];
        T ? (U.copy(w.normals[0]).multiplyScalar(Ct.x), D.copy(w.binormals[0]).multiplyScalar(Ct.y), O.copy(E[0]).add(U).add(D), pe(O.x, O.y, O.z)) : pe(Ct.x, Ct.y, 0);
      }
      for (let I = 1; I <= d; I++)
        for (let Ct = 0; Ct < q; Ct++) {
          const yt = m ? P(C[Ct], Rt[Ct], ht) : C[Ct];
          T ? (U.copy(w.normals[I]).multiplyScalar(yt.x), D.copy(w.binormals[I]).multiplyScalar(yt.y), O.copy(E[I]).add(U).add(D), pe(O.x, O.y, O.z)) : pe(yt.x, yt.y, p / d * I);
        }
      for (let I = M - 1; I >= 0; I--) {
        const Ct = I / M, yt = g * Math.cos(Ct * Math.PI / 2), Et = y * Math.sin(Ct * Math.PI / 2) + x;
        for (let ct = 0, Ht = J.length; ct < Ht; ct++) {
          const _t = P(J[ct], it[ct], Et);
          pe(_t.x, _t.y, p + yt);
        }
        for (let ct = 0, Ht = B.length; ct < Ht; ct++) {
          const _t = B[ct];
          mt = lt[ct];
          for (let It = 0, he = _t.length; It < he; It++) {
            const F = P(_t[It], mt[It], Et);
            T ? pe(F.x, F.y + E[d - 1].y, E[d - 1].x + yt) : pe(F.x, F.y, p + yt);
          }
        }
      }
      kt(), Ot();
      function kt() {
        const I = a.length / 3;
        if (m) {
          let Ct = 0, yt = q * Ct;
          for (let Et = 0; Et < $; Et++) {
            const ct = Qt[Et];
            $t(ct[2] + yt, ct[1] + yt, ct[0] + yt);
          }
          Ct = d + M * 2, yt = q * Ct;
          for (let Et = 0; Et < $; Et++) {
            const ct = Qt[Et];
            $t(ct[0] + yt, ct[1] + yt, ct[2] + yt);
          }
        } else {
          for (let Ct = 0; Ct < $; Ct++) {
            const yt = Qt[Ct];
            $t(yt[2], yt[1], yt[0]);
          }
          for (let Ct = 0; Ct < $; Ct++) {
            const yt = Qt[Ct];
            $t(yt[0] + q * d, yt[1] + q * d, yt[2] + q * d);
          }
        }
        i.addGroup(I, a.length / 3 - I, 0);
      }
      function Ot() {
        const I = a.length / 3;
        let Ct = 0;
        Xt(J, Ct), Ct += J.length;
        for (let yt = 0, Et = B.length; yt < Et; yt++) {
          const ct = B[yt];
          Xt(ct, Ct), Ct += ct.length;
        }
        i.addGroup(I, a.length / 3 - I, 1);
      }
      function Xt(I, Ct) {
        let yt = I.length;
        for (; --yt >= 0; ) {
          const Et = yt;
          let ct = yt - 1;
          ct < 0 && (ct = I.length - 1);
          for (let Ht = 0, _t = d + M * 2; Ht < _t; Ht++) {
            const It = q * Ht, he = q * (Ht + 1), F = Ct + Et + It, N = Ct + ct + It, tt = Ct + ct + he, rt = Ct + Et + he;
            qe(F, N, tt, rt);
          }
        }
      }
      function pe(I, Ct, yt) {
        c.push(I), c.push(Ct), c.push(yt);
      }
      function $t(I, Ct, yt) {
        Me(I), Me(Ct), Me(yt);
        const Et = a.length / 3, ct = S.generateTopUV(i, a, Et - 3, Et - 2, Et - 1);
        ce(ct[0]), ce(ct[1]), ce(ct[2]);
      }
      function qe(I, Ct, yt, Et) {
        Me(I), Me(Ct), Me(Et), Me(Ct), Me(yt), Me(Et);
        const ct = a.length / 3, Ht = S.generateSideWallUV(i, a, ct - 6, ct - 3, ct - 2, ct - 1);
        ce(Ht[0]), ce(Ht[1]), ce(Ht[3]), ce(Ht[1]), ce(Ht[2]), ce(Ht[3]);
      }
      function Me(I) {
        a.push(c[I * 3 + 0]), a.push(c[I * 3 + 1]), a.push(c[I * 3 + 2]);
      }
      function ce(I) {
        s.push(I.x), s.push(I.y);
      }
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  toJSON() {
    const t = super.toJSON(), e = this.parameters.shapes, i = this.parameters.options;
    return I8(e, i, t);
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @param {Array<Shape>} shapes - An array of shapes.
   * @return {ExtrudeGeometry} A new instance.
   */
  static fromJSON(t, e) {
    const i = [];
    for (let s = 0, r = t.shapes.length; s < r; s++) {
      const l = e[t.shapes[s]];
      i.push(l);
    }
    const a = t.options.extrudePath;
    return a !== void 0 && (t.options.extrudePath = new d_[a.type]().fromJSON(a)), new cy(i, t.options);
  }
}
const P8 = {
  generateTopUV: function(n, t, e, i, a) {
    const s = t[e * 3], r = t[e * 3 + 1], l = t[i * 3], c = t[i * 3 + 1], f = t[a * 3], d = t[a * 3 + 1];
    return [
      new ft(s, r),
      new ft(l, c),
      new ft(f, d)
    ];
  },
  generateSideWallUV: function(n, t, e, i, a, s) {
    const r = t[e * 3], l = t[e * 3 + 1], c = t[e * 3 + 2], f = t[i * 3], d = t[i * 3 + 1], p = t[i * 3 + 2], m = t[a * 3], g = t[a * 3 + 1], y = t[a * 3 + 2], x = t[s * 3], M = t[s * 3 + 1], v = t[s * 3 + 2];
    return Math.abs(l - d) < Math.abs(r - f) ? [
      new ft(r, 1 - c),
      new ft(f, 1 - p),
      new ft(m, 1 - y),
      new ft(x, 1 - v)
    ] : [
      new ft(l, 1 - c),
      new ft(d, 1 - p),
      new ft(g, 1 - y),
      new ft(M, 1 - v)
    ];
  }
};
function I8(n, t, e) {
  if (e.shapes = [], Array.isArray(n))
    for (let i = 0, a = n.length; i < a; i++) {
      const s = n[i];
      e.shapes.push(s.uuid);
    }
  else
    e.shapes.push(n.uuid);
  return e.options = Object.assign({}, t), t.extrudePath !== void 0 && (e.options.extrudePath = t.extrudePath.toJSON()), e;
}
class fy extends El {
  /**
   * Constructs a new icosahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the icosahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.
   */
  constructor(t = 1, e = 0) {
    const i = (1 + Math.sqrt(5)) / 2, a = [
      -1,
      i,
      0,
      1,
      i,
      0,
      -1,
      -i,
      0,
      1,
      -i,
      0,
      0,
      -1,
      i,
      0,
      1,
      i,
      0,
      -1,
      -i,
      0,
      1,
      -i,
      i,
      0,
      -1,
      i,
      0,
      1,
      -i,
      0,
      -1,
      -i,
      0,
      1
    ], s = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(a, s, t, e), this.type = "IcosahedronGeometry", this.parameters = {
      radius: t,
      detail: e
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {IcosahedronGeometry} A new instance.
   */
  static fromJSON(t) {
    return new fy(t.radius, t.detail);
  }
}
class hy extends ye {
  /**
   * Constructs a new lathe geometry.
   *
   * @param {Array<Vector2|Vector3>} [points] - An array of points in 2D space. The x-coordinate of each point
   * must be greater than zero.
   * @param {number} [segments=12] - The number of circumference segments to generate.
   * @param {number} [phiStart=0] - The starting angle in radians.
   * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a
   * closed lathe, less than 2PI is a portion.
   */
  constructor(t = [new ft(0, -0.5), new ft(0.5, 0), new ft(0, 0.5)], e = 12, i = 0, a = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: t,
      segments: e,
      phiStart: i,
      phiLength: a
    }, e = Math.floor(e), a = me(a, 0, Math.PI * 2);
    const s = [], r = [], l = [], c = [], f = [], d = 1 / e, p = new H(), m = new ft(), g = new H(), y = new H(), x = new H();
    let M = 0, v = 0;
    for (let S = 0; S <= t.length - 1; S++)
      switch (S) {
        case 0:
          M = t[S + 1].x - t[S].x, v = t[S + 1].y - t[S].y, g.x = v * 1, g.y = -M, g.z = v * 0, x.copy(g), g.normalize(), c.push(g.x, g.y, g.z);
          break;
        case t.length - 1:
          c.push(x.x, x.y, x.z);
          break;
        default:
          M = t[S + 1].x - t[S].x, v = t[S + 1].y - t[S].y, g.x = v * 1, g.y = -M, g.z = v * 0, y.copy(g), g.x += x.x, g.y += x.y, g.z += x.z, g.normalize(), c.push(g.x, g.y, g.z), x.copy(y);
      }
    for (let S = 0; S <= e; S++) {
      const E = i + S * d * a, T = Math.sin(E), w = Math.cos(E);
      for (let D = 0; D <= t.length - 1; D++) {
        p.x = t[D].x * T, p.y = t[D].y, p.z = t[D].x * w, r.push(p.x, p.y, p.z), m.x = S / e, m.y = D / (t.length - 1), l.push(m.x, m.y);
        const U = c[3 * D + 0] * T, O = c[3 * D + 1], R = c[3 * D + 0] * w;
        f.push(U, O, R);
      }
    }
    for (let S = 0; S < e; S++)
      for (let E = 0; E < t.length - 1; E++) {
        const T = E + S * t.length, w = T, D = T + t.length, U = T + t.length + 1, O = T + 1;
        s.push(w, D, O), s.push(U, O, D);
      }
    this.setIndex(s), this.setAttribute("position", new Zt(r, 3)), this.setAttribute("uv", new Zt(l, 2)), this.setAttribute("normal", new Zt(f, 3));
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {LatheGeometry} A new instance.
   */
  static fromJSON(t) {
    return new hy(t.points, t.segments, t.phiStart, t.phiLength);
  }
}
class Mm extends El {
  /**
   * Constructs a new octahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the octahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.
   */
  constructor(t = 1, e = 0) {
    const i = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], a = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(i, a, t, e), this.type = "OctahedronGeometry", this.parameters = {
      radius: t,
      detail: e
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {OctahedronGeometry} A new instance.
   */
  static fromJSON(t) {
    return new Mm(t.radius, t.detail);
  }
}
class Th extends ye {
  /**
   * Constructs a new plane geometry.
   *
   * @param {number} [width=1] - The width along the X axis.
   * @param {number} [height=1] - The height along the Y axis
   * @param {number} [widthSegments=1] - The number of segments along the X axis.
   * @param {number} [heightSegments=1] - The number of segments along the Y axis.
   */
  constructor(t = 1, e = 1, i = 1, a = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: t,
      height: e,
      widthSegments: i,
      heightSegments: a
    };
    const s = t / 2, r = e / 2, l = Math.floor(i), c = Math.floor(a), f = l + 1, d = c + 1, p = t / l, m = e / c, g = [], y = [], x = [], M = [];
    for (let v = 0; v < d; v++) {
      const S = v * m - r;
      for (let E = 0; E < f; E++) {
        const T = E * p - s;
        y.push(T, -S, 0), x.push(0, 0, 1), M.push(E / l), M.push(1 - v / c);
      }
    }
    for (let v = 0; v < c; v++)
      for (let S = 0; S < l; S++) {
        const E = S + f * v, T = S + f * (v + 1), w = S + 1 + f * (v + 1), D = S + 1 + f * v;
        g.push(E, T, D), g.push(T, w, D);
      }
    this.setIndex(g), this.setAttribute("position", new Zt(y, 3)), this.setAttribute("normal", new Zt(x, 3)), this.setAttribute("uv", new Zt(M, 2));
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {PlaneGeometry} A new instance.
   */
  static fromJSON(t) {
    return new Th(t.width, t.height, t.widthSegments, t.heightSegments);
  }
}
class dy extends ye {
  /**
   * Constructs a new ring geometry.
   *
   * @param {number} [innerRadius=0.5] - The inner radius of the ring.
   * @param {number} [outerRadius=1] - The outer radius of the ring.
   * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.
   * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.
   * @param {number} [thetaStart=0] - Starting angle in radians.
   * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.
   */
  constructor(t = 0.5, e = 1, i = 32, a = 1, s = 0, r = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: t,
      outerRadius: e,
      thetaSegments: i,
      phiSegments: a,
      thetaStart: s,
      thetaLength: r
    }, i = Math.max(3, i), a = Math.max(1, a);
    const l = [], c = [], f = [], d = [];
    let p = t;
    const m = (e - t) / a, g = new H(), y = new ft();
    for (let x = 0; x <= a; x++) {
      for (let M = 0; M <= i; M++) {
        const v = s + M / i * r;
        g.x = p * Math.cos(v), g.y = p * Math.sin(v), c.push(g.x, g.y, g.z), f.push(0, 0, 1), y.x = (g.x / e + 1) / 2, y.y = (g.y / e + 1) / 2, d.push(y.x, y.y);
      }
      p += m;
    }
    for (let x = 0; x < a; x++) {
      const M = x * (i + 1);
      for (let v = 0; v < i; v++) {
        const S = v + M, E = S, T = S + i + 1, w = S + i + 2, D = S + 1;
        l.push(E, T, D), l.push(T, w, D);
      }
    }
    this.setIndex(l), this.setAttribute("position", new Zt(c, 3)), this.setAttribute("normal", new Zt(f, 3)), this.setAttribute("uv", new Zt(d, 2));
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {RingGeometry} A new instance.
   */
  static fromJSON(t) {
    return new dy(t.innerRadius, t.outerRadius, t.thetaSegments, t.phiSegments, t.thetaStart, t.thetaLength);
  }
}
class py extends ye {
  /**
   * Constructs a new shape geometry.
   *
   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.
   * @param {number} [curveSegments=12] - Number of segments per shape.
   */
  constructor(t = new Pu([new ft(0, 0.5), new ft(-0.5, -0.5), new ft(0.5, -0.5)]), e = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: t,
      curveSegments: e
    };
    const i = [], a = [], s = [], r = [];
    let l = 0, c = 0;
    if (Array.isArray(t) === !1)
      f(t);
    else
      for (let d = 0; d < t.length; d++)
        f(t[d]), this.addGroup(l, c, d), l += c, c = 0;
    this.setIndex(i), this.setAttribute("position", new Zt(a, 3)), this.setAttribute("normal", new Zt(s, 3)), this.setAttribute("uv", new Zt(r, 2));
    function f(d) {
      const p = a.length / 3, m = d.extractPoints(e);
      let g = m.shape;
      const y = m.holes;
      Is.isClockWise(g) === !1 && (g = g.reverse());
      for (let M = 0, v = y.length; M < v; M++) {
        const S = y[M];
        Is.isClockWise(S) === !0 && (y[M] = S.reverse());
      }
      const x = Is.triangulateShape(g, y);
      for (let M = 0, v = y.length; M < v; M++) {
        const S = y[M];
        g = g.concat(S);
      }
      for (let M = 0, v = g.length; M < v; M++) {
        const S = g[M];
        a.push(S.x, S.y, 0), s.push(0, 0, 1), r.push(S.x, S.y);
      }
      for (let M = 0, v = x.length; M < v; M++) {
        const S = x[M], E = S[0] + p, T = S[1] + p, w = S[2] + p;
        i.push(E, T, w), c += 3;
      }
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  toJSON() {
    const t = super.toJSON(), e = this.parameters.shapes;
    return H8(e, t);
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @param {Array<Shape>} shapes - An array of shapes.
   * @return {ShapeGeometry} A new instance.
   */
  static fromJSON(t, e) {
    const i = [];
    for (let a = 0, s = t.shapes.length; a < s; a++) {
      const r = e[t.shapes[a]];
      i.push(r);
    }
    return new py(i, t.curveSegments);
  }
}
function H8(n, t) {
  if (t.shapes = [], Array.isArray(n))
    for (let e = 0, i = n.length; e < i; e++) {
      const a = n[e];
      t.shapes.push(a.uuid);
    }
  else
    t.shapes.push(n.uuid);
  return t;
}
class bm extends ye {
  /**
   * Constructs a new sphere geometry.
   *
   * @param {number} [radius=1] - The sphere radius.
   * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.
   * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.
   * @param {number} [phiStart=0] - The horizontal starting angle in radians.
   * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.
   * @param {number} [thetaStart=0] - The vertical starting angle in radians.
   * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.
   */
  constructor(t = 1, e = 32, i = 16, a = 0, s = Math.PI * 2, r = 0, l = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: t,
      widthSegments: e,
      heightSegments: i,
      phiStart: a,
      phiLength: s,
      thetaStart: r,
      thetaLength: l
    }, e = Math.max(3, Math.floor(e)), i = Math.max(2, Math.floor(i));
    const c = Math.min(r + l, Math.PI);
    let f = 0;
    const d = [], p = new H(), m = new H(), g = [], y = [], x = [], M = [];
    for (let v = 0; v <= i; v++) {
      const S = [], E = v / i;
      let T = 0;
      v === 0 && r === 0 ? T = 0.5 / e : v === i && c === Math.PI && (T = -0.5 / e);
      for (let w = 0; w <= e; w++) {
        const D = w / e;
        p.x = -t * Math.cos(a + D * s) * Math.sin(r + E * l), p.y = t * Math.cos(r + E * l), p.z = t * Math.sin(a + D * s) * Math.sin(r + E * l), y.push(p.x, p.y, p.z), m.copy(p).normalize(), x.push(m.x, m.y, m.z), M.push(D + T, 1 - E), S.push(f++);
      }
      d.push(S);
    }
    for (let v = 0; v < i; v++)
      for (let S = 0; S < e; S++) {
        const E = d[v][S + 1], T = d[v][S], w = d[v + 1][S], D = d[v + 1][S + 1];
        (v !== 0 || r > 0) && g.push(E, T, D), (v !== i - 1 || c < Math.PI) && g.push(T, w, D);
      }
    this.setIndex(g), this.setAttribute("position", new Zt(y, 3)), this.setAttribute("normal", new Zt(x, 3)), this.setAttribute("uv", new Zt(M, 2));
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {SphereGeometry} A new instance.
   */
  static fromJSON(t) {
    return new bm(t.radius, t.widthSegments, t.heightSegments, t.phiStart, t.phiLength, t.thetaStart, t.thetaLength);
  }
}
class my extends El {
  /**
   * Constructs a new tetrahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the tetrahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.
   */
  constructor(t = 1, e = 0) {
    const i = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], a = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(i, a, t, e), this.type = "TetrahedronGeometry", this.parameters = {
      radius: t,
      detail: e
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TetrahedronGeometry} A new instance.
   */
  static fromJSON(t) {
    return new my(t.radius, t.detail);
  }
}
class gy extends ye {
  /**
   * Constructs a new torus geometry.
   *
   * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.
   * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.
   * @param {number} [radialSegments=12] - The number of radial segments.
   * @param {number} [tubularSegments=48] - The number of tubular segments.
   * @param {number} [arc=Math.PI*2] - Central angle in radians.
   */
  constructor(t = 1, e = 0.4, i = 12, a = 48, s = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: t,
      tube: e,
      radialSegments: i,
      tubularSegments: a,
      arc: s
    }, i = Math.floor(i), a = Math.floor(a);
    const r = [], l = [], c = [], f = [], d = new H(), p = new H(), m = new H();
    for (let g = 0; g <= i; g++)
      for (let y = 0; y <= a; y++) {
        const x = y / a * s, M = g / i * Math.PI * 2;
        p.x = (t + e * Math.cos(M)) * Math.cos(x), p.y = (t + e * Math.cos(M)) * Math.sin(x), p.z = e * Math.sin(M), l.push(p.x, p.y, p.z), d.x = t * Math.cos(x), d.y = t * Math.sin(x), m.subVectors(p, d).normalize(), c.push(m.x, m.y, m.z), f.push(y / a), f.push(g / i);
      }
    for (let g = 1; g <= i; g++)
      for (let y = 1; y <= a; y++) {
        const x = (a + 1) * g + y - 1, M = (a + 1) * (g - 1) + y - 1, v = (a + 1) * (g - 1) + y, S = (a + 1) * g + y;
        r.push(x, M, S), r.push(M, v, S);
      }
    this.setIndex(r), this.setAttribute("position", new Zt(l, 3)), this.setAttribute("normal", new Zt(c, 3)), this.setAttribute("uv", new Zt(f, 2));
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TorusGeometry} A new instance.
   */
  static fromJSON(t) {
    return new gy(t.radius, t.tube, t.radialSegments, t.tubularSegments, t.arc);
  }
}
class vy extends ye {
  /**
   * Constructs a new torus knot geometry.
   *
   * @param {number} [radius=1] - Radius of the torus knot.
   * @param {number} [tube=0.4] - Radius of the tube.
   * @param {number} [tubularSegments=64] - The number of tubular segments.
   * @param {number} [radialSegments=8] - The number of radial segments.
   * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.
   * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.
   */
  constructor(t = 1, e = 0.4, i = 64, a = 8, s = 2, r = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: t,
      tube: e,
      tubularSegments: i,
      radialSegments: a,
      p: s,
      q: r
    }, i = Math.floor(i), a = Math.floor(a);
    const l = [], c = [], f = [], d = [], p = new H(), m = new H(), g = new H(), y = new H(), x = new H(), M = new H(), v = new H();
    for (let E = 0; E <= i; ++E) {
      const T = E / i * s * Math.PI * 2;
      S(T, s, r, t, g), S(T + 0.01, s, r, t, y), M.subVectors(y, g), v.addVectors(y, g), x.crossVectors(M, v), v.crossVectors(x, M), x.normalize(), v.normalize();
      for (let w = 0; w <= a; ++w) {
        const D = w / a * Math.PI * 2, U = -e * Math.cos(D), O = e * Math.sin(D);
        p.x = g.x + (U * v.x + O * x.x), p.y = g.y + (U * v.y + O * x.y), p.z = g.z + (U * v.z + O * x.z), c.push(p.x, p.y, p.z), m.subVectors(p, g).normalize(), f.push(m.x, m.y, m.z), d.push(E / i), d.push(w / a);
      }
    }
    for (let E = 1; E <= i; E++)
      for (let T = 1; T <= a; T++) {
        const w = (a + 1) * (E - 1) + (T - 1), D = (a + 1) * E + (T - 1), U = (a + 1) * E + T, O = (a + 1) * (E - 1) + T;
        l.push(w, D, O), l.push(D, U, O);
      }
    this.setIndex(l), this.setAttribute("position", new Zt(c, 3)), this.setAttribute("normal", new Zt(f, 3)), this.setAttribute("uv", new Zt(d, 2));
    function S(E, T, w, D, U) {
      const O = Math.cos(E), R = Math.sin(E), C = w / T * E, B = Math.cos(C);
      U.x = D * (2 + B) * 0.5 * O, U.y = D * (2 + B) * R * 0.5, U.z = D * Math.sin(C) * 0.5;
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TorusKnotGeometry} A new instance.
   */
  static fromJSON(t) {
    return new vy(t.radius, t.tube, t.tubularSegments, t.radialSegments, t.p, t.q);
  }
}
class _y extends ye {
  /**
   * Constructs a new tube geometry.
   *
   * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.
   * @param {number} [tubularSegments=64] - The number of segments that make up the tube.
   * @param {number} [radius=1] -The radius of the tube.
   * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.
   * @param {boolean} [closed=false] - Whether the tube is closed or not.
   */
  constructor(t = new hT(new H(-1, -1, 0), new H(-1, 1, 0), new H(1, 1, 0)), e = 64, i = 1, a = 8, s = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: t,
      tubularSegments: e,
      radius: i,
      radialSegments: a,
      closed: s
    };
    const r = t.computeFrenetFrames(e, s);
    this.tangents = r.tangents, this.normals = r.normals, this.binormals = r.binormals;
    const l = new H(), c = new H(), f = new ft();
    let d = new H();
    const p = [], m = [], g = [], y = [];
    x(), this.setIndex(y), this.setAttribute("position", new Zt(p, 3)), this.setAttribute("normal", new Zt(m, 3)), this.setAttribute("uv", new Zt(g, 2));
    function x() {
      for (let E = 0; E < e; E++)
        M(E);
      M(s === !1 ? e : 0), S(), v();
    }
    function M(E) {
      d = t.getPointAt(E / e, d);
      const T = r.normals[E], w = r.binormals[E];
      for (let D = 0; D <= a; D++) {
        const U = D / a * Math.PI * 2, O = Math.sin(U), R = -Math.cos(U);
        c.x = R * T.x + O * w.x, c.y = R * T.y + O * w.y, c.z = R * T.z + O * w.z, c.normalize(), m.push(c.x, c.y, c.z), l.x = d.x + i * c.x, l.y = d.y + i * c.y, l.z = d.z + i * c.z, p.push(l.x, l.y, l.z);
      }
    }
    function v() {
      for (let E = 1; E <= e; E++)
        for (let T = 1; T <= a; T++) {
          const w = (a + 1) * (E - 1) + (T - 1), D = (a + 1) * E + (T - 1), U = (a + 1) * E + T, O = (a + 1) * (E - 1) + T;
          y.push(w, D, O), y.push(D, U, O);
        }
    }
    function S() {
      for (let E = 0; E <= e; E++)
        for (let T = 0; T <= a; T++)
          f.x = E / e, f.y = T / a, g.push(f.x, f.y);
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.path = this.parameters.path.toJSON(), t;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TubeGeometry} A new instance.
   */
  static fromJSON(t) {
    return new _y(
      new d_[t.path.type]().fromJSON(t.path),
      t.tubularSegments,
      t.radius,
      t.radialSegments,
      t.closed
    );
  }
}
class Mz extends ye {
  /**
   * Constructs a new wireframe geometry.
   *
   * @param {?BufferGeometry} [geometry=null] - The geometry.
   */
  constructor(t = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: t
    }, t !== null) {
      const e = [], i = /* @__PURE__ */ new Set(), a = new H(), s = new H();
      if (t.index !== null) {
        const r = t.attributes.position, l = t.index;
        let c = t.groups;
        c.length === 0 && (c = [{ start: 0, count: l.count, materialIndex: 0 }]);
        for (let f = 0, d = c.length; f < d; ++f) {
          const p = c[f], m = p.start, g = p.count;
          for (let y = m, x = m + g; y < x; y += 3)
            for (let M = 0; M < 3; M++) {
              const v = l.getX(y + M), S = l.getX(y + (M + 1) % 3);
              a.fromBufferAttribute(r, v), s.fromBufferAttribute(r, S), Sw(a, s, i) === !0 && (e.push(a.x, a.y, a.z), e.push(s.x, s.y, s.z));
            }
        }
      } else {
        const r = t.attributes.position;
        for (let l = 0, c = r.count / 3; l < c; l++)
          for (let f = 0; f < 3; f++) {
            const d = 3 * l + f, p = 3 * l + (f + 1) % 3;
            a.fromBufferAttribute(r, d), s.fromBufferAttribute(r, p), Sw(a, s, i) === !0 && (e.push(a.x, a.y, a.z), e.push(s.x, s.y, s.z));
          }
      }
      this.setAttribute("position", new Zt(e, 3));
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
}
function Sw(n, t, e) {
  const i = `${n.x},${n.y},${n.z}-${t.x},${t.y},${t.z}`, a = `${t.x},${t.y},${t.z}-${n.x},${n.y},${n.z}`;
  return e.has(i) === !0 || e.has(a) === !0 ? !1 : (e.add(i), e.add(a), !0);
}
var Mw = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: tc,
  CapsuleGeometry: ry,
  CircleGeometry: oy,
  ConeGeometry: Sm,
  CylinderGeometry: xm,
  DodecahedronGeometry: ly,
  EdgesGeometry: hz,
  ExtrudeGeometry: cy,
  IcosahedronGeometry: fy,
  LatheGeometry: hy,
  OctahedronGeometry: Mm,
  PlaneGeometry: Th,
  PolyhedronGeometry: El,
  RingGeometry: dy,
  ShapeGeometry: py,
  SphereGeometry: bm,
  TetrahedronGeometry: my,
  TorusGeometry: gy,
  TorusKnotGeometry: vy,
  TubeGeometry: _y,
  WireframeGeometry: Mz
});
class bz extends Ii {
  /**
   * Constructs a new shadow material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new Pt(0), this.transparent = !0, this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.fog = t.fog, this;
  }
}
class Ez extends Ms {
  /**
   * Constructs a new raw shader material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(t), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class pT extends Ii {
  /**
   * Constructs a new mesh standard material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshStandardMaterial = !0, this.type = "MeshStandardMaterial", this.defines = { STANDARD: "" }, this.color = new Pt(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Pt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ml, this.normalScale = new ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new _a(), this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.defines = { STANDARD: "" }, this.color.copy(t.color), this.roughness = t.roughness, this.metalness = t.metalness, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.roughnessMap = t.roughnessMap, this.metalnessMap = t.metalnessMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.envMapIntensity = t.envMapIntensity, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this;
  }
}
class Tz extends pT {
  /**
   * Constructs a new mesh physical material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new ft(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return me(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(e) {
        this.ior = (1 + 0.4 * e) / (1 - 0.4 * e);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new Pt(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new Pt(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new Pt(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._dispersion = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(t);
  }
  /**
   * The anisotropy strength.
   *
   * @type {number}
   * @default 0
   */
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(t) {
    this._anisotropy > 0 != t > 0 && this.version++, this._anisotropy = t;
  }
  /**
   * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use
   * clear coat related properties to enable multilayer materials that have a
   * thin translucent layer over the base layer.
   *
   * @type {number}
   * @default 0
   */
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(t) {
    this._clearcoat > 0 != t > 0 && this.version++, this._clearcoat = t;
  }
  /**
   * The intensity of the iridescence layer, simulating RGB color shift based on the angle between
   * the surface and the viewer, from `0.0` to `1.0`.
   *
   * @type {number}
   * @default 0
   */
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(t) {
    this._iridescence > 0 != t > 0 && this.version++, this._iridescence = t;
  }
  /**
   * Defines the strength of the angular separation of colors (chromatic aberration) transmitting
   * through a relatively clear volume. Any value zero or larger is valid, the typical range of
   * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.
   *
   * @type {number}
   * @default 0
   */
  get dispersion() {
    return this._dispersion;
  }
  set dispersion(t) {
    this._dispersion > 0 != t > 0 && this.version++, this._dispersion = t;
  }
  /**
   * The intensity of the sheen layer, from `0.0` to `1.0`.
   *
   * @type {number}
   * @default 0
   */
  get sheen() {
    return this._sheen;
  }
  set sheen(t) {
    this._sheen > 0 != t > 0 && this.version++, this._sheen = t;
  }
  /**
   * Degree of transmission (or optical transparency), from `0.0` to `1.0`.
   *
   * Thin, transparent or semitransparent, plastic or glass materials remain
   * largely reflective even if they are fully transmissive. The transmission
   * property can be used to model these materials.
   *
   * When transmission is non-zero, `opacity` should be  set to `1`.
   *
   * @type {number}
   * @default 0
   */
  get transmission() {
    return this._transmission;
  }
  set transmission(t) {
    this._transmission > 0 != t > 0 && this.version++, this._transmission = t;
  }
  copy(t) {
    return super.copy(t), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.anisotropy = t.anisotropy, this.anisotropyRotation = t.anisotropyRotation, this.anisotropyMap = t.anisotropyMap, this.clearcoat = t.clearcoat, this.clearcoatMap = t.clearcoatMap, this.clearcoatRoughness = t.clearcoatRoughness, this.clearcoatRoughnessMap = t.clearcoatRoughnessMap, this.clearcoatNormalMap = t.clearcoatNormalMap, this.clearcoatNormalScale.copy(t.clearcoatNormalScale), this.dispersion = t.dispersion, this.ior = t.ior, this.iridescence = t.iridescence, this.iridescenceMap = t.iridescenceMap, this.iridescenceIOR = t.iridescenceIOR, this.iridescenceThicknessRange = [...t.iridescenceThicknessRange], this.iridescenceThicknessMap = t.iridescenceThicknessMap, this.sheen = t.sheen, this.sheenColor.copy(t.sheenColor), this.sheenColorMap = t.sheenColorMap, this.sheenRoughness = t.sheenRoughness, this.sheenRoughnessMap = t.sheenRoughnessMap, this.transmission = t.transmission, this.transmissionMap = t.transmissionMap, this.thickness = t.thickness, this.thicknessMap = t.thicknessMap, this.attenuationDistance = t.attenuationDistance, this.attenuationColor.copy(t.attenuationColor), this.specularIntensity = t.specularIntensity, this.specularIntensityMap = t.specularIntensityMap, this.specularColor.copy(t.specularColor), this.specularColorMap = t.specularColorMap, this;
  }
}
class Az extends Ii {
  /**
   * Constructs a new mesh phong material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new Pt(16777215), this.specular = new Pt(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Pt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ml, this.normalScale = new ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new _a(), this.combine = vm, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.specular.copy(t.specular), this.shininess = t.shininess, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this;
  }
}
class Rz extends Ii {
  /**
   * Constructs a new mesh toon material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new Pt(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Pt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ml, this.normalScale = new ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.gradientMap = t.gradientMap, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.alphaMap = t.alphaMap, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.fog = t.fog, this;
  }
}
class Cz extends Ii {
  /**
   * Constructs a new mesh normal material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ml, this.normalScale = new ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.flatShading = t.flatShading, this;
  }
}
class wz extends Ii {
  /**
   * Constructs a new mesh lambert material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new Pt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Pt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ml, this.normalScale = new ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new _a(), this.combine = vm, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this;
  }
}
class mT extends Ii {
  /**
   * Constructs a new mesh depth material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = HL, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.depthPacking = t.depthPacking, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this;
  }
}
class gT extends Ii {
  /**
   * Constructs a new mesh distance material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this;
  }
}
class Dz extends Ii {
  /**
   * Constructs a new mesh matcap material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new Pt(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ml, this.normalScale = new ft(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.defines = { MATCAP: "" }, this.color.copy(t.color), this.matcap = t.matcap, this.map = t.map, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.alphaMap = t.alphaMap, this.flatShading = t.flatShading, this.fog = t.fog, this;
  }
}
class Uz extends $i {
  /**
   * Constructs a new line dashed material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(t) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.scale = t.scale, this.dashSize = t.dashSize, this.gapSize = t.gapSize, this;
  }
}
function xu(n, t) {
  return !n || n.constructor === t ? n : typeof t.BYTES_PER_ELEMENT == "number" ? new t(n) : Array.prototype.slice.call(n);
}
function Oz(n) {
  return ArrayBuffer.isView(n) && !(n instanceof DataView);
}
function Nz(n) {
  function t(a, s) {
    return n[a] - n[s];
  }
  const e = n.length, i = new Array(e);
  for (let a = 0; a !== e; ++a) i[a] = a;
  return i.sort(t), i;
}
function nb(n, t, e) {
  const i = n.length, a = new n.constructor(i);
  for (let s = 0, r = 0; r !== i; ++s) {
    const l = e[s] * t;
    for (let c = 0; c !== t; ++c)
      a[r++] = n[l + c];
  }
  return a;
}
function vT(n, t, e, i) {
  let a = 1, s = n[0];
  for (; s !== void 0 && s[i] === void 0; )
    s = n[a++];
  if (s === void 0) return;
  let r = s[i];
  if (r !== void 0)
    if (Array.isArray(r))
      do
        r = s[i], r !== void 0 && (t.push(s.time), e.push(...r)), s = n[a++];
      while (s !== void 0);
    else if (r.toArray !== void 0)
      do
        r = s[i], r !== void 0 && (t.push(s.time), r.toArray(e, e.length)), s = n[a++];
      while (s !== void 0);
    else
      do
        r = s[i], r !== void 0 && (t.push(s.time), e.push(r)), s = n[a++];
      while (s !== void 0);
}
function F8(n, t, e, i, a = 30) {
  const s = n.clone();
  s.name = t;
  const r = [];
  for (let c = 0; c < s.tracks.length; ++c) {
    const f = s.tracks[c], d = f.getValueSize(), p = [], m = [];
    for (let g = 0; g < f.times.length; ++g) {
      const y = f.times[g] * a;
      if (!(y < e || y >= i)) {
        p.push(f.times[g]);
        for (let x = 0; x < d; ++x)
          m.push(f.values[g * d + x]);
      }
    }
    p.length !== 0 && (f.times = xu(p, f.times.constructor), f.values = xu(m, f.values.constructor), r.push(f));
  }
  s.tracks = r;
  let l = 1 / 0;
  for (let c = 0; c < s.tracks.length; ++c)
    l > s.tracks[c].times[0] && (l = s.tracks[c].times[0]);
  for (let c = 0; c < s.tracks.length; ++c)
    s.tracks[c].shift(-1 * l);
  return s.resetDuration(), s;
}
function V8(n, t = 0, e = n, i = 30) {
  i <= 0 && (i = 30);
  const a = e.tracks.length, s = t / i;
  for (let r = 0; r < a; ++r) {
    const l = e.tracks[r], c = l.ValueTypeName;
    if (c === "bool" || c === "string") continue;
    const f = n.tracks.find(function(v) {
      return v.name === l.name && v.ValueTypeName === c;
    });
    if (f === void 0) continue;
    let d = 0;
    const p = l.getValueSize();
    l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (d = p / 3);
    let m = 0;
    const g = f.getValueSize();
    f.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (m = g / 3);
    const y = l.times.length - 1;
    let x;
    if (s <= l.times[0]) {
      const v = d, S = p - d;
      x = l.values.slice(v, S);
    } else if (s >= l.times[y]) {
      const v = y * p + d, S = v + p - d;
      x = l.values.slice(v, S);
    } else {
      const v = l.createInterpolant(), S = d, E = p - d;
      v.evaluate(s), x = v.resultBuffer.slice(S, E);
    }
    c === "quaternion" && new Jn().fromArray(x).normalize().conjugate().toArray(x);
    const M = f.times.length;
    for (let v = 0; v < M; ++v) {
      const S = v * g + m;
      if (c === "quaternion")
        Jn.multiplyQuaternionsFlat(
          f.values,
          S,
          x,
          0,
          f.values,
          S
        );
      else {
        const E = g - m * 2;
        for (let T = 0; T < E; ++T)
          f.values[S + T] -= x[T];
      }
    }
  }
  return n.blendMode = QE, n;
}
class G8 {
  /**
   * Converts an array to a specific type
   *
   * @static
   * @param {TypedArray|Array} array - The array to convert.
   * @param {TypedArray.constructor} type - The constructor of a type array.
   * @return {TypedArray} The converted array
   */
  static convertArray(t, e) {
    return xu(t, e);
  }
  /**
   * Returns `true` if the given object is a typed array.
   *
   * @static
   * @param {any} object - The object to check.
   * @return {boolean} Whether the given object is a typed array.
   */
  static isTypedArray(t) {
    return Oz(t);
  }
  /**
   * Returns an array by which times and values can be sorted.
   *
   * @static
   * @param {Array<number>} times - The keyframe time values.
   * @return {Array<number>} The array.
   */
  static getKeyframeOrder(t) {
    return Nz(t);
  }
  /**
   * Sorts the given array by the previously computed order via `getKeyframeOrder()`.
   *
   * @static
   * @param {Array<number>} values - The values to sort.
   * @param {number} stride - The stride.
   * @param {Array<number>} order - The sort order.
   * @return {Array<number>} The sorted values.
   */
  static sortedArray(t, e, i) {
    return nb(t, e, i);
  }
  /**
   * Used for parsing AOS keyframe formats.
   *
   * @static
   * @param {Array<number>} jsonKeys - A list of JSON keyframes.
   * @param {Array<number>} times - This array will be filled with keyframe times by this method.
   * @param {Array<number>} values - This array will be filled with keyframe values by this method.
   * @param {string} valuePropertyName - The name of the property to use.
   */
  static flattenJSON(t, e, i, a) {
    vT(t, e, i, a);
  }
  /**
   * Creates a new clip, containing only the segment of the original clip between the given frames.
   *
   * @static
   * @param {AnimationClip} sourceClip - The values to sort.
   * @param {string} name - The name of the clip.
   * @param {number} startFrame - The start frame.
   * @param {number} endFrame - The end frame.
   * @param {number} [fps=30] - The FPS.
   * @return {AnimationClip} The new sub clip.
   */
  static subclip(t, e, i, a, s = 30) {
    return F8(t, e, i, a, s);
  }
  /**
   * Converts the keyframes of the given animation clip to an additive format.
   *
   * @static
   * @param {AnimationClip} targetClip - The clip to make additive.
   * @param {number} [referenceFrame=0] - The reference frame.
   * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.
   * @param {number} [fps=30] - The FPS.
   * @return {AnimationClip} The updated clip which is now additive.
   */
  static makeClipAdditive(t, e = 0, i = t, a = 30) {
    return V8(t, e, i, a);
  }
}
class Em {
  /**
   * Constructs a new interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(t, e, i, a) {
    this.parameterPositions = t, this._cachedIndex = 0, this.resultBuffer = a !== void 0 ? a : new e.constructor(i), this.sampleValues = e, this.valueSize = i, this.settings = null, this.DefaultSettings_ = {};
  }
  /**
   * Evaluate the interpolant at position `t`.
   *
   * @param {number} t - The interpolation factor.
   * @return {TypedArray} The result buffer.
   */
  evaluate(t) {
    const e = this.parameterPositions;
    let i = this._cachedIndex, a = e[i], s = e[i - 1];
    t: {
      e: {
        let r;
        n: {
          i: if (!(t < a)) {
            for (let l = i + 2; ; ) {
              if (a === void 0) {
                if (t < s) break i;
                return i = e.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
              }
              if (i === l) break;
              if (s = a, a = e[++i], t < a)
                break e;
            }
            r = e.length;
            break n;
          }
          if (!(t >= s)) {
            const l = e[1];
            t < l && (i = 2, s = l);
            for (let c = i - 2; ; ) {
              if (s === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (i === c) break;
              if (a = s, s = e[--i - 1], t >= s)
                break e;
            }
            r = i, i = 0;
            break n;
          }
          break t;
        }
        for (; i < r; ) {
          const l = i + r >>> 1;
          t < e[l] ? r = l : i = l + 1;
        }
        if (a = e[i], s = e[i - 1], s === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (a === void 0)
          return i = e.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
      }
      this._cachedIndex = i, this.intervalChanged_(i, s, a);
    }
    return this.interpolate_(i, s, t, a);
  }
  /**
   * Returns the interpolation settings.
   *
   * @return {Object} The interpolation settings.
   */
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  /**
   * Copies a sample value to the result buffer.
   *
   * @param {number} index - An index into the sample value buffer.
   * @return {TypedArray} The result buffer.
   */
  copySampleValue_(t) {
    const e = this.resultBuffer, i = this.sampleValues, a = this.valueSize, s = t * a;
    for (let r = 0; r !== a; ++r)
      e[r] = i[s + r];
    return e;
  }
  /**
   * Copies a sample value to the result buffer.
   *
   * @abstract
   * @param {number} i1 - An index into the sample value buffer.
   * @param {number} t0 - The previous interpolation factor.
   * @param {number} t - The current interpolation factor.
   * @param {number} t1 - The next interpolation factor.
   * @return {TypedArray} The result buffer.
   */
  interpolate_() {
    throw new Error("call to abstract method");
  }
  /**
   * Optional method that is executed when the interval has changed.
   *
   * @param {number} i1 - An index into the sample value buffer.
   * @param {number} t0 - The previous interpolation factor.
   * @param {number} t - The current interpolation factor.
   */
  intervalChanged_() {
  }
}
class Lz extends Em {
  /**
   * Constructs a new cubic interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(t, e, i, a) {
    super(t, e, i, a), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: _u,
      endingEnd: _u
    };
  }
  intervalChanged_(t, e, i) {
    const a = this.parameterPositions;
    let s = t - 2, r = t + 1, l = a[s], c = a[r];
    if (l === void 0)
      switch (this.getSettings_().endingStart) {
        case yu:
          s = t, l = 2 * e - i;
          break;
        case Fp:
          s = a.length - 2, l = e + a[s] - a[s + 1];
          break;
        default:
          s = t, l = i;
      }
    if (c === void 0)
      switch (this.getSettings_().endingEnd) {
        case yu:
          r = t, c = 2 * i - e;
          break;
        case Fp:
          r = 1, c = i + a[1] - a[0];
          break;
        default:
          r = t - 1, c = e;
      }
    const f = (i - e) * 0.5, d = this.valueSize;
    this._weightPrev = f / (e - l), this._weightNext = f / (c - i), this._offsetPrev = s * d, this._offsetNext = r * d;
  }
  interpolate_(t, e, i, a) {
    const s = this.resultBuffer, r = this.sampleValues, l = this.valueSize, c = t * l, f = c - l, d = this._offsetPrev, p = this._offsetNext, m = this._weightPrev, g = this._weightNext, y = (i - e) / (a - e), x = y * y, M = x * y, v = -m * M + 2 * m * x - m * y, S = (1 + m) * M + (-1.5 - 2 * m) * x + (-0.5 + m) * y + 1, E = (-1 - g) * M + (1.5 + g) * x + 0.5 * y, T = g * M - g * x;
    for (let w = 0; w !== l; ++w)
      s[w] = v * r[d + w] + S * r[f + w] + E * r[c + w] + T * r[p + w];
    return s;
  }
}
class _T extends Em {
  /**
   * Constructs a new linear interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(t, e, i, a) {
    super(t, e, i, a);
  }
  interpolate_(t, e, i, a) {
    const s = this.resultBuffer, r = this.sampleValues, l = this.valueSize, c = t * l, f = c - l, d = (i - e) / (a - e), p = 1 - d;
    for (let m = 0; m !== l; ++m)
      s[m] = r[f + m] * p + r[c + m] * d;
    return s;
  }
}
class zz extends Em {
  /**
   * Constructs a new discrete interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(t, e, i, a) {
    super(t, e, i, a);
  }
  interpolate_(t) {
    return this.copySampleValue_(t - 1);
  }
}
class bs {
  /**
   * Constructs a new keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(t, e, i, a) {
    if (t === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (e === void 0 || e.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
    this.name = t, this.times = xu(e, this.TimeBufferType), this.values = xu(i, this.ValueBufferType), this.setInterpolation(a || this.DefaultInterpolation);
  }
  /**
   * Converts the keyframe track to JSON.
   *
   * @static
   * @param {KeyframeTrack} track - The keyframe track to serialize.
   * @return {Object} The serialized keyframe track as JSON.
   */
  static toJSON(t) {
    const e = t.constructor;
    let i;
    if (e.toJSON !== this.toJSON)
      i = e.toJSON(t);
    else {
      i = {
        name: t.name,
        times: xu(t.times, Array),
        values: xu(t.values, Array)
      };
      const a = t.getInterpolation();
      a !== t.DefaultInterpolation && (i.interpolation = a);
    }
    return i.type = t.ValueTypeName, i;
  }
  /**
   * Factory method for creating a new discrete interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {DiscreteInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodDiscrete(t) {
    return new zz(this.times, this.values, this.getValueSize(), t);
  }
  /**
   * Factory method for creating a new linear interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {LinearInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodLinear(t) {
    return new _T(this.times, this.values, this.getValueSize(), t);
  }
  /**
   * Factory method for creating a new smooth interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {CubicInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodSmooth(t) {
    return new Lz(this.times, this.values, this.getValueSize(), t);
  }
  /**
   * Defines the interpolation factor method for this keyframe track.
   *
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  setInterpolation(t) {
    let e;
    switch (t) {
      case Hp:
        e = this.InterpolantFactoryMethodDiscrete;
        break;
      case c_:
        e = this.InterpolantFactoryMethodLinear;
        break;
      case V0:
        e = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (e === void 0) {
      const i = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (t !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(i);
      return console.warn("THREE.KeyframeTrack:", i), this;
    }
    return this.createInterpolant = e, this;
  }
  /**
   * Returns the current interpolation type.
   *
   * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.
   */
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return Hp;
      case this.InterpolantFactoryMethodLinear:
        return c_;
      case this.InterpolantFactoryMethodSmooth:
        return V0;
    }
  }
  /**
   * Returns the value size.
   *
   * @return {number} The value size.
   */
  getValueSize() {
    return this.values.length / this.times.length;
  }
  /**
   * Moves all keyframes either forward or backward in time.
   *
   * @param {number} timeOffset - The offset to move the time values.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  shift(t) {
    if (t !== 0) {
      const e = this.times;
      for (let i = 0, a = e.length; i !== a; ++i)
        e[i] += t;
    }
    return this;
  }
  /**
   * Scale all keyframe times by a factor (useful for frame - seconds conversions).
   *
   * @param {number} timeScale - The time scale.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  scale(t) {
    if (t !== 1) {
      const e = this.times;
      for (let i = 0, a = e.length; i !== a; ++i)
        e[i] *= t;
    }
    return this;
  }
  /**
   * Removes keyframes before and after animation without changing any values within the defined time range.
   *
   * Note: The method does not shift around keys to the start of the track time, because for interpolated
   * keys this will change their values
   *
   * @param {number} startTime - The start time.
   * @param {number} endTime - The end time.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  trim(t, e) {
    const i = this.times, a = i.length;
    let s = 0, r = a - 1;
    for (; s !== a && i[s] < t; )
      ++s;
    for (; r !== -1 && i[r] > e; )
      --r;
    if (++r, s !== 0 || r !== a) {
      s >= r && (r = Math.max(r, 1), s = r - 1);
      const l = this.getValueSize();
      this.times = i.slice(s, r), this.values = this.values.slice(s * l, r * l);
    }
    return this;
  }
  /**
   * Performs minimal validation on the keyframe track. Returns `true` if the values
   * are valid.
   *
   * @return {boolean} Whether the keyframes are valid or not.
   */
  validate() {
    let t = !0;
    const e = this.getValueSize();
    e - Math.floor(e) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), t = !1);
    const i = this.times, a = this.values, s = i.length;
    s === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), t = !1);
    let r = null;
    for (let l = 0; l !== s; l++) {
      const c = i[l];
      if (typeof c == "number" && isNaN(c)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, l, c), t = !1;
        break;
      }
      if (r !== null && r > c) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, l, c, r), t = !1;
        break;
      }
      r = c;
    }
    if (a !== void 0 && Oz(a))
      for (let l = 0, c = a.length; l !== c; ++l) {
        const f = a[l];
        if (isNaN(f)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, l, f), t = !1;
          break;
        }
      }
    return t;
  }
  /**
   * Optimizes this keyframe track by removing equivalent sequential keys (which are
   * common in morph target sequences).
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  optimize() {
    const t = this.times.slice(), e = this.values.slice(), i = this.getValueSize(), a = this.getInterpolation() === V0, s = t.length - 1;
    let r = 1;
    for (let l = 1; l < s; ++l) {
      let c = !1;
      const f = t[l], d = t[l + 1];
      if (f !== d && (l !== 1 || f !== t[0]))
        if (a)
          c = !0;
        else {
          const p = l * i, m = p - i, g = p + i;
          for (let y = 0; y !== i; ++y) {
            const x = e[p + y];
            if (x !== e[m + y] || x !== e[g + y]) {
              c = !0;
              break;
            }
          }
        }
      if (c) {
        if (l !== r) {
          t[r] = t[l];
          const p = l * i, m = r * i;
          for (let g = 0; g !== i; ++g)
            e[m + g] = e[p + g];
        }
        ++r;
      }
    }
    if (s > 0) {
      t[r] = t[s];
      for (let l = s * i, c = r * i, f = 0; f !== i; ++f)
        e[c + f] = e[l + f];
      ++r;
    }
    return r !== t.length ? (this.times = t.slice(0, r), this.values = e.slice(0, r * i)) : (this.times = t, this.values = e), this;
  }
  /**
   * Returns a new keyframe track with copied values from this instance.
   *
   * @return {KeyframeTrack} A clone of this instance.
   */
  clone() {
    const t = this.times.slice(), e = this.values.slice(), i = this.constructor, a = new i(this.name, t, e);
    return a.createInterpolant = this.createInterpolant, a;
  }
}
bs.prototype.ValueTypeName = "";
bs.prototype.TimeBufferType = Float32Array;
bs.prototype.ValueBufferType = Float32Array;
bs.prototype.DefaultInterpolation = c_;
class ec extends bs {
  /**
   * Constructs a new boolean keyframe track.
   *
   * This keyframe track type has no `interpolation` parameter because the
   * interpolation is always discrete.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   */
  constructor(t, e, i) {
    super(t, e, i);
  }
}
ec.prototype.ValueTypeName = "bool";
ec.prototype.ValueBufferType = Array;
ec.prototype.DefaultInterpolation = Hp;
ec.prototype.InterpolantFactoryMethodLinear = void 0;
ec.prototype.InterpolantFactoryMethodSmooth = void 0;
class yT extends bs {
  /**
   * Constructs a new color keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(t, e, i, a) {
    super(t, e, i, a);
  }
}
yT.prototype.ValueTypeName = "color";
class Zp extends bs {
  /**
   * Constructs a new number keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(t, e, i, a) {
    super(t, e, i, a);
  }
}
Zp.prototype.ValueTypeName = "number";
class Bz extends Em {
  /**
   * Constructs a new SLERP interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(t, e, i, a) {
    super(t, e, i, a);
  }
  interpolate_(t, e, i, a) {
    const s = this.resultBuffer, r = this.sampleValues, l = this.valueSize, c = (i - e) / (a - e);
    let f = t * l;
    for (let d = f + l; f !== d; f += 4)
      Jn.slerpFlat(s, 0, r, f - l, r, f, c);
    return s;
  }
}
class Tm extends bs {
  /**
   * Constructs a new Quaternion keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(t, e, i, a) {
    super(t, e, i, a);
  }
  /**
   * Overwritten so the method returns Quaternion based interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {QuaternionLinearInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodLinear(t) {
    return new Bz(this.times, this.values, this.getValueSize(), t);
  }
}
Tm.prototype.ValueTypeName = "quaternion";
Tm.prototype.InterpolantFactoryMethodSmooth = void 0;
class nc extends bs {
  /**
   * Constructs a new string keyframe track.
   *
   * This keyframe track type has no `interpolation` parameter because the
   * interpolation is always discrete.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   */
  constructor(t, e, i) {
    super(t, e, i);
  }
}
nc.prototype.ValueTypeName = "string";
nc.prototype.ValueBufferType = Array;
nc.prototype.DefaultInterpolation = Hp;
nc.prototype.InterpolantFactoryMethodLinear = void 0;
nc.prototype.InterpolantFactoryMethodSmooth = void 0;
class jp extends bs {
  /**
   * Constructs a new vector keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(t, e, i, a) {
    super(t, e, i, a);
  }
}
jp.prototype.ValueTypeName = "vector";
class Qp {
  /**
   * Constructs a new animation clip.
   *
   * Note: Instead of instantiating an AnimationClip directly with the constructor, you can
   * use the static interface of this class for creating clips. In most cases though, animation clips
   * will automatically be created by loaders when importing animated 3D assets.
   *
   * @param {string} [name=''] - The clip's name.
   * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,
   * the duration will be calculated from the passed keyframes.
   * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation
   * is blended/combined when two or more animations are simultaneously played.
   */
  constructor(t = "", e = -1, i = [], a = Q_) {
    this.name = t, this.tracks = i, this.duration = e, this.blendMode = a, this.uuid = Ya(), this.duration < 0 && this.resetDuration();
  }
  /**
   * Factory method for creating an animation clip from the given JSON.
   *
   * @static
   * @param {Object} json - The serialized animation clip.
   * @return {AnimationClip} The new animation clip.
   */
  static parse(t) {
    const e = [], i = t.tracks, a = 1 / (t.fps || 1);
    for (let r = 0, l = i.length; r !== l; ++r)
      e.push(q8(i[r]).scale(a));
    const s = new this(t.name, t.duration, e, t.blendMode);
    return s.uuid = t.uuid, s;
  }
  /**
   * Serializes the given animation clip into JSON.
   *
   * @static
   * @param {AnimationClip} clip - The animation clip to serialize.
   * @return {Object} The JSON object.
   */
  static toJSON(t) {
    const e = [], i = t.tracks, a = {
      name: t.name,
      duration: t.duration,
      tracks: e,
      uuid: t.uuid,
      blendMode: t.blendMode
    };
    for (let s = 0, r = i.length; s !== r; ++s)
      e.push(bs.toJSON(i[s]));
    return a;
  }
  /**
   * Returns a new animation clip from the passed morph targets array of a
   * geometry, taking a name and the number of frames per second.
   *
   * Note: The fps parameter is required, but the animation speed can be
   * overridden via {@link AnimationAction#setDuration}.
   *
   * @static
   * @param {string} name - The name of the animation clip.
   * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.
   * @param {number} fps - The Frames-Per-Second value.
   * @param {boolean} noLoop - Whether the clip should be no loop or not.
   * @return {AnimationClip} The new animation clip.
   */
  static CreateFromMorphTargetSequence(t, e, i, a) {
    const s = e.length, r = [];
    for (let l = 0; l < s; l++) {
      let c = [], f = [];
      c.push(
        (l + s - 1) % s,
        l,
        (l + 1) % s
      ), f.push(0, 1, 0);
      const d = Nz(c);
      c = nb(c, 1, d), f = nb(f, 1, d), !a && c[0] === 0 && (c.push(s), f.push(f[0])), r.push(
        new Zp(
          ".morphTargetInfluences[" + e[l].name + "]",
          c,
          f
        ).scale(1 / i)
      );
    }
    return new this(t, -1, r);
  }
  /**
   * Searches for an animation clip by name, taking as its first parameter
   * either an array of clips, or a mesh or geometry that contains an
   * array named "animations" property.
   *
   * @static
   * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.
   * @param {string} name - The name to search for.
   * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.
   */
  static findByName(t, e) {
    let i = t;
    if (!Array.isArray(t)) {
      const a = t;
      i = a.geometry && a.geometry.animations || a.animations;
    }
    for (let a = 0; a < i.length; a++)
      if (i[a].name === e)
        return i[a];
    return null;
  }
  /**
   * Returns an array of new AnimationClips created from the morph target
   * sequences of a geometry, trying to sort morph target names into
   * animation-group-based patterns like "Walk_001, Walk_002, Run_001, Run_002...".
   *
   * See {@link MD2Loader#parse} as an example for how the method should be used.
   *
   * @static
   * @param {Array<Object>} morphTargets - A sequence of morph targets.
   * @param {number} fps - The Frames-Per-Second value.
   * @param {boolean} noLoop - Whether the clip should be no loop or not.
   * @return {Array<AnimationClip>} An array of new animation clips.
   */
  static CreateClipsFromMorphTargetSequences(t, e, i) {
    const a = {}, s = /^([\w-]*?)([\d]+)$/;
    for (let l = 0, c = t.length; l < c; l++) {
      const f = t[l], d = f.name.match(s);
      if (d && d.length > 1) {
        const p = d[1];
        let m = a[p];
        m || (a[p] = m = []), m.push(f);
      }
    }
    const r = [];
    for (const l in a)
      r.push(this.CreateFromMorphTargetSequence(l, a[l], e, i));
    return r;
  }
  /**
   * Parses the `animation.hierarchy` format and returns a new animation clip.
   *
   * @static
   * @deprecated since r175.
   * @param {Object} animation - A serialized animation clip as JSON.
   * @param {Array<Bones>} bones - An array of bones.
   * @return {?AnimationClip} The new animation clip.
   */
  static parseAnimation(t, e) {
    if (console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"), !t)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const i = function(p, m, g, y, x) {
      if (g.length !== 0) {
        const M = [], v = [];
        vT(g, M, v, y), M.length !== 0 && x.push(new p(m, M, v));
      }
    }, a = [], s = t.name || "default", r = t.fps || 30, l = t.blendMode;
    let c = t.length || -1;
    const f = t.hierarchy || [];
    for (let p = 0; p < f.length; p++) {
      const m = f[p].keys;
      if (!(!m || m.length === 0))
        if (m[0].morphTargets) {
          const g = {};
          let y;
          for (y = 0; y < m.length; y++)
            if (m[y].morphTargets)
              for (let x = 0; x < m[y].morphTargets.length; x++)
                g[m[y].morphTargets[x]] = -1;
          for (const x in g) {
            const M = [], v = [];
            for (let S = 0; S !== m[y].morphTargets.length; ++S) {
              const E = m[y];
              M.push(E.time), v.push(E.morphTarget === x ? 1 : 0);
            }
            a.push(new Zp(".morphTargetInfluence[" + x + "]", M, v));
          }
          c = g.length * r;
        } else {
          const g = ".bones[" + e[p].name + "]";
          i(
            jp,
            g + ".position",
            m,
            "pos",
            a
          ), i(
            Tm,
            g + ".quaternion",
            m,
            "rot",
            a
          ), i(
            jp,
            g + ".scale",
            m,
            "scl",
            a
          );
        }
    }
    return a.length === 0 ? null : new this(s, c, a, l);
  }
  /**
   * Sets the duration of this clip to the duration of its longest keyframe track.
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  resetDuration() {
    const t = this.tracks;
    let e = 0;
    for (let i = 0, a = t.length; i !== a; ++i) {
      const s = this.tracks[i];
      e = Math.max(e, s.times[s.times.length - 1]);
    }
    return this.duration = e, this;
  }
  /**
   * Trims all tracks to the clip's duration.
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  trim() {
    for (let t = 0; t < this.tracks.length; t++)
      this.tracks[t].trim(0, this.duration);
    return this;
  }
  /**
   * Performs minimal validation on each track in the clip. Returns `true` if all
   * tracks are valid.
   *
   * @return {boolean} Whether the clip's keyframes are valid or not.
   */
  validate() {
    let t = !0;
    for (let e = 0; e < this.tracks.length; e++)
      t = t && this.tracks[e].validate();
    return t;
  }
  /**
   * Optimizes each track by removing equivalent sequential keys (which are
   * common in morph target sequences).
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  optimize() {
    for (let t = 0; t < this.tracks.length; t++)
      this.tracks[t].optimize();
    return this;
  }
  /**
   * Returns a new animation clip with copied values from this instance.
   *
   * @return {AnimationClip} A clone of this instance.
   */
  clone() {
    const t = [];
    for (let e = 0; e < this.tracks.length; e++)
      t.push(this.tracks[e].clone());
    return new this.constructor(this.name, this.duration, t, this.blendMode);
  }
  /**
   * Serializes this animation clip into JSON.
   *
   * @return {Object} The JSON object.
   */
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function X8(n) {
  switch (n.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return Zp;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return jp;
    case "color":
      return yT;
    case "quaternion":
      return Tm;
    case "bool":
    case "boolean":
      return ec;
    case "string":
      return nc;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + n);
}
function q8(n) {
  if (n.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const t = X8(n.type);
  if (n.times === void 0) {
    const e = [], i = [];
    vT(n.keys, e, i, "value"), n.times = e, n.values = i;
  }
  return t.parse !== void 0 ? t.parse(n) : new t(n.name, n.times, n.values, n.interpolation);
}
const jr = {
  /**
   * Whether caching is enabled or not.
   *
   * @static
   * @type {boolean}
   * @default false
   */
  enabled: !1,
  /**
   * A dictionary that holds cached files.
   *
   * @static
   * @type {Object<string,Object>}
   */
  files: {},
  /**
   * Adds a cache entry with a key to reference the file. If this key already
   * holds a file, it is overwritten.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   * @param {Object} file -  The file to be cached.
   */
  add: function(n, t) {
    this.enabled !== !1 && (this.files[n] = t);
  },
  /**
   * Gets the cached value for the given key.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.
   */
  get: function(n) {
    if (this.enabled !== !1)
      return this.files[n];
  },
  /**
   * Removes the cached file associated with the given key.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   */
  remove: function(n) {
    delete this.files[n];
  },
  /**
   * Remove all values from the cache.
   *
   * @static
   */
  clear: function() {
    this.files = {};
  }
};
class xT {
  /**
   * Constructs a new loading manager.
   *
   * @param {Function} [onLoad] - Executes when all items have been loaded.
   * @param {Function} [onProgress] - Executes when single items have been loaded.
   * @param {Function} [onError] - Executes when an error occurs.
   */
  constructor(t, e, i) {
    const a = this;
    let s = !1, r = 0, l = 0, c;
    const f = [];
    this.onStart = void 0, this.onLoad = t, this.onProgress = e, this.onError = i, this.itemStart = function(d) {
      l++, s === !1 && a.onStart !== void 0 && a.onStart(d, r, l), s = !0;
    }, this.itemEnd = function(d) {
      r++, a.onProgress !== void 0 && a.onProgress(d, r, l), r === l && (s = !1, a.onLoad !== void 0 && a.onLoad());
    }, this.itemError = function(d) {
      a.onError !== void 0 && a.onError(d);
    }, this.resolveURL = function(d) {
      return c ? c(d) : d;
    }, this.setURLModifier = function(d) {
      return c = d, this;
    }, this.addHandler = function(d, p) {
      return f.push(d, p), this;
    }, this.removeHandler = function(d) {
      const p = f.indexOf(d);
      return p !== -1 && f.splice(p, 2), this;
    }, this.getHandler = function(d) {
      for (let p = 0, m = f.length; p < m; p += 2) {
        const g = f[p], y = f[p + 1];
        if (g.global && (g.lastIndex = 0), g.test(d))
          return y;
      }
      return null;
    };
  }
}
const Pz = /* @__PURE__ */ new xT();
class xa {
  /**
   * Constructs a new loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    this.manager = t !== void 0 ? t : Pz, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  /**
   * This method needs to be implemented by all concrete loaders. It holds the
   * logic for loading assets from the backend.
   *
   * @param {string} url - The path/URL of the file to be loaded.
   * @param {Function} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @param {onErrorCallback} [onError] - Executed when errors occur.
   */
  load() {
  }
  /**
   * A async version of {@link Loader#load}.
   *
   * @param {string} url - The path/URL of the file to be loaded.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @return {Promise} A Promise that resolves when the asset has been loaded.
   */
  loadAsync(t, e) {
    const i = this;
    return new Promise(function(a, s) {
      i.load(t, a, e, s);
    });
  }
  /**
   * This method needs to be implemented by all concrete loaders. It holds the
   * logic for parsing the asset into three.js entities.
   *
   * @param {any} data - The data to parse.
   */
  parse() {
  }
  /**
   * Sets the `crossOrigin` String to implement CORS for loading the URL
   * from a different domain that allows CORS.
   *
   * @param {string} crossOrigin - The `crossOrigin` value.
   * @return {Loader} A reference to this instance.
   */
  setCrossOrigin(t) {
    return this.crossOrigin = t, this;
  }
  /**
   * Whether the XMLHttpRequest uses credentials such as cookies, authorization
   * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.
   *
   * Note: This setting has no effect if you are loading files locally or from the same domain.
   *
   * @param {boolean} value - The `withCredentials` value.
   * @return {Loader} A reference to this instance.
   */
  setWithCredentials(t) {
    return this.withCredentials = t, this;
  }
  /**
   * Sets the base path for the asset.
   *
   * @param {string} path - The base path.
   * @return {Loader} A reference to this instance.
   */
  setPath(t) {
    return this.path = t, this;
  }
  /**
   * Sets the base path for dependent resources like textures.
   *
   * @param {string} resourcePath - The resource path.
   * @return {Loader} A reference to this instance.
   */
  setResourcePath(t) {
    return this.resourcePath = t, this;
  }
  /**
   * Sets the given request header.
   *
   * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}
   * for configuring the HTTP request.
   * @return {Loader} A reference to this instance.
   */
  setRequestHeader(t) {
    return this.requestHeader = t, this;
  }
}
xa.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const Pr = {};
class Y8 extends Error {
  constructor(t, e) {
    super(t), this.response = e;
  }
}
class uo extends xa {
  /**
   * Constructs a new file loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t), this.mimeType = "", this.responseType = "";
  }
  /**
   * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(any)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @param {onErrorCallback} [onError] - Executed when errors occur.
   * @return {any|undefined} The cached resource if available.
   */
  load(t, e, i, a) {
    t === void 0 && (t = ""), this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t);
    const s = jr.get(t);
    if (s !== void 0)
      return this.manager.itemStart(t), setTimeout(() => {
        e && e(s), this.manager.itemEnd(t);
      }, 0), s;
    if (Pr[t] !== void 0) {
      Pr[t].push({
        onLoad: e,
        onProgress: i,
        onError: a
      });
      return;
    }
    Pr[t] = [], Pr[t].push({
      onLoad: e,
      onProgress: i,
      onError: a
    });
    const r = new Request(t, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    }), l = this.mimeType, c = this.responseType;
    fetch(r).then((f) => {
      if (f.status === 200 || f.status === 0) {
        if (f.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || f.body === void 0 || f.body.getReader === void 0)
          return f;
        const d = Pr[t], p = f.body.getReader(), m = f.headers.get("X-File-Size") || f.headers.get("Content-Length"), g = m ? parseInt(m) : 0, y = g !== 0;
        let x = 0;
        const M = new ReadableStream({
          start(v) {
            S();
            function S() {
              p.read().then(({ done: E, value: T }) => {
                if (E)
                  v.close();
                else {
                  x += T.byteLength;
                  const w = new ProgressEvent("progress", { lengthComputable: y, loaded: x, total: g });
                  for (let D = 0, U = d.length; D < U; D++) {
                    const O = d[D];
                    O.onProgress && O.onProgress(w);
                  }
                  v.enqueue(T), S();
                }
              }, (E) => {
                v.error(E);
              });
            }
          }
        });
        return new Response(M);
      } else
        throw new Y8(`fetch for "${f.url}" responded with ${f.status}: ${f.statusText}`, f);
    }).then((f) => {
      switch (c) {
        case "arraybuffer":
          return f.arrayBuffer();
        case "blob":
          return f.blob();
        case "document":
          return f.text().then((d) => new DOMParser().parseFromString(d, l));
        case "json":
          return f.json();
        default:
          if (l === "")
            return f.text();
          {
            const p = /charset="?([^;"\s]*)"?/i.exec(l), m = p && p[1] ? p[1].toLowerCase() : void 0, g = new TextDecoder(m);
            return f.arrayBuffer().then((y) => g.decode(y));
          }
      }
    }).then((f) => {
      jr.add(t, f);
      const d = Pr[t];
      delete Pr[t];
      for (let p = 0, m = d.length; p < m; p++) {
        const g = d[p];
        g.onLoad && g.onLoad(f);
      }
    }).catch((f) => {
      const d = Pr[t];
      if (d === void 0)
        throw this.manager.itemError(t), f;
      delete Pr[t];
      for (let p = 0, m = d.length; p < m; p++) {
        const g = d[p];
        g.onError && g.onError(f);
      }
      this.manager.itemError(t);
    }).finally(() => {
      this.manager.itemEnd(t);
    }), this.manager.itemStart(t);
  }
  /**
   * Sets the expected response type.
   *
   * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.
   * @return {FileLoader} A reference to this file loader.
   */
  setResponseType(t) {
    return this.responseType = t, this;
  }
  /**
   * Sets the expected mime type of the loaded file.
   *
   * @param {string} value - The mime type.
   * @return {FileLoader} A reference to this file loader.
   */
  setMimeType(t) {
    return this.mimeType = t, this;
  }
}
class k8 extends xa {
  /**
   * Constructs a new animation loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and pass the loaded animations as an array
   * holding instances of {@link AnimationClip} to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Array<AnimationClip>)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(t, e, i, a) {
    const s = this, r = new uo(this.manager);
    r.setPath(this.path), r.setRequestHeader(this.requestHeader), r.setWithCredentials(this.withCredentials), r.load(t, function(l) {
      try {
        e(s.parse(JSON.parse(l)));
      } catch (c) {
        a ? a(c) : console.error(c), s.manager.itemError(t);
      }
    }, i, a);
  }
  /**
   * Parses the given JSON object and returns an array of animation clips.
   *
   * @param {Object} json - The serialized animation clips.
   * @return {Array<AnimationClip>} The parsed animation clips.
   */
  parse(t) {
    const e = [];
    for (let i = 0; i < t.length; i++) {
      const a = Qp.parse(t[i]);
      e.push(a);
    }
    return e;
  }
}
class W8 extends xa {
  /**
   * Constructs a new compressed texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and passes the loaded compressed texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {CompressedTexture} The compressed texture.
   */
  load(t, e, i, a) {
    const s = this, r = [], l = new sy(), c = new uo(this.manager);
    c.setPath(this.path), c.setResponseType("arraybuffer"), c.setRequestHeader(this.requestHeader), c.setWithCredentials(s.withCredentials);
    let f = 0;
    function d(p) {
      c.load(t[p], function(m) {
        const g = s.parse(m, !0);
        r[p] = {
          width: g.width,
          height: g.height,
          format: g.format,
          mipmaps: g.mipmaps
        }, f += 1, f === 6 && (g.mipmapCount === 1 && (l.minFilter = Qn), l.image = r, l.format = g.format, l.needsUpdate = !0, e && e(l));
      }, i, a);
    }
    if (Array.isArray(t))
      for (let p = 0, m = t.length; p < m; ++p)
        d(p);
    else
      c.load(t, function(p) {
        const m = s.parse(p, !0);
        if (m.isCubemap) {
          const g = m.mipmaps.length / m.mipmapCount;
          for (let y = 0; y < g; y++) {
            r[y] = { mipmaps: [] };
            for (let x = 0; x < m.mipmapCount; x++)
              r[y].mipmaps.push(m.mipmaps[y * m.mipmapCount + x]), r[y].format = m.format, r[y].width = m.width, r[y].height = m.height;
          }
          l.image = r;
        } else
          l.image.width = m.width, l.image.height = m.height, l.mipmaps = m.mipmaps;
        m.mipmapCount === 1 && (l.minFilter = Qn), l.format = m.format, l.needsUpdate = !0, e && e(l);
      }, i, a);
    return l;
  }
}
class Kp extends xa {
  /**
   * Constructs a new image loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and passes the loaded image
   * to the `onLoad()` callback. The method also returns a new `Image` object which can
   * directly be used for texture creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Image)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {Image} The image.
   */
  load(t, e, i, a) {
    this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t);
    const s = this, r = jr.get(t);
    if (r !== void 0)
      return s.manager.itemStart(t), setTimeout(function() {
        e && e(r), s.manager.itemEnd(t);
      }, 0), r;
    const l = qp("img");
    function c() {
      d(), jr.add(t, this), e && e(this), s.manager.itemEnd(t);
    }
    function f(p) {
      d(), a && a(p), s.manager.itemError(t), s.manager.itemEnd(t);
    }
    function d() {
      l.removeEventListener("load", c, !1), l.removeEventListener("error", f, !1);
    }
    return l.addEventListener("load", c, !1), l.addEventListener("error", f, !1), t.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (l.crossOrigin = this.crossOrigin), s.manager.itemStart(t), l.src = t, l;
  }
}
class Z8 extends xa {
  /**
   * Constructs a new cube texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and pass the fully loaded cube texture
   * to the `onLoad()` callback. The method also returns a new cube texture object which can
   * directly be used for material creation. If you do it this way, the cube texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the
   * cube texture. The urls should be specified in the following order: pos-x,
   * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.
   * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {CubeTexture} The cube texture.
   */
  load(t, e, i, a) {
    const s = new ym();
    s.colorSpace = Di;
    const r = new Kp(this.manager);
    r.setCrossOrigin(this.crossOrigin), r.setPath(this.path);
    let l = 0;
    function c(f) {
      r.load(t[f], function(d) {
        s.images[f] = d, l++, l === 6 && (s.needsUpdate = !0, e && e(s));
      }, void 0, a);
    }
    for (let f = 0; f < t.length; ++f)
      c(f);
    return s;
  }
}
class j8 extends xa {
  /**
   * Constructs a new data texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and passes the loaded data texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {DataTexture} The data texture.
   */
  load(t, e, i, a) {
    const s = this, r = new fr(), l = new uo(this.manager);
    return l.setResponseType("arraybuffer"), l.setRequestHeader(this.requestHeader), l.setPath(this.path), l.setWithCredentials(s.withCredentials), l.load(t, function(c) {
      let f;
      try {
        f = s.parse(c);
      } catch (d) {
        if (a !== void 0)
          a(d);
        else {
          console.error(d);
          return;
        }
      }
      f.image !== void 0 ? r.image = f.image : f.data !== void 0 && (r.image.width = f.width, r.image.height = f.height, r.image.data = f.data), r.wrapS = f.wrapS !== void 0 ? f.wrapS : vs, r.wrapT = f.wrapT !== void 0 ? f.wrapT : vs, r.magFilter = f.magFilter !== void 0 ? f.magFilter : Qn, r.minFilter = f.minFilter !== void 0 ? f.minFilter : Qn, r.anisotropy = f.anisotropy !== void 0 ? f.anisotropy : 1, f.colorSpace !== void 0 && (r.colorSpace = f.colorSpace), f.flipY !== void 0 && (r.flipY = f.flipY), f.format !== void 0 && (r.format = f.format), f.type !== void 0 && (r.type = f.type), f.mipmaps !== void 0 && (r.mipmaps = f.mipmaps, r.minFilter = ar), f.mipmapCount === 1 && (r.minFilter = Qn), f.generateMipmaps !== void 0 && (r.generateMipmaps = f.generateMipmaps), r.needsUpdate = !0, e && e(r, f);
    }, i, a), r;
  }
}
class yy extends xa {
  /**
   * Constructs a new texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and pass the fully loaded texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Texture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {Texture} The texture.
   */
  load(t, e, i, a) {
    const s = new Sn(), r = new Kp(this.manager);
    return r.setCrossOrigin(this.crossOrigin), r.setPath(this.path), r.load(t, function(l) {
      s.image = l, s.needsUpdate = !0, e !== void 0 && e(s);
    }, i, a), s;
  }
}
class Tl extends He {
  /**
   * Constructs a new light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(t, e = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new Pt(t), this.intensity = e;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
  }
  copy(t, e) {
    return super.copy(t, e), this.color.copy(t.color), this.intensity = t.intensity, this;
  }
  toJSON(t) {
    const e = super.toJSON(t);
    return e.object.color = this.color.getHex(), e.object.intensity = this.intensity, this.groundColor !== void 0 && (e.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (e.object.distance = this.distance), this.angle !== void 0 && (e.object.angle = this.angle), this.decay !== void 0 && (e.object.decay = this.decay), this.penumbra !== void 0 && (e.object.penumbra = this.penumbra), this.shadow !== void 0 && (e.object.shadow = this.shadow.toJSON()), this.target !== void 0 && (e.object.target = this.target.uuid), e;
  }
}
class Iz extends Tl {
  /**
   * Constructs a new hemisphere light.
   *
   * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.
   * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(t, e, i) {
    super(t, i), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(He.DEFAULT_UP), this.updateMatrix(), this.groundColor = new Pt(e);
  }
  copy(t, e) {
    return super.copy(t, e), this.groundColor.copy(t.groundColor), this;
  }
}
const p1 = /* @__PURE__ */ new ae(), bw = /* @__PURE__ */ new H(), Ew = /* @__PURE__ */ new H();
class ST {
  /**
   * Constructs a new light shadow.
   *
   * @param {Camera} camera - The light's view of the world.
   */
  constructor(t) {
    this.camera = t, this.intensity = 1, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new ft(512, 512), this.mapType = Ss, this.map = null, this.mapPass = null, this.matrix = new ae(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Eh(), this._frameExtents = new ft(1, 1), this._viewportCount = 1, this._viewports = [
      new De(0, 0, 1, 1)
    ];
  }
  /**
   * Used internally by the renderer to get the number of viewports that need
   * to be rendered for this shadow.
   *
   * @return {number} The viewport count.
   */
  getViewportCount() {
    return this._viewportCount;
  }
  /**
   * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.
   *
   * @return {Frustum} The shadow camera frustum.
   */
  getFrustum() {
    return this._frustum;
  }
  /**
   * Update the matrices for the camera and shadow, used internally by the renderer.
   *
   * @param {Light} light - The light for which the shadow is being rendered.
   */
  updateMatrices(t) {
    const e = this.camera, i = this.matrix;
    bw.setFromMatrixPosition(t.matrixWorld), e.position.copy(bw), Ew.setFromMatrixPosition(t.target.matrixWorld), e.lookAt(Ew), e.updateMatrixWorld(), p1.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), this._frustum.setFromProjectionMatrix(p1), i.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), i.multiply(p1);
  }
  /**
   * Returns a viewport definition for the given viewport index.
   *
   * @param {number} viewportIndex - The viewport index.
   * @return {Vector4} The viewport.
   */
  getViewport(t) {
    return this._viewports[t];
  }
  /**
   * Returns the frame extends.
   *
   * @return {Vector2} The frame extends.
   */
  getFrameExtents() {
    return this._frameExtents;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  /**
   * Copies the values of the given light shadow instance to this instance.
   *
   * @param {LightShadow} source - The light shadow to copy.
   * @return {LightShadow} A reference to this light shadow instance.
   */
  copy(t) {
    return this.camera = t.camera.clone(), this.intensity = t.intensity, this.bias = t.bias, this.radius = t.radius, this.autoUpdate = t.autoUpdate, this.needsUpdate = t.needsUpdate, this.normalBias = t.normalBias, this.blurSamples = t.blurSamples, this.mapSize.copy(t.mapSize), this;
  }
  /**
   * Returns a new light shadow instance with copied values from this instance.
   *
   * @return {LightShadow} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Serializes the light shadow into JSON.
   *
   * @return {Object} A JSON object representing the serialized light shadow.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const t = {};
    return this.intensity !== 1 && (t.intensity = this.intensity), this.bias !== 0 && (t.bias = this.bias), this.normalBias !== 0 && (t.normalBias = this.normalBias), this.radius !== 1 && (t.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (t.mapSize = this.mapSize.toArray()), t.camera = this.camera.toJSON(!1).object, delete t.camera.matrix, t;
  }
}
class Q8 extends ST {
  /**
   * Constructs a new spot light shadow.
   */
  constructor() {
    super(new li(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1, this.aspect = 1;
  }
  updateMatrices(t) {
    const e = this.camera, i = oh * 2 * t.angle * this.focus, a = this.mapSize.width / this.mapSize.height * this.aspect, s = t.distance || e.far;
    (i !== e.fov || a !== e.aspect || s !== e.far) && (e.fov = i, e.aspect = a, e.far = s, e.updateProjectionMatrix()), super.updateMatrices(t);
  }
  copy(t) {
    return super.copy(t), this.focus = t.focus, this;
  }
}
class Hz extends Tl {
  /**
   * Constructs a new spot light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
   * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(t, e, i = 0, a = Math.PI / 3, s = 0, r = 2) {
    super(t, e), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(He.DEFAULT_UP), this.updateMatrix(), this.target = new He(), this.distance = i, this.angle = a, this.penumbra = s, this.decay = r, this.map = null, this.shadow = new Q8();
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   *  Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * Math.PI;
  }
  set power(t) {
    this.intensity = t / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(t, e) {
    return super.copy(t, e), this.distance = t.distance, this.angle = t.angle, this.penumbra = t.penumbra, this.decay = t.decay, this.target = t.target.clone(), this.shadow = t.shadow.clone(), this;
  }
}
const Tw = /* @__PURE__ */ new ae(), Md = /* @__PURE__ */ new H(), m1 = /* @__PURE__ */ new H();
class K8 extends ST {
  /**
   * Constructs a new point light shadow.
   */
  constructor() {
    super(new li(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new ft(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new De(2, 1, 1, 1),
      // negative X
      new De(0, 1, 1, 1),
      // positive Z
      new De(3, 1, 1, 1),
      // negative Z
      new De(1, 1, 1, 1),
      // positive Y
      new De(3, 0, 1, 1),
      // negative Y
      new De(1, 0, 1, 1)
    ], this._cubeDirections = [
      new H(1, 0, 0),
      new H(-1, 0, 0),
      new H(0, 0, 1),
      new H(0, 0, -1),
      new H(0, 1, 0),
      new H(0, -1, 0)
    ], this._cubeUps = [
      new H(0, 1, 0),
      new H(0, 1, 0),
      new H(0, 1, 0),
      new H(0, 1, 0),
      new H(0, 0, 1),
      new H(0, 0, -1)
    ];
  }
  /**
   * Update the matrices for the camera and shadow, used internally by the renderer.
   *
   * @param {Light} light - The light for which the shadow is being rendered.
   * @param {number} [viewportIndex=0] - The viewport index.
   */
  updateMatrices(t, e = 0) {
    const i = this.camera, a = this.matrix, s = t.distance || i.far;
    s !== i.far && (i.far = s, i.updateProjectionMatrix()), Md.setFromMatrixPosition(t.matrixWorld), i.position.copy(Md), m1.copy(i.position), m1.add(this._cubeDirections[e]), i.up.copy(this._cubeUps[e]), i.lookAt(m1), i.updateMatrixWorld(), a.makeTranslation(-Md.x, -Md.y, -Md.z), Tw.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse), this._frustum.setFromProjectionMatrix(Tw);
  }
}
class Fz extends Tl {
  /**
   * Constructs a new point light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(t, e, i = 0, a = 2) {
    super(t, e), this.isPointLight = !0, this.type = "PointLight", this.distance = i, this.decay = a, this.shadow = new K8();
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   * Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(t) {
    this.intensity = t / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(t, e) {
    return super.copy(t, e), this.distance = t.distance, this.decay = t.decay, this.shadow = t.shadow.clone(), this;
  }
}
class Am extends $_ {
  /**
   * Constructs a new orthographic camera.
   *
   * @param {number} [left=-1] - The left plane of the camera's frustum.
   * @param {number} [right=1] - The right plane of the camera's frustum.
   * @param {number} [top=1] - The top plane of the camera's frustum.
   * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.
   * @param {number} [near=0.1] - The camera's near plane.
   * @param {number} [far=2000] - The camera's far plane.
   */
  constructor(t = -1, e = 1, i = 1, a = -1, s = 0.1, r = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = t, this.right = e, this.top = i, this.bottom = a, this.near = s, this.far = r, this.updateProjectionMatrix();
  }
  copy(t, e) {
    return super.copy(t, e), this.left = t.left, this.right = t.right, this.top = t.top, this.bottom = t.bottom, this.near = t.near, this.far = t.far, this.zoom = t.zoom, this.view = t.view === null ? null : Object.assign({}, t.view), this;
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * @param {number} fullWidth - The full width of multiview setup.
   * @param {number} fullHeight - The full height of multiview setup.
   * @param {number} x - The horizontal offset of the subcamera.
   * @param {number} y - The vertical offset of the subcamera.
   * @param {number} width - The width of subcamera.
   * @param {number} height - The height of subcamera.
   * @see {@link PerspectiveCamera#setViewOffset}
   */
  setViewOffset(t, e, i, a, s, r) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = i, this.view.offsetY = a, this.view.width = s, this.view.height = r, this.updateProjectionMatrix();
  }
  /**
   * Removes the view offset from the projection matrix.
   */
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  /**
   * Updates the camera's projection matrix. Must be called after any change of
   * camera properties.
   */
  updateProjectionMatrix() {
    const t = (this.right - this.left) / (2 * this.zoom), e = (this.top - this.bottom) / (2 * this.zoom), i = (this.right + this.left) / 2, a = (this.top + this.bottom) / 2;
    let s = i - t, r = i + t, l = a + e, c = a - e;
    if (this.view !== null && this.view.enabled) {
      const f = (this.right - this.left) / this.view.fullWidth / this.zoom, d = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      s += f * this.view.offsetX, r = s + f * this.view.width, l -= d * this.view.offsetY, c = l - d * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(s, r, l, c, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(t) {
    const e = super.toJSON(t);
    return e.object.zoom = this.zoom, e.object.left = this.left, e.object.right = this.right, e.object.top = this.top, e.object.bottom = this.bottom, e.object.near = this.near, e.object.far = this.far, this.view !== null && (e.object.view = Object.assign({}, this.view)), e;
  }
}
class J8 extends ST {
  /**
   * Constructs a new directional light shadow.
   */
  constructor() {
    super(new Am(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class Vz extends Tl {
  /**
   * Constructs a new directional light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(t, e) {
    super(t, e), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(He.DEFAULT_UP), this.updateMatrix(), this.target = new He(), this.shadow = new J8();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(t) {
    return super.copy(t), this.target = t.target.clone(), this.shadow = t.shadow.clone(), this;
  }
}
class Gz extends Tl {
  /**
   * Constructs a new ambient light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(t, e) {
    super(t, e), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class Xz extends Tl {
  /**
   * Constructs a new area light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   * @param {number} [width=10] - The width of the light.
   * @param {number} [height=10] - The height of the light.
   */
  constructor(t, e, i = 10, a = 10) {
    super(t, e), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = i, this.height = a;
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   * Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(t) {
    this.intensity = t / (this.width * this.height * Math.PI);
  }
  copy(t) {
    return super.copy(t), this.width = t.width, this.height = t.height, this;
  }
  toJSON(t) {
    const e = super.toJSON(t);
    return e.object.width = this.width, e.object.height = this.height, e;
  }
}
class qz {
  /**
   * Constructs a new spherical harmonics.
   */
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let t = 0; t < 9; t++)
      this.coefficients.push(new H());
  }
  /**
   * Sets the given SH coefficients to this instance by copying
   * the values.
   *
   * @param {Array<Vector3>} coefficients - The SH coefficients.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  set(t) {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].copy(t[e]);
    return this;
  }
  /**
   * Sets all SH coefficients to `0`.
   *
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  zero() {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].set(0, 0, 0);
    return this;
  }
  /**
   * Returns the radiance in the direction of the given normal.
   *
   * @param {Vector3} normal - The normal vector (assumed to be unit length)
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The radiance.
   */
  getAt(t, e) {
    const i = t.x, a = t.y, s = t.z, r = this.coefficients;
    return e.copy(r[0]).multiplyScalar(0.282095), e.addScaledVector(r[1], 0.488603 * a), e.addScaledVector(r[2], 0.488603 * s), e.addScaledVector(r[3], 0.488603 * i), e.addScaledVector(r[4], 1.092548 * (i * a)), e.addScaledVector(r[5], 1.092548 * (a * s)), e.addScaledVector(r[6], 0.315392 * (3 * s * s - 1)), e.addScaledVector(r[7], 1.092548 * (i * s)), e.addScaledVector(r[8], 0.546274 * (i * i - a * a)), e;
  }
  /**
   * Returns the irradiance (radiance convolved with cosine lobe) in the
   * direction of the given normal.
   *
   * @param {Vector3} normal - The normal vector (assumed to be unit length)
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The irradiance.
   */
  getIrradianceAt(t, e) {
    const i = t.x, a = t.y, s = t.z, r = this.coefficients;
    return e.copy(r[0]).multiplyScalar(0.886227), e.addScaledVector(r[1], 2 * 0.511664 * a), e.addScaledVector(r[2], 2 * 0.511664 * s), e.addScaledVector(r[3], 2 * 0.511664 * i), e.addScaledVector(r[4], 2 * 0.429043 * i * a), e.addScaledVector(r[5], 2 * 0.429043 * a * s), e.addScaledVector(r[6], 0.743125 * s * s - 0.247708), e.addScaledVector(r[7], 2 * 0.429043 * i * s), e.addScaledVector(r[8], 0.429043 * (i * i - a * a)), e;
  }
  /**
   * Adds the given SH to this instance.
   *
   * @param {SphericalHarmonics3} sh - The SH to add.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  add(t) {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].add(t.coefficients[e]);
    return this;
  }
  /**
   * A convenience method for performing {@link SphericalHarmonics3#add} and
   * {@link SphericalHarmonics3#scale} at once.
   *
   * @param {SphericalHarmonics3} sh - The SH to add.
   * @param {number} s - The scale factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  addScaledSH(t, e) {
    for (let i = 0; i < 9; i++)
      this.coefficients[i].addScaledVector(t.coefficients[i], e);
    return this;
  }
  /**
   * Scales this SH by the given scale factor.
   *
   * @param {number} s - The scale factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  scale(t) {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].multiplyScalar(t);
    return this;
  }
  /**
   * Linear interpolates between the given SH and this instance by the given
   * alpha factor.
   *
   * @param {SphericalHarmonics3} sh - The SH to interpolate with.
   * @param {number} alpha - The alpha factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  lerp(t, e) {
    for (let i = 0; i < 9; i++)
      this.coefficients[i].lerp(t.coefficients[i], e);
    return this;
  }
  /**
   * Returns `true` if this spherical harmonics is equal with the given one.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.
   * @return {boolean} Whether this spherical harmonics is equal with the given one.
   */
  equals(t) {
    for (let e = 0; e < 9; e++)
      if (!this.coefficients[e].equals(t.coefficients[e]))
        return !1;
    return !0;
  }
  /**
   * Copies the values of the given spherical harmonics to this instance.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  copy(t) {
    return this.set(t.coefficients);
  }
  /**
   * Returns a new spherical harmonics with copied values from this instance.
   *
   * @return {SphericalHarmonics3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Sets the SH coefficients of this instance from the given array.
   *
   * @param {Array<number>} array - An array holding the SH coefficients.
   * @param {number} [offset=0] - The array offset where to start copying.
   * @return {SphericalHarmonics3} A clone of this instance.
   */
  fromArray(t, e = 0) {
    const i = this.coefficients;
    for (let a = 0; a < 9; a++)
      i[a].fromArray(t, e + a * 3);
    return this;
  }
  /**
   * Returns an array with the SH coefficients, or copies them into the provided
   * array. The coefficients are represented as numbers.
   *
   * @param {Array<number>} [array=[]] - The target array.
   * @param {number} [offset=0] - The array offset where to start copying.
   * @return {Array<number>} An array with flat SH coefficients.
   */
  toArray(t = [], e = 0) {
    const i = this.coefficients;
    for (let a = 0; a < 9; a++)
      i[a].toArray(t, e + a * 3);
    return t;
  }
  /**
   * Computes the SH basis for the given normal vector.
   *
   * @param {Vector3} normal - The normal.
   * @param {Array<number>} shBasis - The target array holding the SH basis.
   */
  static getBasisAt(t, e) {
    const i = t.x, a = t.y, s = t.z;
    e[0] = 0.282095, e[1] = 0.488603 * a, e[2] = 0.488603 * s, e[3] = 0.488603 * i, e[4] = 1.092548 * i * a, e[5] = 1.092548 * a * s, e[6] = 0.315392 * (3 * s * s - 1), e[7] = 1.092548 * i * s, e[8] = 0.546274 * (i * i - a * a);
  }
}
class Yz extends Tl {
  /**
   * Constructs a new light probe.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(t = new qz(), e = 1) {
    super(void 0, e), this.isLightProbe = !0, this.sh = t;
  }
  copy(t) {
    return super.copy(t), this.sh.copy(t.sh), this;
  }
  /**
   * Deserializes the light prove from the given JSON.
   *
   * @param {Object} json - The JSON holding the serialized light probe.
   * @return {LightProbe} A reference to this light probe.
   */
  fromJSON(t) {
    return this.intensity = t.intensity, this.sh.fromArray(t.sh), this;
  }
  toJSON(t) {
    const e = super.toJSON(t);
    return e.object.sh = this.sh.toArray(), e;
  }
}
class xy extends xa {
  /**
   * Constructs a new material loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t), this.textures = {};
  }
  /**
   * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Material)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(t, e, i, a) {
    const s = this, r = new uo(s.manager);
    r.setPath(s.path), r.setRequestHeader(s.requestHeader), r.setWithCredentials(s.withCredentials), r.load(t, function(l) {
      try {
        e(s.parse(JSON.parse(l)));
      } catch (c) {
        a ? a(c) : console.error(c), s.manager.itemError(t);
      }
    }, i, a);
  }
  /**
   * Parses the given JSON object and returns a material.
   *
   * @param {Object} json - The serialized material.
   * @return {Material} The parsed material.
   */
  parse(t) {
    const e = this.textures;
    function i(s) {
      return e[s] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", s), e[s];
    }
    const a = this.createMaterialFromType(t.type);
    if (t.uuid !== void 0 && (a.uuid = t.uuid), t.name !== void 0 && (a.name = t.name), t.color !== void 0 && a.color !== void 0 && a.color.setHex(t.color), t.roughness !== void 0 && (a.roughness = t.roughness), t.metalness !== void 0 && (a.metalness = t.metalness), t.sheen !== void 0 && (a.sheen = t.sheen), t.sheenColor !== void 0 && (a.sheenColor = new Pt().setHex(t.sheenColor)), t.sheenRoughness !== void 0 && (a.sheenRoughness = t.sheenRoughness), t.emissive !== void 0 && a.emissive !== void 0 && a.emissive.setHex(t.emissive), t.specular !== void 0 && a.specular !== void 0 && a.specular.setHex(t.specular), t.specularIntensity !== void 0 && (a.specularIntensity = t.specularIntensity), t.specularColor !== void 0 && a.specularColor !== void 0 && a.specularColor.setHex(t.specularColor), t.shininess !== void 0 && (a.shininess = t.shininess), t.clearcoat !== void 0 && (a.clearcoat = t.clearcoat), t.clearcoatRoughness !== void 0 && (a.clearcoatRoughness = t.clearcoatRoughness), t.dispersion !== void 0 && (a.dispersion = t.dispersion), t.iridescence !== void 0 && (a.iridescence = t.iridescence), t.iridescenceIOR !== void 0 && (a.iridescenceIOR = t.iridescenceIOR), t.iridescenceThicknessRange !== void 0 && (a.iridescenceThicknessRange = t.iridescenceThicknessRange), t.transmission !== void 0 && (a.transmission = t.transmission), t.thickness !== void 0 && (a.thickness = t.thickness), t.attenuationDistance !== void 0 && (a.attenuationDistance = t.attenuationDistance), t.attenuationColor !== void 0 && a.attenuationColor !== void 0 && a.attenuationColor.setHex(t.attenuationColor), t.anisotropy !== void 0 && (a.anisotropy = t.anisotropy), t.anisotropyRotation !== void 0 && (a.anisotropyRotation = t.anisotropyRotation), t.fog !== void 0 && (a.fog = t.fog), t.flatShading !== void 0 && (a.flatShading = t.flatShading), t.blending !== void 0 && (a.blending = t.blending), t.combine !== void 0 && (a.combine = t.combine), t.side !== void 0 && (a.side = t.side), t.shadowSide !== void 0 && (a.shadowSide = t.shadowSide), t.opacity !== void 0 && (a.opacity = t.opacity), t.transparent !== void 0 && (a.transparent = t.transparent), t.alphaTest !== void 0 && (a.alphaTest = t.alphaTest), t.alphaHash !== void 0 && (a.alphaHash = t.alphaHash), t.depthFunc !== void 0 && (a.depthFunc = t.depthFunc), t.depthTest !== void 0 && (a.depthTest = t.depthTest), t.depthWrite !== void 0 && (a.depthWrite = t.depthWrite), t.colorWrite !== void 0 && (a.colorWrite = t.colorWrite), t.blendSrc !== void 0 && (a.blendSrc = t.blendSrc), t.blendDst !== void 0 && (a.blendDst = t.blendDst), t.blendEquation !== void 0 && (a.blendEquation = t.blendEquation), t.blendSrcAlpha !== void 0 && (a.blendSrcAlpha = t.blendSrcAlpha), t.blendDstAlpha !== void 0 && (a.blendDstAlpha = t.blendDstAlpha), t.blendEquationAlpha !== void 0 && (a.blendEquationAlpha = t.blendEquationAlpha), t.blendColor !== void 0 && a.blendColor !== void 0 && a.blendColor.setHex(t.blendColor), t.blendAlpha !== void 0 && (a.blendAlpha = t.blendAlpha), t.stencilWriteMask !== void 0 && (a.stencilWriteMask = t.stencilWriteMask), t.stencilFunc !== void 0 && (a.stencilFunc = t.stencilFunc), t.stencilRef !== void 0 && (a.stencilRef = t.stencilRef), t.stencilFuncMask !== void 0 && (a.stencilFuncMask = t.stencilFuncMask), t.stencilFail !== void 0 && (a.stencilFail = t.stencilFail), t.stencilZFail !== void 0 && (a.stencilZFail = t.stencilZFail), t.stencilZPass !== void 0 && (a.stencilZPass = t.stencilZPass), t.stencilWrite !== void 0 && (a.stencilWrite = t.stencilWrite), t.wireframe !== void 0 && (a.wireframe = t.wireframe), t.wireframeLinewidth !== void 0 && (a.wireframeLinewidth = t.wireframeLinewidth), t.wireframeLinecap !== void 0 && (a.wireframeLinecap = t.wireframeLinecap), t.wireframeLinejoin !== void 0 && (a.wireframeLinejoin = t.wireframeLinejoin), t.rotation !== void 0 && (a.rotation = t.rotation), t.linewidth !== void 0 && (a.linewidth = t.linewidth), t.dashSize !== void 0 && (a.dashSize = t.dashSize), t.gapSize !== void 0 && (a.gapSize = t.gapSize), t.scale !== void 0 && (a.scale = t.scale), t.polygonOffset !== void 0 && (a.polygonOffset = t.polygonOffset), t.polygonOffsetFactor !== void 0 && (a.polygonOffsetFactor = t.polygonOffsetFactor), t.polygonOffsetUnits !== void 0 && (a.polygonOffsetUnits = t.polygonOffsetUnits), t.dithering !== void 0 && (a.dithering = t.dithering), t.alphaToCoverage !== void 0 && (a.alphaToCoverage = t.alphaToCoverage), t.premultipliedAlpha !== void 0 && (a.premultipliedAlpha = t.premultipliedAlpha), t.forceSinglePass !== void 0 && (a.forceSinglePass = t.forceSinglePass), t.visible !== void 0 && (a.visible = t.visible), t.toneMapped !== void 0 && (a.toneMapped = t.toneMapped), t.userData !== void 0 && (a.userData = t.userData), t.vertexColors !== void 0 && (typeof t.vertexColors == "number" ? a.vertexColors = t.vertexColors > 0 : a.vertexColors = t.vertexColors), t.uniforms !== void 0)
      for (const s in t.uniforms) {
        const r = t.uniforms[s];
        switch (a.uniforms[s] = {}, r.type) {
          case "t":
            a.uniforms[s].value = i(r.value);
            break;
          case "c":
            a.uniforms[s].value = new Pt().setHex(r.value);
            break;
          case "v2":
            a.uniforms[s].value = new ft().fromArray(r.value);
            break;
          case "v3":
            a.uniforms[s].value = new H().fromArray(r.value);
            break;
          case "v4":
            a.uniforms[s].value = new De().fromArray(r.value);
            break;
          case "m3":
            a.uniforms[s].value = new ge().fromArray(r.value);
            break;
          case "m4":
            a.uniforms[s].value = new ae().fromArray(r.value);
            break;
          default:
            a.uniforms[s].value = r.value;
        }
      }
    if (t.defines !== void 0 && (a.defines = t.defines), t.vertexShader !== void 0 && (a.vertexShader = t.vertexShader), t.fragmentShader !== void 0 && (a.fragmentShader = t.fragmentShader), t.glslVersion !== void 0 && (a.glslVersion = t.glslVersion), t.extensions !== void 0)
      for (const s in t.extensions)
        a.extensions[s] = t.extensions[s];
    if (t.lights !== void 0 && (a.lights = t.lights), t.clipping !== void 0 && (a.clipping = t.clipping), t.size !== void 0 && (a.size = t.size), t.sizeAttenuation !== void 0 && (a.sizeAttenuation = t.sizeAttenuation), t.map !== void 0 && (a.map = i(t.map)), t.matcap !== void 0 && (a.matcap = i(t.matcap)), t.alphaMap !== void 0 && (a.alphaMap = i(t.alphaMap)), t.bumpMap !== void 0 && (a.bumpMap = i(t.bumpMap)), t.bumpScale !== void 0 && (a.bumpScale = t.bumpScale), t.normalMap !== void 0 && (a.normalMap = i(t.normalMap)), t.normalMapType !== void 0 && (a.normalMapType = t.normalMapType), t.normalScale !== void 0) {
      let s = t.normalScale;
      Array.isArray(s) === !1 && (s = [s, s]), a.normalScale = new ft().fromArray(s);
    }
    return t.displacementMap !== void 0 && (a.displacementMap = i(t.displacementMap)), t.displacementScale !== void 0 && (a.displacementScale = t.displacementScale), t.displacementBias !== void 0 && (a.displacementBias = t.displacementBias), t.roughnessMap !== void 0 && (a.roughnessMap = i(t.roughnessMap)), t.metalnessMap !== void 0 && (a.metalnessMap = i(t.metalnessMap)), t.emissiveMap !== void 0 && (a.emissiveMap = i(t.emissiveMap)), t.emissiveIntensity !== void 0 && (a.emissiveIntensity = t.emissiveIntensity), t.specularMap !== void 0 && (a.specularMap = i(t.specularMap)), t.specularIntensityMap !== void 0 && (a.specularIntensityMap = i(t.specularIntensityMap)), t.specularColorMap !== void 0 && (a.specularColorMap = i(t.specularColorMap)), t.envMap !== void 0 && (a.envMap = i(t.envMap)), t.envMapRotation !== void 0 && a.envMapRotation.fromArray(t.envMapRotation), t.envMapIntensity !== void 0 && (a.envMapIntensity = t.envMapIntensity), t.reflectivity !== void 0 && (a.reflectivity = t.reflectivity), t.refractionRatio !== void 0 && (a.refractionRatio = t.refractionRatio), t.lightMap !== void 0 && (a.lightMap = i(t.lightMap)), t.lightMapIntensity !== void 0 && (a.lightMapIntensity = t.lightMapIntensity), t.aoMap !== void 0 && (a.aoMap = i(t.aoMap)), t.aoMapIntensity !== void 0 && (a.aoMapIntensity = t.aoMapIntensity), t.gradientMap !== void 0 && (a.gradientMap = i(t.gradientMap)), t.clearcoatMap !== void 0 && (a.clearcoatMap = i(t.clearcoatMap)), t.clearcoatRoughnessMap !== void 0 && (a.clearcoatRoughnessMap = i(t.clearcoatRoughnessMap)), t.clearcoatNormalMap !== void 0 && (a.clearcoatNormalMap = i(t.clearcoatNormalMap)), t.clearcoatNormalScale !== void 0 && (a.clearcoatNormalScale = new ft().fromArray(t.clearcoatNormalScale)), t.iridescenceMap !== void 0 && (a.iridescenceMap = i(t.iridescenceMap)), t.iridescenceThicknessMap !== void 0 && (a.iridescenceThicknessMap = i(t.iridescenceThicknessMap)), t.transmissionMap !== void 0 && (a.transmissionMap = i(t.transmissionMap)), t.thicknessMap !== void 0 && (a.thicknessMap = i(t.thicknessMap)), t.anisotropyMap !== void 0 && (a.anisotropyMap = i(t.anisotropyMap)), t.sheenColorMap !== void 0 && (a.sheenColorMap = i(t.sheenColorMap)), t.sheenRoughnessMap !== void 0 && (a.sheenRoughnessMap = i(t.sheenRoughnessMap)), a;
  }
  /**
   * Textures are not embedded in the material JSON so they have
   * to be injected before the loading process starts.
   *
   * @param {Object} value - A dictionary holding textures for material properties.
   * @return {MaterialLoader} A reference to this material loader.
   */
  setTextures(t) {
    return this.textures = t, this;
  }
  /**
   * Creates a material for the given type.
   *
   * @param {string} type - The material type.
   * @return {Material} The new material.
   */
  createMaterialFromType(t) {
    return xy.createMaterialFromType(t);
  }
  /**
   * Creates a material for the given type.
   *
   * @static
   * @param {string} type - The material type.
   * @return {Material} The new material.
   */
  static createMaterialFromType(t) {
    const e = {
      ShadowMaterial: bz,
      SpriteMaterial: aT,
      RawShaderMaterial: Ez,
      ShaderMaterial: Ms,
      PointsMaterial: rT,
      MeshPhysicalMaterial: Tz,
      MeshStandardMaterial: pT,
      MeshPhongMaterial: Az,
      MeshToonMaterial: Rz,
      MeshNormalMaterial: Cz,
      MeshLambertMaterial: wz,
      MeshDepthMaterial: mT,
      MeshDistanceMaterial: gT,
      MeshBasicMaterial: bl,
      MeshMatcapMaterial: Dz,
      LineDashedMaterial: Uz,
      LineBasicMaterial: $i,
      Material: Ii
    };
    return new e[t]();
  }
}
class ib {
  /**
   * Extracts the base URL from the given URL.
   *
   * @param {string} url -The URL to extract the base URL from.
   * @return {string} The extracted base URL.
   */
  static extractUrlBase(t) {
    const e = t.lastIndexOf("/");
    return e === -1 ? "./" : t.slice(0, e + 1);
  }
  /**
   * Resolves relative URLs against the given path. Absolute paths, data urls,
   * and blob URLs will be returned as is. Invalid URLs will return an empty
   * string.
   *
   * @param {string} url -The URL to resolve.
   * @param {string} path - The base path for relative URLs to be resolved against.
   * @return {string} The resolved URL.
   */
  static resolveURL(t, e) {
    return typeof t != "string" || t === "" ? "" : (/^https?:\/\//i.test(e) && /^\//.test(t) && (e = e.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(t) || /^data:.*,.*$/i.test(t) || /^blob:.*$/i.test(t) ? t : e + t);
  }
}
class kz extends ye {
  /**
   * Constructs a new instanced buffer geometry.
   */
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(t) {
    return super.copy(t), this.instanceCount = t.instanceCount, this;
  }
  toJSON() {
    const t = super.toJSON();
    return t.instanceCount = this.instanceCount, t.isInstancedBufferGeometry = !0, t;
  }
}
class Wz extends xa {
  /**
   * Constructs a new geometry loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and pass the loaded geometry to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(t, e, i, a) {
    const s = this, r = new uo(s.manager);
    r.setPath(s.path), r.setRequestHeader(s.requestHeader), r.setWithCredentials(s.withCredentials), r.load(t, function(l) {
      try {
        e(s.parse(JSON.parse(l)));
      } catch (c) {
        a ? a(c) : console.error(c), s.manager.itemError(t);
      }
    }, i, a);
  }
  /**
   * Parses the given JSON object and returns a geometry.
   *
   * @param {Object} json - The serialized geometry.
   * @return {BufferGeometry} The parsed geometry.
   */
  parse(t) {
    const e = {}, i = {};
    function a(g, y) {
      if (e[y] !== void 0) return e[y];
      const M = g.interleavedBuffers[y], v = s(g, M.buffer), S = bf(M.type, v), E = new ny(S, M.stride);
      return E.uuid = M.uuid, e[y] = E, E;
    }
    function s(g, y) {
      if (i[y] !== void 0) return i[y];
      const M = g.arrayBuffers[y], v = new Uint32Array(M).buffer;
      return i[y] = v, v;
    }
    const r = t.isInstancedBufferGeometry ? new kz() : new ye(), l = t.data.index;
    if (l !== void 0) {
      const g = bf(l.type, l.array);
      r.setIndex(new an(g, 1));
    }
    const c = t.data.attributes;
    for (const g in c) {
      const y = c[g];
      let x;
      if (y.isInterleavedBufferAttribute) {
        const M = a(t.data, y.data);
        x = new qu(M, y.itemSize, y.offset, y.normalized);
      } else {
        const M = bf(y.type, y.array), v = y.isInstancedBufferAttribute ? ch : an;
        x = new v(M, y.itemSize, y.normalized);
      }
      y.name !== void 0 && (x.name = y.name), y.usage !== void 0 && x.setUsage(y.usage), r.setAttribute(g, x);
    }
    const f = t.data.morphAttributes;
    if (f)
      for (const g in f) {
        const y = f[g], x = [];
        for (let M = 0, v = y.length; M < v; M++) {
          const S = y[M];
          let E;
          if (S.isInterleavedBufferAttribute) {
            const T = a(t.data, S.data);
            E = new qu(T, S.itemSize, S.offset, S.normalized);
          } else {
            const T = bf(S.type, S.array);
            E = new an(T, S.itemSize, S.normalized);
          }
          S.name !== void 0 && (E.name = S.name), x.push(E);
        }
        r.morphAttributes[g] = x;
      }
    t.data.morphTargetsRelative && (r.morphTargetsRelative = !0);
    const p = t.data.groups || t.data.drawcalls || t.data.offsets;
    if (p !== void 0)
      for (let g = 0, y = p.length; g !== y; ++g) {
        const x = p[g];
        r.addGroup(x.start, x.count, x.materialIndex);
      }
    const m = t.data.boundingSphere;
    return m !== void 0 && (r.boundingSphere = new Si().fromJSON(m)), t.name && (r.name = t.name), t.userData && (r.userData = t.userData), r;
  }
}
class $8 extends xa {
  /**
   * Constructs a new object loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and pass the loaded 3D object to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(t, e, i, a) {
    const s = this, r = this.path === "" ? ib.extractUrlBase(t) : this.path;
    this.resourcePath = this.resourcePath || r;
    const l = new uo(this.manager);
    l.setPath(this.path), l.setRequestHeader(this.requestHeader), l.setWithCredentials(this.withCredentials), l.load(t, function(c) {
      let f = null;
      try {
        f = JSON.parse(c);
      } catch (p) {
        a !== void 0 && a(p), console.error("THREE:ObjectLoader: Can't parse " + t + ".", p.message);
        return;
      }
      const d = f.metadata;
      if (d === void 0 || d.type === void 0 || d.type.toLowerCase() === "geometry") {
        a !== void 0 && a(new Error("THREE.ObjectLoader: Can't load " + t)), console.error("THREE.ObjectLoader: Can't load " + t);
        return;
      }
      s.parse(f, e);
    }, i, a);
  }
  /**
   * Async version of {@link ObjectLoader#load}.
   *
   * @async
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @return {Promise<Object3D>} A Promise that resolves with the loaded 3D object.
   */
  async loadAsync(t, e) {
    const i = this, a = this.path === "" ? ib.extractUrlBase(t) : this.path;
    this.resourcePath = this.resourcePath || a;
    const s = new uo(this.manager);
    s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials);
    const r = await s.loadAsync(t, e), l = JSON.parse(r), c = l.metadata;
    if (c === void 0 || c.type === void 0 || c.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + t);
    return await i.parseAsync(l);
  }
  /**
   * Parses the given JSON. This is used internally by {@link ObjectLoader#load}
   * but can also be used directly to parse a previously loaded JSON structure.
   *
   * @param {Object} json - The serialized 3D object.
   * @param {onLoad} onLoad - Executed when all resources (e.g. textures) have been fully loaded.
   * @return {Object3D} The parsed 3D object.
   */
  parse(t, e) {
    const i = this.parseAnimations(t.animations), a = this.parseShapes(t.shapes), s = this.parseGeometries(t.geometries, a), r = this.parseImages(t.images, function() {
      e !== void 0 && e(f);
    }), l = this.parseTextures(t.textures, r), c = this.parseMaterials(t.materials, l), f = this.parseObject(t.object, s, c, l, i), d = this.parseSkeletons(t.skeletons, f);
    if (this.bindSkeletons(f, d), this.bindLightTargets(f), e !== void 0) {
      let p = !1;
      for (const m in r)
        if (r[m].data instanceof HTMLImageElement) {
          p = !0;
          break;
        }
      p === !1 && e(f);
    }
    return f;
  }
  /**
   * Async version of {@link ObjectLoader#parse}.
   *
   * @param {Object} json - The serialized 3D object.
   * @return {Promise<Object3D>} A Promise that resolves with the parsed 3D object.
   */
  async parseAsync(t) {
    const e = this.parseAnimations(t.animations), i = this.parseShapes(t.shapes), a = this.parseGeometries(t.geometries, i), s = await this.parseImagesAsync(t.images), r = this.parseTextures(t.textures, s), l = this.parseMaterials(t.materials, r), c = this.parseObject(t.object, a, l, r, e), f = this.parseSkeletons(t.skeletons, c);
    return this.bindSkeletons(c, f), this.bindLightTargets(c), c;
  }
  // internals
  parseShapes(t) {
    const e = {};
    if (t !== void 0)
      for (let i = 0, a = t.length; i < a; i++) {
        const s = new Pu().fromJSON(t[i]);
        e[s.uuid] = s;
      }
    return e;
  }
  parseSkeletons(t, e) {
    const i = {}, a = {};
    if (e.traverse(function(s) {
      s.isBone && (a[s.uuid] = s);
    }), t !== void 0)
      for (let s = 0, r = t.length; s < r; s++) {
        const l = new iy().fromJSON(t[s], a);
        i[l.uuid] = l;
      }
    return i;
  }
  parseGeometries(t, e) {
    const i = {};
    if (t !== void 0) {
      const a = new Wz();
      for (let s = 0, r = t.length; s < r; s++) {
        let l;
        const c = t[s];
        switch (c.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            l = a.parse(c);
            break;
          default:
            c.type in Mw ? l = Mw[c.type].fromJSON(c, e) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${c.type}"`);
        }
        l.uuid = c.uuid, c.name !== void 0 && (l.name = c.name), c.userData !== void 0 && (l.userData = c.userData), i[c.uuid] = l;
      }
    }
    return i;
  }
  parseMaterials(t, e) {
    const i = {}, a = {};
    if (t !== void 0) {
      const s = new xy();
      s.setTextures(e);
      for (let r = 0, l = t.length; r < l; r++) {
        const c = t[r];
        i[c.uuid] === void 0 && (i[c.uuid] = s.parse(c)), a[c.uuid] = i[c.uuid];
      }
    }
    return a;
  }
  parseAnimations(t) {
    const e = {};
    if (t !== void 0)
      for (let i = 0; i < t.length; i++) {
        const a = t[i], s = Qp.parse(a);
        e[s.uuid] = s;
      }
    return e;
  }
  parseImages(t, e) {
    const i = this, a = {};
    let s;
    function r(c) {
      return i.manager.itemStart(c), s.load(c, function() {
        i.manager.itemEnd(c);
      }, void 0, function() {
        i.manager.itemError(c), i.manager.itemEnd(c);
      });
    }
    function l(c) {
      if (typeof c == "string") {
        const f = c, d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(f) ? f : i.resourcePath + f;
        return r(d);
      } else
        return c.data ? {
          data: bf(c.type, c.data),
          width: c.width,
          height: c.height
        } : null;
    }
    if (t !== void 0 && t.length > 0) {
      const c = new xT(e);
      s = new Kp(c), s.setCrossOrigin(this.crossOrigin);
      for (let f = 0, d = t.length; f < d; f++) {
        const p = t[f], m = p.url;
        if (Array.isArray(m)) {
          const g = [];
          for (let y = 0, x = m.length; y < x; y++) {
            const M = m[y], v = l(M);
            v !== null && (v instanceof HTMLImageElement ? g.push(v) : g.push(new fr(v.data, v.width, v.height)));
          }
          a[p.uuid] = new tl(g);
        } else {
          const g = l(p.url);
          a[p.uuid] = new tl(g);
        }
      }
    }
    return a;
  }
  async parseImagesAsync(t) {
    const e = this, i = {};
    let a;
    async function s(r) {
      if (typeof r == "string") {
        const l = r, c = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(l) ? l : e.resourcePath + l;
        return await a.loadAsync(c);
      } else
        return r.data ? {
          data: bf(r.type, r.data),
          width: r.width,
          height: r.height
        } : null;
    }
    if (t !== void 0 && t.length > 0) {
      a = new Kp(this.manager), a.setCrossOrigin(this.crossOrigin);
      for (let r = 0, l = t.length; r < l; r++) {
        const c = t[r], f = c.url;
        if (Array.isArray(f)) {
          const d = [];
          for (let p = 0, m = f.length; p < m; p++) {
            const g = f[p], y = await s(g);
            y !== null && (y instanceof HTMLImageElement ? d.push(y) : d.push(new fr(y.data, y.width, y.height)));
          }
          i[c.uuid] = new tl(d);
        } else {
          const d = await s(c.url);
          i[c.uuid] = new tl(d);
        }
      }
    }
    return i;
  }
  parseTextures(t, e) {
    function i(s, r) {
      return typeof s == "number" ? s : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", s), r[s]);
    }
    const a = {};
    if (t !== void 0)
      for (let s = 0, r = t.length; s < r; s++) {
        const l = t[s];
        l.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', l.uuid), e[l.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", l.image);
        const c = e[l.image], f = c.data;
        let d;
        Array.isArray(f) ? (d = new ym(), f.length === 6 && (d.needsUpdate = !0)) : (f && f.data ? d = new fr() : d = new Sn(), f && (d.needsUpdate = !0)), d.source = c, d.uuid = l.uuid, l.name !== void 0 && (d.name = l.name), l.mapping !== void 0 && (d.mapping = i(l.mapping, tG)), l.channel !== void 0 && (d.channel = l.channel), l.offset !== void 0 && d.offset.fromArray(l.offset), l.repeat !== void 0 && d.repeat.fromArray(l.repeat), l.center !== void 0 && d.center.fromArray(l.center), l.rotation !== void 0 && (d.rotation = l.rotation), l.wrap !== void 0 && (d.wrapS = i(l.wrap[0], Aw), d.wrapT = i(l.wrap[1], Aw)), l.format !== void 0 && (d.format = l.format), l.internalFormat !== void 0 && (d.internalFormat = l.internalFormat), l.type !== void 0 && (d.type = l.type), l.colorSpace !== void 0 && (d.colorSpace = l.colorSpace), l.minFilter !== void 0 && (d.minFilter = i(l.minFilter, Rw)), l.magFilter !== void 0 && (d.magFilter = i(l.magFilter, Rw)), l.anisotropy !== void 0 && (d.anisotropy = l.anisotropy), l.flipY !== void 0 && (d.flipY = l.flipY), l.generateMipmaps !== void 0 && (d.generateMipmaps = l.generateMipmaps), l.premultiplyAlpha !== void 0 && (d.premultiplyAlpha = l.premultiplyAlpha), l.unpackAlignment !== void 0 && (d.unpackAlignment = l.unpackAlignment), l.compareFunction !== void 0 && (d.compareFunction = l.compareFunction), l.userData !== void 0 && (d.userData = l.userData), a[l.uuid] = d;
      }
    return a;
  }
  parseObject(t, e, i, a, s) {
    let r;
    function l(m) {
      return e[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", m), e[m];
    }
    function c(m) {
      if (m !== void 0) {
        if (Array.isArray(m)) {
          const g = [];
          for (let y = 0, x = m.length; y < x; y++) {
            const M = m[y];
            i[M] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", M), g.push(i[M]);
          }
          return g;
        }
        return i[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", m), i[m];
      }
    }
    function f(m) {
      return a[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", m), a[m];
    }
    let d, p;
    switch (t.type) {
      case "Scene":
        r = new iT(), t.background !== void 0 && (Number.isInteger(t.background) ? r.background = new Pt(t.background) : r.background = f(t.background)), t.environment !== void 0 && (r.environment = f(t.environment)), t.fog !== void 0 && (t.fog.type === "Fog" ? r.fog = new ey(t.fog.color, t.fog.near, t.fog.far) : t.fog.type === "FogExp2" && (r.fog = new ty(t.fog.color, t.fog.density)), t.fog.name !== "" && (r.fog.name = t.fog.name)), t.backgroundBlurriness !== void 0 && (r.backgroundBlurriness = t.backgroundBlurriness), t.backgroundIntensity !== void 0 && (r.backgroundIntensity = t.backgroundIntensity), t.backgroundRotation !== void 0 && r.backgroundRotation.fromArray(t.backgroundRotation), t.environmentIntensity !== void 0 && (r.environmentIntensity = t.environmentIntensity), t.environmentRotation !== void 0 && r.environmentRotation.fromArray(t.environmentRotation);
        break;
      case "PerspectiveCamera":
        r = new li(t.fov, t.aspect, t.near, t.far), t.focus !== void 0 && (r.focus = t.focus), t.zoom !== void 0 && (r.zoom = t.zoom), t.filmGauge !== void 0 && (r.filmGauge = t.filmGauge), t.filmOffset !== void 0 && (r.filmOffset = t.filmOffset), t.view !== void 0 && (r.view = Object.assign({}, t.view));
        break;
      case "OrthographicCamera":
        r = new Am(t.left, t.right, t.top, t.bottom, t.near, t.far), t.zoom !== void 0 && (r.zoom = t.zoom), t.view !== void 0 && (r.view = Object.assign({}, t.view));
        break;
      case "AmbientLight":
        r = new Gz(t.color, t.intensity);
        break;
      case "DirectionalLight":
        r = new Vz(t.color, t.intensity), r.target = t.target || "";
        break;
      case "PointLight":
        r = new Fz(t.color, t.intensity, t.distance, t.decay);
        break;
      case "RectAreaLight":
        r = new Xz(t.color, t.intensity, t.width, t.height);
        break;
      case "SpotLight":
        r = new Hz(t.color, t.intensity, t.distance, t.angle, t.penumbra, t.decay), r.target = t.target || "";
        break;
      case "HemisphereLight":
        r = new Iz(t.color, t.groundColor, t.intensity);
        break;
      case "LightProbe":
        r = new Yz().fromJSON(t);
        break;
      case "SkinnedMesh":
        d = l(t.geometry), p = c(t.material), r = new rz(d, p), t.bindMode !== void 0 && (r.bindMode = t.bindMode), t.bindMatrix !== void 0 && r.bindMatrix.fromArray(t.bindMatrix), t.skeleton !== void 0 && (r.skeleton = t.skeleton);
        break;
      case "Mesh":
        d = l(t.geometry), p = c(t.material), r = new Yn(d, p);
        break;
      case "InstancedMesh":
        d = l(t.geometry), p = c(t.material);
        const m = t.count, g = t.instanceMatrix, y = t.instanceColor;
        r = new oz(d, p, m), r.instanceMatrix = new ch(new Float32Array(g.array), 16), y !== void 0 && (r.instanceColor = new ch(new Float32Array(y.array), y.itemSize));
        break;
      case "BatchedMesh":
        d = l(t.geometry), p = c(t.material), r = new lz(t.maxInstanceCount, t.maxVertexCount, t.maxIndexCount, p), r.geometry = d, r.perObjectFrustumCulled = t.perObjectFrustumCulled, r.sortObjects = t.sortObjects, r._drawRanges = t.drawRanges, r._reservedRanges = t.reservedRanges, r._geometryInfo = t.geometryInfo.map((x) => {
          let M = null, v = null;
          return x.boundingBox !== void 0 && (M = new Pi().fromJSON(x.boundingBox)), x.boundingSphere !== void 0 && (v = new Si().fromJSON(x.boundingSphere)), {
            ...x,
            boundingBox: M,
            boundingSphere: v
          };
        }), r._instanceInfo = t.instanceInfo, r._availableInstanceIds = t._availableInstanceIds, r._availableGeometryIds = t._availableGeometryIds, r._nextIndexStart = t.nextIndexStart, r._nextVertexStart = t.nextVertexStart, r._geometryCount = t.geometryCount, r._maxInstanceCount = t.maxInstanceCount, r._maxVertexCount = t.maxVertexCount, r._maxIndexCount = t.maxIndexCount, r._geometryInitialized = t.geometryInitialized, r._matricesTexture = f(t.matricesTexture.uuid), r._indirectTexture = f(t.indirectTexture.uuid), t.colorsTexture !== void 0 && (r._colorsTexture = f(t.colorsTexture.uuid)), t.boundingSphere !== void 0 && (r.boundingSphere = new Si().fromJSON(t.boundingSphere)), t.boundingBox !== void 0 && (r.boundingBox = new Pi().fromJSON(t.boundingBox));
        break;
      case "LOD":
        r = new sz();
        break;
      case "Line":
        r = new _l(l(t.geometry), c(t.material));
        break;
      case "LineLoop":
        r = new uz(l(t.geometry), c(t.material));
        break;
      case "LineSegments":
        r = new vr(l(t.geometry), c(t.material));
        break;
      case "PointCloud":
      case "Points":
        r = new cz(l(t.geometry), c(t.material));
        break;
      case "Sprite":
        r = new az(c(t.material));
        break;
      case "Group":
        r = new Ef();
        break;
      case "Bone":
        r = new sT();
        break;
      default:
        r = new He();
    }
    if (r.uuid = t.uuid, t.name !== void 0 && (r.name = t.name), t.matrix !== void 0 ? (r.matrix.fromArray(t.matrix), t.matrixAutoUpdate !== void 0 && (r.matrixAutoUpdate = t.matrixAutoUpdate), r.matrixAutoUpdate && r.matrix.decompose(r.position, r.quaternion, r.scale)) : (t.position !== void 0 && r.position.fromArray(t.position), t.rotation !== void 0 && r.rotation.fromArray(t.rotation), t.quaternion !== void 0 && r.quaternion.fromArray(t.quaternion), t.scale !== void 0 && r.scale.fromArray(t.scale)), t.up !== void 0 && r.up.fromArray(t.up), t.castShadow !== void 0 && (r.castShadow = t.castShadow), t.receiveShadow !== void 0 && (r.receiveShadow = t.receiveShadow), t.shadow && (t.shadow.intensity !== void 0 && (r.shadow.intensity = t.shadow.intensity), t.shadow.bias !== void 0 && (r.shadow.bias = t.shadow.bias), t.shadow.normalBias !== void 0 && (r.shadow.normalBias = t.shadow.normalBias), t.shadow.radius !== void 0 && (r.shadow.radius = t.shadow.radius), t.shadow.mapSize !== void 0 && r.shadow.mapSize.fromArray(t.shadow.mapSize), t.shadow.camera !== void 0 && (r.shadow.camera = this.parseObject(t.shadow.camera))), t.visible !== void 0 && (r.visible = t.visible), t.frustumCulled !== void 0 && (r.frustumCulled = t.frustumCulled), t.renderOrder !== void 0 && (r.renderOrder = t.renderOrder), t.userData !== void 0 && (r.userData = t.userData), t.layers !== void 0 && (r.layers.mask = t.layers), t.children !== void 0) {
      const m = t.children;
      for (let g = 0; g < m.length; g++)
        r.add(this.parseObject(m[g], e, i, a, s));
    }
    if (t.animations !== void 0) {
      const m = t.animations;
      for (let g = 0; g < m.length; g++) {
        const y = m[g];
        r.animations.push(s[y]);
      }
    }
    if (t.type === "LOD") {
      t.autoUpdate !== void 0 && (r.autoUpdate = t.autoUpdate);
      const m = t.levels;
      for (let g = 0; g < m.length; g++) {
        const y = m[g], x = r.getObjectByProperty("uuid", y.object);
        x !== void 0 && r.addLevel(x, y.distance, y.hysteresis);
      }
    }
    return r;
  }
  bindSkeletons(t, e) {
    Object.keys(e).length !== 0 && t.traverse(function(i) {
      if (i.isSkinnedMesh === !0 && i.skeleton !== void 0) {
        const a = e[i.skeleton];
        a === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", i.skeleton) : i.bind(a, i.bindMatrix);
      }
    });
  }
  bindLightTargets(t) {
    t.traverse(function(e) {
      if (e.isDirectionalLight || e.isSpotLight) {
        const i = e.target, a = t.getObjectByProperty("uuid", i);
        a !== void 0 ? e.target = a : e.target = new He();
      }
    });
  }
}
const tG = {
  UVMapping: X_,
  CubeReflectionMapping: oo,
  CubeRefractionMapping: gl,
  EquirectangularReflectionMapping: zp,
  EquirectangularRefractionMapping: Bp,
  CubeUVReflectionMapping: Sh
}, Aw = {
  RepeatWrapping: Pp,
  ClampToEdgeWrapping: vs,
  MirroredRepeatWrapping: Ip
}, Rw = {
  NearestFilter: xi,
  NearestMipmapNearestFilter: GE,
  NearestMipmapLinearFilter: Mf,
  LinearFilter: Qn,
  LinearMipmapNearestFilter: ip,
  LinearMipmapLinearFilter: ar
}, g1 = /* @__PURE__ */ new WeakMap();
class eG extends xa {
  /**
   * Constructs a new image bitmap loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  /**
   * Sets the given loader options. The structure of the object must match the `options` parameter of
   * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.
   *
   * @param {Object} options - The loader options to set.
   * @return {ImageBitmapLoader} A reference to this image bitmap loader.
   */
  setOptions(t) {
    return this.options = t, this;
  }
  /**
   * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {ImageBitmap|undefined} The image bitmap.
   */
  load(t, e, i, a) {
    t === void 0 && (t = ""), this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t);
    const s = this, r = jr.get(t);
    if (r !== void 0) {
      if (s.manager.itemStart(t), r.then) {
        r.then((f) => {
          if (g1.has(r) === !0)
            a && a(g1.get(r)), s.manager.itemError(t), s.manager.itemEnd(t);
          else
            return e && e(f), s.manager.itemEnd(t), f;
        });
        return;
      }
      return setTimeout(function() {
        e && e(r), s.manager.itemEnd(t);
      }, 0), r;
    }
    const l = {};
    l.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", l.headers = this.requestHeader;
    const c = fetch(t, l).then(function(f) {
      return f.blob();
    }).then(function(f) {
      return createImageBitmap(f, Object.assign(s.options, { colorSpaceConversion: "none" }));
    }).then(function(f) {
      return jr.add(t, f), e && e(f), s.manager.itemEnd(t), f;
    }).catch(function(f) {
      a && a(f), g1.set(c, f), jr.remove(t), s.manager.itemError(t), s.manager.itemEnd(t);
    });
    jr.add(t, c), s.manager.itemStart(t);
  }
}
let c0;
class MT {
  /**
   * Returns the global native audio context.
   *
   * @return {AudioContext} The native audio context.
   */
  static getContext() {
    return c0 === void 0 && (c0 = new (window.AudioContext || window.webkitAudioContext)()), c0;
  }
  /**
   * Allows to set the global native audio context from outside.
   *
   * @param {AudioContext} value - The native context to set.
   */
  static setContext(t) {
    c0 = t;
  }
}
class nG extends xa {
  /**
   * Constructs a new audio loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(t) {
    super(t);
  }
  /**
   * Starts loading from the given URL and passes the loaded audio buffer
   * to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(t, e, i, a) {
    const s = this, r = new uo(this.manager);
    r.setResponseType("arraybuffer"), r.setPath(this.path), r.setRequestHeader(this.requestHeader), r.setWithCredentials(this.withCredentials), r.load(t, function(c) {
      try {
        const f = c.slice(0);
        MT.getContext().decodeAudioData(f, function(p) {
          e(p);
        }).catch(l);
      } catch (f) {
        l(f);
      }
    }, i, a);
    function l(c) {
      a ? a(c) : console.error(c), s.manager.itemError(t);
    }
  }
}
const Cw = /* @__PURE__ */ new ae(), ww = /* @__PURE__ */ new ae(), eu = /* @__PURE__ */ new ae();
class iG {
  /**
   * Constructs a new stereo camera.
   */
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new li(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new li(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  /**
   * Updates the stereo camera based on the given perspective camera.
   *
   * @param {PerspectiveCamera} camera - The perspective camera.
   */
  update(t) {
    const e = this._cache;
    if (e.focus !== t.focus || e.fov !== t.fov || e.aspect !== t.aspect * this.aspect || e.near !== t.near || e.far !== t.far || e.zoom !== t.zoom || e.eyeSep !== this.eyeSep) {
      e.focus = t.focus, e.fov = t.fov, e.aspect = t.aspect * this.aspect, e.near = t.near, e.far = t.far, e.zoom = t.zoom, e.eyeSep = this.eyeSep, eu.copy(t.projectionMatrix);
      const a = e.eyeSep / 2, s = a * e.near / e.focus, r = e.near * Math.tan(Bu * e.fov * 0.5) / e.zoom;
      let l, c;
      ww.elements[12] = -a, Cw.elements[12] = a, l = -r * e.aspect + s, c = r * e.aspect + s, eu.elements[0] = 2 * e.near / (c - l), eu.elements[8] = (c + l) / (c - l), this.cameraL.projectionMatrix.copy(eu), l = -r * e.aspect - s, c = r * e.aspect - s, eu.elements[0] = 2 * e.near / (c - l), eu.elements[8] = (c + l) / (c - l), this.cameraR.projectionMatrix.copy(eu);
    }
    this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(ww), this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Cw);
  }
}
class Zz extends li {
  /**
   * Constructs a new array camera.
   *
   * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.
   */
  constructor(t = []) {
    super(), this.isArrayCamera = !0, this.isMultiViewCamera = !1, this.cameras = t;
  }
}
class bT {
  /**
   * Constructs a new clock.
   *
   * @param {boolean} [autoStart=true] - Whether to automatically start the clock when
   * `getDelta()` is called for the first time.
   */
  constructor(t = !0) {
    this.autoStart = t, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  /**
   * Starts the clock. When `autoStart` is set to `true`, the method is automatically
   * called by the class.
   */
  start() {
    this.startTime = Dw(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  /**
   * Stops the clock.
   */
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  /**
   * Returns the elapsed time in seconds.
   *
   * @return {number} The elapsed time.
   */
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  /**
   * Returns the delta time in seconds.
   *
   * @return {number} The delta time.
   */
  getDelta() {
    let t = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const e = Dw();
      t = (e - this.oldTime) / 1e3, this.oldTime = e, this.elapsedTime += t;
    }
    return t;
  }
}
function Dw() {
  return performance.now();
}
const nu = /* @__PURE__ */ new H(), v1 = /* @__PURE__ */ new Jn(), aG = /* @__PURE__ */ new H(), iu = /* @__PURE__ */ new H(), au = /* @__PURE__ */ new H();
class sG extends He {
  /**
   * Constructs a new audio listener.
   */
  constructor() {
    super(), this.type = "AudioListener", this.context = MT.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new bT();
  }
  /**
   * Returns the listener's input node.
   *
   * This method is used by other audio nodes to connect to this listener.
   *
   * @return {GainNode} The input node.
   */
  getInput() {
    return this.gain;
  }
  /**
   * Removes the current filter from this listener.
   *
   * @return {AudioListener} A reference to this listener.
   */
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  /**
   * Returns the current set filter.
   *
   * @return {?AudioNode} The filter.
   */
  getFilter() {
    return this.filter;
  }
  /**
   * Sets the given filter to this listener.
   *
   * @param {AudioNode} value - The filter to set.
   * @return {AudioListener} A reference to this listener.
   */
  setFilter(t) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = t, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  /**
   * Returns the applications master volume.
   *
   * @return {number} The master volume.
   */
  getMasterVolume() {
    return this.gain.gain.value;
  }
  /**
   * Sets the applications master volume. This volume setting affects
   * all audio nodes in the scene.
   *
   * @param {number} value - The master volume to set.
   * @return {AudioListener} A reference to this listener.
   */
  setMasterVolume(t) {
    return this.gain.gain.setTargetAtTime(t, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(t) {
    super.updateMatrixWorld(t);
    const e = this.context.listener;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(nu, v1, aG), iu.set(0, 0, -1).applyQuaternion(v1), au.set(0, 1, 0).applyQuaternion(v1), e.positionX) {
      const i = this.context.currentTime + this.timeDelta;
      e.positionX.linearRampToValueAtTime(nu.x, i), e.positionY.linearRampToValueAtTime(nu.y, i), e.positionZ.linearRampToValueAtTime(nu.z, i), e.forwardX.linearRampToValueAtTime(iu.x, i), e.forwardY.linearRampToValueAtTime(iu.y, i), e.forwardZ.linearRampToValueAtTime(iu.z, i), e.upX.linearRampToValueAtTime(au.x, i), e.upY.linearRampToValueAtTime(au.y, i), e.upZ.linearRampToValueAtTime(au.z, i);
    } else
      e.setPosition(nu.x, nu.y, nu.z), e.setOrientation(iu.x, iu.y, iu.z, au.x, au.y, au.z);
  }
}
class jz extends He {
  /**
   * Constructs a new audio.
   *
   * @param {AudioListener} listener - The global audio listener.
   */
  constructor(t) {
    super(), this.type = "Audio", this.listener = t, this.context = t.context, this.gain = this.context.createGain(), this.gain.connect(t.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  /**
   * Returns the output audio node.
   *
   * @return {GainNode} The output node.
   */
  getOutput() {
    return this.gain;
  }
  /**
   * Sets the given audio node as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.
   * @return {Audio} A reference to this instance.
   */
  setNodeSource(t) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = t, this.connect(), this;
  }
  /**
   * Sets the given media element as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {HTMLMediaElement} mediaElement - The media element.
   * @return {Audio} A reference to this instance.
   */
  setMediaElementSource(t) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(t), this.connect(), this;
  }
  /**
   * Sets the given media stream as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {MediaStream} mediaStream - The media stream.
   * @return {Audio} A reference to this instance.
   */
  setMediaStreamSource(t) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(t), this.connect(), this;
  }
  /**
   * Sets the given audio buffer as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.
   *
   * @param {AudioBuffer} audioBuffer - The audio buffer.
   * @return {Audio} A reference to this instance.
   */
  setBuffer(t) {
    return this.buffer = t, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  /**
   * Starts the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.
   * @return {Audio|undefined} A reference to this instance.
   */
  play(t = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + t;
    const e = this.context.createBufferSource();
    return e.buffer = this.buffer, e.loop = this.loop, e.loopStart = this.loopStart, e.loopEnd = this.loopEnd, e.onended = this.onEnded.bind(this), e.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = e, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  /**
   * Pauses the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @return {Audio|undefined} A reference to this instance.
   */
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  /**
   * Stops the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.
   * @return {Audio|undefined} A reference to this instance.
   */
  stop(t = 0) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(this.context.currentTime + t), this.source.onended = null), this.isPlaying = !1, this;
  }
  /**
   * Connects to the audio source. This is used internally on
   * initialisation and when setting / removing filters.
   *
   * @return {Audio} A reference to this instance.
   */
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let t = 1, e = this.filters.length; t < e; t++)
        this.filters[t - 1].connect(this.filters[t]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  /**
   * Disconnects to the audio source. This is used internally on
   * initialisation and when setting / removing filters.
   *
   * @return {Audio|undefined} A reference to this instance.
   */
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let t = 1, e = this.filters.length; t < e; t++)
          this.filters[t - 1].disconnect(this.filters[t]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else
        this.source.disconnect(this.getOutput());
      return this._connected = !1, this;
    }
  }
  /**
   * Returns the current set filters.
   *
   * @return {Array<AudioNode>} The list of filters.
   */
  getFilters() {
    return this.filters;
  }
  /**
   * Sets an array of filters and connects them with the audio source.
   *
   * @param {Array<AudioNode>} [value] - A list of filters.
   * @return {Audio} A reference to this instance.
   */
  setFilters(t) {
    return t || (t = []), this._connected === !0 ? (this.disconnect(), this.filters = t.slice(), this.connect()) : this.filters = t.slice(), this;
  }
  /**
   * Defines the detuning of oscillation in cents.
   *
   * @param {number} value - The detuning of oscillation in cents.
   * @return {Audio} A reference to this instance.
   */
  setDetune(t) {
    return this.detune = t, this.isPlaying === !0 && this.source.detune !== void 0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  /**
   * Returns the detuning of oscillation in cents.
   *
   * @return {number} The detuning of oscillation in cents.
   */
  getDetune() {
    return this.detune;
  }
  /**
   * Returns the first filter in the list of filters.
   *
   * @return {AudioNode|undefined} The first filter in the list of filters.
   */
  getFilter() {
    return this.getFilters()[0];
  }
  /**
   * Applies a single filter node to the audio.
   *
   * @param {AudioNode} [filter] - The filter to set.
   * @return {Audio} A reference to this instance.
   */
  setFilter(t) {
    return this.setFilters(t ? [t] : []);
  }
  /**
   * Sets the playback rate.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [value] - The playback rate to set.
   * @return {Audio|undefined} A reference to this instance.
   */
  setPlaybackRate(t) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = t, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  /**
  	 * Returns the current playback rate.
  
  	 * @return {number} The playback rate.
  	 */
  getPlaybackRate() {
    return this.playbackRate;
  }
  /**
   * Automatically called when playback finished.
   */
  onEnded() {
    this.isPlaying = !1, this._progress = 0;
  }
  /**
   * Returns the loop flag.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @return {boolean} Whether the audio should loop or not.
   */
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  /**
   * Sets the loop flag.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {boolean} value - Whether the audio should loop or not.
   * @return {Audio|undefined} A reference to this instance.
   */
  setLoop(t) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = t, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  /**
   * Sets the loop start value which defines where in the audio buffer the replay should
   * start, in seconds.
   *
   * @param {number} value - The loop start value.
   * @return {Audio} A reference to this instance.
   */
  setLoopStart(t) {
    return this.loopStart = t, this;
  }
  /**
   * Sets the loop end value which defines where in the audio buffer the replay should
   * stop, in seconds.
   *
   * @param {number} value - The loop end value.
   * @return {Audio} A reference to this instance.
   */
  setLoopEnd(t) {
    return this.loopEnd = t, this;
  }
  /**
   * Returns the volume.
   *
   * @return {number} The volume.
   */
  getVolume() {
    return this.gain.gain.value;
  }
  /**
   * Sets the volume.
   *
   * @param {number} value - The volume to set.
   * @return {Audio} A reference to this instance.
   */
  setVolume(t) {
    return this.gain.gain.setTargetAtTime(t, this.context.currentTime, 0.01), this;
  }
  copy(t, e) {
    return super.copy(t, e), t.sourceType !== "buffer" ? (console.warn("THREE.Audio: Audio source type cannot be copied."), this) : (this.autoplay = t.autoplay, this.buffer = t.buffer, this.detune = t.detune, this.loop = t.loop, this.loopStart = t.loopStart, this.loopEnd = t.loopEnd, this.offset = t.offset, this.duration = t.duration, this.playbackRate = t.playbackRate, this.hasPlaybackControl = t.hasPlaybackControl, this.sourceType = t.sourceType, this.filters = t.filters.slice(), this);
  }
  clone(t) {
    return new this.constructor(this.listener).copy(this, t);
  }
}
const su = /* @__PURE__ */ new H(), Uw = /* @__PURE__ */ new Jn(), rG = /* @__PURE__ */ new H(), ru = /* @__PURE__ */ new H();
class oG extends jz {
  /**
   * Constructs a positional audio.
   *
   * @param {AudioListener} listener - The global audio listener.
   */
  constructor(t) {
    super(t), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  connect() {
    return super.connect(), this.panner.connect(this.gain), this;
  }
  disconnect() {
    return super.disconnect(), this.panner.disconnect(this.gain), this;
  }
  getOutput() {
    return this.panner;
  }
  /**
   * Returns the current reference distance.
   *
   * @return {number} The reference distance.
   */
  getRefDistance() {
    return this.panner.refDistance;
  }
  /**
   * Defines the reference distance for reducing volume as the audio source moves
   * further from the listener – i.e. the distance at which the volume reduction
   * starts taking effect.
   *
   * @param {number} value - The reference distance to set.
   * @return {PositionalAudio} A reference to this instance.
   */
  setRefDistance(t) {
    return this.panner.refDistance = t, this;
  }
  /**
   * Returns the current rolloff factor.
   *
   * @return {number} The rolloff factor.
   */
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  /**
   * Defines how quickly the volume is reduced as the source moves away from the listener.
   *
   * @param {number} value - The rolloff factor.
   * @return {PositionalAudio} A reference to this instance.
   */
  setRolloffFactor(t) {
    return this.panner.rolloffFactor = t, this;
  }
  /**
   * Returns the current distance model.
   *
   * @return {('linear'|'inverse'|'exponential')} The distance model.
   */
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  /**
   * Defines which algorithm to use to reduce the volume of the audio source
   * as it moves away from the listener.
   *
   * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}
   * for more details.
   *
   * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.
   * @return {PositionalAudio} A reference to this instance.
   */
  setDistanceModel(t) {
    return this.panner.distanceModel = t, this;
  }
  /**
   * Returns the current max distance.
   *
   * @return {number} The max distance.
   */
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  /**
   * Defines the maximum distance between the audio source and the listener,
   * after which the volume is not reduced any further.
   *
   * This value is used only by the `linear` distance model.
   *
   * @param {number} value - The max distance.
   * @return {PositionalAudio} A reference to this instance.
   */
  setMaxDistance(t) {
    return this.panner.maxDistance = t, this;
  }
  /**
   * Sets the directional cone in which the audio can be listened.
   *
   * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.
   * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.
   * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.
   * @return {PositionalAudio} A reference to this instance.
   */
  setDirectionalCone(t, e, i) {
    return this.panner.coneInnerAngle = t, this.panner.coneOuterAngle = e, this.panner.coneOuterGain = i, this;
  }
  updateMatrixWorld(t) {
    if (super.updateMatrixWorld(t), this.hasPlaybackControl === !0 && this.isPlaying === !1) return;
    this.matrixWorld.decompose(su, Uw, rG), ru.set(0, 0, 1).applyQuaternion(Uw);
    const e = this.panner;
    if (e.positionX) {
      const i = this.context.currentTime + this.listener.timeDelta;
      e.positionX.linearRampToValueAtTime(su.x, i), e.positionY.linearRampToValueAtTime(su.y, i), e.positionZ.linearRampToValueAtTime(su.z, i), e.orientationX.linearRampToValueAtTime(ru.x, i), e.orientationY.linearRampToValueAtTime(ru.y, i), e.orientationZ.linearRampToValueAtTime(ru.z, i);
    } else
      e.setPosition(su.x, su.y, su.z), e.setOrientation(ru.x, ru.y, ru.z);
  }
}
class lG {
  /**
   * Constructs a new audio analyzer.
   *
   * @param {Audio} audio - The audio to analyze.
   * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.
   */
  constructor(t, e = 2048) {
    this.analyser = t.context.createAnalyser(), this.analyser.fftSize = e, this.data = new Uint8Array(this.analyser.frequencyBinCount), t.getOutput().connect(this.analyser);
  }
  /**
   * Returns an array with frequency data of the audio.
   *
   * Each item in the array represents the decibel value for a specific frequency.
   * The frequencies are spread linearly from 0 to 1/2 of the sample rate.
   * For example, for 48000 sample rate, the last item of the array will represent
   * the decibel value for 24000 Hz.
   *
   * @return {Uint8Array} The frequency data.
   */
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  /**
   * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.
   *
   * @return {number} The average frequency.
   */
  getAverageFrequency() {
    let t = 0;
    const e = this.getFrequencyData();
    for (let i = 0; i < e.length; i++)
      t += e[i];
    return t / e.length;
  }
}
class Qz {
  /**
   * Constructs a new property mixer.
   *
   * @param {PropertyBinding} binding - The property binding.
   * @param {string} typeName - The keyframe track type name.
   * @param {number} valueSize - The keyframe track value size.
   */
  constructor(t, e, i) {
    this.binding = t, this.valueSize = i;
    let a, s, r;
    switch (e) {
      case "quaternion":
        a = this._slerp, s = this._slerpAdditive, r = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(i * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        a = this._select, s = this._select, r = this._setAdditiveIdentityOther, this.buffer = new Array(i * 5);
        break;
      default:
        a = this._lerp, s = this._lerpAdditive, r = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(i * 5);
    }
    this._mixBufferRegion = a, this._mixBufferRegionAdditive = s, this._setIdentity = r, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  /**
   * Accumulates data in the `incoming` region into `accu<i>`.
   *
   * @param {number} accuIndex - The accumulation index.
   * @param {number} weight - The weight.
   */
  accumulate(t, e) {
    const i = this.buffer, a = this.valueSize, s = t * a + a;
    let r = this.cumulativeWeight;
    if (r === 0) {
      for (let l = 0; l !== a; ++l)
        i[s + l] = i[l];
      r = e;
    } else {
      r += e;
      const l = e / r;
      this._mixBufferRegion(i, s, 0, l, a);
    }
    this.cumulativeWeight = r;
  }
  /**
   * Accumulates data in the `incoming` region into `add`.
   *
   * @param {number} weight - The weight.
   */
  accumulateAdditive(t) {
    const e = this.buffer, i = this.valueSize, a = i * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(e, a, 0, t, i), this.cumulativeWeightAdditive += t;
  }
  /**
   * Applies the state of `accu<i>` to the binding when accus differ.
   *
   * @param {number} accuIndex - The accumulation index.
   */
  apply(t) {
    const e = this.valueSize, i = this.buffer, a = t * e + e, s = this.cumulativeWeight, r = this.cumulativeWeightAdditive, l = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, s < 1) {
      const c = e * this._origIndex;
      this._mixBufferRegion(
        i,
        a,
        c,
        1 - s,
        e
      );
    }
    r > 0 && this._mixBufferRegionAdditive(i, a, this._addIndex * e, 1, e);
    for (let c = e, f = e + e; c !== f; ++c)
      if (i[c] !== i[c + e]) {
        l.setValue(i, a);
        break;
      }
  }
  /**
   * Remembers the state of the bound property and copy it to both accus.
   */
  saveOriginalState() {
    const t = this.binding, e = this.buffer, i = this.valueSize, a = i * this._origIndex;
    t.getValue(e, a);
    for (let s = i, r = a; s !== r; ++s)
      e[s] = e[a + s % i];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  /**
   * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.
   */
  restoreOriginalState() {
    const t = this.valueSize * 3;
    this.binding.setValue(this.buffer, t);
  }
  // internals
  _setAdditiveIdentityNumeric() {
    const t = this._addIndex * this.valueSize, e = t + this.valueSize;
    for (let i = t; i < e; i++)
      this.buffer[i] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const t = this._origIndex * this.valueSize, e = this._addIndex * this.valueSize;
    for (let i = 0; i < this.valueSize; i++)
      this.buffer[e + i] = this.buffer[t + i];
  }
  // mix functions
  _select(t, e, i, a, s) {
    if (a >= 0.5)
      for (let r = 0; r !== s; ++r)
        t[e + r] = t[i + r];
  }
  _slerp(t, e, i, a) {
    Jn.slerpFlat(t, e, t, e, t, i, a);
  }
  _slerpAdditive(t, e, i, a, s) {
    const r = this._workIndex * s;
    Jn.multiplyQuaternionsFlat(t, r, t, e, t, i), Jn.slerpFlat(t, e, t, e, t, r, a);
  }
  _lerp(t, e, i, a, s) {
    const r = 1 - a;
    for (let l = 0; l !== s; ++l) {
      const c = e + l;
      t[c] = t[c] * r + t[i + l] * a;
    }
  }
  _lerpAdditive(t, e, i, a, s) {
    for (let r = 0; r !== s; ++r) {
      const l = e + r;
      t[l] = t[l] + t[i + r] * a;
    }
  }
}
const ET = "\\[\\]\\.:\\/", uG = new RegExp("[" + ET + "]", "g"), TT = "[^" + ET + "]", cG = "[^" + ET.replace("\\.", "") + "]", fG = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", TT), hG = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", cG), dG = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", TT), pG = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", TT), mG = new RegExp(
  "^" + fG + hG + dG + pG + "$"
), gG = ["material", "materials", "bones", "map"];
class vG {
  constructor(t, e, i) {
    const a = i || Ie.parseTrackName(e);
    this._targetGroup = t, this._bindings = t.subscribe_(e, a);
  }
  getValue(t, e) {
    this.bind();
    const i = this._targetGroup.nCachedObjects_, a = this._bindings[i];
    a !== void 0 && a.getValue(t, e);
  }
  setValue(t, e) {
    const i = this._bindings;
    for (let a = this._targetGroup.nCachedObjects_, s = i.length; a !== s; ++a)
      i[a].setValue(t, e);
  }
  bind() {
    const t = this._bindings;
    for (let e = this._targetGroup.nCachedObjects_, i = t.length; e !== i; ++e)
      t[e].bind();
  }
  unbind() {
    const t = this._bindings;
    for (let e = this._targetGroup.nCachedObjects_, i = t.length; e !== i; ++e)
      t[e].unbind();
  }
}
class Ie {
  /**
   * Constructs a new property binding.
   *
   * @param {Object} rootNode - The root node.
   * @param {string} path - The path.
   * @param {?Object} [parsedPath] - The parsed path.
   */
  constructor(t, e, i) {
    this.path = e, this.parsedPath = i || Ie.parseTrackName(e), this.node = Ie.findNode(t, this.parsedPath.nodeName), this.rootNode = t, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  /**
   * Factory method for creating a property binding from the given parameters.
   *
   * @static
   * @param {Object} root - The root node.
   * @param {string} path - The path.
   * @param {?Object} [parsedPath] - The parsed path.
   * @return {PropertyBinding|Composite} The created property binding or composite.
   */
  static create(t, e, i) {
    return t && t.isAnimationObjectGroup ? new Ie.Composite(t, e, i) : new Ie(t, e, i);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name - Node name to be sanitized.
   * @return {string} The sanitized node name.
   */
  static sanitizeNodeName(t) {
    return t.replace(/\s/g, "_").replace(uG, "");
  }
  /**
   * Parses the given track name (an object path to an animated property) and
   * returns an object with information about the path. Matches strings in the following forms:
   *
   * - nodeName.property
   * - nodeName.property[accessor]
   * - nodeName.material.property[accessor]
   * - uuid.property[accessor]
   * - uuid.objectName[objectIndex].propertyName[propertyIndex]
   * - parentName/nodeName.property
   * - parentName/parentName/nodeName.property[index]
   * - .bone[Armature.DEF_cog].position
   * - scene:helium_balloon_model:helium_balloon_model.position
   *
   * @static
   * @param {string} trackName - The track name to parse.
   * @return {Object} The parsed track name as an object.
   */
  static parseTrackName(t) {
    const e = mG.exec(t);
    if (e === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + t);
    const i = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: e[2],
      objectName: e[3],
      objectIndex: e[4],
      propertyName: e[5],
      // required
      propertyIndex: e[6]
    }, a = i.nodeName && i.nodeName.lastIndexOf(".");
    if (a !== void 0 && a !== -1) {
      const s = i.nodeName.substring(a + 1);
      gG.indexOf(s) !== -1 && (i.nodeName = i.nodeName.substring(0, a), i.objectName = s);
    }
    if (i.propertyName === null || i.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
    return i;
  }
  /**
   * Searches for a node in the hierarchy of the given root object by the given
   * node name.
   *
   * @static
   * @param {Object} root - The root object.
   * @param {string|number} nodeName - The name of the node.
   * @return {?Object} The found node. Returns `null` if no object was found.
   */
  static findNode(t, e) {
    if (e === void 0 || e === "" || e === "." || e === -1 || e === t.name || e === t.uuid)
      return t;
    if (t.skeleton) {
      const i = t.skeleton.getBoneByName(e);
      if (i !== void 0)
        return i;
    }
    if (t.children) {
      const i = function(s) {
        for (let r = 0; r < s.length; r++) {
          const l = s[r];
          if (l.name === e || l.uuid === e)
            return l;
          const c = i(l.children);
          if (c) return c;
        }
        return null;
      }, a = i(t.children);
      if (a)
        return a;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(t, e) {
    t[e] = this.targetObject[this.propertyName];
  }
  _getValue_array(t, e) {
    const i = this.resolvedProperty;
    for (let a = 0, s = i.length; a !== s; ++a)
      t[e++] = i[a];
  }
  _getValue_arrayElement(t, e) {
    t[e] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(t, e) {
    this.resolvedProperty.toArray(t, e);
  }
  // Direct
  _setValue_direct(t, e) {
    this.targetObject[this.propertyName] = t[e];
  }
  _setValue_direct_setNeedsUpdate(t, e) {
    this.targetObject[this.propertyName] = t[e], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(t, e) {
    this.targetObject[this.propertyName] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(t, e) {
    const i = this.resolvedProperty;
    for (let a = 0, s = i.length; a !== s; ++a)
      i[a] = t[e++];
  }
  _setValue_array_setNeedsUpdate(t, e) {
    const i = this.resolvedProperty;
    for (let a = 0, s = i.length; a !== s; ++a)
      i[a] = t[e++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(t, e) {
    const i = this.resolvedProperty;
    for (let a = 0, s = i.length; a !== s; ++a)
      i[a] = t[e++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(t, e) {
    this.resolvedProperty[this.propertyIndex] = t[e];
  }
  _setValue_arrayElement_setNeedsUpdate(t, e) {
    this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(t, e) {
    this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(t, e) {
    this.resolvedProperty.fromArray(t, e);
  }
  _setValue_fromArray_setNeedsUpdate(t, e) {
    this.resolvedProperty.fromArray(t, e), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(t, e) {
    this.resolvedProperty.fromArray(t, e), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(t, e) {
    this.bind(), this.getValue(t, e);
  }
  _setValue_unbound(t, e) {
    this.bind(), this.setValue(t, e);
  }
  /**
   * Creates a getter / setter pair for the property tracked by this binding.
   */
  bind() {
    let t = this.node;
    const e = this.parsedPath, i = e.objectName, a = e.propertyName;
    let s = e.propertyIndex;
    if (t || (t = Ie.findNode(this.rootNode, e.nodeName), this.node = t), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !t) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (i) {
      let f = e.objectIndex;
      switch (i) {
        case "materials":
          if (!t.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!t.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          t = t.material.materials;
          break;
        case "bones":
          if (!t.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          t = t.skeleton.bones;
          for (let d = 0; d < t.length; d++)
            if (t[d].name === f) {
              f = d;
              break;
            }
          break;
        case "map":
          if ("map" in t) {
            t = t.map;
            break;
          }
          if (!t.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!t.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          t = t.material.map;
          break;
        default:
          if (t[i] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          t = t[i];
      }
      if (f !== void 0) {
        if (t[f] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
          return;
        }
        t = t[f];
      }
    }
    const r = t[a];
    if (r === void 0) {
      const f = e.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + f + "." + a + " but it wasn't found.", t);
      return;
    }
    let l = this.Versioning.None;
    this.targetObject = t, t.isMaterial === !0 ? l = this.Versioning.NeedsUpdate : t.isObject3D === !0 && (l = this.Versioning.MatrixWorldNeedsUpdate);
    let c = this.BindingType.Direct;
    if (s !== void 0) {
      if (a === "morphTargetInfluences") {
        if (!t.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!t.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        t.morphTargetDictionary[s] !== void 0 && (s = t.morphTargetDictionary[s]);
      }
      c = this.BindingType.ArrayElement, this.resolvedProperty = r, this.propertyIndex = s;
    } else r.fromArray !== void 0 && r.toArray !== void 0 ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = r) : Array.isArray(r) ? (c = this.BindingType.EntireArray, this.resolvedProperty = r) : this.propertyName = a;
    this.getValue = this.GetterByBindingType[c], this.setValue = this.SetterByBindingTypeAndVersioning[c][l];
  }
  /**
   * Unbinds the property.
   */
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
Ie.Composite = vG;
Ie.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
Ie.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
Ie.prototype.GetterByBindingType = [
  Ie.prototype._getValue_direct,
  Ie.prototype._getValue_array,
  Ie.prototype._getValue_arrayElement,
  Ie.prototype._getValue_toArray
];
Ie.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    Ie.prototype._setValue_direct,
    Ie.prototype._setValue_direct_setNeedsUpdate,
    Ie.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    Ie.prototype._setValue_array,
    Ie.prototype._setValue_array_setNeedsUpdate,
    Ie.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    Ie.prototype._setValue_arrayElement,
    Ie.prototype._setValue_arrayElement_setNeedsUpdate,
    Ie.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    Ie.prototype._setValue_fromArray,
    Ie.prototype._setValue_fromArray_setNeedsUpdate,
    Ie.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class _G {
  /**
   * Constructs a new animation group.
   *
   * @param {...Object3D} arguments - An arbitrary number of 3D objects that share the same animation state.
   */
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = Ya(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const t = {};
    this._indicesByUUID = t;
    for (let i = 0, a = arguments.length; i !== a; ++i)
      t[arguments[i].uuid] = i;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const e = this;
    this.stats = {
      objects: {
        get total() {
          return e._objects.length;
        },
        get inUse() {
          return this.total - e.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return e._bindings.length;
      }
    };
  }
  /**
   * Adds an arbitrary number of objects to this animation group.
   *
   * @param {...Object3D} arguments - The 3D objects to add.
   */
  add() {
    const t = this._objects, e = this._indicesByUUID, i = this._paths, a = this._parsedPaths, s = this._bindings, r = s.length;
    let l, c = t.length, f = this.nCachedObjects_;
    for (let d = 0, p = arguments.length; d !== p; ++d) {
      const m = arguments[d], g = m.uuid;
      let y = e[g];
      if (y === void 0) {
        y = c++, e[g] = y, t.push(m);
        for (let x = 0, M = r; x !== M; ++x)
          s[x].push(new Ie(m, i[x], a[x]));
      } else if (y < f) {
        l = t[y];
        const x = --f, M = t[x];
        e[M.uuid] = y, t[y] = M, e[g] = x, t[x] = m;
        for (let v = 0, S = r; v !== S; ++v) {
          const E = s[v], T = E[x];
          let w = E[y];
          E[y] = T, w === void 0 && (w = new Ie(m, i[v], a[v])), E[x] = w;
        }
      } else t[y] !== l && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = f;
  }
  /**
   * Removes an arbitrary number of objects to this animation group
   *
   * @param {...Object3D} arguments - The 3D objects to remove.
   */
  remove() {
    const t = this._objects, e = this._indicesByUUID, i = this._bindings, a = i.length;
    let s = this.nCachedObjects_;
    for (let r = 0, l = arguments.length; r !== l; ++r) {
      const c = arguments[r], f = c.uuid, d = e[f];
      if (d !== void 0 && d >= s) {
        const p = s++, m = t[p];
        e[m.uuid] = d, t[d] = m, e[f] = p, t[p] = c;
        for (let g = 0, y = a; g !== y; ++g) {
          const x = i[g], M = x[p], v = x[d];
          x[d] = M, x[p] = v;
        }
      }
    }
    this.nCachedObjects_ = s;
  }
  /**
   * Deallocates all memory resources for the passed 3D objects of this animation group.
   *
   * @param {...Object3D} arguments - The 3D objects to uncache.
   */
  uncache() {
    const t = this._objects, e = this._indicesByUUID, i = this._bindings, a = i.length;
    let s = this.nCachedObjects_, r = t.length;
    for (let l = 0, c = arguments.length; l !== c; ++l) {
      const f = arguments[l], d = f.uuid, p = e[d];
      if (p !== void 0)
        if (delete e[d], p < s) {
          const m = --s, g = t[m], y = --r, x = t[y];
          e[g.uuid] = p, t[p] = g, e[x.uuid] = m, t[m] = x, t.pop();
          for (let M = 0, v = a; M !== v; ++M) {
            const S = i[M], E = S[m], T = S[y];
            S[p] = E, S[m] = T, S.pop();
          }
        } else {
          const m = --r, g = t[m];
          m > 0 && (e[g.uuid] = p), t[p] = g, t.pop();
          for (let y = 0, x = a; y !== x; ++y) {
            const M = i[y];
            M[p] = M[m], M.pop();
          }
        }
    }
    this.nCachedObjects_ = s;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(t, e) {
    const i = this._bindingsIndicesByPath;
    let a = i[t];
    const s = this._bindings;
    if (a !== void 0) return s[a];
    const r = this._paths, l = this._parsedPaths, c = this._objects, f = c.length, d = this.nCachedObjects_, p = new Array(f);
    a = s.length, i[t] = a, r.push(t), l.push(e), s.push(p);
    for (let m = d, g = c.length; m !== g; ++m) {
      const y = c[m];
      p[m] = new Ie(y, t, e);
    }
    return p;
  }
  unsubscribe_(t) {
    const e = this._bindingsIndicesByPath, i = e[t];
    if (i !== void 0) {
      const a = this._paths, s = this._parsedPaths, r = this._bindings, l = r.length - 1, c = r[l], f = t[l];
      e[f] = i, r[i] = c, r.pop(), s[i] = s[l], s.pop(), a[i] = a[l], a.pop();
    }
  }
}
class Kz {
  /**
   * Constructs a new animation action.
   *
   * @param {AnimationMixer} mixer - The mixer that is controlled by this action.
   * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.
   * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
   */
  constructor(t, e, i = null, a = e.blendMode) {
    this._mixer = t, this._clip = e, this._localRoot = i, this.blendMode = a;
    const s = e.tracks, r = s.length, l = new Array(r), c = {
      endingStart: _u,
      endingEnd: _u
    };
    for (let f = 0; f !== r; ++f) {
      const d = s[f].createInterpolant(null);
      l[f] = d, d.settings = c;
    }
    this._interpolantSettings = c, this._interpolants = l, this._propertyBindings = new Array(r), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = PL, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  /**
   * Starts the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  play() {
    return this._mixer._activateAction(this), this;
  }
  /**
   * Stops the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  /**
   * Resets the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  /**
   * Returns `true` if the animation is running.
   *
   * @return {boolean} Whether the animation is running or not.
   */
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  /**
   * Returns `true` when {@link AnimationAction#play} has been called.
   *
   * @return {boolean} Whether the animation is scheduled or not.
   */
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  /**
   * Defines the time when the animation should start.
   *
   * @param {number} time - The start time in seconds.
   * @return {AnimationAction} A reference to this animation action.
   */
  startAt(t) {
    return this._startTime = t, this;
  }
  /**
   * Configures the loop settings for this action.
   *
   * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.
   * @param {number} repetitions - The number of repetitions.
   * @return {AnimationAction} A reference to this animation action.
   */
  setLoop(t, e) {
    return this.loop = t, this.repetitions = e, this;
  }
  /**
   * Sets the effective weight of this action.
   *
   * An action has no effect and thus an effective weight of zero when the
   * action is disabled.
   *
   * @param {number} weight - The weight to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setEffectiveWeight(t) {
    return this.weight = t, this._effectiveWeight = this.enabled ? t : 0, this.stopFading();
  }
  /**
   * Returns the effective weight of this action.
   *
   * @return {number} The effective weight.
   */
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  /**
   * Fades the animation in by increasing its weight gradually from `0` to `1`,
   * within the passed time interval.
   *
   * @param {number} duration - The duration of the fade.
   * @return {AnimationAction} A reference to this animation action.
   */
  fadeIn(t) {
    return this._scheduleFading(t, 0, 1);
  }
  /**
   * Fades the animation out by decreasing its weight gradually from `1` to `0`,
   * within the passed time interval.
   *
   * @param {number} duration - The duration of the fade.
   * @return {AnimationAction} A reference to this animation action.
   */
  fadeOut(t) {
    return this._scheduleFading(t, 1, 0);
  }
  /**
   * Causes this action to fade in and the given action to fade out,
   * within the passed time interval.
   *
   * @param {AnimationAction} fadeOutAction - The animation action to fade out.
   * @param {number} duration - The duration of the fade.
   * @param {boolean} [warp=false] - Whether warping should be used or not.
   * @return {AnimationAction} A reference to this animation action.
   */
  crossFadeFrom(t, e, i = !1) {
    if (t.fadeOut(e), this.fadeIn(e), i === !0) {
      const a = this._clip.duration, s = t._clip.duration, r = s / a, l = a / s;
      t.warp(1, r, e), this.warp(l, 1, e);
    }
    return this;
  }
  /**
   * Causes this action to fade out and the given action to fade in,
   * within the passed time interval.
   *
   * @param {AnimationAction} fadeInAction - The animation action to fade in.
   * @param {number} duration - The duration of the fade.
   * @param {boolean} [warp=false] - Whether warping should be used or not.
   * @return {AnimationAction} A reference to this animation action.
   */
  crossFadeTo(t, e, i = !1) {
    return t.crossFadeFrom(this, e, i);
  }
  /**
   * Stops any fading which is applied to this action.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stopFading() {
    const t = this._weightInterpolant;
    return t !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this;
  }
  /**
   * Sets the effective time scale of this action.
   *
   * An action has no effect and thus an effective time scale of zero when the
   * action is paused.
   *
   * @param {number} timeScale - The time scale to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setEffectiveTimeScale(t) {
    return this.timeScale = t, this._effectiveTimeScale = this.paused ? 0 : t, this.stopWarping();
  }
  /**
   * Returns the effective time scale of this action.
   *
   * @return {number} The effective time scale.
   */
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  /**
   * Sets the duration for a single loop of this action.
   *
   * @param {number} duration - The duration to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setDuration(t) {
    return this.timeScale = this._clip.duration / t, this.stopWarping();
  }
  /**
   * Synchronizes this action with the passed other action.
   *
   * @param {AnimationAction} action - The action to sync with.
   * @return {AnimationAction} A reference to this animation action.
   */
  syncWith(t) {
    return this.time = t.time, this.timeScale = t.timeScale, this.stopWarping();
  }
  /**
   * Decelerates this animation's speed to `0` within the passed time interval.
   *
   * @param {number} duration - The duration.
   * @return {AnimationAction} A reference to this animation action.
   */
  halt(t) {
    return this.warp(this._effectiveTimeScale, 0, t);
  }
  /**
   * Changes the playback speed, within the passed time interval, by modifying
   * {@link AnimationAction#timeScale} gradually from `startTimeScale` to
   * `endTimeScale`.
   *
   * @param {number} startTimeScale - The start time scale.
   * @param {number} endTimeScale - The end time scale.
   * @param {number} duration - The duration.
   * @return {AnimationAction} A reference to this animation action.
   */
  warp(t, e, i) {
    const a = this._mixer, s = a.time, r = this.timeScale;
    let l = this._timeScaleInterpolant;
    l === null && (l = a._lendControlInterpolant(), this._timeScaleInterpolant = l);
    const c = l.parameterPositions, f = l.sampleValues;
    return c[0] = s, c[1] = s + i, f[0] = t / r, f[1] = e / r, this;
  }
  /**
   * Stops any scheduled warping which is applied to this action.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stopWarping() {
    const t = this._timeScaleInterpolant;
    return t !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(t)), this;
  }
  /**
   * Returns the animation mixer of this animation action.
   *
   * @return {AnimationMixer} The animation mixer.
   */
  getMixer() {
    return this._mixer;
  }
  /**
   * Returns the animation clip of this animation action.
   *
   * @return {AnimationClip} The animation clip.
   */
  getClip() {
    return this._clip;
  }
  /**
   * Returns the root object of this animation action.
   *
   * @return {Object3D} The root object.
   */
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(t, e, i, a) {
    if (!this.enabled) {
      this._updateWeight(t);
      return;
    }
    const s = this._startTime;
    if (s !== null) {
      const c = (t - s) * i;
      c < 0 || i === 0 ? e = 0 : (this._startTime = null, e = i * c);
    }
    e *= this._updateTimeScale(t);
    const r = this._updateTime(e), l = this._updateWeight(t);
    if (l > 0) {
      const c = this._interpolants, f = this._propertyBindings;
      switch (this.blendMode) {
        case QE:
          for (let d = 0, p = c.length; d !== p; ++d)
            c[d].evaluate(r), f[d].accumulateAdditive(l);
          break;
        case Q_:
        default:
          for (let d = 0, p = c.length; d !== p; ++d)
            c[d].evaluate(r), f[d].accumulate(a, l);
      }
    }
  }
  _updateWeight(t) {
    let e = 0;
    if (this.enabled) {
      e = this.weight;
      const i = this._weightInterpolant;
      if (i !== null) {
        const a = i.evaluate(t)[0];
        e *= a, t > i.parameterPositions[1] && (this.stopFading(), a === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = e, e;
  }
  _updateTimeScale(t) {
    let e = 0;
    if (!this.paused) {
      e = this.timeScale;
      const i = this._timeScaleInterpolant;
      if (i !== null) {
        const a = i.evaluate(t)[0];
        e *= a, t > i.parameterPositions[1] && (this.stopWarping(), e === 0 ? this.paused = !0 : this.timeScale = e);
      }
    }
    return this._effectiveTimeScale = e, e;
  }
  _updateTime(t) {
    const e = this._clip.duration, i = this.loop;
    let a = this.time + t, s = this._loopCount;
    const r = i === IL;
    if (t === 0)
      return s === -1 ? a : r && (s & 1) === 1 ? e - a : a;
    if (i === BL) {
      s === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      t: {
        if (a >= e)
          a = e;
        else if (a < 0)
          a = 0;
        else {
          this.time = a;
          break t;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = a, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: t < 0 ? -1 : 1
        });
      }
    } else {
      if (s === -1 && (t >= 0 ? (s = 0, this._setEndings(!0, this.repetitions === 0, r)) : this._setEndings(this.repetitions === 0, !0, r)), a >= e || a < 0) {
        const l = Math.floor(a / e);
        a -= e * l, s += Math.abs(l);
        const c = this.repetitions - s;
        if (c <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, a = t > 0 ? e : 0, this.time = a, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: t > 0 ? 1 : -1
          });
        else {
          if (c === 1) {
            const f = t < 0;
            this._setEndings(f, !f, r);
          } else
            this._setEndings(!1, !1, r);
          this._loopCount = s, this.time = a, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: l
          });
        }
      } else
        this.time = a;
      if (r && (s & 1) === 1)
        return e - a;
    }
    return a;
  }
  _setEndings(t, e, i) {
    const a = this._interpolantSettings;
    i ? (a.endingStart = yu, a.endingEnd = yu) : (t ? a.endingStart = this.zeroSlopeAtStart ? yu : _u : a.endingStart = Fp, e ? a.endingEnd = this.zeroSlopeAtEnd ? yu : _u : a.endingEnd = Fp);
  }
  _scheduleFading(t, e, i) {
    const a = this._mixer, s = a.time;
    let r = this._weightInterpolant;
    r === null && (r = a._lendControlInterpolant(), this._weightInterpolant = r);
    const l = r.parameterPositions, c = r.sampleValues;
    return l[0] = s, c[0] = e, l[1] = s + t, c[1] = i, this;
  }
}
const yG = new Float32Array(1);
class xG extends gr {
  /**
   * Constructs a new animation mixer.
   *
   * @param {Object3D} root - The object whose animations shall be played by this mixer.
   */
  constructor(t) {
    super(), this._root = t, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(t, e) {
    const i = t._localRoot || this._root, a = t._clip.tracks, s = a.length, r = t._propertyBindings, l = t._interpolants, c = i.uuid, f = this._bindingsByRootAndName;
    let d = f[c];
    d === void 0 && (d = {}, f[c] = d);
    for (let p = 0; p !== s; ++p) {
      const m = a[p], g = m.name;
      let y = d[g];
      if (y !== void 0)
        ++y.referenceCount, r[p] = y;
      else {
        if (y = r[p], y !== void 0) {
          y._cacheIndex === null && (++y.referenceCount, this._addInactiveBinding(y, c, g));
          continue;
        }
        const x = e && e._propertyBindings[p].binding.parsedPath;
        y = new Qz(
          Ie.create(i, g, x),
          m.ValueTypeName,
          m.getValueSize()
        ), ++y.referenceCount, this._addInactiveBinding(y, c, g), r[p] = y;
      }
      l[p].resultBuffer = y.buffer;
    }
  }
  _activateAction(t) {
    if (!this._isActiveAction(t)) {
      if (t._cacheIndex === null) {
        const i = (t._localRoot || this._root).uuid, a = t._clip.uuid, s = this._actionsByClip[a];
        this._bindAction(
          t,
          s && s.knownActions[0]
        ), this._addInactiveAction(t, a, i);
      }
      const e = t._propertyBindings;
      for (let i = 0, a = e.length; i !== a; ++i) {
        const s = e[i];
        s.useCount++ === 0 && (this._lendBinding(s), s.saveOriginalState());
      }
      this._lendAction(t);
    }
  }
  _deactivateAction(t) {
    if (this._isActiveAction(t)) {
      const e = t._propertyBindings;
      for (let i = 0, a = e.length; i !== a; ++i) {
        const s = e[i];
        --s.useCount === 0 && (s.restoreOriginalState(), this._takeBackBinding(s));
      }
      this._takeBackAction(t);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const t = this;
    this.stats = {
      actions: {
        get total() {
          return t._actions.length;
        },
        get inUse() {
          return t._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return t._bindings.length;
        },
        get inUse() {
          return t._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return t._controlInterpolants.length;
        },
        get inUse() {
          return t._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(t) {
    const e = t._cacheIndex;
    return e !== null && e < this._nActiveActions;
  }
  _addInactiveAction(t, e, i) {
    const a = this._actions, s = this._actionsByClip;
    let r = s[e];
    if (r === void 0)
      r = {
        knownActions: [t],
        actionByRoot: {}
      }, t._byClipCacheIndex = 0, s[e] = r;
    else {
      const l = r.knownActions;
      t._byClipCacheIndex = l.length, l.push(t);
    }
    t._cacheIndex = a.length, a.push(t), r.actionByRoot[i] = t;
  }
  _removeInactiveAction(t) {
    const e = this._actions, i = e[e.length - 1], a = t._cacheIndex;
    i._cacheIndex = a, e[a] = i, e.pop(), t._cacheIndex = null;
    const s = t._clip.uuid, r = this._actionsByClip, l = r[s], c = l.knownActions, f = c[c.length - 1], d = t._byClipCacheIndex;
    f._byClipCacheIndex = d, c[d] = f, c.pop(), t._byClipCacheIndex = null;
    const p = l.actionByRoot, m = (t._localRoot || this._root).uuid;
    delete p[m], c.length === 0 && delete r[s], this._removeInactiveBindingsForAction(t);
  }
  _removeInactiveBindingsForAction(t) {
    const e = t._propertyBindings;
    for (let i = 0, a = e.length; i !== a; ++i) {
      const s = e[i];
      --s.referenceCount === 0 && this._removeInactiveBinding(s);
    }
  }
  _lendAction(t) {
    const e = this._actions, i = t._cacheIndex, a = this._nActiveActions++, s = e[a];
    t._cacheIndex = a, e[a] = t, s._cacheIndex = i, e[i] = s;
  }
  _takeBackAction(t) {
    const e = this._actions, i = t._cacheIndex, a = --this._nActiveActions, s = e[a];
    t._cacheIndex = a, e[a] = t, s._cacheIndex = i, e[i] = s;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(t, e, i) {
    const a = this._bindingsByRootAndName, s = this._bindings;
    let r = a[e];
    r === void 0 && (r = {}, a[e] = r), r[i] = t, t._cacheIndex = s.length, s.push(t);
  }
  _removeInactiveBinding(t) {
    const e = this._bindings, i = t.binding, a = i.rootNode.uuid, s = i.path, r = this._bindingsByRootAndName, l = r[a], c = e[e.length - 1], f = t._cacheIndex;
    c._cacheIndex = f, e[f] = c, e.pop(), delete l[s], Object.keys(l).length === 0 && delete r[a];
  }
  _lendBinding(t) {
    const e = this._bindings, i = t._cacheIndex, a = this._nActiveBindings++, s = e[a];
    t._cacheIndex = a, e[a] = t, s._cacheIndex = i, e[i] = s;
  }
  _takeBackBinding(t) {
    const e = this._bindings, i = t._cacheIndex, a = --this._nActiveBindings, s = e[a];
    t._cacheIndex = a, e[a] = t, s._cacheIndex = i, e[i] = s;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const t = this._controlInterpolants, e = this._nActiveControlInterpolants++;
    let i = t[e];
    return i === void 0 && (i = new _T(
      new Float32Array(2),
      new Float32Array(2),
      1,
      yG
    ), i.__cacheIndex = e, t[e] = i), i;
  }
  _takeBackControlInterpolant(t) {
    const e = this._controlInterpolants, i = t.__cacheIndex, a = --this._nActiveControlInterpolants, s = e[a];
    t.__cacheIndex = a, e[a] = t, s.__cacheIndex = i, e[i] = s;
  }
  /**
   * Returns an instance of {@link AnimationAction} for the passed clip.
   *
   * If an action fitting the clip and root parameters doesn't yet exist, it
   * will be created by this method. Calling this method several times with the
   * same clip and root parameters always returns the same action.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
   * @return {?AnimationAction} The animation action.
   */
  clipAction(t, e, i) {
    const a = e || this._root, s = a.uuid;
    let r = typeof t == "string" ? Qp.findByName(a, t) : t;
    const l = r !== null ? r.uuid : t, c = this._actionsByClip[l];
    let f = null;
    if (i === void 0 && (r !== null ? i = r.blendMode : i = Q_), c !== void 0) {
      const p = c.actionByRoot[s];
      if (p !== void 0 && p.blendMode === i)
        return p;
      f = c.knownActions[0], r === null && (r = f._clip);
    }
    if (r === null) return null;
    const d = new Kz(this, r, e, i);
    return this._bindAction(d, f), this._addInactiveAction(d, l, s), d;
  }
  /**
   * Returns an existing animation action for the passed clip.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   * @return {?AnimationAction} The animation action. Returns `null` if no action was found.
   */
  existingAction(t, e) {
    const i = e || this._root, a = i.uuid, s = typeof t == "string" ? Qp.findByName(i, t) : t, r = s ? s.uuid : t, l = this._actionsByClip[r];
    return l !== void 0 && l.actionByRoot[a] || null;
  }
  /**
   * Deactivates all previously scheduled actions on this mixer.
   *
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  stopAllAction() {
    const t = this._actions, e = this._nActiveActions;
    for (let i = e - 1; i >= 0; --i)
      t[i].stop();
    return this;
  }
  /**
   * Advances the global mixer time and updates the animation.
   *
   * This is usually done in the render loop by passing the delta
   * time from {@link Clock} or {@link Timer}.
   *
   * @param {number} deltaTime - The delta time in seconds.
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  update(t) {
    t *= this.timeScale;
    const e = this._actions, i = this._nActiveActions, a = this.time += t, s = Math.sign(t), r = this._accuIndex ^= 1;
    for (let f = 0; f !== i; ++f)
      e[f]._update(a, t, s, r);
    const l = this._bindings, c = this._nActiveBindings;
    for (let f = 0; f !== c; ++f)
      l[f].apply(r);
    return this;
  }
  /**
   * Sets the global mixer to a specific time and updates the animation accordingly.
   *
   * This is useful when you need to jump to an exact time in an animation. The
   * input parameter will be scaled by {@link AnimationMixer#timeScale}
   *
   * @param {number} time - The time to set in seconds.
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  setTime(t) {
    this.time = 0;
    for (let e = 0; e < this._actions.length; e++)
      this._actions[e].time = 0;
    return this.update(t);
  }
  /**
   * Returns this mixer's root object.
   *
   * @return {Object3D} The mixer's root object.
   */
  getRoot() {
    return this._root;
  }
  /**
   * Deallocates all memory resources for a clip. Before using this method make
   * sure to call {@link AnimationAction#stop} for all related actions.
   *
   * @param {AnimationClip} clip - The clip to uncache.
   */
  uncacheClip(t) {
    const e = this._actions, i = t.uuid, a = this._actionsByClip, s = a[i];
    if (s !== void 0) {
      const r = s.knownActions;
      for (let l = 0, c = r.length; l !== c; ++l) {
        const f = r[l];
        this._deactivateAction(f);
        const d = f._cacheIndex, p = e[e.length - 1];
        f._cacheIndex = null, f._byClipCacheIndex = null, p._cacheIndex = d, e[d] = p, e.pop(), this._removeInactiveBindingsForAction(f);
      }
      delete a[i];
    }
  }
  /**
   * Deallocates all memory resources for a root object. Before using this
   * method make sure to call {@link AnimationAction#stop} for all related
   * actions or alternatively {@link AnimationMixer#stopAllAction} when the
   * mixer operates on a single root.
   *
   * @param {Object3D} root - The root object to uncache.
   */
  uncacheRoot(t) {
    const e = t.uuid, i = this._actionsByClip;
    for (const r in i) {
      const l = i[r].actionByRoot, c = l[e];
      c !== void 0 && (this._deactivateAction(c), this._removeInactiveAction(c));
    }
    const a = this._bindingsByRootAndName, s = a[e];
    if (s !== void 0)
      for (const r in s) {
        const l = s[r];
        l.restoreOriginalState(), this._removeInactiveBinding(l);
      }
  }
  /**
   * Deallocates all memory resources for an action. The action is identified by the
   * given clip and an optional root object. Before using this method make
   * sure to call {@link AnimationAction#stop} to deactivate the action.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   */
  uncacheAction(t, e) {
    const i = this.existingAction(t, e);
    i !== null && (this._deactivateAction(i), this._removeInactiveAction(i));
  }
}
class SG extends $E {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(t = 1, e = 1, i = 1, a = {}) {
    super(t, e, a), this.isRenderTarget3D = !0, this.depth = i, this.texture = new J_(null, t, e, i), this._setTextureOptions(a), this.texture.isRenderTargetTexture = !0;
  }
}
class AT {
  /**
   * Constructs a new uniform.
   *
   * @param {any} value - The uniform value.
   */
  constructor(t) {
    this.value = t;
  }
  /**
   * Returns a new uniform with copied values from this instance.
   * If the value has a `clone()` method, the value is cloned as well.
   *
   * @return {Uniform} A clone of this instance.
   */
  clone() {
    return new AT(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let MG = 0;
class bG extends gr {
  /**
   * Constructs a new uniforms group.
   */
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: MG++ }), this.name = "", this.usage = Gp, this.uniforms = [];
  }
  /**
   * Adds the given uniform to this uniforms group.
   *
   * @param {Uniform} uniform - The uniform to add.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  add(t) {
    return this.uniforms.push(t), this;
  }
  /**
   * Removes the given uniform from this uniforms group.
   *
   * @param {Uniform} uniform - The uniform to remove.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  remove(t) {
    const e = this.uniforms.indexOf(t);
    return e !== -1 && this.uniforms.splice(e, 1), this;
  }
  /**
   * Sets the name of this uniforms group.
   *
   * @param {string} name - The name to set.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  setName(t) {
    return this.name = t, this;
  }
  /**
   * Sets the usage of this uniforms group.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  setUsage(t) {
    return this.usage = t, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Texture#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Copies the values of the given uniforms group to this instance.
   *
   * @param {UniformsGroup} source - The uniforms group to copy.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  copy(t) {
    this.name = t.name, this.usage = t.usage;
    const e = t.uniforms;
    this.uniforms.length = 0;
    for (let i = 0, a = e.length; i < a; i++) {
      const s = Array.isArray(e[i]) ? e[i] : [e[i]];
      for (let r = 0; r < s.length; r++)
        this.uniforms.push(s[r].clone());
    }
    return this;
  }
  /**
   * Returns a new uniforms group with copied values from this instance.
   *
   * @return {UniformsGroup} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class EG extends ny {
  /**
   * Constructs a new instanced interleaved buffer.
   *
   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
   * @param {number} stride - The number of typed-array elements per vertex.
   * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.
   */
  constructor(t, e, i = 1) {
    super(t, e), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = i;
  }
  copy(t) {
    return super.copy(t), this.meshPerAttribute = t.meshPerAttribute, this;
  }
  clone(t) {
    const e = super.clone(t);
    return e.meshPerAttribute = this.meshPerAttribute, e;
  }
  toJSON(t) {
    const e = super.toJSON(t);
    return e.isInstancedInterleavedBuffer = !0, e.meshPerAttribute = this.meshPerAttribute, e;
  }
}
class TG {
  /**
   * Constructs a new GL buffer attribute.
   *
   * @param {WebGLBuffer} buffer - The native WebGL buffer.
   * @param {number} type - The native data type (e.g. `gl.FLOAT`).
   * @param {number} itemSize - The item size.
   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.
   * @param {number} count - The expected number of vertices in VBO.
   */
  constructor(t, e, i, a, s) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = t, this.type = e, this.itemSize = i, this.elementSize = a, this.count = s, this.version = 0;
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(t) {
    t === !0 && this.version++;
  }
  /**
   * Sets the given native WebGL buffer.
   *
   * @param {WebGLBuffer} buffer - The buffer to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setBuffer(t) {
    return this.buffer = t, this;
  }
  /**
   * Sets the given native data type and element size.
   *
   * @param {number} type - The native data type (e.g. `gl.FLOAT`).
   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.
   * @return {BufferAttribute} A reference to this instance.
   */
  setType(t, e) {
    return this.type = t, this.elementSize = e, this;
  }
  /**
   * Sets the item size.
   *
   * @param {number} itemSize - The item size.
   * @return {BufferAttribute} A reference to this instance.
   */
  setItemSize(t) {
    return this.itemSize = t, this;
  }
  /**
   * Sets the count (the expected number of vertices in VBO).
   *
   * @param {number} count - The count.
   * @return {BufferAttribute} A reference to this instance.
   */
  setCount(t) {
    return this.count = t, this;
  }
}
const Ow = /* @__PURE__ */ new ae();
class Jz {
  /**
   * Constructs a new raycaster.
   *
   * @param {Vector3} origin - The origin vector where the ray casts from.
   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.
   * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.
   * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.
   */
  constructor(t, e, i = 0, a = 1 / 0) {
    this.ray = new bh(t, e), this.near = i, this.far = a, this.camera = null, this.layers = new lh(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  /**
   * Updates the ray with a new origin and direction by copying the values from the arguments.
   *
   * @param {Vector3} origin - The origin vector where the ray casts from.
   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.
   */
  set(t, e) {
    this.ray.set(t, e);
  }
  /**
   * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.
   *
   * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).
   * X and Y components should be between `-1` and `1`.
   * @param {Camera} camera - The camera from which the ray should originate.
   */
  setFromCamera(t, e) {
    e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(t.x, t.y, 0.5).unproject(e).sub(this.ray.origin).normalize(), this.camera = e) : e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e), this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld), this.camera = e) : console.error("THREE.Raycaster: Unsupported camera type: " + e.type);
  }
  /**
   * Uses the given WebXR controller to compute a new origin and direction for the internal ray.
   *
   * @param {WebXRController} controller - The controller to copy the position and direction from.
   * @return {Raycaster} A reference to this raycaster.
   */
  setFromXRController(t) {
    return Ow.identity().extractRotation(t.matrixWorld), this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(Ow), this;
  }
  /**
   * The intersection point of a raycaster intersection test.
   * @typedef {Object} Raycaster~Intersection
   * @property {number} distance - The distance from the ray's origin to the intersection point.
   * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the
   * intersection to the nearest point on the ray. For other objects it will be `undefined`.
   * @property {Vector3} point - The intersection point, in world coordinates.
   * @property {Object} face - The face that has been intersected.
   * @property {number} faceIndex - The face index.
   * @property {Object3D} object - The 3D object that has been intersected.
   * @property {Vector2} uv - U,V coordinates at point of intersection.
   * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.
   * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.
   * @property {number} instanceId - The index number of the instance where the ray
   * intersects the {@link InstancedMesh}.
   */
  /**
   * Checks all intersection between the ray and the object with or without the
   * descendants. Intersections are returned sorted by distance, closest first.
   *
   * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when
   * evaluating whether the ray intersects the object or not. This allows meshes to respond
   * differently to ray casting than lines or points.
   *
   * Note that for meshes, faces must be pointed towards the origin of the ray in order
   * to be detected; intersections of the ray passing through the back of a face will not
   * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}
   * to `THREE.DoubleSide`.
   *
   * @param {Object3D} object - The 3D object to check for intersection with the ray.
   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.
   * Otherwise it only checks intersection with the object.
   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.
   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.
   */
  intersectObject(t, e = !0, i = []) {
    return ab(t, this, i, e), i.sort(Nw), i;
  }
  /**
   * Checks all intersection between the ray and the objects with or without
   * the descendants. Intersections are returned sorted by distance, closest first.
   *
   * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.
   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.
   * Otherwise it only checks intersection with the object.
   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.
   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.
   */
  intersectObjects(t, e = !0, i = []) {
    for (let a = 0, s = t.length; a < s; a++)
      ab(t[a], this, i, e);
    return i.sort(Nw), i;
  }
}
function Nw(n, t) {
  return n.distance - t.distance;
}
function ab(n, t, e, i) {
  let a = !0;
  if (n.layers.test(t.layers) && n.raycast(t, e) === !1 && (a = !1), a === !0 && i === !0) {
    const s = n.children;
    for (let r = 0, l = s.length; r < l; r++)
      ab(s[r], t, e, !0);
  }
}
class $z {
  /**
   * Constructs a new spherical.
   *
   * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.
   * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.
   * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.
   */
  constructor(t = 1, e = 0, i = 0) {
    this.radius = t, this.phi = e, this.theta = i;
  }
  /**
   * Sets the spherical components by copying the given values.
   *
   * @param {number} radius - The radius.
   * @param {number} phi - The polar angle.
   * @param {number} theta - The azimuthal angle.
   * @return {Spherical} A reference to this spherical.
   */
  set(t, e, i) {
    return this.radius = t, this.phi = e, this.theta = i, this;
  }
  /**
   * Copies the values of the given spherical to this instance.
   *
   * @param {Spherical} other - The spherical to copy.
   * @return {Spherical} A reference to this spherical.
   */
  copy(t) {
    return this.radius = t.radius, this.phi = t.phi, this.theta = t.theta, this;
  }
  /**
   * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -
   * `0.000001`.
   *
   * @return {Spherical} A reference to this spherical.
   */
  makeSafe() {
    return this.phi = me(this.phi, 1e-6, Math.PI - 1e-6), this;
  }
  /**
   * Sets the spherical components from the given vector which is assumed to hold
   * Cartesian coordinates.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Spherical} A reference to this spherical.
   */
  setFromVector3(t) {
    return this.setFromCartesianCoords(t.x, t.y, t.z);
  }
  /**
   * Sets the spherical components from the given Cartesian coordinates.
   *
   * @param {number} x - The x value.
   * @param {number} y - The x value.
   * @param {number} z - The x value.
   * @return {Spherical} A reference to this spherical.
   */
  setFromCartesianCoords(t, e, i) {
    return this.radius = Math.sqrt(t * t + e * e + i * i), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(t, i), this.phi = Math.acos(me(e / this.radius, -1, 1))), this;
  }
  /**
   * Returns a new spherical with copied values from this instance.
   *
   * @return {Spherical} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class AG {
  /**
   * Constructs a new cylindrical.
   *
   * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.
   * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.
   * @param {number} [y=0] - The height above the x-z plane.
   */
  constructor(t = 1, e = 0, i = 0) {
    this.radius = t, this.theta = e, this.y = i;
  }
  /**
   * Sets the cylindrical components by copying the given values.
   *
   * @param {number} radius - The radius.
   * @param {number} theta - The theta angle.
   * @param {number} y - The height value.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  set(t, e, i) {
    return this.radius = t, this.theta = e, this.y = i, this;
  }
  /**
   * Copies the values of the given cylindrical to this instance.
   *
   * @param {Cylindrical} other - The cylindrical to copy.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  copy(t) {
    return this.radius = t.radius, this.theta = t.theta, this.y = t.y, this;
  }
  /**
   * Sets the cylindrical components from the given vector which is assumed to hold
   * Cartesian coordinates.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  setFromVector3(t) {
    return this.setFromCartesianCoords(t.x, t.y, t.z);
  }
  /**
   * Sets the cylindrical components from the given Cartesian coordinates.
   *
   * @param {number} x - The x value.
   * @param {number} y - The x value.
   * @param {number} z - The x value.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  setFromCartesianCoords(t, e, i) {
    return this.radius = Math.sqrt(t * t + i * i), this.theta = Math.atan2(t, i), this.y = e, this;
  }
  /**
   * Returns a new cylindrical with copied values from this instance.
   *
   * @return {Cylindrical} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class RT {
  /**
   * Constructs a new 2x2 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   */
  constructor(t, e, i, a) {
    RT.prototype.isMatrix2 = !0, this.elements = [
      1,
      0,
      0,
      1
    ], t !== void 0 && this.set(t, e, i, a);
  }
  /**
   * Sets this matrix to the 2x2 identity matrix.
   *
   * @return {Matrix2} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix2} A reference to this matrix.
   */
  fromArray(t, e = 0) {
    for (let i = 0; i < 4; i++)
      this.elements[i] = t[i + e];
    return this;
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} n11 - 1-1 matrix element.
   * @param {number} n12 - 1-2 matrix element.
   * @param {number} n21 - 2-1 matrix element.
   * @param {number} n22 - 2-2 matrix element.
   * @return {Matrix2} A reference to this matrix.
   */
  set(t, e, i, a) {
    const s = this.elements;
    return s[0] = t, s[2] = e, s[1] = i, s[3] = a, this;
  }
}
const Lw = /* @__PURE__ */ new ft();
class RG {
  /**
   * Constructs a new bounding box.
   *
   * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.
   * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
   */
  constructor(t = new ft(1 / 0, 1 / 0), e = new ft(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = t, this.max = e;
  }
  /**
   * Sets the lower and upper boundaries of this box.
   * Please note that this method only copies the values from the given objects.
   *
   * @param {Vector2} min - The lower boundary of the box.
   * @param {Vector2} max - The upper boundary of the box.
   * @return {Box2} A reference to this bounding box.
   */
  set(t, e) {
    return this.min.copy(t), this.max.copy(e), this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.
   * @return {Box2} A reference to this bounding box.
   */
  setFromPoints(t) {
    this.makeEmpty();
    for (let e = 0, i = t.length; e < i; e++)
      this.expandByPoint(t[e]);
    return this;
  }
  /**
   * Centers this box on the given center vector and sets this box's width, height and
   * depth to the given size values.
   *
   * @param {Vector2} center - The center of the box.
   * @param {Vector2} size - The x and y dimensions of the box.
   * @return {Box2} A reference to this bounding box.
   */
  setFromCenterAndSize(t, e) {
    const i = Lw.copy(e).multiplyScalar(0.5);
    return this.min.copy(t).sub(i), this.max.copy(t).add(i), this;
  }
  /**
   * Returns a new box with copied values from this instance.
   *
   * @return {Box2} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given box to this instance.
   *
   * @param {Box2} box - The box to copy.
   * @return {Box2} A reference to this bounding box.
   */
  copy(t) {
    return this.min.copy(t.min), this.max.copy(t.max), this;
  }
  /**
   * Makes this box empty which means in encloses a zero space in 2D.
   *
   * @return {Box2} A reference to this bounding box.
   */
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  /**
   * Returns true if this box includes zero points within its bounds.
   * Note that a box with equal lower and upper bounds still includes one
   * point, the one both bounds share.
   *
   * @return {boolean} Whether this box is empty or not.
   */
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  /**
   * Returns the center point of this box.
   *
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The center point.
   */
  getCenter(t) {
    return this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  /**
   * Returns the dimensions of this box.
   *
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The size.
   */
  getSize(t) {
    return this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min);
  }
  /**
   * Expands the boundaries of this box to include the given point.
   *
   * @param {Vector2} point - The point that should be included by the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByPoint(t) {
    return this.min.min(t), this.max.max(t), this;
  }
  /**
   * Expands this box equilaterally by the given vector. The width of this
   * box will be expanded by the x component of the vector in both
   * directions. The height of this box will be expanded by the y component of
   * the vector in both directions.
   *
   * @param {Vector2} vector - The vector that should expand the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByVector(t) {
    return this.min.sub(t), this.max.add(t), this;
  }
  /**
   * Expands each dimension of the box by the given scalar. If negative, the
   * dimensions of the box will be contracted.
   *
   * @param {number} scalar - The scalar value that should expand the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByScalar(t) {
    return this.min.addScalar(-t), this.max.addScalar(t), this;
  }
  /**
   * Returns `true` if the given point lies within or on the boundaries of this box.
   *
   * @param {Vector2} point - The point to test.
   * @return {boolean} Whether the bounding box contains the given point or not.
   */
  containsPoint(t) {
    return t.x >= this.min.x && t.x <= this.max.x && t.y >= this.min.y && t.y <= this.max.y;
  }
  /**
   * Returns `true` if this bounding box includes the entirety of the given bounding box.
   * If this box and the given one are identical, this function also returns `true`.
   *
   * @param {Box2} box - The bounding box to test.
   * @return {boolean} Whether the bounding box contains the given bounding box or not.
   */
  containsBox(t) {
    return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y;
  }
  /**
   * Returns a point as a proportion of this box's width and height.
   *
   * @param {Vector2} point - A point in 2D space.
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} A point as a proportion of this box's width and height.
   */
  getParameter(t, e) {
    return e.set(
      (t.x - this.min.x) / (this.max.x - this.min.x),
      (t.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  /**
   * Returns `true` if the given bounding box intersects with this bounding box.
   *
   * @param {Box2} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with this bounding box.
   */
  intersectsBox(t) {
    return t.max.x >= this.min.x && t.min.x <= this.max.x && t.max.y >= this.min.y && t.min.y <= this.max.y;
  }
  /**
   * Clamps the given point within the bounds of this box.
   *
   * @param {Vector2} point - The point to clamp.
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The clamped point.
   */
  clampPoint(t, e) {
    return e.copy(t).clamp(this.min, this.max);
  }
  /**
   * Returns the euclidean distance from any edge of this box to the specified point. If
   * the given point lies inside of this box, the distance will be `0`.
   *
   * @param {Vector2} point - The point to compute the distance to.
   * @return {number} The euclidean distance.
   */
  distanceToPoint(t) {
    return this.clampPoint(t, Lw).distanceTo(t);
  }
  /**
   * Computes the intersection of this bounding box and the given one, setting the upper
   * bound of this box to the lesser of the two boxes' upper bounds and the
   * lower bound of this box to the greater of the two boxes' lower bounds. If
   * there's no overlap, makes this box empty.
   *
   * @param {Box2} box - The bounding box to intersect with.
   * @return {Box2} A reference to this bounding box.
   */
  intersect(t) {
    return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this;
  }
  /**
   * Computes the union of this box and another and the given one, setting the upper
   * bound of this box to the greater of the two boxes' upper bounds and the
   * lower bound of this box to the lesser of the two boxes' lower bounds.
   *
   * @param {Box2} box - The bounding box that will be unioned with this instance.
   * @return {Box2} A reference to this bounding box.
   */
  union(t) {
    return this.min.min(t.min), this.max.max(t.max), this;
  }
  /**
   * Adds the given offset to both the upper and lower bounds of this bounding box,
   * effectively moving it in 2D space.
   *
   * @param {Vector2} offset - The offset that should be used to translate the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  translate(t) {
    return this.min.add(t), this.max.add(t), this;
  }
  /**
   * Returns `true` if this bounding box is equal with the given one.
   *
   * @param {Box2} box - The box to test for equality.
   * @return {boolean} Whether this bounding box is equal with the given one.
   */
  equals(t) {
    return t.min.equals(this.min) && t.max.equals(this.max);
  }
}
const zw = /* @__PURE__ */ new H(), f0 = /* @__PURE__ */ new H();
class CG {
  /**
   * Constructs a new line segment.
   *
   * @param {Vector3} [start=(0,0,0)] - Start of the line segment.
   * @param {Vector3} [end=(0,0,0)] - End of the line segment.
   */
  constructor(t = new H(), e = new H()) {
    this.start = t, this.end = e;
  }
  /**
   * Sets the start and end values by copying the given vectors.
   *
   * @param {Vector3} start - The start point.
   * @param {Vector3} end - The end point.
   * @return {Line3} A reference to this line segment.
   */
  set(t, e) {
    return this.start.copy(t), this.end.copy(e), this;
  }
  /**
   * Copies the values of the given line segment to this instance.
   *
   * @param {Line3} line - The line segment to copy.
   * @return {Line3} A reference to this line segment.
   */
  copy(t) {
    return this.start.copy(t.start), this.end.copy(t.end), this;
  }
  /**
   * Returns the center of the line segment.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The center point.
   */
  getCenter(t) {
    return t.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  /**
   * Returns the delta vector of the line segment's start and end point.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The delta vector.
   */
  delta(t) {
    return t.subVectors(this.end, this.start);
  }
  /**
   * Returns the squared Euclidean distance between the line' start and end point.
   *
   * @return {number} The squared Euclidean distance.
   */
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  /**
   * Returns the Euclidean distance between the line' start and end point.
   *
   * @return {number} The Euclidean distance.
   */
  distance() {
    return this.start.distanceTo(this.end);
  }
  /**
   * Returns a vector at a certain position along the line segment.
   *
   * @param {number} t - A value between `[0,1]` to represent a position along the line segment.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The delta vector.
   */
  at(t, e) {
    return this.delta(e).multiplyScalar(t).add(this.start);
  }
  /**
   * Returns a point parameter based on the closest point as projected on the line segment.
   *
   * @param {Vector3} point - The point for which to return a point parameter.
   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.
   * @return {number} The point parameter.
   */
  closestPointToPointParameter(t, e) {
    zw.subVectors(t, this.start), f0.subVectors(this.end, this.start);
    const i = f0.dot(f0);
    let s = f0.dot(zw) / i;
    return e && (s = me(s, 0, 1)), s;
  }
  /**
   * Returns the closets point on the line for a given point.
   *
   * @param {Vector3} point - The point to compute the closest point on the line for.
   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.
   * @param {Vector3} target -  The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on the line.
   */
  closestPointToPoint(t, e, i) {
    const a = this.closestPointToPointParameter(t, e);
    return this.delta(i).multiplyScalar(a).add(this.start);
  }
  /**
   * Applies a 4x4 transformation matrix to this line segment.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Line3} A reference to this line segment.
   */
  applyMatrix4(t) {
    return this.start.applyMatrix4(t), this.end.applyMatrix4(t), this;
  }
  /**
   * Returns `true` if this line segment is equal with the given one.
   *
   * @param {Line3} line - The line segment to test for equality.
   * @return {boolean} Whether this line segment is equal with the given one.
   */
  equals(t) {
    return t.start.equals(this.start) && t.end.equals(this.end);
  }
  /**
   * Returns a new line segment with copied values from this instance.
   *
   * @return {Line3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const Bw = /* @__PURE__ */ new H();
class wG extends He {
  /**
   * Constructs a new spot light helper.
   *
   * @param {HemisphereLight} light - The light to be visualized.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(t, e) {
    super(), this.light = t, this.matrixAutoUpdate = !1, this.color = e, this.type = "SpotLightHelper";
    const i = new ye(), a = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let r = 0, l = 1, c = 32; r < c; r++, l++) {
      const f = r / c * Math.PI * 2, d = l / c * Math.PI * 2;
      a.push(
        Math.cos(f),
        Math.sin(f),
        1,
        Math.cos(d),
        Math.sin(d),
        1
      );
    }
    i.setAttribute("position", new Zt(a, 3));
    const s = new $i({ fog: !1, toneMapped: !1 });
    this.cone = new vr(i, s), this.add(this.cone), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), this.parent ? (this.parent.updateWorldMatrix(!0), this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)) : this.matrix.copy(this.light.matrixWorld), this.matrixWorld.copy(this.light.matrixWorld);
    const t = this.light.distance ? this.light.distance : 1e3, e = t * Math.tan(this.light.angle);
    this.cone.scale.set(e, e, t), Bw.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(Bw), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const Bo = /* @__PURE__ */ new H(), h0 = /* @__PURE__ */ new ae(), _1 = /* @__PURE__ */ new ae();
class DG extends vr {
  /**
   * Constructs a new hemisphere light helper.
   *
   * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object
   * can be used if it represents a hierarchy of bones (see {@link Bone}).
   */
  constructor(t) {
    const e = t4(t), i = new ye(), a = [], s = [], r = new Pt(0, 0, 1), l = new Pt(0, 1, 0);
    for (let f = 0; f < e.length; f++) {
      const d = e[f];
      d.parent && d.parent.isBone && (a.push(0, 0, 0), a.push(0, 0, 0), s.push(r.r, r.g, r.b), s.push(l.r, l.g, l.b));
    }
    i.setAttribute("position", new Zt(a, 3)), i.setAttribute("color", new Zt(s, 3));
    const c = new $i({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(i, c), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = t, this.bones = e, this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1;
  }
  updateMatrixWorld(t) {
    const e = this.bones, i = this.geometry, a = i.getAttribute("position");
    _1.copy(this.root.matrixWorld).invert();
    for (let s = 0, r = 0; s < e.length; s++) {
      const l = e[s];
      l.parent && l.parent.isBone && (h0.multiplyMatrices(_1, l.matrixWorld), Bo.setFromMatrixPosition(h0), a.setXYZ(r, Bo.x, Bo.y, Bo.z), h0.multiplyMatrices(_1, l.parent.matrixWorld), Bo.setFromMatrixPosition(h0), a.setXYZ(r + 1, Bo.x, Bo.y, Bo.z), r += 2);
    }
    i.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(t);
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function t4(n) {
  const t = [];
  n.isBone === !0 && t.push(n);
  for (let e = 0; e < n.children.length; e++)
    t.push(...t4(n.children[e]));
  return t;
}
class UG extends Yn {
  /**
   * Constructs a new point light helper.
   *
   * @param {PointLight} light - The light to be visualized.
   * @param {number} [sphereSize=1] - The size of the sphere helper.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(t, e, i) {
    const a = new bm(e, 4, 2), s = new bl({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(a, s), this.light = t, this.color = i, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  /**
   * Updates the helper to match the position of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const OG = /* @__PURE__ */ new H(), Pw = /* @__PURE__ */ new Pt(), Iw = /* @__PURE__ */ new Pt();
class NG extends He {
  /**
   * Constructs a new hemisphere light helper.
   *
   * @param {HemisphereLight} light - The light to be visualized.
   * @param {number} [size=1] - The size of the mesh used to visualize the light.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(t, e, i) {
    super(), this.light = t, this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.color = i, this.type = "HemisphereLightHelper";
    const a = new Mm(e);
    a.rotateY(Math.PI * 0.5), this.material = new bl({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const s = a.getAttribute("position"), r = new Float32Array(s.count * 3);
    a.setAttribute("color", new an(r, 3)), this.add(new Yn(a, this.material)), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    const t = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const e = t.geometry.getAttribute("color");
      Pw.copy(this.light.color), Iw.copy(this.light.groundColor);
      for (let i = 0, a = e.count; i < a; i++) {
        const s = i < a / 2 ? Pw : Iw;
        e.setXYZ(i, s.r, s.g, s.b);
      }
      e.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), t.lookAt(OG.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class LG extends vr {
  /**
   * Constructs a new grid helper.
   *
   * @param {number} [size=10] - The size of the grid.
   * @param {number} [divisions=10] - The number of divisions across the grid.
   * @param {number|Color|string} [color1=0x444444] - The color of the center line.
   * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.
   */
  constructor(t = 10, e = 10, i = 4473924, a = 8947848) {
    i = new Pt(i), a = new Pt(a);
    const s = e / 2, r = t / e, l = t / 2, c = [], f = [];
    for (let m = 0, g = 0, y = -l; m <= e; m++, y += r) {
      c.push(-l, 0, y, l, 0, y), c.push(y, 0, -l, y, 0, l);
      const x = m === s ? i : a;
      x.toArray(f, g), g += 3, x.toArray(f, g), g += 3, x.toArray(f, g), g += 3, x.toArray(f, g), g += 3;
    }
    const d = new ye();
    d.setAttribute("position", new Zt(c, 3)), d.setAttribute("color", new Zt(f, 3));
    const p = new $i({ vertexColors: !0, toneMapped: !1 });
    super(d, p), this.type = "GridHelper";
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class zG extends vr {
  /**
   * Constructs a new polar grid helper.
   *
   * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.
   * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.
   * @param {number} [rings=16] - The number of rings. This can be any positive integer.
   * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.
   * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.
   * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.
   */
  constructor(t = 10, e = 16, i = 8, a = 64, s = 4473924, r = 8947848) {
    s = new Pt(s), r = new Pt(r);
    const l = [], c = [];
    if (e > 1)
      for (let p = 0; p < e; p++) {
        const m = p / e * (Math.PI * 2), g = Math.sin(m) * t, y = Math.cos(m) * t;
        l.push(0, 0, 0), l.push(g, 0, y);
        const x = p & 1 ? s : r;
        c.push(x.r, x.g, x.b), c.push(x.r, x.g, x.b);
      }
    for (let p = 0; p < i; p++) {
      const m = p & 1 ? s : r, g = t - t / i * p;
      for (let y = 0; y < a; y++) {
        let x = y / a * (Math.PI * 2), M = Math.sin(x) * g, v = Math.cos(x) * g;
        l.push(M, 0, v), c.push(m.r, m.g, m.b), x = (y + 1) / a * (Math.PI * 2), M = Math.sin(x) * g, v = Math.cos(x) * g, l.push(M, 0, v), c.push(m.r, m.g, m.b);
      }
    }
    const f = new ye();
    f.setAttribute("position", new Zt(l, 3)), f.setAttribute("color", new Zt(c, 3));
    const d = new $i({ vertexColors: !0, toneMapped: !1 });
    super(f, d), this.type = "PolarGridHelper";
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const Hw = /* @__PURE__ */ new H(), d0 = /* @__PURE__ */ new H(), Fw = /* @__PURE__ */ new H();
class BG extends He {
  /**
   * Constructs a new directional light helper.
   *
   * @param {DirectionalLight} light - The light to be visualized.
   * @param {number} [size=1] - The dimensions of the plane.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(t, e, i) {
    super(), this.light = t, this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.color = i, this.type = "DirectionalLightHelper", e === void 0 && (e = 1);
    let a = new ye();
    a.setAttribute("position", new Zt([
      -e,
      e,
      0,
      e,
      e,
      0,
      e,
      -e,
      0,
      -e,
      -e,
      0,
      -e,
      e,
      0
    ], 3));
    const s = new $i({ fog: !1, toneMapped: !1 });
    this.lightPlane = new _l(a, s), this.add(this.lightPlane), a = new ye(), a.setAttribute("position", new Zt([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new _l(a, s), this.add(this.targetLine), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), Hw.setFromMatrixPosition(this.light.matrixWorld), d0.setFromMatrixPosition(this.light.target.matrixWorld), Fw.subVectors(d0, Hw), this.lightPlane.lookAt(d0), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(d0), this.targetLine.scale.z = Fw.length();
  }
}
const p0 = /* @__PURE__ */ new H(), Dn = /* @__PURE__ */ new $_();
class PG extends vr {
  /**
   * Constructs a new arrow helper.
   *
   * @param {Camera} camera - The camera to visualize.
   */
  constructor(t) {
    const e = new ye(), i = new $i({ color: 16777215, vertexColors: !0, toneMapped: !1 }), a = [], s = [], r = {};
    l("n1", "n2"), l("n2", "n4"), l("n4", "n3"), l("n3", "n1"), l("f1", "f2"), l("f2", "f4"), l("f4", "f3"), l("f3", "f1"), l("n1", "f1"), l("n2", "f2"), l("n3", "f3"), l("n4", "f4"), l("p", "n1"), l("p", "n2"), l("p", "n3"), l("p", "n4"), l("u1", "u2"), l("u2", "u3"), l("u3", "u1"), l("c", "t"), l("p", "c"), l("cn1", "cn2"), l("cn3", "cn4"), l("cf1", "cf2"), l("cf3", "cf4");
    function l(y, x) {
      c(y), c(x);
    }
    function c(y) {
      a.push(0, 0, 0), s.push(0, 0, 0), r[y] === void 0 && (r[y] = []), r[y].push(a.length / 3 - 1);
    }
    e.setAttribute("position", new Zt(a, 3)), e.setAttribute("color", new Zt(s, 3)), super(e, i), this.type = "CameraHelper", this.camera = t, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = t.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = r, this.update();
    const f = new Pt(16755200), d = new Pt(16711680), p = new Pt(43775), m = new Pt(16777215), g = new Pt(3355443);
    this.setColors(f, d, p, m, g);
  }
  /**
   * Defines the colors of the helper.
   *
   * @param {Color} frustum - The frustum line color.
   * @param {Color} cone - The cone line color.
   * @param {Color} up - The up line color.
   * @param {Color} target - The target line color.
   * @param {Color} cross - The cross line color.
   */
  setColors(t, e, i, a, s) {
    const l = this.geometry.getAttribute("color");
    l.setXYZ(0, t.r, t.g, t.b), l.setXYZ(1, t.r, t.g, t.b), l.setXYZ(2, t.r, t.g, t.b), l.setXYZ(3, t.r, t.g, t.b), l.setXYZ(4, t.r, t.g, t.b), l.setXYZ(5, t.r, t.g, t.b), l.setXYZ(6, t.r, t.g, t.b), l.setXYZ(7, t.r, t.g, t.b), l.setXYZ(8, t.r, t.g, t.b), l.setXYZ(9, t.r, t.g, t.b), l.setXYZ(10, t.r, t.g, t.b), l.setXYZ(11, t.r, t.g, t.b), l.setXYZ(12, t.r, t.g, t.b), l.setXYZ(13, t.r, t.g, t.b), l.setXYZ(14, t.r, t.g, t.b), l.setXYZ(15, t.r, t.g, t.b), l.setXYZ(16, t.r, t.g, t.b), l.setXYZ(17, t.r, t.g, t.b), l.setXYZ(18, t.r, t.g, t.b), l.setXYZ(19, t.r, t.g, t.b), l.setXYZ(20, t.r, t.g, t.b), l.setXYZ(21, t.r, t.g, t.b), l.setXYZ(22, t.r, t.g, t.b), l.setXYZ(23, t.r, t.g, t.b), l.setXYZ(24, e.r, e.g, e.b), l.setXYZ(25, e.r, e.g, e.b), l.setXYZ(26, e.r, e.g, e.b), l.setXYZ(27, e.r, e.g, e.b), l.setXYZ(28, e.r, e.g, e.b), l.setXYZ(29, e.r, e.g, e.b), l.setXYZ(30, e.r, e.g, e.b), l.setXYZ(31, e.r, e.g, e.b), l.setXYZ(32, i.r, i.g, i.b), l.setXYZ(33, i.r, i.g, i.b), l.setXYZ(34, i.r, i.g, i.b), l.setXYZ(35, i.r, i.g, i.b), l.setXYZ(36, i.r, i.g, i.b), l.setXYZ(37, i.r, i.g, i.b), l.setXYZ(38, a.r, a.g, a.b), l.setXYZ(39, a.r, a.g, a.b), l.setXYZ(40, s.r, s.g, s.b), l.setXYZ(41, s.r, s.g, s.b), l.setXYZ(42, s.r, s.g, s.b), l.setXYZ(43, s.r, s.g, s.b), l.setXYZ(44, s.r, s.g, s.b), l.setXYZ(45, s.r, s.g, s.b), l.setXYZ(46, s.r, s.g, s.b), l.setXYZ(47, s.r, s.g, s.b), l.setXYZ(48, s.r, s.g, s.b), l.setXYZ(49, s.r, s.g, s.b), l.needsUpdate = !0;
  }
  /**
   * Updates the helper based on the projection matrix of the camera.
   */
  update() {
    const t = this.geometry, e = this.pointMap, i = 1, a = 1;
    Dn.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
    const s = this.camera.coordinateSystem === _s ? -1 : 0;
    zn("c", e, t, Dn, 0, 0, s), zn("t", e, t, Dn, 0, 0, 1), zn("n1", e, t, Dn, -1, -1, s), zn("n2", e, t, Dn, i, -1, s), zn("n3", e, t, Dn, -1, a, s), zn("n4", e, t, Dn, i, a, s), zn("f1", e, t, Dn, -1, -1, 1), zn("f2", e, t, Dn, i, -1, 1), zn("f3", e, t, Dn, -1, a, 1), zn("f4", e, t, Dn, i, a, 1), zn("u1", e, t, Dn, i * 0.7, a * 1.1, s), zn("u2", e, t, Dn, -1 * 0.7, a * 1.1, s), zn("u3", e, t, Dn, 0, a * 2, s), zn("cf1", e, t, Dn, -1, 0, 1), zn("cf2", e, t, Dn, i, 0, 1), zn("cf3", e, t, Dn, 0, -1, 1), zn("cf4", e, t, Dn, 0, a, 1), zn("cn1", e, t, Dn, -1, 0, s), zn("cn2", e, t, Dn, i, 0, s), zn("cn3", e, t, Dn, 0, -1, s), zn("cn4", e, t, Dn, 0, a, s), t.getAttribute("position").needsUpdate = !0;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function zn(n, t, e, i, a, s, r) {
  p0.set(a, s, r).unproject(i);
  const l = t[n];
  if (l !== void 0) {
    const c = e.getAttribute("position");
    for (let f = 0, d = l.length; f < d; f++)
      c.setXYZ(l[f], p0.x, p0.y, p0.z);
  }
}
const m0 = /* @__PURE__ */ new Pi();
class IG extends vr {
  /**
   * Constructs a new box helper.
   *
   * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.
   * @param {number|Color|string} [color=0xffff00] - The box's color.
   */
  constructor(t, e = 16776960) {
    const i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), a = new Float32Array(8 * 3), s = new ye();
    s.setIndex(new an(i, 1)), s.setAttribute("position", new an(a, 3)), super(s, new $i({ color: e, toneMapped: !1 })), this.object = t, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  /**
   * Updates the helper's geometry to match the dimensions of the object,
   * including any children.
   */
  update() {
    if (this.object !== void 0 && m0.setFromObject(this.object), m0.isEmpty()) return;
    const t = m0.min, e = m0.max, i = this.geometry.attributes.position, a = i.array;
    a[0] = e.x, a[1] = e.y, a[2] = e.z, a[3] = t.x, a[4] = e.y, a[5] = e.z, a[6] = t.x, a[7] = t.y, a[8] = e.z, a[9] = e.x, a[10] = t.y, a[11] = e.z, a[12] = e.x, a[13] = e.y, a[14] = t.z, a[15] = t.x, a[16] = e.y, a[17] = t.z, a[18] = t.x, a[19] = t.y, a[20] = t.z, a[21] = e.x, a[22] = t.y, a[23] = t.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  /**
   * Updates the wireframe box for the passed object.
   *
   * @param {Object3D} object - The 3D object to create the helper for.
   * @return {BoxHelper} A reference to this instance.
   */
  setFromObject(t) {
    return this.object = t, this.update(), this;
  }
  copy(t, e) {
    return super.copy(t, e), this.object = t.object, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class HG extends vr {
  /**
   * Constructs a new box3 helper.
   *
   * @param {Box3} box - The box to visualize.
   * @param {number|Color|string} [color=0xffff00] - The box's color.
   */
  constructor(t, e = 16776960) {
    const i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), a = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], s = new ye();
    s.setIndex(new an(i, 1)), s.setAttribute("position", new Zt(a, 3)), super(s, new $i({ color: e, toneMapped: !1 })), this.box = t, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(t) {
    const e = this.box;
    e.isEmpty() || (e.getCenter(this.position), e.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(t));
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class FG extends _l {
  /**
   * Constructs a new plane helper.
   *
   * @param {Plane} plane - The plane to be visualized.
   * @param {number} [size=1] - The side length of plane helper.
   * @param {number|Color|string} [hex=0xffff00] - The helper's color.
   */
  constructor(t, e = 1, i = 16776960) {
    const a = i, s = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], r = new ye();
    r.setAttribute("position", new Zt(s, 3)), r.computeBoundingSphere(), super(r, new $i({ color: a, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = t, this.size = e;
    const l = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], c = new ye();
    c.setAttribute("position", new Zt(l, 3)), c.computeBoundingSphere(), this.add(new Yn(c, new bl({ color: a, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(t) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(t);
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const Vw = /* @__PURE__ */ new H();
let g0, y1;
class VG extends He {
  /**
   * Constructs a new arrow helper.
   *
   * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.
   * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.
   * @param {number} [length=1] - Length of the arrow in world units.
   * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.
   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.
   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.
   */
  constructor(t = new H(0, 0, 1), e = new H(0, 0, 0), i = 1, a = 16776960, s = i * 0.2, r = s * 0.2) {
    super(), this.type = "ArrowHelper", g0 === void 0 && (g0 = new ye(), g0.setAttribute("position", new Zt([0, 0, 0, 0, 1, 0], 3)), y1 = new Sm(0.5, 1, 5, 1), y1.translate(0, -0.5, 0)), this.position.copy(e), this.line = new _l(g0, new $i({ color: a, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new Yn(y1, new bl({ color: a, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(t), this.setLength(i, s, r);
  }
  /**
   * Sets the direction of the helper.
   *
   * @param {Vector3} dir - The normalized direction vector.
   */
  setDirection(t) {
    if (t.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (t.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      Vw.set(t.z, 0, -t.x).normalize();
      const e = Math.acos(t.y);
      this.quaternion.setFromAxisAngle(Vw, e);
    }
  }
  /**
   * Sets the length of the helper.
   *
   * @param {number} length - Length of the arrow in world units.
   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.
   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.
   */
  setLength(t, e = t * 0.2, i = e * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, t - e), 1), this.line.updateMatrix(), this.cone.scale.set(i, e, i), this.cone.position.y = t, this.cone.updateMatrix();
  }
  /**
   * Sets the color of the helper.
   *
   * @param {number|Color|string} color - The color to set.
   */
  setColor(t) {
    this.line.material.color.set(t), this.cone.material.color.set(t);
  }
  copy(t) {
    return super.copy(t, !1), this.line.copy(t.line), this.cone.copy(t.cone), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class GG extends vr {
  /**
   * Constructs a new axes helper.
   *
   * @param {number} [size=1] - Size of the lines representing the axes.
   */
  constructor(t = 1) {
    const e = [
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      0,
      0,
      t
    ], i = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], a = new ye();
    a.setAttribute("position", new Zt(e, 3)), a.setAttribute("color", new Zt(i, 3));
    const s = new $i({ vertexColors: !0, toneMapped: !1 });
    super(a, s), this.type = "AxesHelper";
  }
  /**
   * Defines the colors of the axes helper.
   *
   * @param {number|Color|string} xAxisColor - The color for the x axis.
   * @param {number|Color|string} yAxisColor - The color for the y axis.
   * @param {number|Color|string} zAxisColor - The color for the z axis.
   * @return {AxesHelper} A reference to this axes helper.
   */
  setColors(t, e, i) {
    const a = new Pt(), s = this.geometry.attributes.color.array;
    return a.set(t), a.toArray(s, 0), a.toArray(s, 3), a.set(e), a.toArray(s, 6), a.toArray(s, 9), a.set(i), a.toArray(s, 12), a.toArray(s, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class XG {
  /**
   * Constructs a new shape path.
   */
  constructor() {
    this.type = "ShapePath", this.color = new Pt(), this.subPaths = [], this.currentPath = null;
  }
  /**
   * Creates a new path and moves it current point to the given one.
   *
   * @param {number} x - The x coordinate.
   * @param {number} y - The y coordinate.
   * @return {ShapePath} A reference to this shape path.
   */
  moveTo(t, e) {
    return this.currentPath = new p_(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(t, e), this;
  }
  /**
   * Adds an instance of {@link LineCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} x - The x coordinate of the end point.
   * @param {number} y - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  lineTo(t, e) {
    return this.currentPath.lineTo(t, e), this;
  }
  /**
   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCPx - The x coordinate of the control point.
   * @param {number} aCPy - The y coordinate of the control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  quadraticCurveTo(t, e, i, a) {
    return this.currentPath.quadraticCurveTo(t, e, i, a), this;
  }
  /**
   * Adds an instance of {@link CubicBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCP1x - The x coordinate of the first control point.
   * @param {number} aCP1y - The y coordinate of the first control point.
   * @param {number} aCP2x - The x coordinate of the second control point.
   * @param {number} aCP2y - The y coordinate of the second control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  bezierCurveTo(t, e, i, a, s, r) {
    return this.currentPath.bezierCurveTo(t, e, i, a, s, r), this;
  }
  /**
   * Adds an instance of {@link SplineCurve} to the path by connecting
   * the current point with the given list of points.
   *
   * @param {Array<Vector2>} pts - An array of points in 2D space.
   * @return {ShapePath} A reference to this shape path.
   */
  splineThru(t) {
    return this.currentPath.splineThru(t), this;
  }
  /**
   * Converts the paths into an array of shapes.
   *
   * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).
   * If this flag is set to `true`, then those are flipped.
   * @return {Array<Shape>} An array of shapes.
   */
  toShapes(t) {
    function e(v) {
      const S = [];
      for (let E = 0, T = v.length; E < T; E++) {
        const w = v[E], D = new Pu();
        D.curves = w.curves, S.push(D);
      }
      return S;
    }
    function i(v, S) {
      const E = S.length;
      let T = !1;
      for (let w = E - 1, D = 0; D < E; w = D++) {
        let U = S[w], O = S[D], R = O.x - U.x, C = O.y - U.y;
        if (Math.abs(C) > Number.EPSILON) {
          if (C < 0 && (U = S[D], R = -R, O = S[w], C = -C), v.y < U.y || v.y > O.y) continue;
          if (v.y === U.y) {
            if (v.x === U.x) return !0;
          } else {
            const B = C * (v.x - U.x) - R * (v.y - U.y);
            if (B === 0) return !0;
            if (B < 0) continue;
            T = !T;
          }
        } else {
          if (v.y !== U.y) continue;
          if (O.x <= v.x && v.x <= U.x || U.x <= v.x && v.x <= O.x) return !0;
        }
      }
      return T;
    }
    const a = Is.isClockWise, s = this.subPaths;
    if (s.length === 0) return [];
    let r, l, c;
    const f = [];
    if (s.length === 1)
      return l = s[0], c = new Pu(), c.curves = l.curves, f.push(c), f;
    let d = !a(s[0].getPoints());
    d = t ? !d : d;
    const p = [], m = [];
    let g = [], y = 0, x;
    m[y] = void 0, g[y] = [];
    for (let v = 0, S = s.length; v < S; v++)
      l = s[v], x = l.getPoints(), r = a(x), r = t ? !r : r, r ? (!d && m[y] && y++, m[y] = { s: new Pu(), p: x }, m[y].s.curves = l.curves, d && y++, g[y] = []) : g[y].push({ h: l, p: x[0] });
    if (!m[0]) return e(s);
    if (m.length > 1) {
      let v = !1, S = 0;
      for (let E = 0, T = m.length; E < T; E++)
        p[E] = [];
      for (let E = 0, T = m.length; E < T; E++) {
        const w = g[E];
        for (let D = 0; D < w.length; D++) {
          const U = w[D];
          let O = !0;
          for (let R = 0; R < m.length; R++)
            i(U.p, m[R].p) && (E !== R && S++, O ? (O = !1, p[R].push(U)) : v = !0);
          O && p[E].push(U);
        }
      }
      S > 0 && v === !1 && (g = p);
    }
    let M;
    for (let v = 0, S = m.length; v < S; v++) {
      c = m[v].s, f.push(c), M = g[v];
      for (let E = 0, T = M.length; E < T; E++)
        c.holes.push(M[E].h);
    }
    return f;
  }
}
class qG extends gr {
  /**
   * Constructs a new controls instance.
   *
   * @param {Object3D} object - The object that is managed by the controls.
   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.
   */
  constructor(t, e = null) {
    super(), this.object = t, this.domElement = e, this.enabled = !0, this.state = -1, this.keys = {}, this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null }, this.touches = { ONE: null, TWO: null };
  }
  /**
   * Connects the controls to the DOM. This method has so called "side effects" since
   * it adds the module's event listeners to the DOM.
   *
   * @param {HTMLDOMElement} element - The DOM element to connect to.
   */
  connect(t) {
    if (t === void 0) {
      console.warn("THREE.Controls: connect() now requires an element.");
      return;
    }
    this.domElement !== null && this.disconnect(), this.domElement = t;
  }
  /**
   * Disconnects the controls from the DOM.
   */
  disconnect() {
  }
  /**
   * Call this method if you no longer want use to the controls. It frees all internal
   * resources and removes all event listeners.
   */
  dispose() {
  }
  /**
   * Controls should implement this method if they have to update their internal state
   * per simulation step.
   *
   * @param {number} [delta] - The time delta in seconds.
   */
  update() {
  }
}
function YG(n, t) {
  const e = n.image && n.image.width ? n.image.width / n.image.height : 1;
  return e > t ? (n.repeat.x = 1, n.repeat.y = e / t, n.offset.x = 0, n.offset.y = (1 - n.repeat.y) / 2) : (n.repeat.x = t / e, n.repeat.y = 1, n.offset.x = (1 - n.repeat.x) / 2, n.offset.y = 0), n;
}
function kG(n, t) {
  const e = n.image && n.image.width ? n.image.width / n.image.height : 1;
  return e > t ? (n.repeat.x = t / e, n.repeat.y = 1, n.offset.x = (1 - n.repeat.x) / 2, n.offset.y = 0) : (n.repeat.x = 1, n.repeat.y = e / t, n.offset.x = 0, n.offset.y = (1 - n.repeat.y) / 2), n;
}
function WG(n) {
  return n.repeat.x = 1, n.repeat.y = 1, n.offset.x = 0, n.offset.y = 0, n;
}
function sb(n, t, e, i) {
  const a = ZG(i);
  switch (e) {
    case kE:
      return n * t;
    case W_:
      return n * t / a.components * a.byteLength;
    case _m:
      return n * t / a.components * a.byteLength;
    case ZE:
      return n * t * 2 / a.components * a.byteLength;
    case Z_:
      return n * t * 2 / a.components * a.byteLength;
    case WE:
      return n * t * 3 / a.components * a.byteLength;
    case zi:
      return n * t * 4 / a.components * a.byteLength;
    case j_:
      return n * t * 4 / a.components * a.byteLength;
    case ap:
    case sp:
      return Math.floor((n + 3) / 4) * Math.floor((t + 3) / 4) * 8;
    case rp:
    case op:
      return Math.floor((n + 3) / 4) * Math.floor((t + 3) / 4) * 16;
    case Hv:
    case Vv:
      return Math.max(n, 16) * Math.max(t, 8) / 4;
    case Iv:
    case Fv:
      return Math.max(n, 8) * Math.max(t, 8) / 2;
    case Gv:
    case Xv:
      return Math.floor((n + 3) / 4) * Math.floor((t + 3) / 4) * 8;
    case qv:
      return Math.floor((n + 3) / 4) * Math.floor((t + 3) / 4) * 16;
    case Yv:
      return Math.floor((n + 3) / 4) * Math.floor((t + 3) / 4) * 16;
    case kv:
      return Math.floor((n + 4) / 5) * Math.floor((t + 3) / 4) * 16;
    case Wv:
      return Math.floor((n + 4) / 5) * Math.floor((t + 4) / 5) * 16;
    case Zv:
      return Math.floor((n + 5) / 6) * Math.floor((t + 4) / 5) * 16;
    case jv:
      return Math.floor((n + 5) / 6) * Math.floor((t + 5) / 6) * 16;
    case Qv:
      return Math.floor((n + 7) / 8) * Math.floor((t + 4) / 5) * 16;
    case Kv:
      return Math.floor((n + 7) / 8) * Math.floor((t + 5) / 6) * 16;
    case Jv:
      return Math.floor((n + 7) / 8) * Math.floor((t + 7) / 8) * 16;
    case $v:
      return Math.floor((n + 9) / 10) * Math.floor((t + 4) / 5) * 16;
    case t_:
      return Math.floor((n + 9) / 10) * Math.floor((t + 5) / 6) * 16;
    case e_:
      return Math.floor((n + 9) / 10) * Math.floor((t + 7) / 8) * 16;
    case n_:
      return Math.floor((n + 9) / 10) * Math.floor((t + 9) / 10) * 16;
    case i_:
      return Math.floor((n + 11) / 12) * Math.floor((t + 9) / 10) * 16;
    case a_:
      return Math.floor((n + 11) / 12) * Math.floor((t + 11) / 12) * 16;
    case lp:
    case s_:
    case r_:
      return Math.ceil(n / 4) * Math.ceil(t / 4) * 16;
    case jE:
    case o_:
      return Math.ceil(n / 4) * Math.ceil(t / 4) * 8;
    case l_:
    case u_:
      return Math.ceil(n / 4) * Math.ceil(t / 4) * 16;
  }
  throw new Error(
    `Unable to determine texture byte length for ${e} format.`
  );
}
function ZG(n) {
  switch (n) {
    case Ss:
    case XE:
      return { byteLength: 1, components: 1 };
    case ih:
    case qE:
    case Mh:
      return { byteLength: 2, components: 1 };
    case Y_:
    case k_:
      return { byteLength: 2, components: 4 };
    case lo:
    case q_:
    case fa:
      return { byteLength: 4, components: 1 };
    case YE:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${n}.`);
}
class jG {
  /**
   * Scales the texture as large as possible within its surface without cropping
   * or stretching the texture. The method preserves the original aspect ratio of
   * the texture. Akin to CSS `object-fit: contain`
   *
   * @param {Texture} texture - The texture.
   * @param {number} aspect - The texture's aspect ratio.
   * @return {Texture} The updated texture.
   */
  static contain(t, e) {
    return YG(t, e);
  }
  /**
   * Scales the texture to the smallest possible size to fill the surface, leaving
   * no empty space. The method preserves the original aspect ratio of the texture.
   * Akin to CSS `object-fit: cover`.
   *
   * @param {Texture} texture - The texture.
   * @param {number} aspect - The texture's aspect ratio.
   * @return {Texture} The updated texture.
   */
  static cover(t, e) {
    return kG(t, e);
  }
  /**
   * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.
   *
   * @param {Texture} texture - The texture.
   * @return {Texture} The updated texture.
   */
  static fill(t) {
    return WG(t);
  }
  /**
   * Determines how many bytes must be used to represent the texture.
   *
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} format - The texture's format.
   * @param {number} type - The texture's type.
   * @return {number} The byte length.
   */
  static getByteLength(t, e, i, a) {
    return sb(t, e, i, a);
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: gm
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = gm);
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
function e4() {
  let n = null, t = !1, e = null, i = null;
  function a(s, r) {
    e(s, r), i = n.requestAnimationFrame(a);
  }
  return {
    start: function() {
      t !== !0 && e !== null && (i = n.requestAnimationFrame(a), t = !0);
    },
    stop: function() {
      n.cancelAnimationFrame(i), t = !1;
    },
    setAnimationLoop: function(s) {
      e = s;
    },
    setContext: function(s) {
      n = s;
    }
  };
}
function QG(n) {
  const t = /* @__PURE__ */ new WeakMap();
  function e(l, c) {
    const f = l.array, d = l.usage, p = f.byteLength, m = n.createBuffer();
    n.bindBuffer(c, m), n.bufferData(c, f, d), l.onUploadCallback();
    let g;
    if (f instanceof Float32Array)
      g = n.FLOAT;
    else if (f instanceof Uint16Array)
      l.isFloat16BufferAttribute ? g = n.HALF_FLOAT : g = n.UNSIGNED_SHORT;
    else if (f instanceof Int16Array)
      g = n.SHORT;
    else if (f instanceof Uint32Array)
      g = n.UNSIGNED_INT;
    else if (f instanceof Int32Array)
      g = n.INT;
    else if (f instanceof Int8Array)
      g = n.BYTE;
    else if (f instanceof Uint8Array)
      g = n.UNSIGNED_BYTE;
    else if (f instanceof Uint8ClampedArray)
      g = n.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + f);
    return {
      buffer: m,
      type: g,
      bytesPerElement: f.BYTES_PER_ELEMENT,
      version: l.version,
      size: p
    };
  }
  function i(l, c, f) {
    const d = c.array, p = c.updateRanges;
    if (n.bindBuffer(f, l), p.length === 0)
      n.bufferSubData(f, 0, d);
    else {
      p.sort((g, y) => g.start - y.start);
      let m = 0;
      for (let g = 1; g < p.length; g++) {
        const y = p[m], x = p[g];
        x.start <= y.start + y.count + 1 ? y.count = Math.max(
          y.count,
          x.start + x.count - y.start
        ) : (++m, p[m] = x);
      }
      p.length = m + 1;
      for (let g = 0, y = p.length; g < y; g++) {
        const x = p[g];
        n.bufferSubData(
          f,
          x.start * d.BYTES_PER_ELEMENT,
          d,
          x.start,
          x.count
        );
      }
      c.clearUpdateRanges();
    }
    c.onUploadCallback();
  }
  function a(l) {
    return l.isInterleavedBufferAttribute && (l = l.data), t.get(l);
  }
  function s(l) {
    l.isInterleavedBufferAttribute && (l = l.data);
    const c = t.get(l);
    c && (n.deleteBuffer(c.buffer), t.delete(l));
  }
  function r(l, c) {
    if (l.isInterleavedBufferAttribute && (l = l.data), l.isGLBufferAttribute) {
      const d = t.get(l);
      (!d || d.version < l.version) && t.set(l, {
        buffer: l.buffer,
        type: l.type,
        bytesPerElement: l.elementSize,
        version: l.version
      });
      return;
    }
    const f = t.get(l);
    if (f === void 0)
      t.set(l, e(l, c));
    else if (f.version < l.version) {
      if (f.size !== l.array.byteLength)
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      i(f.buffer, l, c), f.version = l.version;
    }
  }
  return {
    get: a,
    remove: s,
    update: r
  };
}
var KG = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, JG = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, $G = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, t7 = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, e7 = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, n7 = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, i7 = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, a7 = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, s7 = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`, r7 = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`, o7 = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, l7 = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, u7 = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, c7 = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, f7 = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, h7 = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, d7 = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, p7 = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, m7 = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, g7 = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, v7 = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, _7 = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`, y7 = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`, x7 = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, S7 = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, M7 = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, b7 = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, E7 = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, T7 = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, A7 = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, R7 = "gl_FragColor = linearToOutputTexel( gl_FragColor );", C7 = `vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, w7 = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, D7 = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, U7 = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, O7 = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, N7 = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, L7 = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, z7 = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, B7 = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, P7 = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, I7 = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, H7 = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, F7 = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, V7 = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, G7 = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, X7 = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, q7 = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, Y7 = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, k7 = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, W7 = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, Z7 = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, j7 = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, Q7 = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, K7 = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, J7 = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, $7 = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, t9 = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, e9 = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, n9 = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, i9 = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, a9 = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, s9 = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, r9 = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, o9 = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, l9 = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, u9 = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, c9 = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, f9 = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, h9 = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`, d9 = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, p9 = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, m9 = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, g9 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, v9 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, _9 = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, y9 = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, x9 = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, S9 = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, M9 = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, b9 = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, E9 = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, T9 = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, A9 = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, R9 = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, C9 = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, w9 = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, D9 = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, U9 = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, O9 = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`, N9 = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, L9 = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, z9 = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, B9 = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, P9 = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, I9 = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, H9 = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, F9 = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, V9 = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, G9 = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, X9 = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, q9 = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, Y9 = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, k9 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, W9 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, Z9 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, j9 = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const Q9 = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, K9 = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, J9 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, $9 = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, tX = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, eX = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, nX = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, iX = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`, aX = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, sX = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, rX = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, oX = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, lX = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, uX = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, cX = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, fX = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, hX = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, dX = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, pX = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, mX = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, gX = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, vX = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, _X = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, yX = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, xX = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, SX = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, MX = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, bX = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, EX = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, TX = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, AX = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, RX = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, CX = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, wX = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, xe = {
  alphahash_fragment: KG,
  alphahash_pars_fragment: JG,
  alphamap_fragment: $G,
  alphamap_pars_fragment: t7,
  alphatest_fragment: e7,
  alphatest_pars_fragment: n7,
  aomap_fragment: i7,
  aomap_pars_fragment: a7,
  batching_pars_vertex: s7,
  batching_vertex: r7,
  begin_vertex: o7,
  beginnormal_vertex: l7,
  bsdfs: u7,
  iridescence_fragment: c7,
  bumpmap_pars_fragment: f7,
  clipping_planes_fragment: h7,
  clipping_planes_pars_fragment: d7,
  clipping_planes_pars_vertex: p7,
  clipping_planes_vertex: m7,
  color_fragment: g7,
  color_pars_fragment: v7,
  color_pars_vertex: _7,
  color_vertex: y7,
  common: x7,
  cube_uv_reflection_fragment: S7,
  defaultnormal_vertex: M7,
  displacementmap_pars_vertex: b7,
  displacementmap_vertex: E7,
  emissivemap_fragment: T7,
  emissivemap_pars_fragment: A7,
  colorspace_fragment: R7,
  colorspace_pars_fragment: C7,
  envmap_fragment: w7,
  envmap_common_pars_fragment: D7,
  envmap_pars_fragment: U7,
  envmap_pars_vertex: O7,
  envmap_physical_pars_fragment: X7,
  envmap_vertex: N7,
  fog_vertex: L7,
  fog_pars_vertex: z7,
  fog_fragment: B7,
  fog_pars_fragment: P7,
  gradientmap_pars_fragment: I7,
  lightmap_pars_fragment: H7,
  lights_lambert_fragment: F7,
  lights_lambert_pars_fragment: V7,
  lights_pars_begin: G7,
  lights_toon_fragment: q7,
  lights_toon_pars_fragment: Y7,
  lights_phong_fragment: k7,
  lights_phong_pars_fragment: W7,
  lights_physical_fragment: Z7,
  lights_physical_pars_fragment: j7,
  lights_fragment_begin: Q7,
  lights_fragment_maps: K7,
  lights_fragment_end: J7,
  logdepthbuf_fragment: $7,
  logdepthbuf_pars_fragment: t9,
  logdepthbuf_pars_vertex: e9,
  logdepthbuf_vertex: n9,
  map_fragment: i9,
  map_pars_fragment: a9,
  map_particle_fragment: s9,
  map_particle_pars_fragment: r9,
  metalnessmap_fragment: o9,
  metalnessmap_pars_fragment: l9,
  morphinstance_vertex: u9,
  morphcolor_vertex: c9,
  morphnormal_vertex: f9,
  morphtarget_pars_vertex: h9,
  morphtarget_vertex: d9,
  normal_fragment_begin: p9,
  normal_fragment_maps: m9,
  normal_pars_fragment: g9,
  normal_pars_vertex: v9,
  normal_vertex: _9,
  normalmap_pars_fragment: y9,
  clearcoat_normal_fragment_begin: x9,
  clearcoat_normal_fragment_maps: S9,
  clearcoat_pars_fragment: M9,
  iridescence_pars_fragment: b9,
  opaque_fragment: E9,
  packing: T9,
  premultiplied_alpha_fragment: A9,
  project_vertex: R9,
  dithering_fragment: C9,
  dithering_pars_fragment: w9,
  roughnessmap_fragment: D9,
  roughnessmap_pars_fragment: U9,
  shadowmap_pars_fragment: O9,
  shadowmap_pars_vertex: N9,
  shadowmap_vertex: L9,
  shadowmask_pars_fragment: z9,
  skinbase_vertex: B9,
  skinning_pars_vertex: P9,
  skinning_vertex: I9,
  skinnormal_vertex: H9,
  specularmap_fragment: F9,
  specularmap_pars_fragment: V9,
  tonemapping_fragment: G9,
  tonemapping_pars_fragment: X9,
  transmission_fragment: q9,
  transmission_pars_fragment: Y9,
  uv_pars_fragment: k9,
  uv_pars_vertex: W9,
  uv_vertex: Z9,
  worldpos_vertex: j9,
  background_vert: Q9,
  background_frag: K9,
  backgroundCube_vert: J9,
  backgroundCube_frag: $9,
  cube_vert: tX,
  cube_frag: eX,
  depth_vert: nX,
  depth_frag: iX,
  distanceRGBA_vert: aX,
  distanceRGBA_frag: sX,
  equirect_vert: rX,
  equirect_frag: oX,
  linedashed_vert: lX,
  linedashed_frag: uX,
  meshbasic_vert: cX,
  meshbasic_frag: fX,
  meshlambert_vert: hX,
  meshlambert_frag: dX,
  meshmatcap_vert: pX,
  meshmatcap_frag: mX,
  meshnormal_vert: gX,
  meshnormal_frag: vX,
  meshphong_vert: _X,
  meshphong_frag: yX,
  meshphysical_vert: xX,
  meshphysical_frag: SX,
  meshtoon_vert: MX,
  meshtoon_frag: bX,
  points_vert: EX,
  points_frag: TX,
  shadow_vert: AX,
  shadow_frag: RX,
  sprite_vert: CX,
  sprite_frag: wX
}, Nt = {
  common: {
    diffuse: { value: /* @__PURE__ */ new Pt(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new ge() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new ge() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new ge() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: /* @__PURE__ */ new ge() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new ge() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new ge() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new ge() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new ge() },
    normalScale: { value: /* @__PURE__ */ new ft(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new ge() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new ge() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new ge() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new ge() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new Pt(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new Pt(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new ge() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new ge() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new Pt(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new ft(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new ge() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new ge() },
    alphaTest: { value: 0 }
  }
}, Bs = {
  basic: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.specularmap,
      Nt.envmap,
      Nt.aomap,
      Nt.lightmap,
      Nt.fog
    ]),
    vertexShader: xe.meshbasic_vert,
    fragmentShader: xe.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.specularmap,
      Nt.envmap,
      Nt.aomap,
      Nt.lightmap,
      Nt.emissivemap,
      Nt.bumpmap,
      Nt.normalmap,
      Nt.displacementmap,
      Nt.fog,
      Nt.lights,
      {
        emissive: { value: /* @__PURE__ */ new Pt(0) }
      }
    ]),
    vertexShader: xe.meshlambert_vert,
    fragmentShader: xe.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.specularmap,
      Nt.envmap,
      Nt.aomap,
      Nt.lightmap,
      Nt.emissivemap,
      Nt.bumpmap,
      Nt.normalmap,
      Nt.displacementmap,
      Nt.fog,
      Nt.lights,
      {
        emissive: { value: /* @__PURE__ */ new Pt(0) },
        specular: { value: /* @__PURE__ */ new Pt(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: xe.meshphong_vert,
    fragmentShader: xe.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.envmap,
      Nt.aomap,
      Nt.lightmap,
      Nt.emissivemap,
      Nt.bumpmap,
      Nt.normalmap,
      Nt.displacementmap,
      Nt.roughnessmap,
      Nt.metalnessmap,
      Nt.fog,
      Nt.lights,
      {
        emissive: { value: /* @__PURE__ */ new Pt(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: xe.meshphysical_vert,
    fragmentShader: xe.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.aomap,
      Nt.lightmap,
      Nt.emissivemap,
      Nt.bumpmap,
      Nt.normalmap,
      Nt.displacementmap,
      Nt.gradientmap,
      Nt.fog,
      Nt.lights,
      {
        emissive: { value: /* @__PURE__ */ new Pt(0) }
      }
    ]),
    vertexShader: xe.meshtoon_vert,
    fragmentShader: xe.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.bumpmap,
      Nt.normalmap,
      Nt.displacementmap,
      Nt.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: xe.meshmatcap_vert,
    fragmentShader: xe.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ qi([
      Nt.points,
      Nt.fog
    ]),
    vertexShader: xe.points_vert,
    fragmentShader: xe.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: xe.linedashed_vert,
    fragmentShader: xe.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.displacementmap
    ]),
    vertexShader: xe.depth_vert,
    fragmentShader: xe.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.bumpmap,
      Nt.normalmap,
      Nt.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: xe.meshnormal_vert,
    fragmentShader: xe.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ qi([
      Nt.sprite,
      Nt.fog
    ]),
    vertexShader: xe.sprite_vert,
    fragmentShader: xe.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new ge() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: xe.background_vert,
    fragmentShader: xe.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: /* @__PURE__ */ new ge() }
    },
    vertexShader: xe.backgroundCube_vert,
    fragmentShader: xe.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: xe.cube_vert,
    fragmentShader: xe.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: xe.equirect_vert,
    fragmentShader: xe.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ qi([
      Nt.common,
      Nt.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new H() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: xe.distanceRGBA_vert,
    fragmentShader: xe.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ qi([
      Nt.lights,
      Nt.fog,
      {
        color: { value: /* @__PURE__ */ new Pt(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: xe.shadow_vert,
    fragmentShader: xe.shadow_frag
  }
};
Bs.physical = {
  uniforms: /* @__PURE__ */ qi([
    Bs.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new ge() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new ge() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new ft(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new ge() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new ge() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new ge() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new Pt(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new ge() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new ge() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new ge() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new ft() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new ge() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new Pt(0) },
      specularColor: { value: /* @__PURE__ */ new Pt(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new ge() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new ge() },
      anisotropyVector: { value: /* @__PURE__ */ new ft() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new ge() }
    }
  ]),
  vertexShader: xe.meshphysical_vert,
  fragmentShader: xe.meshphysical_frag
};
const v0 = { r: 0, b: 0, g: 0 }, ou = /* @__PURE__ */ new _a(), DX = /* @__PURE__ */ new ae();
function UX(n, t, e, i, a, s, r) {
  const l = new Pt(0);
  let c = s === !0 ? 0 : 1, f, d, p = null, m = 0, g = null;
  function y(E) {
    let T = E.isScene === !0 ? E.background : null;
    return T && T.isTexture && (T = (E.backgroundBlurriness > 0 ? e : t).get(T)), T;
  }
  function x(E) {
    let T = !1;
    const w = y(E);
    w === null ? v(l, c) : w && w.isColor && (v(w, 1), T = !0);
    const D = n.xr.getEnvironmentBlendMode();
    D === "additive" ? i.buffers.color.setClear(0, 0, 0, 1, r) : D === "alpha-blend" && i.buffers.color.setClear(0, 0, 0, 0, r), (n.autoClear || T) && (i.buffers.depth.setTest(!0), i.buffers.depth.setMask(!0), i.buffers.color.setMask(!0), n.clear(n.autoClearColor, n.autoClearDepth, n.autoClearStencil));
  }
  function M(E, T) {
    const w = y(T);
    w && (w.isCubeTexture || w.mapping === Sh) ? (d === void 0 && (d = new Yn(
      new tc(1, 1, 1),
      new Ms({
        name: "BackgroundCubeMaterial",
        uniforms: uh(Bs.backgroundCube.uniforms),
        vertexShader: Bs.backgroundCube.vertexShader,
        fragmentShader: Bs.backgroundCube.fragmentShader,
        side: Ki,
        depthTest: !1,
        depthWrite: !1,
        fog: !1,
        allowOverride: !1
      })
    ), d.geometry.deleteAttribute("normal"), d.geometry.deleteAttribute("uv"), d.onBeforeRender = function(D, U, O) {
      this.matrixWorld.copyPosition(O.matrixWorld);
    }, Object.defineProperty(d.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), a.update(d)), ou.copy(T.backgroundRotation), ou.x *= -1, ou.y *= -1, ou.z *= -1, w.isCubeTexture && w.isRenderTargetTexture === !1 && (ou.y *= -1, ou.z *= -1), d.material.uniforms.envMap.value = w, d.material.uniforms.flipEnvMap.value = w.isCubeTexture && w.isRenderTargetTexture === !1 ? -1 : 1, d.material.uniforms.backgroundBlurriness.value = T.backgroundBlurriness, d.material.uniforms.backgroundIntensity.value = T.backgroundIntensity, d.material.uniforms.backgroundRotation.value.setFromMatrix4(DX.makeRotationFromEuler(ou)), d.material.toneMapped = Oe.getTransfer(w.colorSpace) !== je, (p !== w || m !== w.version || g !== n.toneMapping) && (d.material.needsUpdate = !0, p = w, m = w.version, g = n.toneMapping), d.layers.enableAll(), E.unshift(d, d.geometry, d.material, 0, 0, null)) : w && w.isTexture && (f === void 0 && (f = new Yn(
      new Th(2, 2),
      new Ms({
        name: "BackgroundMaterial",
        uniforms: uh(Bs.background.uniforms),
        vertexShader: Bs.background.vertexShader,
        fragmentShader: Bs.background.fragmentShader,
        side: ro,
        depthTest: !1,
        depthWrite: !1,
        fog: !1,
        allowOverride: !1
      })
    ), f.geometry.deleteAttribute("normal"), Object.defineProperty(f.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), a.update(f)), f.material.uniforms.t2D.value = w, f.material.uniforms.backgroundIntensity.value = T.backgroundIntensity, f.material.toneMapped = Oe.getTransfer(w.colorSpace) !== je, w.matrixAutoUpdate === !0 && w.updateMatrix(), f.material.uniforms.uvTransform.value.copy(w.matrix), (p !== w || m !== w.version || g !== n.toneMapping) && (f.material.needsUpdate = !0, p = w, m = w.version, g = n.toneMapping), f.layers.enableAll(), E.unshift(f, f.geometry, f.material, 0, 0, null));
  }
  function v(E, T) {
    E.getRGB(v0, tz(n)), i.buffers.color.setClear(v0.r, v0.g, v0.b, T, r);
  }
  function S() {
    d !== void 0 && (d.geometry.dispose(), d.material.dispose(), d = void 0), f !== void 0 && (f.geometry.dispose(), f.material.dispose(), f = void 0);
  }
  return {
    getClearColor: function() {
      return l;
    },
    setClearColor: function(E, T = 1) {
      l.set(E), c = T, v(l, c);
    },
    getClearAlpha: function() {
      return c;
    },
    setClearAlpha: function(E) {
      c = E, v(l, c);
    },
    render: x,
    addToRenderList: M,
    dispose: S
  };
}
function OX(n, t) {
  const e = n.getParameter(n.MAX_VERTEX_ATTRIBS), i = {}, a = m(null);
  let s = a, r = !1;
  function l(C, B, Y, V, Q) {
    let J = !1;
    const P = p(V, Y, B);
    s !== P && (s = P, f(s.object)), J = g(C, V, Y, Q), J && y(C, V, Y, Q), Q !== null && t.update(Q, n.ELEMENT_ARRAY_BUFFER), (J || r) && (r = !1, T(C, B, Y, V), Q !== null && n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, t.get(Q).buffer));
  }
  function c() {
    return n.createVertexArray();
  }
  function f(C) {
    return n.bindVertexArray(C);
  }
  function d(C) {
    return n.deleteVertexArray(C);
  }
  function p(C, B, Y) {
    const V = Y.wireframe === !0;
    let Q = i[C.id];
    Q === void 0 && (Q = {}, i[C.id] = Q);
    let J = Q[B.id];
    J === void 0 && (J = {}, Q[B.id] = J);
    let P = J[V];
    return P === void 0 && (P = m(c()), J[V] = P), P;
  }
  function m(C) {
    const B = [], Y = [], V = [];
    for (let Q = 0; Q < e; Q++)
      B[Q] = 0, Y[Q] = 0, V[Q] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: B,
      enabledAttributes: Y,
      attributeDivisors: V,
      object: C,
      attributes: {},
      index: null
    };
  }
  function g(C, B, Y, V) {
    const Q = s.attributes, J = B.attributes;
    let P = 0;
    const q = Y.getAttributes();
    for (const G in q)
      if (q[G].location >= 0) {
        const lt = Q[G];
        let mt = J[G];
        if (mt === void 0 && (G === "instanceMatrix" && C.instanceMatrix && (mt = C.instanceMatrix), G === "instanceColor" && C.instanceColor && (mt = C.instanceColor)), lt === void 0 || lt.attribute !== mt || mt && lt.data !== mt.data) return !0;
        P++;
      }
    return s.attributesNum !== P || s.index !== V;
  }
  function y(C, B, Y, V) {
    const Q = {}, J = B.attributes;
    let P = 0;
    const q = Y.getAttributes();
    for (const G in q)
      if (q[G].location >= 0) {
        let lt = J[G];
        lt === void 0 && (G === "instanceMatrix" && C.instanceMatrix && (lt = C.instanceMatrix), G === "instanceColor" && C.instanceColor && (lt = C.instanceColor));
        const mt = {};
        mt.attribute = lt, lt && lt.data && (mt.data = lt.data), Q[G] = mt, P++;
      }
    s.attributes = Q, s.attributesNum = P, s.index = V;
  }
  function x() {
    const C = s.newAttributes;
    for (let B = 0, Y = C.length; B < Y; B++)
      C[B] = 0;
  }
  function M(C) {
    v(C, 0);
  }
  function v(C, B) {
    const Y = s.newAttributes, V = s.enabledAttributes, Q = s.attributeDivisors;
    Y[C] = 1, V[C] === 0 && (n.enableVertexAttribArray(C), V[C] = 1), Q[C] !== B && (n.vertexAttribDivisor(C, B), Q[C] = B);
  }
  function S() {
    const C = s.newAttributes, B = s.enabledAttributes;
    for (let Y = 0, V = B.length; Y < V; Y++)
      B[Y] !== C[Y] && (n.disableVertexAttribArray(Y), B[Y] = 0);
  }
  function E(C, B, Y, V, Q, J, P) {
    P === !0 ? n.vertexAttribIPointer(C, B, Y, Q, J) : n.vertexAttribPointer(C, B, Y, V, Q, J);
  }
  function T(C, B, Y, V) {
    x();
    const Q = V.attributes, J = Y.getAttributes(), P = B.defaultAttributeValues;
    for (const q in J) {
      const G = J[q];
      if (G.location >= 0) {
        let it = Q[q];
        if (it === void 0 && (q === "instanceMatrix" && C.instanceMatrix && (it = C.instanceMatrix), q === "instanceColor" && C.instanceColor && (it = C.instanceColor)), it !== void 0) {
          const lt = it.normalized, mt = it.itemSize, Rt = t.get(it);
          if (Rt === void 0) continue;
          const Qt = Rt.buffer, $ = Rt.type, ht = Rt.bytesPerElement, kt = $ === n.INT || $ === n.UNSIGNED_INT || it.gpuType === q_;
          if (it.isInterleavedBufferAttribute) {
            const Ot = it.data, Xt = Ot.stride, pe = it.offset;
            if (Ot.isInstancedInterleavedBuffer) {
              for (let $t = 0; $t < G.locationSize; $t++)
                v(G.location + $t, Ot.meshPerAttribute);
              C.isInstancedMesh !== !0 && V._maxInstanceCount === void 0 && (V._maxInstanceCount = Ot.meshPerAttribute * Ot.count);
            } else
              for (let $t = 0; $t < G.locationSize; $t++)
                M(G.location + $t);
            n.bindBuffer(n.ARRAY_BUFFER, Qt);
            for (let $t = 0; $t < G.locationSize; $t++)
              E(
                G.location + $t,
                mt / G.locationSize,
                $,
                lt,
                Xt * ht,
                (pe + mt / G.locationSize * $t) * ht,
                kt
              );
          } else {
            if (it.isInstancedBufferAttribute) {
              for (let Ot = 0; Ot < G.locationSize; Ot++)
                v(G.location + Ot, it.meshPerAttribute);
              C.isInstancedMesh !== !0 && V._maxInstanceCount === void 0 && (V._maxInstanceCount = it.meshPerAttribute * it.count);
            } else
              for (let Ot = 0; Ot < G.locationSize; Ot++)
                M(G.location + Ot);
            n.bindBuffer(n.ARRAY_BUFFER, Qt);
            for (let Ot = 0; Ot < G.locationSize; Ot++)
              E(
                G.location + Ot,
                mt / G.locationSize,
                $,
                lt,
                mt * ht,
                mt / G.locationSize * Ot * ht,
                kt
              );
          }
        } else if (P !== void 0) {
          const lt = P[q];
          if (lt !== void 0)
            switch (lt.length) {
              case 2:
                n.vertexAttrib2fv(G.location, lt);
                break;
              case 3:
                n.vertexAttrib3fv(G.location, lt);
                break;
              case 4:
                n.vertexAttrib4fv(G.location, lt);
                break;
              default:
                n.vertexAttrib1fv(G.location, lt);
            }
        }
      }
    }
    S();
  }
  function w() {
    O();
    for (const C in i) {
      const B = i[C];
      for (const Y in B) {
        const V = B[Y];
        for (const Q in V)
          d(V[Q].object), delete V[Q];
        delete B[Y];
      }
      delete i[C];
    }
  }
  function D(C) {
    if (i[C.id] === void 0) return;
    const B = i[C.id];
    for (const Y in B) {
      const V = B[Y];
      for (const Q in V)
        d(V[Q].object), delete V[Q];
      delete B[Y];
    }
    delete i[C.id];
  }
  function U(C) {
    for (const B in i) {
      const Y = i[B];
      if (Y[C.id] === void 0) continue;
      const V = Y[C.id];
      for (const Q in V)
        d(V[Q].object), delete V[Q];
      delete Y[C.id];
    }
  }
  function O() {
    R(), r = !0, s !== a && (s = a, f(s.object));
  }
  function R() {
    a.geometry = null, a.program = null, a.wireframe = !1;
  }
  return {
    setup: l,
    reset: O,
    resetDefaultState: R,
    dispose: w,
    releaseStatesOfGeometry: D,
    releaseStatesOfProgram: U,
    initAttributes: x,
    enableAttribute: M,
    disableUnusedAttributes: S
  };
}
function NX(n, t, e) {
  let i;
  function a(f) {
    i = f;
  }
  function s(f, d) {
    n.drawArrays(i, f, d), e.update(d, i, 1);
  }
  function r(f, d, p) {
    p !== 0 && (n.drawArraysInstanced(i, f, d, p), e.update(d, i, p));
  }
  function l(f, d, p) {
    if (p === 0) return;
    t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i, f, 0, d, 0, p);
    let g = 0;
    for (let y = 0; y < p; y++)
      g += d[y];
    e.update(g, i, 1);
  }
  function c(f, d, p, m) {
    if (p === 0) return;
    const g = t.get("WEBGL_multi_draw");
    if (g === null)
      for (let y = 0; y < f.length; y++)
        r(f[y], d[y], m[y]);
    else {
      g.multiDrawArraysInstancedWEBGL(i, f, 0, d, 0, m, 0, p);
      let y = 0;
      for (let x = 0; x < p; x++)
        y += d[x] * m[x];
      e.update(y, i, 1);
    }
  }
  this.setMode = a, this.render = s, this.renderInstances = r, this.renderMultiDraw = l, this.renderMultiDrawInstances = c;
}
function LX(n, t, e, i) {
  let a;
  function s() {
    if (a !== void 0) return a;
    if (t.has("EXT_texture_filter_anisotropic") === !0) {
      const U = t.get("EXT_texture_filter_anisotropic");
      a = n.getParameter(U.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      a = 0;
    return a;
  }
  function r(U) {
    return !(U !== zi && i.convert(U) !== n.getParameter(n.IMPLEMENTATION_COLOR_READ_FORMAT));
  }
  function l(U) {
    const O = U === Mh && (t.has("EXT_color_buffer_half_float") || t.has("EXT_color_buffer_float"));
    return !(U !== Ss && i.convert(U) !== n.getParameter(n.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
    U !== fa && !O);
  }
  function c(U) {
    if (U === "highp") {
      if (n.getShaderPrecisionFormat(n.VERTEX_SHADER, n.HIGH_FLOAT).precision > 0 && n.getShaderPrecisionFormat(n.FRAGMENT_SHADER, n.HIGH_FLOAT).precision > 0)
        return "highp";
      U = "mediump";
    }
    return U === "mediump" && n.getShaderPrecisionFormat(n.VERTEX_SHADER, n.MEDIUM_FLOAT).precision > 0 && n.getShaderPrecisionFormat(n.FRAGMENT_SHADER, n.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  let f = e.precision !== void 0 ? e.precision : "highp";
  const d = c(f);
  d !== f && (console.warn("THREE.WebGLRenderer:", f, "not supported, using", d, "instead."), f = d);
  const p = e.logarithmicDepthBuffer === !0, m = e.reverseDepthBuffer === !0 && t.has("EXT_clip_control"), g = n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS), y = n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS), x = n.getParameter(n.MAX_TEXTURE_SIZE), M = n.getParameter(n.MAX_CUBE_MAP_TEXTURE_SIZE), v = n.getParameter(n.MAX_VERTEX_ATTRIBS), S = n.getParameter(n.MAX_VERTEX_UNIFORM_VECTORS), E = n.getParameter(n.MAX_VARYING_VECTORS), T = n.getParameter(n.MAX_FRAGMENT_UNIFORM_VECTORS), w = y > 0, D = n.getParameter(n.MAX_SAMPLES);
  return {
    isWebGL2: !0,
    // keeping this for backwards compatibility
    getMaxAnisotropy: s,
    getMaxPrecision: c,
    textureFormatReadable: r,
    textureTypeReadable: l,
    precision: f,
    logarithmicDepthBuffer: p,
    reverseDepthBuffer: m,
    maxTextures: g,
    maxVertexTextures: y,
    maxTextureSize: x,
    maxCubemapSize: M,
    maxAttributes: v,
    maxVertexUniforms: S,
    maxVaryings: E,
    maxFragmentUniforms: T,
    vertexTextures: w,
    maxSamples: D
  };
}
function zX(n) {
  const t = this;
  let e = null, i = 0, a = !1, s = !1;
  const r = new Fo(), l = new ge(), c = { value: null, needsUpdate: !1 };
  this.uniform = c, this.numPlanes = 0, this.numIntersection = 0, this.init = function(p, m) {
    const g = p.length !== 0 || m || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    i !== 0 || a;
    return a = m, i = p.length, g;
  }, this.beginShadows = function() {
    s = !0, d(null);
  }, this.endShadows = function() {
    s = !1;
  }, this.setGlobalState = function(p, m) {
    e = d(p, m, 0);
  }, this.setState = function(p, m, g) {
    const y = p.clippingPlanes, x = p.clipIntersection, M = p.clipShadows, v = n.get(p);
    if (!a || y === null || y.length === 0 || s && !M)
      s ? d(null) : f();
    else {
      const S = s ? 0 : i, E = S * 4;
      let T = v.clippingState || null;
      c.value = T, T = d(y, m, E, g);
      for (let w = 0; w !== E; ++w)
        T[w] = e[w];
      v.clippingState = T, this.numIntersection = x ? this.numPlanes : 0, this.numPlanes += S;
    }
  };
  function f() {
    c.value !== e && (c.value = e, c.needsUpdate = i > 0), t.numPlanes = i, t.numIntersection = 0;
  }
  function d(p, m, g, y) {
    const x = p !== null ? p.length : 0;
    let M = null;
    if (x !== 0) {
      if (M = c.value, y !== !0 || M === null) {
        const v = g + x * 4, S = m.matrixWorldInverse;
        l.getNormalMatrix(S), (M === null || M.length < v) && (M = new Float32Array(v));
        for (let E = 0, T = g; E !== x; ++E, T += 4)
          r.copy(p[E]).applyMatrix4(S, l), r.normal.toArray(M, T), M[T + 3] = r.constant;
      }
      c.value = M, c.needsUpdate = !0;
    }
    return t.numPlanes = x, t.numIntersection = 0, M;
  }
}
function BX(n) {
  let t = /* @__PURE__ */ new WeakMap();
  function e(r, l) {
    return l === zp ? r.mapping = oo : l === Bp && (r.mapping = gl), r;
  }
  function i(r) {
    if (r && r.isTexture) {
      const l = r.mapping;
      if (l === zp || l === Bp)
        if (t.has(r)) {
          const c = t.get(r).texture;
          return e(c, r.mapping);
        } else {
          const c = r.image;
          if (c && c.height > 0) {
            const f = new nz(c.height);
            return f.fromEquirectangularTexture(n, r), t.set(r, f), r.addEventListener("dispose", a), e(f.texture, r.mapping);
          } else
            return null;
        }
    }
    return r;
  }
  function a(r) {
    const l = r.target;
    l.removeEventListener("dispose", a);
    const c = t.get(l);
    c !== void 0 && (t.delete(l), c.dispose());
  }
  function s() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: i,
    dispose: s
  };
}
const Tf = 4, Gw = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], gu = 20, x1 = /* @__PURE__ */ new Am(), Xw = /* @__PURE__ */ new Pt();
let S1 = null, M1 = 0, b1 = 0, E1 = !1;
const mu = (1 + Math.sqrt(5)) / 2, Qc = 1 / mu, qw = [
  /* @__PURE__ */ new H(-mu, Qc, 0),
  /* @__PURE__ */ new H(mu, Qc, 0),
  /* @__PURE__ */ new H(-Qc, 0, mu),
  /* @__PURE__ */ new H(Qc, 0, mu),
  /* @__PURE__ */ new H(0, mu, -Qc),
  /* @__PURE__ */ new H(0, mu, Qc),
  /* @__PURE__ */ new H(-1, 1, -1),
  /* @__PURE__ */ new H(1, 1, -1),
  /* @__PURE__ */ new H(-1, 1, 1),
  /* @__PURE__ */ new H(1, 1, 1)
], PX = /* @__PURE__ */ new H();
class rb {
  /**
   * Constructs a new PMREM generator.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   */
  constructor(t) {
    this._renderer = t, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety.
   *
   * @param {Scene} scene - The scene to be captured.
   * @param {number} [sigma=0] - The blur radius in radians.
   * @param {number} [near=0.1] - The near plane distance.
   * @param {number} [far=100] - The far plane distance.
   * @param {Object} [options={}] - The configuration options.
   * @param {number} [options.size=256] - The texture size of the PMREM.
   * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromScene(t, e = 0, i = 0.1, a = 100, s = {}) {
    const {
      size: r = 256,
      position: l = PX
    } = s;
    S1 = this._renderer.getRenderTarget(), M1 = this._renderer.getActiveCubeFace(), b1 = this._renderer.getActiveMipmapLevel(), E1 = this._renderer.xr.enabled, this._renderer.xr.enabled = !1, this._setSize(r);
    const c = this._allocateTargets();
    return c.depthBuffer = !0, this._sceneToCubeUV(t, i, a, c, l), e > 0 && this._blur(c, 0, 0, e), this._applyPMREM(c), this._cleanup(c), c;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} equirectangular - The equirectangular texture to be converted.
   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromEquirectangular(t, e = null) {
    return this._fromTexture(t, e);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} cubemap - The cubemap texture to be converted.
   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromCubemap(t, e = null) {
    return this._fromTexture(t, e);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = Ww(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = kw(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(t) {
    this._lodMax = Math.floor(Math.log2(t)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let t = 0; t < this._lodPlanes.length; t++)
      this._lodPlanes[t].dispose();
  }
  _cleanup(t) {
    this._renderer.setRenderTarget(S1, M1, b1), this._renderer.xr.enabled = E1, t.scissorTest = !1, _0(t, 0, 0, t.width, t.height);
  }
  _fromTexture(t, e) {
    t.mapping === oo || t.mapping === gl ? this._setSize(t.image.length === 0 ? 16 : t.image[0].width || t.image[0].image.width) : this._setSize(t.image.width / 4), S1 = this._renderer.getRenderTarget(), M1 = this._renderer.getActiveCubeFace(), b1 = this._renderer.getActiveMipmapLevel(), E1 = this._renderer.xr.enabled, this._renderer.xr.enabled = !1;
    const i = e || this._allocateTargets();
    return this._textureToCubeUV(t, i), this._applyPMREM(i), this._cleanup(i), i;
  }
  _allocateTargets() {
    const t = 3 * Math.max(this._cubeSize, 112), e = 4 * this._cubeSize, i = {
      magFilter: Qn,
      minFilter: Qn,
      generateMipmaps: !1,
      type: Mh,
      format: zi,
      colorSpace: vl,
      depthBuffer: !1
    }, a = Yw(t, e, i);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== t || this._pingPongRenderTarget.height !== e) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = Yw(t, e, i);
      const { _lodMax: s } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = IX(s)), this._blurMaterial = HX(s, t, e);
    }
    return a;
  }
  _compileMaterial(t) {
    const e = new Yn(this._lodPlanes[0], t);
    this._renderer.compile(e, x1);
  }
  _sceneToCubeUV(t, e, i, a, s) {
    const c = new li(90, 1, e, i), f = [1, -1, 1, 1, 1, 1], d = [1, 1, 1, -1, -1, -1], p = this._renderer, m = p.autoClear, g = p.toneMapping;
    p.getClearColor(Xw), p.toneMapping = cr, p.autoClear = !1;
    const y = new bl({
      name: "PMREM.Background",
      side: Ki,
      depthWrite: !1,
      depthTest: !1
    }), x = new Yn(new tc(), y);
    let M = !1;
    const v = t.background;
    v ? v.isColor && (y.color.copy(v), t.background = null, M = !0) : (y.color.copy(Xw), M = !0);
    for (let S = 0; S < 6; S++) {
      const E = S % 3;
      E === 0 ? (c.up.set(0, f[S], 0), c.position.set(s.x, s.y, s.z), c.lookAt(s.x + d[S], s.y, s.z)) : E === 1 ? (c.up.set(0, 0, f[S]), c.position.set(s.x, s.y, s.z), c.lookAt(s.x, s.y + d[S], s.z)) : (c.up.set(0, f[S], 0), c.position.set(s.x, s.y, s.z), c.lookAt(s.x, s.y, s.z + d[S]));
      const T = this._cubeSize;
      _0(a, E * T, S > 2 ? T : 0, T, T), p.setRenderTarget(a), M && p.render(x, c), p.render(t, c);
    }
    x.geometry.dispose(), x.material.dispose(), p.toneMapping = g, p.autoClear = m, t.background = v;
  }
  _textureToCubeUV(t, e) {
    const i = this._renderer, a = t.mapping === oo || t.mapping === gl;
    a ? (this._cubemapMaterial === null && (this._cubemapMaterial = Ww()), this._cubemapMaterial.uniforms.flipEnvMap.value = t.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = kw());
    const s = a ? this._cubemapMaterial : this._equirectMaterial, r = new Yn(this._lodPlanes[0], s), l = s.uniforms;
    l.envMap.value = t;
    const c = this._cubeSize;
    _0(e, 0, 0, 3 * c, 2 * c), i.setRenderTarget(e), i.render(r, x1);
  }
  _applyPMREM(t) {
    const e = this._renderer, i = e.autoClear;
    e.autoClear = !1;
    const a = this._lodPlanes.length;
    for (let s = 1; s < a; s++) {
      const r = Math.sqrt(this._sigmas[s] * this._sigmas[s] - this._sigmas[s - 1] * this._sigmas[s - 1]), l = qw[(a - s - 1) % qw.length];
      this._blur(t, s - 1, s, r, l);
    }
    e.autoClear = i;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   *
   * @private
   * @param {WebGLRenderTarget} cubeUVRenderTarget
   * @param {number} lodIn
   * @param {number} lodOut
   * @param {number} sigma
   * @param {Vector3} [poleAxis]
   */
  _blur(t, e, i, a, s) {
    const r = this._pingPongRenderTarget;
    this._halfBlur(
      t,
      r,
      e,
      i,
      a,
      "latitudinal",
      s
    ), this._halfBlur(
      r,
      t,
      i,
      i,
      a,
      "longitudinal",
      s
    );
  }
  _halfBlur(t, e, i, a, s, r, l) {
    const c = this._renderer, f = this._blurMaterial;
    r !== "latitudinal" && r !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const d = 3, p = new Yn(this._lodPlanes[a], f), m = f.uniforms, g = this._sizeLods[i] - 1, y = isFinite(s) ? Math.PI / (2 * g) : 2 * Math.PI / (2 * gu - 1), x = s / y, M = isFinite(s) ? 1 + Math.floor(d * x) : gu;
    M > gu && console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${M} samples when the maximum is set to ${gu}`);
    const v = [];
    let S = 0;
    for (let U = 0; U < gu; ++U) {
      const O = U / x, R = Math.exp(-O * O / 2);
      v.push(R), U === 0 ? S += R : U < M && (S += 2 * R);
    }
    for (let U = 0; U < v.length; U++)
      v[U] = v[U] / S;
    m.envMap.value = t.texture, m.samples.value = M, m.weights.value = v, m.latitudinal.value = r === "latitudinal", l && (m.poleAxis.value = l);
    const { _lodMax: E } = this;
    m.dTheta.value = y, m.mipInt.value = E - i;
    const T = this._sizeLods[a], w = 3 * T * (a > E - Tf ? a - E + Tf : 0), D = 4 * (this._cubeSize - T);
    _0(e, w, D, 3 * T, 2 * T), c.setRenderTarget(e), c.render(p, x1);
  }
}
function IX(n) {
  const t = [], e = [], i = [];
  let a = n;
  const s = n - Tf + 1 + Gw.length;
  for (let r = 0; r < s; r++) {
    const l = Math.pow(2, a);
    e.push(l);
    let c = 1 / l;
    r > n - Tf ? c = Gw[r - n + Tf - 1] : r === 0 && (c = 0), i.push(c);
    const f = 1 / (l - 2), d = -f, p = 1 + f, m = [d, d, p, d, p, p, d, d, p, p, d, p], g = 6, y = 6, x = 3, M = 2, v = 1, S = new Float32Array(x * y * g), E = new Float32Array(M * y * g), T = new Float32Array(v * y * g);
    for (let D = 0; D < g; D++) {
      const U = D % 3 * 2 / 3 - 1, O = D > 2 ? 0 : -1, R = [
        U,
        O,
        0,
        U + 2 / 3,
        O,
        0,
        U + 2 / 3,
        O + 1,
        0,
        U,
        O,
        0,
        U + 2 / 3,
        O + 1,
        0,
        U,
        O + 1,
        0
      ];
      S.set(R, x * y * D), E.set(m, M * y * D);
      const C = [D, D, D, D, D, D];
      T.set(C, v * y * D);
    }
    const w = new ye();
    w.setAttribute("position", new an(S, x)), w.setAttribute("uv", new an(E, M)), w.setAttribute("faceIndex", new an(T, v)), t.push(w), a > Tf && a--;
  }
  return { lodPlanes: t, sizeLods: e, sigmas: i };
}
function Yw(n, t, e) {
  const i = new dr(n, t, e);
  return i.texture.mapping = Sh, i.texture.name = "PMREM.cubeUv", i.scissorTest = !0, i;
}
function _0(n, t, e, i, a) {
  n.viewport.set(t, e, i, a), n.scissor.set(t, e, i, a);
}
function HX(n, t, e) {
  const i = new Float32Array(gu), a = new H(0, 1, 0);
  return new Ms({
    name: "SphericalGaussianBlur",
    defines: {
      n: gu,
      CUBEUV_TEXEL_WIDTH: 1 / t,
      CUBEUV_TEXEL_HEIGHT: 1 / e,
      CUBEUV_MAX_MIP: `${n}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: i },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: a }
    },
    vertexShader: CT(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: Jr,
    depthTest: !1,
    depthWrite: !1
  });
}
function kw() {
  return new Ms({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: CT(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: Jr,
    depthTest: !1,
    depthWrite: !1
  });
}
function Ww() {
  return new Ms({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: CT(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: Jr,
    depthTest: !1,
    depthWrite: !1
  });
}
function CT() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function FX(n) {
  let t = /* @__PURE__ */ new WeakMap(), e = null;
  function i(l) {
    if (l && l.isTexture) {
      const c = l.mapping, f = c === zp || c === Bp, d = c === oo || c === gl;
      if (f || d) {
        let p = t.get(l);
        const m = p !== void 0 ? p.texture.pmremVersion : 0;
        if (l.isRenderTargetTexture && l.pmremVersion !== m)
          return e === null && (e = new rb(n)), p = f ? e.fromEquirectangular(l, p) : e.fromCubemap(l, p), p.texture.pmremVersion = l.pmremVersion, t.set(l, p), p.texture;
        if (p !== void 0)
          return p.texture;
        {
          const g = l.image;
          return f && g && g.height > 0 || d && g && a(g) ? (e === null && (e = new rb(n)), p = f ? e.fromEquirectangular(l) : e.fromCubemap(l), p.texture.pmremVersion = l.pmremVersion, t.set(l, p), l.addEventListener("dispose", s), p.texture) : null;
        }
      }
    }
    return l;
  }
  function a(l) {
    let c = 0;
    const f = 6;
    for (let d = 0; d < f; d++)
      l[d] !== void 0 && c++;
    return c === f;
  }
  function s(l) {
    const c = l.target;
    c.removeEventListener("dispose", s);
    const f = t.get(c);
    f !== void 0 && (t.delete(c), f.dispose());
  }
  function r() {
    t = /* @__PURE__ */ new WeakMap(), e !== null && (e.dispose(), e = null);
  }
  return {
    get: i,
    dispose: r
  };
}
function VX(n) {
  const t = {};
  function e(i) {
    if (t[i] !== void 0)
      return t[i];
    let a;
    switch (i) {
      case "WEBGL_depth_texture":
        a = n.getExtension("WEBGL_depth_texture") || n.getExtension("MOZ_WEBGL_depth_texture") || n.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        a = n.getExtension("EXT_texture_filter_anisotropic") || n.getExtension("MOZ_EXT_texture_filter_anisotropic") || n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        a = n.getExtension("WEBGL_compressed_texture_s3tc") || n.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        a = n.getExtension("WEBGL_compressed_texture_pvrtc") || n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        a = n.getExtension(i);
    }
    return t[i] = a, a;
  }
  return {
    has: function(i) {
      return e(i) !== null;
    },
    init: function() {
      e("EXT_color_buffer_float"), e("WEBGL_clip_cull_distance"), e("OES_texture_float_linear"), e("EXT_color_buffer_half_float"), e("WEBGL_multisampled_render_to_texture"), e("WEBGL_render_shared_exponent");
    },
    get: function(i) {
      const a = e(i);
      return a === null && Pf("THREE.WebGLRenderer: " + i + " extension not supported."), a;
    }
  };
}
function GX(n, t, e, i) {
  const a = {}, s = /* @__PURE__ */ new WeakMap();
  function r(p) {
    const m = p.target;
    m.index !== null && t.remove(m.index);
    for (const y in m.attributes)
      t.remove(m.attributes[y]);
    m.removeEventListener("dispose", r), delete a[m.id];
    const g = s.get(m);
    g && (t.remove(g), s.delete(m)), i.releaseStatesOfGeometry(m), m.isInstancedBufferGeometry === !0 && delete m._maxInstanceCount, e.memory.geometries--;
  }
  function l(p, m) {
    return a[m.id] === !0 || (m.addEventListener("dispose", r), a[m.id] = !0, e.memory.geometries++), m;
  }
  function c(p) {
    const m = p.attributes;
    for (const g in m)
      t.update(m[g], n.ARRAY_BUFFER);
  }
  function f(p) {
    const m = [], g = p.index, y = p.attributes.position;
    let x = 0;
    if (g !== null) {
      const S = g.array;
      x = g.version;
      for (let E = 0, T = S.length; E < T; E += 3) {
        const w = S[E + 0], D = S[E + 1], U = S[E + 2];
        m.push(w, D, D, U, U, w);
      }
    } else if (y !== void 0) {
      const S = y.array;
      x = y.version;
      for (let E = 0, T = S.length / 3 - 1; E < T; E += 3) {
        const w = E + 0, D = E + 1, U = E + 2;
        m.push(w, D, D, U, U, w);
      }
    } else
      return;
    const M = new (QL(m) ? eT : tT)(m, 1);
    M.version = x;
    const v = s.get(p);
    v && t.remove(v), s.set(p, M);
  }
  function d(p) {
    const m = s.get(p);
    if (m) {
      const g = p.index;
      g !== null && m.version < g.version && f(p);
    } else
      f(p);
    return s.get(p);
  }
  return {
    get: l,
    update: c,
    getWireframeAttribute: d
  };
}
function XX(n, t, e) {
  let i;
  function a(m) {
    i = m;
  }
  let s, r;
  function l(m) {
    s = m.type, r = m.bytesPerElement;
  }
  function c(m, g) {
    n.drawElements(i, g, s, m * r), e.update(g, i, 1);
  }
  function f(m, g, y) {
    y !== 0 && (n.drawElementsInstanced(i, g, s, m * r, y), e.update(g, i, y));
  }
  function d(m, g, y) {
    if (y === 0) return;
    t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i, g, 0, s, m, 0, y);
    let M = 0;
    for (let v = 0; v < y; v++)
      M += g[v];
    e.update(M, i, 1);
  }
  function p(m, g, y, x) {
    if (y === 0) return;
    const M = t.get("WEBGL_multi_draw");
    if (M === null)
      for (let v = 0; v < m.length; v++)
        f(m[v] / r, g[v], x[v]);
    else {
      M.multiDrawElementsInstancedWEBGL(i, g, 0, s, m, 0, x, 0, y);
      let v = 0;
      for (let S = 0; S < y; S++)
        v += g[S] * x[S];
      e.update(v, i, 1);
    }
  }
  this.setMode = a, this.setIndex = l, this.render = c, this.renderInstances = f, this.renderMultiDraw = d, this.renderMultiDrawInstances = p;
}
function qX(n) {
  const t = {
    geometries: 0,
    textures: 0
  }, e = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function i(s, r, l) {
    switch (e.calls++, r) {
      case n.TRIANGLES:
        e.triangles += l * (s / 3);
        break;
      case n.LINES:
        e.lines += l * (s / 2);
        break;
      case n.LINE_STRIP:
        e.lines += l * (s - 1);
        break;
      case n.LINE_LOOP:
        e.lines += l * s;
        break;
      case n.POINTS:
        e.points += l * s;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", r);
        break;
    }
  }
  function a() {
    e.calls = 0, e.triangles = 0, e.points = 0, e.lines = 0;
  }
  return {
    memory: t,
    render: e,
    programs: null,
    autoReset: !0,
    reset: a,
    update: i
  };
}
function YX(n, t, e) {
  const i = /* @__PURE__ */ new WeakMap(), a = new De();
  function s(r, l, c) {
    const f = r.morphTargetInfluences, d = l.morphAttributes.position || l.morphAttributes.normal || l.morphAttributes.color, p = d !== void 0 ? d.length : 0;
    let m = i.get(l);
    if (m === void 0 || m.count !== p) {
      let C = function() {
        O.dispose(), i.delete(l), l.removeEventListener("dispose", C);
      };
      var g = C;
      m !== void 0 && m.texture.dispose();
      const y = l.morphAttributes.position !== void 0, x = l.morphAttributes.normal !== void 0, M = l.morphAttributes.color !== void 0, v = l.morphAttributes.position || [], S = l.morphAttributes.normal || [], E = l.morphAttributes.color || [];
      let T = 0;
      y === !0 && (T = 1), x === !0 && (T = 2), M === !0 && (T = 3);
      let w = l.attributes.position.count * T, D = 1;
      w > t.maxTextureSize && (D = Math.ceil(w / t.maxTextureSize), w = t.maxTextureSize);
      const U = new Float32Array(w * D * 4 * p), O = new K_(U, w, D, p);
      O.type = fa, O.needsUpdate = !0;
      const R = T * 4;
      for (let B = 0; B < p; B++) {
        const Y = v[B], V = S[B], Q = E[B], J = w * D * 4 * B;
        for (let P = 0; P < Y.count; P++) {
          const q = P * R;
          y === !0 && (a.fromBufferAttribute(Y, P), U[J + q + 0] = a.x, U[J + q + 1] = a.y, U[J + q + 2] = a.z, U[J + q + 3] = 0), x === !0 && (a.fromBufferAttribute(V, P), U[J + q + 4] = a.x, U[J + q + 5] = a.y, U[J + q + 6] = a.z, U[J + q + 7] = 0), M === !0 && (a.fromBufferAttribute(Q, P), U[J + q + 8] = a.x, U[J + q + 9] = a.y, U[J + q + 10] = a.z, U[J + q + 11] = Q.itemSize === 4 ? a.w : 1);
        }
      }
      m = {
        count: p,
        texture: O,
        size: new ft(w, D)
      }, i.set(l, m), l.addEventListener("dispose", C);
    }
    if (r.isInstancedMesh === !0 && r.morphTexture !== null)
      c.getUniforms().setValue(n, "morphTexture", r.morphTexture, e);
    else {
      let y = 0;
      for (let M = 0; M < f.length; M++)
        y += f[M];
      const x = l.morphTargetsRelative ? 1 : 1 - y;
      c.getUniforms().setValue(n, "morphTargetBaseInfluence", x), c.getUniforms().setValue(n, "morphTargetInfluences", f);
    }
    c.getUniforms().setValue(n, "morphTargetsTexture", m.texture, e), c.getUniforms().setValue(n, "morphTargetsTextureSize", m.size);
  }
  return {
    update: s
  };
}
function kX(n, t, e, i) {
  let a = /* @__PURE__ */ new WeakMap();
  function s(c) {
    const f = i.render.frame, d = c.geometry, p = t.get(c, d);
    if (a.get(p) !== f && (t.update(p), a.set(p, f)), c.isInstancedMesh && (c.hasEventListener("dispose", l) === !1 && c.addEventListener("dispose", l), a.get(c) !== f && (e.update(c.instanceMatrix, n.ARRAY_BUFFER), c.instanceColor !== null && e.update(c.instanceColor, n.ARRAY_BUFFER), a.set(c, f))), c.isSkinnedMesh) {
      const m = c.skeleton;
      a.get(m) !== f && (m.update(), a.set(m, f));
    }
    return p;
  }
  function r() {
    a = /* @__PURE__ */ new WeakMap();
  }
  function l(c) {
    const f = c.target;
    f.removeEventListener("dispose", l), e.remove(f.instanceMatrix), f.instanceColor !== null && e.remove(f.instanceColor);
  }
  return {
    update: s,
    dispose: r
  };
}
const n4 = /* @__PURE__ */ new Sn(), Zw = /* @__PURE__ */ new oT(1, 1), i4 = /* @__PURE__ */ new K_(), a4 = /* @__PURE__ */ new J_(), s4 = /* @__PURE__ */ new ym(), jw = [], Qw = [], Kw = new Float32Array(16), Jw = new Float32Array(9), $w = new Float32Array(4);
function Ah(n, t, e) {
  const i = n[0];
  if (i <= 0 || i > 0) return n;
  const a = t * e;
  let s = jw[a];
  if (s === void 0 && (s = new Float32Array(a), jw[a] = s), t !== 0) {
    i.toArray(s, 0);
    for (let r = 1, l = 0; r !== t; ++r)
      l += e, n[r].toArray(s, l);
  }
  return s;
}
function ti(n, t) {
  if (n.length !== t.length) return !1;
  for (let e = 0, i = n.length; e < i; e++)
    if (n[e] !== t[e]) return !1;
  return !0;
}
function ei(n, t) {
  for (let e = 0, i = t.length; e < i; e++)
    n[e] = t[e];
}
function Sy(n, t) {
  let e = Qw[t];
  e === void 0 && (e = new Int32Array(t), Qw[t] = e);
  for (let i = 0; i !== t; ++i)
    e[i] = n.allocateTextureUnit();
  return e;
}
function WX(n, t) {
  const e = this.cache;
  e[0] !== t && (n.uniform1f(this.addr, t), e[0] = t);
}
function ZX(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y) && (n.uniform2f(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y);
  else {
    if (ti(e, t)) return;
    n.uniform2fv(this.addr, t), ei(e, t);
  }
}
function jX(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (n.uniform3f(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z);
  else if (t.r !== void 0)
    (e[0] !== t.r || e[1] !== t.g || e[2] !== t.b) && (n.uniform3f(this.addr, t.r, t.g, t.b), e[0] = t.r, e[1] = t.g, e[2] = t.b);
  else {
    if (ti(e, t)) return;
    n.uniform3fv(this.addr, t), ei(e, t);
  }
}
function QX(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (n.uniform4f(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w);
  else {
    if (ti(e, t)) return;
    n.uniform4fv(this.addr, t), ei(e, t);
  }
}
function KX(n, t) {
  const e = this.cache, i = t.elements;
  if (i === void 0) {
    if (ti(e, t)) return;
    n.uniformMatrix2fv(this.addr, !1, t), ei(e, t);
  } else {
    if (ti(e, i)) return;
    $w.set(i), n.uniformMatrix2fv(this.addr, !1, $w), ei(e, i);
  }
}
function JX(n, t) {
  const e = this.cache, i = t.elements;
  if (i === void 0) {
    if (ti(e, t)) return;
    n.uniformMatrix3fv(this.addr, !1, t), ei(e, t);
  } else {
    if (ti(e, i)) return;
    Jw.set(i), n.uniformMatrix3fv(this.addr, !1, Jw), ei(e, i);
  }
}
function $X(n, t) {
  const e = this.cache, i = t.elements;
  if (i === void 0) {
    if (ti(e, t)) return;
    n.uniformMatrix4fv(this.addr, !1, t), ei(e, t);
  } else {
    if (ti(e, i)) return;
    Kw.set(i), n.uniformMatrix4fv(this.addr, !1, Kw), ei(e, i);
  }
}
function tq(n, t) {
  const e = this.cache;
  e[0] !== t && (n.uniform1i(this.addr, t), e[0] = t);
}
function eq(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y) && (n.uniform2i(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y);
  else {
    if (ti(e, t)) return;
    n.uniform2iv(this.addr, t), ei(e, t);
  }
}
function nq(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (n.uniform3i(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z);
  else {
    if (ti(e, t)) return;
    n.uniform3iv(this.addr, t), ei(e, t);
  }
}
function iq(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (n.uniform4i(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w);
  else {
    if (ti(e, t)) return;
    n.uniform4iv(this.addr, t), ei(e, t);
  }
}
function aq(n, t) {
  const e = this.cache;
  e[0] !== t && (n.uniform1ui(this.addr, t), e[0] = t);
}
function sq(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y) && (n.uniform2ui(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y);
  else {
    if (ti(e, t)) return;
    n.uniform2uiv(this.addr, t), ei(e, t);
  }
}
function rq(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (n.uniform3ui(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z);
  else {
    if (ti(e, t)) return;
    n.uniform3uiv(this.addr, t), ei(e, t);
  }
}
function oq(n, t) {
  const e = this.cache;
  if (t.x !== void 0)
    (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (n.uniform4ui(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w);
  else {
    if (ti(e, t)) return;
    n.uniform4uiv(this.addr, t), ei(e, t);
  }
}
function lq(n, t, e) {
  const i = this.cache, a = e.allocateTextureUnit();
  i[0] !== a && (n.uniform1i(this.addr, a), i[0] = a);
  let s;
  this.type === n.SAMPLER_2D_SHADOW ? (Zw.compareFunction = KE, s = Zw) : s = n4, e.setTexture2D(t || s, a);
}
function uq(n, t, e) {
  const i = this.cache, a = e.allocateTextureUnit();
  i[0] !== a && (n.uniform1i(this.addr, a), i[0] = a), e.setTexture3D(t || a4, a);
}
function cq(n, t, e) {
  const i = this.cache, a = e.allocateTextureUnit();
  i[0] !== a && (n.uniform1i(this.addr, a), i[0] = a), e.setTextureCube(t || s4, a);
}
function fq(n, t, e) {
  const i = this.cache, a = e.allocateTextureUnit();
  i[0] !== a && (n.uniform1i(this.addr, a), i[0] = a), e.setTexture2DArray(t || i4, a);
}
function hq(n) {
  switch (n) {
    case 5126:
      return WX;
    case 35664:
      return ZX;
    case 35665:
      return jX;
    case 35666:
      return QX;
    case 35674:
      return KX;
    case 35675:
      return JX;
    case 35676:
      return $X;
    case 5124:
    case 35670:
      return tq;
    case 35667:
    case 35671:
      return eq;
    case 35668:
    case 35672:
      return nq;
    case 35669:
    case 35673:
      return iq;
    case 5125:
      return aq;
    case 36294:
      return sq;
    case 36295:
      return rq;
    case 36296:
      return oq;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return lq;
    case 35679:
    case 36299:
    case 36307:
      return uq;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return cq;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return fq;
  }
}
function dq(n, t) {
  n.uniform1fv(this.addr, t);
}
function pq(n, t) {
  const e = Ah(t, this.size, 2);
  n.uniform2fv(this.addr, e);
}
function mq(n, t) {
  const e = Ah(t, this.size, 3);
  n.uniform3fv(this.addr, e);
}
function gq(n, t) {
  const e = Ah(t, this.size, 4);
  n.uniform4fv(this.addr, e);
}
function vq(n, t) {
  const e = Ah(t, this.size, 4);
  n.uniformMatrix2fv(this.addr, !1, e);
}
function _q(n, t) {
  const e = Ah(t, this.size, 9);
  n.uniformMatrix3fv(this.addr, !1, e);
}
function yq(n, t) {
  const e = Ah(t, this.size, 16);
  n.uniformMatrix4fv(this.addr, !1, e);
}
function xq(n, t) {
  n.uniform1iv(this.addr, t);
}
function Sq(n, t) {
  n.uniform2iv(this.addr, t);
}
function Mq(n, t) {
  n.uniform3iv(this.addr, t);
}
function bq(n, t) {
  n.uniform4iv(this.addr, t);
}
function Eq(n, t) {
  n.uniform1uiv(this.addr, t);
}
function Tq(n, t) {
  n.uniform2uiv(this.addr, t);
}
function Aq(n, t) {
  n.uniform3uiv(this.addr, t);
}
function Rq(n, t) {
  n.uniform4uiv(this.addr, t);
}
function Cq(n, t, e) {
  const i = this.cache, a = t.length, s = Sy(e, a);
  ti(i, s) || (n.uniform1iv(this.addr, s), ei(i, s));
  for (let r = 0; r !== a; ++r)
    e.setTexture2D(t[r] || n4, s[r]);
}
function wq(n, t, e) {
  const i = this.cache, a = t.length, s = Sy(e, a);
  ti(i, s) || (n.uniform1iv(this.addr, s), ei(i, s));
  for (let r = 0; r !== a; ++r)
    e.setTexture3D(t[r] || a4, s[r]);
}
function Dq(n, t, e) {
  const i = this.cache, a = t.length, s = Sy(e, a);
  ti(i, s) || (n.uniform1iv(this.addr, s), ei(i, s));
  for (let r = 0; r !== a; ++r)
    e.setTextureCube(t[r] || s4, s[r]);
}
function Uq(n, t, e) {
  const i = this.cache, a = t.length, s = Sy(e, a);
  ti(i, s) || (n.uniform1iv(this.addr, s), ei(i, s));
  for (let r = 0; r !== a; ++r)
    e.setTexture2DArray(t[r] || i4, s[r]);
}
function Oq(n) {
  switch (n) {
    case 5126:
      return dq;
    case 35664:
      return pq;
    case 35665:
      return mq;
    case 35666:
      return gq;
    case 35674:
      return vq;
    case 35675:
      return _q;
    case 35676:
      return yq;
    case 5124:
    case 35670:
      return xq;
    case 35667:
    case 35671:
      return Sq;
    case 35668:
    case 35672:
      return Mq;
    case 35669:
    case 35673:
      return bq;
    case 5125:
      return Eq;
    case 36294:
      return Tq;
    case 36295:
      return Aq;
    case 36296:
      return Rq;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return Cq;
    case 35679:
    case 36299:
    case 36307:
      return wq;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return Dq;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return Uq;
  }
}
class Nq {
  constructor(t, e, i) {
    this.id = t, this.addr = i, this.cache = [], this.type = e.type, this.setValue = hq(e.type);
  }
}
class Lq {
  constructor(t, e, i) {
    this.id = t, this.addr = i, this.cache = [], this.type = e.type, this.size = e.size, this.setValue = Oq(e.type);
  }
}
class zq {
  constructor(t) {
    this.id = t, this.seq = [], this.map = {};
  }
  setValue(t, e, i) {
    const a = this.seq;
    for (let s = 0, r = a.length; s !== r; ++s) {
      const l = a[s];
      l.setValue(t, e[l.id], i);
    }
  }
}
const T1 = /(\w+)(\])?(\[|\.)?/g;
function t3(n, t) {
  n.seq.push(t), n.map[t.id] = t;
}
function Bq(n, t, e) {
  const i = n.name, a = i.length;
  for (T1.lastIndex = 0; ; ) {
    const s = T1.exec(i), r = T1.lastIndex;
    let l = s[1];
    const c = s[2] === "]", f = s[3];
    if (c && (l = l | 0), f === void 0 || f === "[" && r + 2 === a) {
      t3(e, f === void 0 ? new Nq(l, n, t) : new Lq(l, n, t));
      break;
    } else {
      let p = e.map[l];
      p === void 0 && (p = new zq(l), t3(e, p)), e = p;
    }
  }
}
class X0 {
  constructor(t, e) {
    this.seq = [], this.map = {};
    const i = t.getProgramParameter(e, t.ACTIVE_UNIFORMS);
    for (let a = 0; a < i; ++a) {
      const s = t.getActiveUniform(e, a), r = t.getUniformLocation(e, s.name);
      Bq(s, r, this);
    }
  }
  setValue(t, e, i, a) {
    const s = this.map[e];
    s !== void 0 && s.setValue(t, i, a);
  }
  setOptional(t, e, i) {
    const a = e[i];
    a !== void 0 && this.setValue(t, i, a);
  }
  static upload(t, e, i, a) {
    for (let s = 0, r = e.length; s !== r; ++s) {
      const l = e[s], c = i[l.id];
      c.needsUpdate !== !1 && l.setValue(t, c.value, a);
    }
  }
  static seqWithValue(t, e) {
    const i = [];
    for (let a = 0, s = t.length; a !== s; ++a) {
      const r = t[a];
      r.id in e && i.push(r);
    }
    return i;
  }
}
function e3(n, t, e) {
  const i = n.createShader(t);
  return n.shaderSource(i, e), n.compileShader(i), i;
}
const Pq = 37297;
let Iq = 0;
function Hq(n, t) {
  const e = n.split(`
`), i = [], a = Math.max(t - 6, 0), s = Math.min(t + 6, e.length);
  for (let r = a; r < s; r++) {
    const l = r + 1;
    i.push(`${l === t ? ">" : " "} ${l}: ${e[r]}`);
  }
  return i.join(`
`);
}
const n3 = /* @__PURE__ */ new ge();
function Fq(n) {
  Oe._getMatrix(n3, Oe.workingColorSpace, n);
  const t = `mat3( ${n3.elements.map((e) => e.toFixed(4))} )`;
  switch (Oe.getTransfer(n)) {
    case Vp:
      return [t, "LinearTransferOETF"];
    case je:
      return [t, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space: ", n), [t, "LinearTransferOETF"];
  }
}
function i3(n, t, e) {
  const i = n.getShaderParameter(t, n.COMPILE_STATUS), a = n.getShaderInfoLog(t).trim();
  if (i && a === "") return "";
  const s = /ERROR: 0:(\d+)/.exec(a);
  if (s) {
    const r = parseInt(s[1]);
    return e.toUpperCase() + `

` + a + `

` + Hq(n.getShaderSource(t), r);
  } else
    return a;
}
function Vq(n, t) {
  const e = Fq(t);
  return [
    `vec4 ${n}( vec4 value ) {`,
    `	return ${e[1]}( vec4( value.rgb * ${e[0]}, value.a ) );`,
    "}"
  ].join(`
`);
}
function Gq(n, t) {
  let e;
  switch (t) {
    case wL:
      e = "Linear";
      break;
    case DL:
      e = "Reinhard";
      break;
    case UL:
      e = "Cineon";
      break;
    case VE:
      e = "ACESFilmic";
      break;
    case NL:
      e = "AgX";
      break;
    case LL:
      e = "Neutral";
      break;
    case OL:
      e = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", t), e = "Linear";
  }
  return "vec3 " + n + "( vec3 color ) { return " + e + "ToneMapping( color ); }";
}
const y0 = /* @__PURE__ */ new H();
function Xq() {
  Oe.getLuminanceCoefficients(y0);
  const n = y0.x.toFixed(4), t = y0.y.toFixed(4), e = y0.z.toFixed(4);
  return [
    "float luminance( const in vec3 rgb ) {",
    `	const vec3 weights = vec3( ${n}, ${t}, ${e} );`,
    "	return dot( weights, rgb );",
    "}"
  ].join(`
`);
}
function qq(n) {
  return [
    n.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    n.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ].filter(Pd).join(`
`);
}
function Yq(n) {
  const t = [];
  for (const e in n) {
    const i = n[e];
    i !== !1 && t.push("#define " + e + " " + i);
  }
  return t.join(`
`);
}
function kq(n, t) {
  const e = {}, i = n.getProgramParameter(t, n.ACTIVE_ATTRIBUTES);
  for (let a = 0; a < i; a++) {
    const s = n.getActiveAttrib(t, a), r = s.name;
    let l = 1;
    s.type === n.FLOAT_MAT2 && (l = 2), s.type === n.FLOAT_MAT3 && (l = 3), s.type === n.FLOAT_MAT4 && (l = 4), e[r] = {
      type: s.type,
      location: n.getAttribLocation(t, r),
      locationSize: l
    };
  }
  return e;
}
function Pd(n) {
  return n !== "";
}
function a3(n, t) {
  const e = t.numSpotLightShadows + t.numSpotLightMaps - t.numSpotLightShadowsWithMaps;
  return n.replace(/NUM_DIR_LIGHTS/g, t.numDirLights).replace(/NUM_SPOT_LIGHTS/g, t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, e).replace(/NUM_RECT_AREA_LIGHTS/g, t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, t.numPointLights).replace(/NUM_HEMI_LIGHTS/g, t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, t.numPointLightShadows);
}
function s3(n, t) {
  return n.replace(/NUM_CLIPPING_PLANES/g, t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, t.numClippingPlanes - t.numClipIntersection);
}
const Wq = /^[ \t]*#include +<([\w\d./]+)>/gm;
function ob(n) {
  return n.replace(Wq, jq);
}
const Zq = /* @__PURE__ */ new Map();
function jq(n, t) {
  let e = xe[t];
  if (e === void 0) {
    const i = Zq.get(t);
    if (i !== void 0)
      e = xe[i], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', t, i);
    else
      throw new Error("Can not resolve #include <" + t + ">");
  }
  return ob(e);
}
const Qq = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function r3(n) {
  return n.replace(Qq, Kq);
}
function Kq(n, t, e, i) {
  let a = "";
  for (let s = parseInt(t); s < parseInt(e); s++)
    a += i.replace(/\[\s*i\s*\]/g, "[ " + s + " ]").replace(/UNROLLED_LOOP_INDEX/g, s);
  return a;
}
function o3(n) {
  let t = `precision ${n.precision} float;
	precision ${n.precision} int;
	precision ${n.precision} sampler2D;
	precision ${n.precision} samplerCube;
	precision ${n.precision} sampler3D;
	precision ${n.precision} sampler2DArray;
	precision ${n.precision} sampler2DShadow;
	precision ${n.precision} samplerCubeShadow;
	precision ${n.precision} sampler2DArrayShadow;
	precision ${n.precision} isampler2D;
	precision ${n.precision} isampler3D;
	precision ${n.precision} isamplerCube;
	precision ${n.precision} isampler2DArray;
	precision ${n.precision} usampler2D;
	precision ${n.precision} usampler3D;
	precision ${n.precision} usamplerCube;
	precision ${n.precision} usampler2DArray;
	`;
  return n.precision === "highp" ? t += `
#define HIGH_PRECISION` : n.precision === "mediump" ? t += `
#define MEDIUM_PRECISION` : n.precision === "lowp" && (t += `
#define LOW_PRECISION`), t;
}
function Jq(n) {
  let t = "SHADOWMAP_TYPE_BASIC";
  return n.shadowMapType === G_ ? t = "SHADOWMAP_TYPE_PCF" : n.shadowMapType === np ? t = "SHADOWMAP_TYPE_PCF_SOFT" : n.shadowMapType === Ls && (t = "SHADOWMAP_TYPE_VSM"), t;
}
function $q(n) {
  let t = "ENVMAP_TYPE_CUBE";
  if (n.envMap)
    switch (n.envMapMode) {
      case oo:
      case gl:
        t = "ENVMAP_TYPE_CUBE";
        break;
      case Sh:
        t = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return t;
}
function tY(n) {
  let t = "ENVMAP_MODE_REFLECTION";
  if (n.envMap)
    switch (n.envMapMode) {
      case gl:
        t = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return t;
}
function eY(n) {
  let t = "ENVMAP_BLENDING_NONE";
  if (n.envMap)
    switch (n.combine) {
      case vm:
        t = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case RL:
        t = "ENVMAP_BLENDING_MIX";
        break;
      case CL:
        t = "ENVMAP_BLENDING_ADD";
        break;
    }
  return t;
}
function nY(n) {
  const t = n.envMapCubeUVHeight;
  if (t === null) return null;
  const e = Math.log2(t) - 2, i = 1 / t;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, e), 7 * 16)), texelHeight: i, maxMip: e };
}
function iY(n, t, e, i) {
  const a = n.getContext(), s = e.defines;
  let r = e.vertexShader, l = e.fragmentShader;
  const c = Jq(e), f = $q(e), d = tY(e), p = eY(e), m = nY(e), g = qq(e), y = Yq(s), x = a.createProgram();
  let M, v, S = e.glslVersion ? "#version " + e.glslVersion + `
` : "";
  e.isRawShaderMaterial ? (M = [
    "#define SHADER_TYPE " + e.shaderType,
    "#define SHADER_NAME " + e.shaderName,
    y
  ].filter(Pd).join(`
`), M.length > 0 && (M += `
`), v = [
    "#define SHADER_TYPE " + e.shaderType,
    "#define SHADER_NAME " + e.shaderName,
    y
  ].filter(Pd).join(`
`), v.length > 0 && (v += `
`)) : (M = [
    o3(e),
    "#define SHADER_TYPE " + e.shaderType,
    "#define SHADER_NAME " + e.shaderName,
    y,
    e.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
    e.batching ? "#define USE_BATCHING" : "",
    e.batchingColor ? "#define USE_BATCHING_COLOR" : "",
    e.instancing ? "#define USE_INSTANCING" : "",
    e.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    e.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
    e.useFog && e.fog ? "#define USE_FOG" : "",
    e.useFog && e.fogExp2 ? "#define FOG_EXP2" : "",
    e.map ? "#define USE_MAP" : "",
    e.envMap ? "#define USE_ENVMAP" : "",
    e.envMap ? "#define " + d : "",
    e.lightMap ? "#define USE_LIGHTMAP" : "",
    e.aoMap ? "#define USE_AOMAP" : "",
    e.bumpMap ? "#define USE_BUMPMAP" : "",
    e.normalMap ? "#define USE_NORMALMAP" : "",
    e.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    e.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    e.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    e.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    e.anisotropy ? "#define USE_ANISOTROPY" : "",
    e.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    e.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    e.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    e.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    e.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    e.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    e.specularMap ? "#define USE_SPECULARMAP" : "",
    e.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    e.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    e.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    e.metalnessMap ? "#define USE_METALNESSMAP" : "",
    e.alphaMap ? "#define USE_ALPHAMAP" : "",
    e.alphaHash ? "#define USE_ALPHAHASH" : "",
    e.transmission ? "#define USE_TRANSMISSION" : "",
    e.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    e.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    e.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    e.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    e.mapUv ? "#define MAP_UV " + e.mapUv : "",
    e.alphaMapUv ? "#define ALPHAMAP_UV " + e.alphaMapUv : "",
    e.lightMapUv ? "#define LIGHTMAP_UV " + e.lightMapUv : "",
    e.aoMapUv ? "#define AOMAP_UV " + e.aoMapUv : "",
    e.emissiveMapUv ? "#define EMISSIVEMAP_UV " + e.emissiveMapUv : "",
    e.bumpMapUv ? "#define BUMPMAP_UV " + e.bumpMapUv : "",
    e.normalMapUv ? "#define NORMALMAP_UV " + e.normalMapUv : "",
    e.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + e.displacementMapUv : "",
    e.metalnessMapUv ? "#define METALNESSMAP_UV " + e.metalnessMapUv : "",
    e.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + e.roughnessMapUv : "",
    e.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + e.anisotropyMapUv : "",
    e.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + e.clearcoatMapUv : "",
    e.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + e.clearcoatNormalMapUv : "",
    e.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + e.clearcoatRoughnessMapUv : "",
    e.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + e.iridescenceMapUv : "",
    e.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + e.iridescenceThicknessMapUv : "",
    e.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + e.sheenColorMapUv : "",
    e.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + e.sheenRoughnessMapUv : "",
    e.specularMapUv ? "#define SPECULARMAP_UV " + e.specularMapUv : "",
    e.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + e.specularColorMapUv : "",
    e.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + e.specularIntensityMapUv : "",
    e.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + e.transmissionMapUv : "",
    e.thicknessMapUv ? "#define THICKNESSMAP_UV " + e.thicknessMapUv : "",
    //
    e.vertexTangents && e.flatShading === !1 ? "#define USE_TANGENT" : "",
    e.vertexColors ? "#define USE_COLOR" : "",
    e.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    e.vertexUv1s ? "#define USE_UV1" : "",
    e.vertexUv2s ? "#define USE_UV2" : "",
    e.vertexUv3s ? "#define USE_UV3" : "",
    e.pointsUvs ? "#define USE_POINTS_UV" : "",
    e.flatShading ? "#define FLAT_SHADED" : "",
    e.skinning ? "#define USE_SKINNING" : "",
    e.morphTargets ? "#define USE_MORPHTARGETS" : "",
    e.morphNormals && e.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    e.morphColors ? "#define USE_MORPHCOLORS" : "",
    e.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + e.morphTextureStride : "",
    e.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + e.morphTargetsCount : "",
    e.doubleSided ? "#define DOUBLE_SIDED" : "",
    e.flipSided ? "#define FLIP_SIDED" : "",
    e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    e.shadowMapEnabled ? "#define " + c : "",
    e.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    e.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    e.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "#ifdef USE_INSTANCING_MORPH",
    "	uniform sampler2D morphTexture;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(Pd).join(`
`), v = [
    o3(e),
    "#define SHADER_TYPE " + e.shaderType,
    "#define SHADER_NAME " + e.shaderName,
    y,
    e.useFog && e.fog ? "#define USE_FOG" : "",
    e.useFog && e.fogExp2 ? "#define FOG_EXP2" : "",
    e.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
    e.map ? "#define USE_MAP" : "",
    e.matcap ? "#define USE_MATCAP" : "",
    e.envMap ? "#define USE_ENVMAP" : "",
    e.envMap ? "#define " + f : "",
    e.envMap ? "#define " + d : "",
    e.envMap ? "#define " + p : "",
    m ? "#define CUBEUV_TEXEL_WIDTH " + m.texelWidth : "",
    m ? "#define CUBEUV_TEXEL_HEIGHT " + m.texelHeight : "",
    m ? "#define CUBEUV_MAX_MIP " + m.maxMip + ".0" : "",
    e.lightMap ? "#define USE_LIGHTMAP" : "",
    e.aoMap ? "#define USE_AOMAP" : "",
    e.bumpMap ? "#define USE_BUMPMAP" : "",
    e.normalMap ? "#define USE_NORMALMAP" : "",
    e.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    e.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    e.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    e.anisotropy ? "#define USE_ANISOTROPY" : "",
    e.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    e.clearcoat ? "#define USE_CLEARCOAT" : "",
    e.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    e.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    e.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    e.dispersion ? "#define USE_DISPERSION" : "",
    e.iridescence ? "#define USE_IRIDESCENCE" : "",
    e.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    e.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    e.specularMap ? "#define USE_SPECULARMAP" : "",
    e.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    e.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    e.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    e.metalnessMap ? "#define USE_METALNESSMAP" : "",
    e.alphaMap ? "#define USE_ALPHAMAP" : "",
    e.alphaTest ? "#define USE_ALPHATEST" : "",
    e.alphaHash ? "#define USE_ALPHAHASH" : "",
    e.sheen ? "#define USE_SHEEN" : "",
    e.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    e.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    e.transmission ? "#define USE_TRANSMISSION" : "",
    e.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    e.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    e.vertexTangents && e.flatShading === !1 ? "#define USE_TANGENT" : "",
    e.vertexColors || e.instancingColor || e.batchingColor ? "#define USE_COLOR" : "",
    e.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    e.vertexUv1s ? "#define USE_UV1" : "",
    e.vertexUv2s ? "#define USE_UV2" : "",
    e.vertexUv3s ? "#define USE_UV3" : "",
    e.pointsUvs ? "#define USE_POINTS_UV" : "",
    e.gradientMap ? "#define USE_GRADIENTMAP" : "",
    e.flatShading ? "#define FLAT_SHADED" : "",
    e.doubleSided ? "#define DOUBLE_SIDED" : "",
    e.flipSided ? "#define FLIP_SIDED" : "",
    e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    e.shadowMapEnabled ? "#define " + c : "",
    e.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    e.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    e.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    e.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
    e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    e.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    e.toneMapping !== cr ? "#define TONE_MAPPING" : "",
    e.toneMapping !== cr ? xe.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    e.toneMapping !== cr ? Gq("toneMapping", e.toneMapping) : "",
    e.dithering ? "#define DITHERING" : "",
    e.opaque ? "#define OPAQUE" : "",
    xe.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    Vq("linearToOutputTexel", e.outputColorSpace),
    Xq(),
    e.useDepthPacking ? "#define DEPTH_PACKING " + e.depthPacking : "",
    `
`
  ].filter(Pd).join(`
`)), r = ob(r), r = a3(r, e), r = s3(r, e), l = ob(l), l = a3(l, e), l = s3(l, e), r = r3(r), l = r3(l), e.isRawShaderMaterial !== !0 && (S = `#version 300 es
`, M = [
    g,
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + M, v = [
    "#define varying in",
    e.glslVersion === JM ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    e.glslVersion === JM ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + v);
  const E = S + M + r, T = S + v + l, w = e3(a, a.VERTEX_SHADER, E), D = e3(a, a.FRAGMENT_SHADER, T);
  a.attachShader(x, w), a.attachShader(x, D), e.index0AttributeName !== void 0 ? a.bindAttribLocation(x, 0, e.index0AttributeName) : e.morphTargets === !0 && a.bindAttribLocation(x, 0, "position"), a.linkProgram(x);
  function U(B) {
    if (n.debug.checkShaderErrors) {
      const Y = a.getProgramInfoLog(x).trim(), V = a.getShaderInfoLog(w).trim(), Q = a.getShaderInfoLog(D).trim();
      let J = !0, P = !0;
      if (a.getProgramParameter(x, a.LINK_STATUS) === !1)
        if (J = !1, typeof n.debug.onShaderError == "function")
          n.debug.onShaderError(a, x, w, D);
        else {
          const q = i3(a, w, "vertex"), G = i3(a, D, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + a.getError() + " - VALIDATE_STATUS " + a.getProgramParameter(x, a.VALIDATE_STATUS) + `

Material Name: ` + B.name + `
Material Type: ` + B.type + `

Program Info Log: ` + Y + `
` + q + `
` + G
          );
        }
      else Y !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", Y) : (V === "" || Q === "") && (P = !1);
      P && (B.diagnostics = {
        runnable: J,
        programLog: Y,
        vertexShader: {
          log: V,
          prefix: M
        },
        fragmentShader: {
          log: Q,
          prefix: v
        }
      });
    }
    a.deleteShader(w), a.deleteShader(D), O = new X0(a, x), R = kq(a, x);
  }
  let O;
  this.getUniforms = function() {
    return O === void 0 && U(this), O;
  };
  let R;
  this.getAttributes = function() {
    return R === void 0 && U(this), R;
  };
  let C = e.rendererExtensionParallelShaderCompile === !1;
  return this.isReady = function() {
    return C === !1 && (C = a.getProgramParameter(x, Pq)), C;
  }, this.destroy = function() {
    i.releaseStatesOfProgram(this), a.deleteProgram(x), this.program = void 0;
  }, this.type = e.shaderType, this.name = e.shaderName, this.id = Iq++, this.cacheKey = t, this.usedTimes = 1, this.program = x, this.vertexShader = w, this.fragmentShader = D, this;
}
let aY = 0;
class sY {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(t) {
    const e = t.vertexShader, i = t.fragmentShader, a = this._getShaderStage(e), s = this._getShaderStage(i), r = this._getShaderCacheForMaterial(t);
    return r.has(a) === !1 && (r.add(a), a.usedTimes++), r.has(s) === !1 && (r.add(s), s.usedTimes++), this;
  }
  remove(t) {
    const e = this.materialCache.get(t);
    for (const i of e)
      i.usedTimes--, i.usedTimes === 0 && this.shaderCache.delete(i.code);
    return this.materialCache.delete(t), this;
  }
  getVertexShaderID(t) {
    return this._getShaderStage(t.vertexShader).id;
  }
  getFragmentShaderID(t) {
    return this._getShaderStage(t.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(t) {
    const e = this.materialCache;
    let i = e.get(t);
    return i === void 0 && (i = /* @__PURE__ */ new Set(), e.set(t, i)), i;
  }
  _getShaderStage(t) {
    const e = this.shaderCache;
    let i = e.get(t);
    return i === void 0 && (i = new rY(t), e.set(t, i)), i;
  }
}
class rY {
  constructor(t) {
    this.id = aY++, this.code = t, this.usedTimes = 0;
  }
}
function oY(n, t, e, i, a, s, r) {
  const l = new lh(), c = new sY(), f = /* @__PURE__ */ new Set(), d = [], p = a.logarithmicDepthBuffer, m = a.vertexTextures;
  let g = a.precision;
  const y = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function x(R) {
    return f.add(R), R === 0 ? "uv" : `uv${R}`;
  }
  function M(R, C, B, Y, V) {
    const Q = Y.fog, J = V.geometry, P = R.isMeshStandardMaterial ? Y.environment : null, q = (R.isMeshStandardMaterial ? e : t).get(R.envMap || P), G = q && q.mapping === Sh ? q.image.height : null, it = y[R.type];
    R.precision !== null && (g = a.getMaxPrecision(R.precision), g !== R.precision && console.warn("THREE.WebGLProgram.getParameters:", R.precision, "not supported, using", g, "instead."));
    const lt = J.morphAttributes.position || J.morphAttributes.normal || J.morphAttributes.color, mt = lt !== void 0 ? lt.length : 0;
    let Rt = 0;
    J.morphAttributes.position !== void 0 && (Rt = 1), J.morphAttributes.normal !== void 0 && (Rt = 2), J.morphAttributes.color !== void 0 && (Rt = 3);
    let Qt, $, ht, kt;
    if (it) {
      const Le = Bs[it];
      Qt = Le.vertexShader, $ = Le.fragmentShader;
    } else
      Qt = R.vertexShader, $ = R.fragmentShader, c.update(R), ht = c.getVertexShaderID(R), kt = c.getFragmentShaderID(R);
    const Ot = n.getRenderTarget(), Xt = n.state.buffers.depth.getReversed(), pe = V.isInstancedMesh === !0, $t = V.isBatchedMesh === !0, qe = !!R.map, Me = !!R.matcap, ce = !!q, I = !!R.aoMap, Ct = !!R.lightMap, yt = !!R.bumpMap, Et = !!R.normalMap, ct = !!R.displacementMap, Ht = !!R.emissiveMap, _t = !!R.metalnessMap, It = !!R.roughnessMap, he = R.anisotropy > 0, F = R.clearcoat > 0, N = R.dispersion > 0, tt = R.iridescence > 0, rt = R.sheen > 0, gt = R.transmission > 0, ot = he && !!R.anisotropyMap, Kt = F && !!R.clearcoatMap, Dt = F && !!R.clearcoatNormalMap, qt = F && !!R.clearcoatRoughnessMap, jt = tt && !!R.iridescenceMap, pt = tt && !!R.iridescenceThicknessMap, zt = rt && !!R.sheenColorMap, ee = rt && !!R.sheenRoughnessMap, ne = !!R.specularMap, wt = !!R.specularColorMap, se = !!R.specularIntensityMap, k = gt && !!R.transmissionMap, Lt = gt && !!R.thicknessMap, xt = !!R.gradientMap, Gt = !!R.alphaMap, Mt = R.alphaTest > 0, dt = !!R.alphaHash, Wt = !!R.extensions;
    let le = cr;
    R.toneMapped && (Ot === null || Ot.isXRRenderTarget === !0) && (le = n.toneMapping);
    const Ye = {
      shaderID: it,
      shaderType: R.type,
      shaderName: R.name,
      vertexShader: Qt,
      fragmentShader: $,
      defines: R.defines,
      customVertexShaderID: ht,
      customFragmentShaderID: kt,
      isRawShaderMaterial: R.isRawShaderMaterial === !0,
      glslVersion: R.glslVersion,
      precision: g,
      batching: $t,
      batchingColor: $t && V._colorsTexture !== null,
      instancing: pe,
      instancingColor: pe && V.instanceColor !== null,
      instancingMorph: pe && V.morphTexture !== null,
      supportsVertexTextures: m,
      outputColorSpace: Ot === null ? n.outputColorSpace : Ot.isXRRenderTarget === !0 ? Ot.texture.colorSpace : vl,
      alphaToCoverage: !!R.alphaToCoverage,
      map: qe,
      matcap: Me,
      envMap: ce,
      envMapMode: ce && q.mapping,
      envMapCubeUVHeight: G,
      aoMap: I,
      lightMap: Ct,
      bumpMap: yt,
      normalMap: Et,
      displacementMap: m && ct,
      emissiveMap: Ht,
      normalMapObjectSpace: Et && R.normalMapType === VL,
      normalMapTangentSpace: Et && R.normalMapType === Ml,
      metalnessMap: _t,
      roughnessMap: It,
      anisotropy: he,
      anisotropyMap: ot,
      clearcoat: F,
      clearcoatMap: Kt,
      clearcoatNormalMap: Dt,
      clearcoatRoughnessMap: qt,
      dispersion: N,
      iridescence: tt,
      iridescenceMap: jt,
      iridescenceThicknessMap: pt,
      sheen: rt,
      sheenColorMap: zt,
      sheenRoughnessMap: ee,
      specularMap: ne,
      specularColorMap: wt,
      specularIntensityMap: se,
      transmission: gt,
      transmissionMap: k,
      thicknessMap: Lt,
      gradientMap: xt,
      opaque: R.transparent === !1 && R.blending === zu && R.alphaToCoverage === !1,
      alphaMap: Gt,
      alphaTest: Mt,
      alphaHash: dt,
      combine: R.combine,
      //
      mapUv: qe && x(R.map.channel),
      aoMapUv: I && x(R.aoMap.channel),
      lightMapUv: Ct && x(R.lightMap.channel),
      bumpMapUv: yt && x(R.bumpMap.channel),
      normalMapUv: Et && x(R.normalMap.channel),
      displacementMapUv: ct && x(R.displacementMap.channel),
      emissiveMapUv: Ht && x(R.emissiveMap.channel),
      metalnessMapUv: _t && x(R.metalnessMap.channel),
      roughnessMapUv: It && x(R.roughnessMap.channel),
      anisotropyMapUv: ot && x(R.anisotropyMap.channel),
      clearcoatMapUv: Kt && x(R.clearcoatMap.channel),
      clearcoatNormalMapUv: Dt && x(R.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: qt && x(R.clearcoatRoughnessMap.channel),
      iridescenceMapUv: jt && x(R.iridescenceMap.channel),
      iridescenceThicknessMapUv: pt && x(R.iridescenceThicknessMap.channel),
      sheenColorMapUv: zt && x(R.sheenColorMap.channel),
      sheenRoughnessMapUv: ee && x(R.sheenRoughnessMap.channel),
      specularMapUv: ne && x(R.specularMap.channel),
      specularColorMapUv: wt && x(R.specularColorMap.channel),
      specularIntensityMapUv: se && x(R.specularIntensityMap.channel),
      transmissionMapUv: k && x(R.transmissionMap.channel),
      thicknessMapUv: Lt && x(R.thicknessMap.channel),
      alphaMapUv: Gt && x(R.alphaMap.channel),
      //
      vertexTangents: !!J.attributes.tangent && (Et || he),
      vertexColors: R.vertexColors,
      vertexAlphas: R.vertexColors === !0 && !!J.attributes.color && J.attributes.color.itemSize === 4,
      pointsUvs: V.isPoints === !0 && !!J.attributes.uv && (qe || Gt),
      fog: !!Q,
      useFog: R.fog === !0,
      fogExp2: !!Q && Q.isFogExp2,
      flatShading: R.flatShading === !0,
      sizeAttenuation: R.sizeAttenuation === !0,
      logarithmicDepthBuffer: p,
      reverseDepthBuffer: Xt,
      skinning: V.isSkinnedMesh === !0,
      morphTargets: J.morphAttributes.position !== void 0,
      morphNormals: J.morphAttributes.normal !== void 0,
      morphColors: J.morphAttributes.color !== void 0,
      morphTargetsCount: mt,
      morphTextureStride: Rt,
      numDirLights: C.directional.length,
      numPointLights: C.point.length,
      numSpotLights: C.spot.length,
      numSpotLightMaps: C.spotLightMap.length,
      numRectAreaLights: C.rectArea.length,
      numHemiLights: C.hemi.length,
      numDirLightShadows: C.directionalShadowMap.length,
      numPointLightShadows: C.pointShadowMap.length,
      numSpotLightShadows: C.spotShadowMap.length,
      numSpotLightShadowsWithMaps: C.numSpotLightShadowsWithMaps,
      numLightProbes: C.numLightProbes,
      numClippingPlanes: r.numPlanes,
      numClipIntersection: r.numIntersection,
      dithering: R.dithering,
      shadowMapEnabled: n.shadowMap.enabled && B.length > 0,
      shadowMapType: n.shadowMap.type,
      toneMapping: le,
      decodeVideoTexture: qe && R.map.isVideoTexture === !0 && Oe.getTransfer(R.map.colorSpace) === je,
      decodeVideoTextureEmissive: Ht && R.emissiveMap.isVideoTexture === !0 && Oe.getTransfer(R.emissiveMap.colorSpace) === je,
      premultipliedAlpha: R.premultipliedAlpha,
      doubleSided: R.side === Ps,
      flipSided: R.side === Ki,
      useDepthPacking: R.depthPacking >= 0,
      depthPacking: R.depthPacking || 0,
      index0AttributeName: R.index0AttributeName,
      extensionClipCullDistance: Wt && R.extensions.clipCullDistance === !0 && i.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: (Wt && R.extensions.multiDraw === !0 || $t) && i.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: i.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: R.customProgramCacheKey()
    };
    return Ye.vertexUv1s = f.has(1), Ye.vertexUv2s = f.has(2), Ye.vertexUv3s = f.has(3), f.clear(), Ye;
  }
  function v(R) {
    const C = [];
    if (R.shaderID ? C.push(R.shaderID) : (C.push(R.customVertexShaderID), C.push(R.customFragmentShaderID)), R.defines !== void 0)
      for (const B in R.defines)
        C.push(B), C.push(R.defines[B]);
    return R.isRawShaderMaterial === !1 && (S(C, R), E(C, R), C.push(n.outputColorSpace)), C.push(R.customProgramCacheKey), C.join();
  }
  function S(R, C) {
    R.push(C.precision), R.push(C.outputColorSpace), R.push(C.envMapMode), R.push(C.envMapCubeUVHeight), R.push(C.mapUv), R.push(C.alphaMapUv), R.push(C.lightMapUv), R.push(C.aoMapUv), R.push(C.bumpMapUv), R.push(C.normalMapUv), R.push(C.displacementMapUv), R.push(C.emissiveMapUv), R.push(C.metalnessMapUv), R.push(C.roughnessMapUv), R.push(C.anisotropyMapUv), R.push(C.clearcoatMapUv), R.push(C.clearcoatNormalMapUv), R.push(C.clearcoatRoughnessMapUv), R.push(C.iridescenceMapUv), R.push(C.iridescenceThicknessMapUv), R.push(C.sheenColorMapUv), R.push(C.sheenRoughnessMapUv), R.push(C.specularMapUv), R.push(C.specularColorMapUv), R.push(C.specularIntensityMapUv), R.push(C.transmissionMapUv), R.push(C.thicknessMapUv), R.push(C.combine), R.push(C.fogExp2), R.push(C.sizeAttenuation), R.push(C.morphTargetsCount), R.push(C.morphAttributeCount), R.push(C.numDirLights), R.push(C.numPointLights), R.push(C.numSpotLights), R.push(C.numSpotLightMaps), R.push(C.numHemiLights), R.push(C.numRectAreaLights), R.push(C.numDirLightShadows), R.push(C.numPointLightShadows), R.push(C.numSpotLightShadows), R.push(C.numSpotLightShadowsWithMaps), R.push(C.numLightProbes), R.push(C.shadowMapType), R.push(C.toneMapping), R.push(C.numClippingPlanes), R.push(C.numClipIntersection), R.push(C.depthPacking);
  }
  function E(R, C) {
    l.disableAll(), C.supportsVertexTextures && l.enable(0), C.instancing && l.enable(1), C.instancingColor && l.enable(2), C.instancingMorph && l.enable(3), C.matcap && l.enable(4), C.envMap && l.enable(5), C.normalMapObjectSpace && l.enable(6), C.normalMapTangentSpace && l.enable(7), C.clearcoat && l.enable(8), C.iridescence && l.enable(9), C.alphaTest && l.enable(10), C.vertexColors && l.enable(11), C.vertexAlphas && l.enable(12), C.vertexUv1s && l.enable(13), C.vertexUv2s && l.enable(14), C.vertexUv3s && l.enable(15), C.vertexTangents && l.enable(16), C.anisotropy && l.enable(17), C.alphaHash && l.enable(18), C.batching && l.enable(19), C.dispersion && l.enable(20), C.batchingColor && l.enable(21), R.push(l.mask), l.disableAll(), C.fog && l.enable(0), C.useFog && l.enable(1), C.flatShading && l.enable(2), C.logarithmicDepthBuffer && l.enable(3), C.reverseDepthBuffer && l.enable(4), C.skinning && l.enable(5), C.morphTargets && l.enable(6), C.morphNormals && l.enable(7), C.morphColors && l.enable(8), C.premultipliedAlpha && l.enable(9), C.shadowMapEnabled && l.enable(10), C.doubleSided && l.enable(11), C.flipSided && l.enable(12), C.useDepthPacking && l.enable(13), C.dithering && l.enable(14), C.transmission && l.enable(15), C.sheen && l.enable(16), C.opaque && l.enable(17), C.pointsUvs && l.enable(18), C.decodeVideoTexture && l.enable(19), C.decodeVideoTextureEmissive && l.enable(20), C.alphaToCoverage && l.enable(21), R.push(l.mask);
  }
  function T(R) {
    const C = y[R.type];
    let B;
    if (C) {
      const Y = Bs[C];
      B = nT.clone(Y.uniforms);
    } else
      B = R.uniforms;
    return B;
  }
  function w(R, C) {
    let B;
    for (let Y = 0, V = d.length; Y < V; Y++) {
      const Q = d[Y];
      if (Q.cacheKey === C) {
        B = Q, ++B.usedTimes;
        break;
      }
    }
    return B === void 0 && (B = new iY(n, C, R, s), d.push(B)), B;
  }
  function D(R) {
    if (--R.usedTimes === 0) {
      const C = d.indexOf(R);
      d[C] = d[d.length - 1], d.pop(), R.destroy();
    }
  }
  function U(R) {
    c.remove(R);
  }
  function O() {
    c.dispose();
  }
  return {
    getParameters: M,
    getProgramCacheKey: v,
    getUniforms: T,
    acquireProgram: w,
    releaseProgram: D,
    releaseShaderCache: U,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: d,
    dispose: O
  };
}
function lY() {
  let n = /* @__PURE__ */ new WeakMap();
  function t(r) {
    return n.has(r);
  }
  function e(r) {
    let l = n.get(r);
    return l === void 0 && (l = {}, n.set(r, l)), l;
  }
  function i(r) {
    n.delete(r);
  }
  function a(r, l, c) {
    n.get(r)[l] = c;
  }
  function s() {
    n = /* @__PURE__ */ new WeakMap();
  }
  return {
    has: t,
    get: e,
    remove: i,
    update: a,
    dispose: s
  };
}
function uY(n, t) {
  return n.groupOrder !== t.groupOrder ? n.groupOrder - t.groupOrder : n.renderOrder !== t.renderOrder ? n.renderOrder - t.renderOrder : n.material.id !== t.material.id ? n.material.id - t.material.id : n.z !== t.z ? n.z - t.z : n.id - t.id;
}
function l3(n, t) {
  return n.groupOrder !== t.groupOrder ? n.groupOrder - t.groupOrder : n.renderOrder !== t.renderOrder ? n.renderOrder - t.renderOrder : n.z !== t.z ? t.z - n.z : n.id - t.id;
}
function u3() {
  const n = [];
  let t = 0;
  const e = [], i = [], a = [];
  function s() {
    t = 0, e.length = 0, i.length = 0, a.length = 0;
  }
  function r(p, m, g, y, x, M) {
    let v = n[t];
    return v === void 0 ? (v = {
      id: p.id,
      object: p,
      geometry: m,
      material: g,
      groupOrder: y,
      renderOrder: p.renderOrder,
      z: x,
      group: M
    }, n[t] = v) : (v.id = p.id, v.object = p, v.geometry = m, v.material = g, v.groupOrder = y, v.renderOrder = p.renderOrder, v.z = x, v.group = M), t++, v;
  }
  function l(p, m, g, y, x, M) {
    const v = r(p, m, g, y, x, M);
    g.transmission > 0 ? i.push(v) : g.transparent === !0 ? a.push(v) : e.push(v);
  }
  function c(p, m, g, y, x, M) {
    const v = r(p, m, g, y, x, M);
    g.transmission > 0 ? i.unshift(v) : g.transparent === !0 ? a.unshift(v) : e.unshift(v);
  }
  function f(p, m) {
    e.length > 1 && e.sort(p || uY), i.length > 1 && i.sort(m || l3), a.length > 1 && a.sort(m || l3);
  }
  function d() {
    for (let p = t, m = n.length; p < m; p++) {
      const g = n[p];
      if (g.id === null) break;
      g.id = null, g.object = null, g.geometry = null, g.material = null, g.group = null;
    }
  }
  return {
    opaque: e,
    transmissive: i,
    transparent: a,
    init: s,
    push: l,
    unshift: c,
    finish: d,
    sort: f
  };
}
function cY() {
  let n = /* @__PURE__ */ new WeakMap();
  function t(i, a) {
    const s = n.get(i);
    let r;
    return s === void 0 ? (r = new u3(), n.set(i, [r])) : a >= s.length ? (r = new u3(), s.push(r)) : r = s[a], r;
  }
  function e() {
    n = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: t,
    dispose: e
  };
}
function fY() {
  const n = {};
  return {
    get: function(t) {
      if (n[t.id] !== void 0)
        return n[t.id];
      let e;
      switch (t.type) {
        case "DirectionalLight":
          e = {
            direction: new H(),
            color: new Pt()
          };
          break;
        case "SpotLight":
          e = {
            position: new H(),
            direction: new H(),
            color: new Pt(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          e = {
            position: new H(),
            color: new Pt(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          e = {
            direction: new H(),
            skyColor: new Pt(),
            groundColor: new Pt()
          };
          break;
        case "RectAreaLight":
          e = {
            color: new Pt(),
            position: new H(),
            halfWidth: new H(),
            halfHeight: new H()
          };
          break;
      }
      return n[t.id] = e, e;
    }
  };
}
function hY() {
  const n = {};
  return {
    get: function(t) {
      if (n[t.id] !== void 0)
        return n[t.id];
      let e;
      switch (t.type) {
        case "DirectionalLight":
          e = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ft()
          };
          break;
        case "SpotLight":
          e = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ft()
          };
          break;
        case "PointLight":
          e = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ft(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return n[t.id] = e, e;
    }
  };
}
let dY = 0;
function pY(n, t) {
  return (t.castShadow ? 2 : 0) - (n.castShadow ? 2 : 0) + (t.map ? 1 : 0) - (n.map ? 1 : 0);
}
function mY(n) {
  const t = new fY(), e = hY(), i = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let f = 0; f < 9; f++) i.probe.push(new H());
  const a = new H(), s = new ae(), r = new ae();
  function l(f) {
    let d = 0, p = 0, m = 0;
    for (let R = 0; R < 9; R++) i.probe[R].set(0, 0, 0);
    let g = 0, y = 0, x = 0, M = 0, v = 0, S = 0, E = 0, T = 0, w = 0, D = 0, U = 0;
    f.sort(pY);
    for (let R = 0, C = f.length; R < C; R++) {
      const B = f[R], Y = B.color, V = B.intensity, Q = B.distance, J = B.shadow && B.shadow.map ? B.shadow.map.texture : null;
      if (B.isAmbientLight)
        d += Y.r * V, p += Y.g * V, m += Y.b * V;
      else if (B.isLightProbe) {
        for (let P = 0; P < 9; P++)
          i.probe[P].addScaledVector(B.sh.coefficients[P], V);
        U++;
      } else if (B.isDirectionalLight) {
        const P = t.get(B);
        if (P.color.copy(B.color).multiplyScalar(B.intensity), B.castShadow) {
          const q = B.shadow, G = e.get(B);
          G.shadowIntensity = q.intensity, G.shadowBias = q.bias, G.shadowNormalBias = q.normalBias, G.shadowRadius = q.radius, G.shadowMapSize = q.mapSize, i.directionalShadow[g] = G, i.directionalShadowMap[g] = J, i.directionalShadowMatrix[g] = B.shadow.matrix, S++;
        }
        i.directional[g] = P, g++;
      } else if (B.isSpotLight) {
        const P = t.get(B);
        P.position.setFromMatrixPosition(B.matrixWorld), P.color.copy(Y).multiplyScalar(V), P.distance = Q, P.coneCos = Math.cos(B.angle), P.penumbraCos = Math.cos(B.angle * (1 - B.penumbra)), P.decay = B.decay, i.spot[x] = P;
        const q = B.shadow;
        if (B.map && (i.spotLightMap[w] = B.map, w++, q.updateMatrices(B), B.castShadow && D++), i.spotLightMatrix[x] = q.matrix, B.castShadow) {
          const G = e.get(B);
          G.shadowIntensity = q.intensity, G.shadowBias = q.bias, G.shadowNormalBias = q.normalBias, G.shadowRadius = q.radius, G.shadowMapSize = q.mapSize, i.spotShadow[x] = G, i.spotShadowMap[x] = J, T++;
        }
        x++;
      } else if (B.isRectAreaLight) {
        const P = t.get(B);
        P.color.copy(Y).multiplyScalar(V), P.halfWidth.set(B.width * 0.5, 0, 0), P.halfHeight.set(0, B.height * 0.5, 0), i.rectArea[M] = P, M++;
      } else if (B.isPointLight) {
        const P = t.get(B);
        if (P.color.copy(B.color).multiplyScalar(B.intensity), P.distance = B.distance, P.decay = B.decay, B.castShadow) {
          const q = B.shadow, G = e.get(B);
          G.shadowIntensity = q.intensity, G.shadowBias = q.bias, G.shadowNormalBias = q.normalBias, G.shadowRadius = q.radius, G.shadowMapSize = q.mapSize, G.shadowCameraNear = q.camera.near, G.shadowCameraFar = q.camera.far, i.pointShadow[y] = G, i.pointShadowMap[y] = J, i.pointShadowMatrix[y] = B.shadow.matrix, E++;
        }
        i.point[y] = P, y++;
      } else if (B.isHemisphereLight) {
        const P = t.get(B);
        P.skyColor.copy(B.color).multiplyScalar(V), P.groundColor.copy(B.groundColor).multiplyScalar(V), i.hemi[v] = P, v++;
      }
    }
    M > 0 && (n.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = Nt.LTC_FLOAT_1, i.rectAreaLTC2 = Nt.LTC_FLOAT_2) : (i.rectAreaLTC1 = Nt.LTC_HALF_1, i.rectAreaLTC2 = Nt.LTC_HALF_2)), i.ambient[0] = d, i.ambient[1] = p, i.ambient[2] = m;
    const O = i.hash;
    (O.directionalLength !== g || O.pointLength !== y || O.spotLength !== x || O.rectAreaLength !== M || O.hemiLength !== v || O.numDirectionalShadows !== S || O.numPointShadows !== E || O.numSpotShadows !== T || O.numSpotMaps !== w || O.numLightProbes !== U) && (i.directional.length = g, i.spot.length = x, i.rectArea.length = M, i.point.length = y, i.hemi.length = v, i.directionalShadow.length = S, i.directionalShadowMap.length = S, i.pointShadow.length = E, i.pointShadowMap.length = E, i.spotShadow.length = T, i.spotShadowMap.length = T, i.directionalShadowMatrix.length = S, i.pointShadowMatrix.length = E, i.spotLightMatrix.length = T + w - D, i.spotLightMap.length = w, i.numSpotLightShadowsWithMaps = D, i.numLightProbes = U, O.directionalLength = g, O.pointLength = y, O.spotLength = x, O.rectAreaLength = M, O.hemiLength = v, O.numDirectionalShadows = S, O.numPointShadows = E, O.numSpotShadows = T, O.numSpotMaps = w, O.numLightProbes = U, i.version = dY++);
  }
  function c(f, d) {
    let p = 0, m = 0, g = 0, y = 0, x = 0;
    const M = d.matrixWorldInverse;
    for (let v = 0, S = f.length; v < S; v++) {
      const E = f[v];
      if (E.isDirectionalLight) {
        const T = i.directional[p];
        T.direction.setFromMatrixPosition(E.matrixWorld), a.setFromMatrixPosition(E.target.matrixWorld), T.direction.sub(a), T.direction.transformDirection(M), p++;
      } else if (E.isSpotLight) {
        const T = i.spot[g];
        T.position.setFromMatrixPosition(E.matrixWorld), T.position.applyMatrix4(M), T.direction.setFromMatrixPosition(E.matrixWorld), a.setFromMatrixPosition(E.target.matrixWorld), T.direction.sub(a), T.direction.transformDirection(M), g++;
      } else if (E.isRectAreaLight) {
        const T = i.rectArea[y];
        T.position.setFromMatrixPosition(E.matrixWorld), T.position.applyMatrix4(M), r.identity(), s.copy(E.matrixWorld), s.premultiply(M), r.extractRotation(s), T.halfWidth.set(E.width * 0.5, 0, 0), T.halfHeight.set(0, E.height * 0.5, 0), T.halfWidth.applyMatrix4(r), T.halfHeight.applyMatrix4(r), y++;
      } else if (E.isPointLight) {
        const T = i.point[m];
        T.position.setFromMatrixPosition(E.matrixWorld), T.position.applyMatrix4(M), m++;
      } else if (E.isHemisphereLight) {
        const T = i.hemi[x];
        T.direction.setFromMatrixPosition(E.matrixWorld), T.direction.transformDirection(M), x++;
      }
    }
  }
  return {
    setup: l,
    setupView: c,
    state: i
  };
}
function c3(n) {
  const t = new mY(n), e = [], i = [];
  function a(d) {
    f.camera = d, e.length = 0, i.length = 0;
  }
  function s(d) {
    e.push(d);
  }
  function r(d) {
    i.push(d);
  }
  function l() {
    t.setup(e);
  }
  function c(d) {
    t.setupView(e, d);
  }
  const f = {
    lightsArray: e,
    shadowsArray: i,
    camera: null,
    lights: t,
    transmissionRenderTarget: {}
  };
  return {
    init: a,
    state: f,
    setupLights: l,
    setupLightsView: c,
    pushLight: s,
    pushShadow: r
  };
}
function gY(n) {
  let t = /* @__PURE__ */ new WeakMap();
  function e(a, s = 0) {
    const r = t.get(a);
    let l;
    return r === void 0 ? (l = new c3(n), t.set(a, [l])) : s >= r.length ? (l = new c3(n), r.push(l)) : l = r[s], l;
  }
  function i() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: i
  };
}
const vY = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, _Y = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function yY(n, t, e) {
  let i = new Eh();
  const a = new ft(), s = new ft(), r = new De(), l = new mT({ depthPacking: FL }), c = new gT(), f = {}, d = e.maxTextureSize, p = { [ro]: Ki, [Ki]: ro, [Ps]: Ps }, m = new Ms({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new ft() },
      radius: { value: 4 }
    },
    vertexShader: vY,
    fragmentShader: _Y
  }), g = m.clone();
  g.defines.HORIZONTAL_PASS = 1;
  const y = new ye();
  y.setAttribute(
    "position",
    new an(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const x = new Yn(y, m), M = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = G_;
  let v = this.type;
  this.render = function(D, U, O) {
    if (M.enabled === !1 || M.autoUpdate === !1 && M.needsUpdate === !1 || D.length === 0) return;
    const R = n.getRenderTarget(), C = n.getActiveCubeFace(), B = n.getActiveMipmapLevel(), Y = n.state;
    Y.setBlending(Jr), Y.buffers.color.setClear(1, 1, 1, 1), Y.buffers.depth.setTest(!0), Y.setScissorTest(!1);
    const V = v !== Ls && this.type === Ls, Q = v === Ls && this.type !== Ls;
    for (let J = 0, P = D.length; J < P; J++) {
      const q = D[J], G = q.shadow;
      if (G === void 0) {
        console.warn("THREE.WebGLShadowMap:", q, "has no shadow.");
        continue;
      }
      if (G.autoUpdate === !1 && G.needsUpdate === !1) continue;
      a.copy(G.mapSize);
      const it = G.getFrameExtents();
      if (a.multiply(it), s.copy(G.mapSize), (a.x > d || a.y > d) && (a.x > d && (s.x = Math.floor(d / it.x), a.x = s.x * it.x, G.mapSize.x = s.x), a.y > d && (s.y = Math.floor(d / it.y), a.y = s.y * it.y, G.mapSize.y = s.y)), G.map === null || V === !0 || Q === !0) {
        const mt = this.type !== Ls ? { minFilter: xi, magFilter: xi } : {};
        G.map !== null && G.map.dispose(), G.map = new dr(a.x, a.y, mt), G.map.texture.name = q.name + ".shadowMap", G.camera.updateProjectionMatrix();
      }
      n.setRenderTarget(G.map), n.clear();
      const lt = G.getViewportCount();
      for (let mt = 0; mt < lt; mt++) {
        const Rt = G.getViewport(mt);
        r.set(
          s.x * Rt.x,
          s.y * Rt.y,
          s.x * Rt.z,
          s.y * Rt.w
        ), Y.viewport(r), G.updateMatrices(q, mt), i = G.getFrustum(), T(U, O, G.camera, q, this.type);
      }
      G.isPointLightShadow !== !0 && this.type === Ls && S(G, O), G.needsUpdate = !1;
    }
    v = this.type, M.needsUpdate = !1, n.setRenderTarget(R, C, B);
  };
  function S(D, U) {
    const O = t.update(x);
    m.defines.VSM_SAMPLES !== D.blurSamples && (m.defines.VSM_SAMPLES = D.blurSamples, g.defines.VSM_SAMPLES = D.blurSamples, m.needsUpdate = !0, g.needsUpdate = !0), D.mapPass === null && (D.mapPass = new dr(a.x, a.y)), m.uniforms.shadow_pass.value = D.map.texture, m.uniforms.resolution.value = D.mapSize, m.uniforms.radius.value = D.radius, n.setRenderTarget(D.mapPass), n.clear(), n.renderBufferDirect(U, null, O, m, x, null), g.uniforms.shadow_pass.value = D.mapPass.texture, g.uniforms.resolution.value = D.mapSize, g.uniforms.radius.value = D.radius, n.setRenderTarget(D.map), n.clear(), n.renderBufferDirect(U, null, O, g, x, null);
  }
  function E(D, U, O, R) {
    let C = null;
    const B = O.isPointLight === !0 ? D.customDistanceMaterial : D.customDepthMaterial;
    if (B !== void 0)
      C = B;
    else if (C = O.isPointLight === !0 ? c : l, n.localClippingEnabled && U.clipShadows === !0 && Array.isArray(U.clippingPlanes) && U.clippingPlanes.length !== 0 || U.displacementMap && U.displacementScale !== 0 || U.alphaMap && U.alphaTest > 0 || U.map && U.alphaTest > 0 || U.alphaToCoverage === !0) {
      const Y = C.uuid, V = U.uuid;
      let Q = f[Y];
      Q === void 0 && (Q = {}, f[Y] = Q);
      let J = Q[V];
      J === void 0 && (J = C.clone(), Q[V] = J, U.addEventListener("dispose", w)), C = J;
    }
    if (C.visible = U.visible, C.wireframe = U.wireframe, R === Ls ? C.side = U.shadowSide !== null ? U.shadowSide : U.side : C.side = U.shadowSide !== null ? U.shadowSide : p[U.side], C.alphaMap = U.alphaMap, C.alphaTest = U.alphaToCoverage === !0 ? 0.5 : U.alphaTest, C.map = U.map, C.clipShadows = U.clipShadows, C.clippingPlanes = U.clippingPlanes, C.clipIntersection = U.clipIntersection, C.displacementMap = U.displacementMap, C.displacementScale = U.displacementScale, C.displacementBias = U.displacementBias, C.wireframeLinewidth = U.wireframeLinewidth, C.linewidth = U.linewidth, O.isPointLight === !0 && C.isMeshDistanceMaterial === !0) {
      const Y = n.properties.get(C);
      Y.light = O;
    }
    return C;
  }
  function T(D, U, O, R, C) {
    if (D.visible === !1) return;
    if (D.layers.test(U.layers) && (D.isMesh || D.isLine || D.isPoints) && (D.castShadow || D.receiveShadow && C === Ls) && (!D.frustumCulled || i.intersectsObject(D))) {
      D.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse, D.matrixWorld);
      const V = t.update(D), Q = D.material;
      if (Array.isArray(Q)) {
        const J = V.groups;
        for (let P = 0, q = J.length; P < q; P++) {
          const G = J[P], it = Q[G.materialIndex];
          if (it && it.visible) {
            const lt = E(D, it, R, C);
            D.onBeforeShadow(n, D, U, O, V, lt, G), n.renderBufferDirect(O, null, V, lt, D, G), D.onAfterShadow(n, D, U, O, V, lt, G);
          }
        }
      } else if (Q.visible) {
        const J = E(D, Q, R, C);
        D.onBeforeShadow(n, D, U, O, V, J, null), n.renderBufferDirect(O, null, V, J, D, null), D.onAfterShadow(n, D, U, O, V, J, null);
      }
    }
    const Y = D.children;
    for (let V = 0, Q = Y.length; V < Q; V++)
      T(Y[V], U, O, R, C);
  }
  function w(D) {
    D.target.removeEventListener("dispose", w);
    for (const O in f) {
      const R = f[O], C = D.target.uuid;
      C in R && (R[C].dispose(), delete R[C]);
    }
  }
}
const xY = {
  [Uv]: Ov,
  [Nv]: Bv,
  [Lv]: Pv,
  [Xu]: zv,
  [Ov]: Uv,
  [Bv]: Nv,
  [Pv]: Lv,
  [zv]: Xu
};
function SY(n, t) {
  function e() {
    let k = !1;
    const Lt = new De();
    let xt = null;
    const Gt = new De(0, 0, 0, 0);
    return {
      setMask: function(Mt) {
        xt !== Mt && !k && (n.colorMask(Mt, Mt, Mt, Mt), xt = Mt);
      },
      setLocked: function(Mt) {
        k = Mt;
      },
      setClear: function(Mt, dt, Wt, le, Ye) {
        Ye === !0 && (Mt *= le, dt *= le, Wt *= le), Lt.set(Mt, dt, Wt, le), Gt.equals(Lt) === !1 && (n.clearColor(Mt, dt, Wt, le), Gt.copy(Lt));
      },
      reset: function() {
        k = !1, xt = null, Gt.set(-1, 0, 0, 0);
      }
    };
  }
  function i() {
    let k = !1, Lt = !1, xt = null, Gt = null, Mt = null;
    return {
      setReversed: function(dt) {
        if (Lt !== dt) {
          const Wt = t.get("EXT_clip_control");
          dt ? Wt.clipControlEXT(Wt.LOWER_LEFT_EXT, Wt.ZERO_TO_ONE_EXT) : Wt.clipControlEXT(Wt.LOWER_LEFT_EXT, Wt.NEGATIVE_ONE_TO_ONE_EXT), Lt = dt;
          const le = Mt;
          Mt = null, this.setClear(le);
        }
      },
      getReversed: function() {
        return Lt;
      },
      setTest: function(dt) {
        dt ? Ot(n.DEPTH_TEST) : Xt(n.DEPTH_TEST);
      },
      setMask: function(dt) {
        xt !== dt && !k && (n.depthMask(dt), xt = dt);
      },
      setFunc: function(dt) {
        if (Lt && (dt = xY[dt]), Gt !== dt) {
          switch (dt) {
            case Uv:
              n.depthFunc(n.NEVER);
              break;
            case Ov:
              n.depthFunc(n.ALWAYS);
              break;
            case Nv:
              n.depthFunc(n.LESS);
              break;
            case Xu:
              n.depthFunc(n.LEQUAL);
              break;
            case Lv:
              n.depthFunc(n.EQUAL);
              break;
            case zv:
              n.depthFunc(n.GEQUAL);
              break;
            case Bv:
              n.depthFunc(n.GREATER);
              break;
            case Pv:
              n.depthFunc(n.NOTEQUAL);
              break;
            default:
              n.depthFunc(n.LEQUAL);
          }
          Gt = dt;
        }
      },
      setLocked: function(dt) {
        k = dt;
      },
      setClear: function(dt) {
        Mt !== dt && (Lt && (dt = 1 - dt), n.clearDepth(dt), Mt = dt);
      },
      reset: function() {
        k = !1, xt = null, Gt = null, Mt = null, Lt = !1;
      }
    };
  }
  function a() {
    let k = !1, Lt = null, xt = null, Gt = null, Mt = null, dt = null, Wt = null, le = null, Ye = null;
    return {
      setTest: function(Le) {
        k || (Le ? Ot(n.STENCIL_TEST) : Xt(n.STENCIL_TEST));
      },
      setMask: function(Le) {
        Lt !== Le && !k && (n.stencilMask(Le), Lt = Le);
      },
      setFunc: function(Le, ta, ja) {
        (xt !== Le || Gt !== ta || Mt !== ja) && (n.stencilFunc(Le, ta, ja), xt = Le, Gt = ta, Mt = ja);
      },
      setOp: function(Le, ta, ja) {
        (dt !== Le || Wt !== ta || le !== ja) && (n.stencilOp(Le, ta, ja), dt = Le, Wt = ta, le = ja);
      },
      setLocked: function(Le) {
        k = Le;
      },
      setClear: function(Le) {
        Ye !== Le && (n.clearStencil(Le), Ye = Le);
      },
      reset: function() {
        k = !1, Lt = null, xt = null, Gt = null, Mt = null, dt = null, Wt = null, le = null, Ye = null;
      }
    };
  }
  const s = new e(), r = new i(), l = new a(), c = /* @__PURE__ */ new WeakMap(), f = /* @__PURE__ */ new WeakMap();
  let d = {}, p = {}, m = /* @__PURE__ */ new WeakMap(), g = [], y = null, x = !1, M = null, v = null, S = null, E = null, T = null, w = null, D = null, U = new Pt(0, 0, 0), O = 0, R = !1, C = null, B = null, Y = null, V = null, Q = null;
  const J = n.getParameter(n.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let P = !1, q = 0;
  const G = n.getParameter(n.VERSION);
  G.indexOf("WebGL") !== -1 ? (q = parseFloat(/^WebGL (\d)/.exec(G)[1]), P = q >= 1) : G.indexOf("OpenGL ES") !== -1 && (q = parseFloat(/^OpenGL ES (\d)/.exec(G)[1]), P = q >= 2);
  let it = null, lt = {};
  const mt = n.getParameter(n.SCISSOR_BOX), Rt = n.getParameter(n.VIEWPORT), Qt = new De().fromArray(mt), $ = new De().fromArray(Rt);
  function ht(k, Lt, xt, Gt) {
    const Mt = new Uint8Array(4), dt = n.createTexture();
    n.bindTexture(k, dt), n.texParameteri(k, n.TEXTURE_MIN_FILTER, n.NEAREST), n.texParameteri(k, n.TEXTURE_MAG_FILTER, n.NEAREST);
    for (let Wt = 0; Wt < xt; Wt++)
      k === n.TEXTURE_3D || k === n.TEXTURE_2D_ARRAY ? n.texImage3D(Lt, 0, n.RGBA, 1, 1, Gt, 0, n.RGBA, n.UNSIGNED_BYTE, Mt) : n.texImage2D(Lt + Wt, 0, n.RGBA, 1, 1, 0, n.RGBA, n.UNSIGNED_BYTE, Mt);
    return dt;
  }
  const kt = {};
  kt[n.TEXTURE_2D] = ht(n.TEXTURE_2D, n.TEXTURE_2D, 1), kt[n.TEXTURE_CUBE_MAP] = ht(n.TEXTURE_CUBE_MAP, n.TEXTURE_CUBE_MAP_POSITIVE_X, 6), kt[n.TEXTURE_2D_ARRAY] = ht(n.TEXTURE_2D_ARRAY, n.TEXTURE_2D_ARRAY, 1, 1), kt[n.TEXTURE_3D] = ht(n.TEXTURE_3D, n.TEXTURE_3D, 1, 1), s.setClear(0, 0, 0, 1), r.setClear(1), l.setClear(0), Ot(n.DEPTH_TEST), r.setFunc(Xu), yt(!1), Et(kM), Ot(n.CULL_FACE), I(Jr);
  function Ot(k) {
    d[k] !== !0 && (n.enable(k), d[k] = !0);
  }
  function Xt(k) {
    d[k] !== !1 && (n.disable(k), d[k] = !1);
  }
  function pe(k, Lt) {
    return p[k] !== Lt ? (n.bindFramebuffer(k, Lt), p[k] = Lt, k === n.DRAW_FRAMEBUFFER && (p[n.FRAMEBUFFER] = Lt), k === n.FRAMEBUFFER && (p[n.DRAW_FRAMEBUFFER] = Lt), !0) : !1;
  }
  function $t(k, Lt) {
    let xt = g, Gt = !1;
    if (k) {
      xt = m.get(Lt), xt === void 0 && (xt = [], m.set(Lt, xt));
      const Mt = k.textures;
      if (xt.length !== Mt.length || xt[0] !== n.COLOR_ATTACHMENT0) {
        for (let dt = 0, Wt = Mt.length; dt < Wt; dt++)
          xt[dt] = n.COLOR_ATTACHMENT0 + dt;
        xt.length = Mt.length, Gt = !0;
      }
    } else
      xt[0] !== n.BACK && (xt[0] = n.BACK, Gt = !0);
    Gt && n.drawBuffers(xt);
  }
  function qe(k) {
    return y !== k ? (n.useProgram(k), y = k, !0) : !1;
  }
  const Me = {
    [Yo]: n.FUNC_ADD,
    [cL]: n.FUNC_SUBTRACT,
    [fL]: n.FUNC_REVERSE_SUBTRACT
  };
  Me[hL] = n.MIN, Me[dL] = n.MAX;
  const ce = {
    [pL]: n.ZERO,
    [mL]: n.ONE,
    [gL]: n.SRC_COLOR,
    [wv]: n.SRC_ALPHA,
    [ML]: n.SRC_ALPHA_SATURATE,
    [xL]: n.DST_COLOR,
    [_L]: n.DST_ALPHA,
    [vL]: n.ONE_MINUS_SRC_COLOR,
    [Dv]: n.ONE_MINUS_SRC_ALPHA,
    [SL]: n.ONE_MINUS_DST_COLOR,
    [yL]: n.ONE_MINUS_DST_ALPHA,
    [bL]: n.CONSTANT_COLOR,
    [EL]: n.ONE_MINUS_CONSTANT_COLOR,
    [TL]: n.CONSTANT_ALPHA,
    [AL]: n.ONE_MINUS_CONSTANT_ALPHA
  };
  function I(k, Lt, xt, Gt, Mt, dt, Wt, le, Ye, Le) {
    if (k === Jr) {
      x === !0 && (Xt(n.BLEND), x = !1);
      return;
    }
    if (x === !1 && (Ot(n.BLEND), x = !0), k !== uL) {
      if (k !== M || Le !== R) {
        if ((v !== Yo || T !== Yo) && (n.blendEquation(n.FUNC_ADD), v = Yo, T = Yo), Le)
          switch (k) {
            case zu:
              n.blendFuncSeparate(n.ONE, n.ONE_MINUS_SRC_ALPHA, n.ONE, n.ONE_MINUS_SRC_ALPHA);
              break;
            case WM:
              n.blendFunc(n.ONE, n.ONE);
              break;
            case ZM:
              n.blendFuncSeparate(n.ZERO, n.ONE_MINUS_SRC_COLOR, n.ZERO, n.ONE);
              break;
            case jM:
              n.blendFuncSeparate(n.ZERO, n.SRC_COLOR, n.ZERO, n.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", k);
              break;
          }
        else
          switch (k) {
            case zu:
              n.blendFuncSeparate(n.SRC_ALPHA, n.ONE_MINUS_SRC_ALPHA, n.ONE, n.ONE_MINUS_SRC_ALPHA);
              break;
            case WM:
              n.blendFunc(n.SRC_ALPHA, n.ONE);
              break;
            case ZM:
              n.blendFuncSeparate(n.ZERO, n.ONE_MINUS_SRC_COLOR, n.ZERO, n.ONE);
              break;
            case jM:
              n.blendFunc(n.ZERO, n.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", k);
              break;
          }
        S = null, E = null, w = null, D = null, U.set(0, 0, 0), O = 0, M = k, R = Le;
      }
      return;
    }
    Mt = Mt || Lt, dt = dt || xt, Wt = Wt || Gt, (Lt !== v || Mt !== T) && (n.blendEquationSeparate(Me[Lt], Me[Mt]), v = Lt, T = Mt), (xt !== S || Gt !== E || dt !== w || Wt !== D) && (n.blendFuncSeparate(ce[xt], ce[Gt], ce[dt], ce[Wt]), S = xt, E = Gt, w = dt, D = Wt), (le.equals(U) === !1 || Ye !== O) && (n.blendColor(le.r, le.g, le.b, Ye), U.copy(le), O = Ye), M = k, R = !1;
  }
  function Ct(k, Lt) {
    k.side === Ps ? Xt(n.CULL_FACE) : Ot(n.CULL_FACE);
    let xt = k.side === Ki;
    Lt && (xt = !xt), yt(xt), k.blending === zu && k.transparent === !1 ? I(Jr) : I(k.blending, k.blendEquation, k.blendSrc, k.blendDst, k.blendEquationAlpha, k.blendSrcAlpha, k.blendDstAlpha, k.blendColor, k.blendAlpha, k.premultipliedAlpha), r.setFunc(k.depthFunc), r.setTest(k.depthTest), r.setMask(k.depthWrite), s.setMask(k.colorWrite);
    const Gt = k.stencilWrite;
    l.setTest(Gt), Gt && (l.setMask(k.stencilWriteMask), l.setFunc(k.stencilFunc, k.stencilRef, k.stencilFuncMask), l.setOp(k.stencilFail, k.stencilZFail, k.stencilZPass)), Ht(k.polygonOffset, k.polygonOffsetFactor, k.polygonOffsetUnits), k.alphaToCoverage === !0 ? Ot(n.SAMPLE_ALPHA_TO_COVERAGE) : Xt(n.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function yt(k) {
    C !== k && (k ? n.frontFace(n.CW) : n.frontFace(n.CCW), C = k);
  }
  function Et(k) {
    k !== rL ? (Ot(n.CULL_FACE), k !== B && (k === kM ? n.cullFace(n.BACK) : k === oL ? n.cullFace(n.FRONT) : n.cullFace(n.FRONT_AND_BACK))) : Xt(n.CULL_FACE), B = k;
  }
  function ct(k) {
    k !== Y && (P && n.lineWidth(k), Y = k);
  }
  function Ht(k, Lt, xt) {
    k ? (Ot(n.POLYGON_OFFSET_FILL), (V !== Lt || Q !== xt) && (n.polygonOffset(Lt, xt), V = Lt, Q = xt)) : Xt(n.POLYGON_OFFSET_FILL);
  }
  function _t(k) {
    k ? Ot(n.SCISSOR_TEST) : Xt(n.SCISSOR_TEST);
  }
  function It(k) {
    k === void 0 && (k = n.TEXTURE0 + J - 1), it !== k && (n.activeTexture(k), it = k);
  }
  function he(k, Lt, xt) {
    xt === void 0 && (it === null ? xt = n.TEXTURE0 + J - 1 : xt = it);
    let Gt = lt[xt];
    Gt === void 0 && (Gt = { type: void 0, texture: void 0 }, lt[xt] = Gt), (Gt.type !== k || Gt.texture !== Lt) && (it !== xt && (n.activeTexture(xt), it = xt), n.bindTexture(k, Lt || kt[k]), Gt.type = k, Gt.texture = Lt);
  }
  function F() {
    const k = lt[it];
    k !== void 0 && k.type !== void 0 && (n.bindTexture(k.type, null), k.type = void 0, k.texture = void 0);
  }
  function N() {
    try {
      n.compressedTexImage2D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function tt() {
    try {
      n.compressedTexImage3D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function rt() {
    try {
      n.texSubImage2D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function gt() {
    try {
      n.texSubImage3D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function ot() {
    try {
      n.compressedTexSubImage2D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Kt() {
    try {
      n.compressedTexSubImage3D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Dt() {
    try {
      n.texStorage2D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function qt() {
    try {
      n.texStorage3D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function jt() {
    try {
      n.texImage2D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function pt() {
    try {
      n.texImage3D(...arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function zt(k) {
    Qt.equals(k) === !1 && (n.scissor(k.x, k.y, k.z, k.w), Qt.copy(k));
  }
  function ee(k) {
    $.equals(k) === !1 && (n.viewport(k.x, k.y, k.z, k.w), $.copy(k));
  }
  function ne(k, Lt) {
    let xt = f.get(Lt);
    xt === void 0 && (xt = /* @__PURE__ */ new WeakMap(), f.set(Lt, xt));
    let Gt = xt.get(k);
    Gt === void 0 && (Gt = n.getUniformBlockIndex(Lt, k.name), xt.set(k, Gt));
  }
  function wt(k, Lt) {
    const Gt = f.get(Lt).get(k);
    c.get(Lt) !== Gt && (n.uniformBlockBinding(Lt, Gt, k.__bindingPointIndex), c.set(Lt, Gt));
  }
  function se() {
    n.disable(n.BLEND), n.disable(n.CULL_FACE), n.disable(n.DEPTH_TEST), n.disable(n.POLYGON_OFFSET_FILL), n.disable(n.SCISSOR_TEST), n.disable(n.STENCIL_TEST), n.disable(n.SAMPLE_ALPHA_TO_COVERAGE), n.blendEquation(n.FUNC_ADD), n.blendFunc(n.ONE, n.ZERO), n.blendFuncSeparate(n.ONE, n.ZERO, n.ONE, n.ZERO), n.blendColor(0, 0, 0, 0), n.colorMask(!0, !0, !0, !0), n.clearColor(0, 0, 0, 0), n.depthMask(!0), n.depthFunc(n.LESS), r.setReversed(!1), n.clearDepth(1), n.stencilMask(4294967295), n.stencilFunc(n.ALWAYS, 0, 4294967295), n.stencilOp(n.KEEP, n.KEEP, n.KEEP), n.clearStencil(0), n.cullFace(n.BACK), n.frontFace(n.CCW), n.polygonOffset(0, 0), n.activeTexture(n.TEXTURE0), n.bindFramebuffer(n.FRAMEBUFFER, null), n.bindFramebuffer(n.DRAW_FRAMEBUFFER, null), n.bindFramebuffer(n.READ_FRAMEBUFFER, null), n.useProgram(null), n.lineWidth(1), n.scissor(0, 0, n.canvas.width, n.canvas.height), n.viewport(0, 0, n.canvas.width, n.canvas.height), d = {}, it = null, lt = {}, p = {}, m = /* @__PURE__ */ new WeakMap(), g = [], y = null, x = !1, M = null, v = null, S = null, E = null, T = null, w = null, D = null, U = new Pt(0, 0, 0), O = 0, R = !1, C = null, B = null, Y = null, V = null, Q = null, Qt.set(0, 0, n.canvas.width, n.canvas.height), $.set(0, 0, n.canvas.width, n.canvas.height), s.reset(), r.reset(), l.reset();
  }
  return {
    buffers: {
      color: s,
      depth: r,
      stencil: l
    },
    enable: Ot,
    disable: Xt,
    bindFramebuffer: pe,
    drawBuffers: $t,
    useProgram: qe,
    setBlending: I,
    setMaterial: Ct,
    setFlipSided: yt,
    setCullFace: Et,
    setLineWidth: ct,
    setPolygonOffset: Ht,
    setScissorTest: _t,
    activeTexture: It,
    bindTexture: he,
    unbindTexture: F,
    compressedTexImage2D: N,
    compressedTexImage3D: tt,
    texImage2D: jt,
    texImage3D: pt,
    updateUBOMapping: ne,
    uniformBlockBinding: wt,
    texStorage2D: Dt,
    texStorage3D: qt,
    texSubImage2D: rt,
    texSubImage3D: gt,
    compressedTexSubImage2D: ot,
    compressedTexSubImage3D: Kt,
    scissor: zt,
    viewport: ee,
    reset: se
  };
}
function MY(n, t, e, i, a, s, r) {
  const l = t.has("WEBGL_multisampled_render_to_texture") ? t.get("WEBGL_multisampled_render_to_texture") : null, c = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), f = new ft(), d = /* @__PURE__ */ new WeakMap();
  let p;
  const m = /* @__PURE__ */ new WeakMap();
  let g = !1;
  try {
    g = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function y(F, N) {
    return g ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(F, N)
    ) : qp("canvas");
  }
  function x(F, N, tt) {
    let rt = 1;
    const gt = he(F);
    if ((gt.width > tt || gt.height > tt) && (rt = tt / Math.max(gt.width, gt.height)), rt < 1)
      if (typeof HTMLImageElement < "u" && F instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && F instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && F instanceof ImageBitmap || typeof VideoFrame < "u" && F instanceof VideoFrame) {
        const ot = Math.floor(rt * gt.width), Kt = Math.floor(rt * gt.height);
        p === void 0 && (p = y(ot, Kt));
        const Dt = N ? y(ot, Kt) : p;
        return Dt.width = ot, Dt.height = Kt, Dt.getContext("2d").drawImage(F, 0, 0, ot, Kt), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + gt.width + "x" + gt.height + ") to (" + ot + "x" + Kt + ")."), Dt;
      } else
        return "data" in F && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + gt.width + "x" + gt.height + ")."), F;
    return F;
  }
  function M(F) {
    return F.generateMipmaps;
  }
  function v(F) {
    n.generateMipmap(F);
  }
  function S(F) {
    return F.isWebGLCubeRenderTarget ? n.TEXTURE_CUBE_MAP : F.isWebGL3DRenderTarget ? n.TEXTURE_3D : F.isWebGLArrayRenderTarget || F.isCompressedArrayTexture ? n.TEXTURE_2D_ARRAY : n.TEXTURE_2D;
  }
  function E(F, N, tt, rt, gt = !1) {
    if (F !== null) {
      if (n[F] !== void 0) return n[F];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + F + "'");
    }
    let ot = N;
    if (N === n.RED && (tt === n.FLOAT && (ot = n.R32F), tt === n.HALF_FLOAT && (ot = n.R16F), tt === n.UNSIGNED_BYTE && (ot = n.R8)), N === n.RED_INTEGER && (tt === n.UNSIGNED_BYTE && (ot = n.R8UI), tt === n.UNSIGNED_SHORT && (ot = n.R16UI), tt === n.UNSIGNED_INT && (ot = n.R32UI), tt === n.BYTE && (ot = n.R8I), tt === n.SHORT && (ot = n.R16I), tt === n.INT && (ot = n.R32I)), N === n.RG && (tt === n.FLOAT && (ot = n.RG32F), tt === n.HALF_FLOAT && (ot = n.RG16F), tt === n.UNSIGNED_BYTE && (ot = n.RG8)), N === n.RG_INTEGER && (tt === n.UNSIGNED_BYTE && (ot = n.RG8UI), tt === n.UNSIGNED_SHORT && (ot = n.RG16UI), tt === n.UNSIGNED_INT && (ot = n.RG32UI), tt === n.BYTE && (ot = n.RG8I), tt === n.SHORT && (ot = n.RG16I), tt === n.INT && (ot = n.RG32I)), N === n.RGB_INTEGER && (tt === n.UNSIGNED_BYTE && (ot = n.RGB8UI), tt === n.UNSIGNED_SHORT && (ot = n.RGB16UI), tt === n.UNSIGNED_INT && (ot = n.RGB32UI), tt === n.BYTE && (ot = n.RGB8I), tt === n.SHORT && (ot = n.RGB16I), tt === n.INT && (ot = n.RGB32I)), N === n.RGBA_INTEGER && (tt === n.UNSIGNED_BYTE && (ot = n.RGBA8UI), tt === n.UNSIGNED_SHORT && (ot = n.RGBA16UI), tt === n.UNSIGNED_INT && (ot = n.RGBA32UI), tt === n.BYTE && (ot = n.RGBA8I), tt === n.SHORT && (ot = n.RGBA16I), tt === n.INT && (ot = n.RGBA32I)), N === n.RGB && tt === n.UNSIGNED_INT_5_9_9_9_REV && (ot = n.RGB9_E5), N === n.RGBA) {
      const Kt = gt ? Vp : Oe.getTransfer(rt);
      tt === n.FLOAT && (ot = n.RGBA32F), tt === n.HALF_FLOAT && (ot = n.RGBA16F), tt === n.UNSIGNED_BYTE && (ot = Kt === je ? n.SRGB8_ALPHA8 : n.RGBA8), tt === n.UNSIGNED_SHORT_4_4_4_4 && (ot = n.RGBA4), tt === n.UNSIGNED_SHORT_5_5_5_1 && (ot = n.RGB5_A1);
    }
    return (ot === n.R16F || ot === n.R32F || ot === n.RG16F || ot === n.RG32F || ot === n.RGBA16F || ot === n.RGBA32F) && t.get("EXT_color_buffer_float"), ot;
  }
  function T(F, N) {
    let tt;
    return F ? N === null || N === lo || N === ah ? tt = n.DEPTH24_STENCIL8 : N === fa ? tt = n.DEPTH32F_STENCIL8 : N === ih && (tt = n.DEPTH24_STENCIL8, console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")) : N === null || N === lo || N === ah ? tt = n.DEPTH_COMPONENT24 : N === fa ? tt = n.DEPTH_COMPONENT32F : N === ih && (tt = n.DEPTH_COMPONENT16), tt;
  }
  function w(F, N) {
    return M(F) === !0 || F.isFramebufferTexture && F.minFilter !== xi && F.minFilter !== Qn ? Math.log2(Math.max(N.width, N.height)) + 1 : F.mipmaps !== void 0 && F.mipmaps.length > 0 ? F.mipmaps.length : F.isCompressedTexture && Array.isArray(F.image) ? N.mipmaps.length : 1;
  }
  function D(F) {
    const N = F.target;
    N.removeEventListener("dispose", D), O(N), N.isVideoTexture && d.delete(N);
  }
  function U(F) {
    const N = F.target;
    N.removeEventListener("dispose", U), C(N);
  }
  function O(F) {
    const N = i.get(F);
    if (N.__webglInit === void 0) return;
    const tt = F.source, rt = m.get(tt);
    if (rt) {
      const gt = rt[N.__cacheKey];
      gt.usedTimes--, gt.usedTimes === 0 && R(F), Object.keys(rt).length === 0 && m.delete(tt);
    }
    i.remove(F);
  }
  function R(F) {
    const N = i.get(F);
    n.deleteTexture(N.__webglTexture);
    const tt = F.source, rt = m.get(tt);
    delete rt[N.__cacheKey], r.memory.textures--;
  }
  function C(F) {
    const N = i.get(F);
    if (F.depthTexture && (F.depthTexture.dispose(), i.remove(F.depthTexture)), F.isWebGLCubeRenderTarget)
      for (let rt = 0; rt < 6; rt++) {
        if (Array.isArray(N.__webglFramebuffer[rt]))
          for (let gt = 0; gt < N.__webglFramebuffer[rt].length; gt++) n.deleteFramebuffer(N.__webglFramebuffer[rt][gt]);
        else
          n.deleteFramebuffer(N.__webglFramebuffer[rt]);
        N.__webglDepthbuffer && n.deleteRenderbuffer(N.__webglDepthbuffer[rt]);
      }
    else {
      if (Array.isArray(N.__webglFramebuffer))
        for (let rt = 0; rt < N.__webglFramebuffer.length; rt++) n.deleteFramebuffer(N.__webglFramebuffer[rt]);
      else
        n.deleteFramebuffer(N.__webglFramebuffer);
      if (N.__webglDepthbuffer && n.deleteRenderbuffer(N.__webglDepthbuffer), N.__webglMultisampledFramebuffer && n.deleteFramebuffer(N.__webglMultisampledFramebuffer), N.__webglColorRenderbuffer)
        for (let rt = 0; rt < N.__webglColorRenderbuffer.length; rt++)
          N.__webglColorRenderbuffer[rt] && n.deleteRenderbuffer(N.__webglColorRenderbuffer[rt]);
      N.__webglDepthRenderbuffer && n.deleteRenderbuffer(N.__webglDepthRenderbuffer);
    }
    const tt = F.textures;
    for (let rt = 0, gt = tt.length; rt < gt; rt++) {
      const ot = i.get(tt[rt]);
      ot.__webglTexture && (n.deleteTexture(ot.__webglTexture), r.memory.textures--), i.remove(tt[rt]);
    }
    i.remove(F);
  }
  let B = 0;
  function Y() {
    B = 0;
  }
  function V() {
    const F = B;
    return F >= a.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + F + " texture units while this GPU supports only " + a.maxTextures), B += 1, F;
  }
  function Q(F) {
    const N = [];
    return N.push(F.wrapS), N.push(F.wrapT), N.push(F.wrapR || 0), N.push(F.magFilter), N.push(F.minFilter), N.push(F.anisotropy), N.push(F.internalFormat), N.push(F.format), N.push(F.type), N.push(F.generateMipmaps), N.push(F.premultiplyAlpha), N.push(F.flipY), N.push(F.unpackAlignment), N.push(F.colorSpace), N.join();
  }
  function J(F, N) {
    const tt = i.get(F);
    if (F.isVideoTexture && _t(F), F.isRenderTargetTexture === !1 && F.version > 0 && tt.__version !== F.version) {
      const rt = F.image;
      if (rt === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (rt.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        kt(tt, F, N);
        return;
      }
    }
    e.bindTexture(n.TEXTURE_2D, tt.__webglTexture, n.TEXTURE0 + N);
  }
  function P(F, N) {
    const tt = i.get(F);
    if (F.version > 0 && tt.__version !== F.version) {
      kt(tt, F, N);
      return;
    }
    e.bindTexture(n.TEXTURE_2D_ARRAY, tt.__webglTexture, n.TEXTURE0 + N);
  }
  function q(F, N) {
    const tt = i.get(F);
    if (F.version > 0 && tt.__version !== F.version) {
      kt(tt, F, N);
      return;
    }
    e.bindTexture(n.TEXTURE_3D, tt.__webglTexture, n.TEXTURE0 + N);
  }
  function G(F, N) {
    const tt = i.get(F);
    if (F.version > 0 && tt.__version !== F.version) {
      Ot(tt, F, N);
      return;
    }
    e.bindTexture(n.TEXTURE_CUBE_MAP, tt.__webglTexture, n.TEXTURE0 + N);
  }
  const it = {
    [Pp]: n.REPEAT,
    [vs]: n.CLAMP_TO_EDGE,
    [Ip]: n.MIRRORED_REPEAT
  }, lt = {
    [xi]: n.NEAREST,
    [GE]: n.NEAREST_MIPMAP_NEAREST,
    [Mf]: n.NEAREST_MIPMAP_LINEAR,
    [Qn]: n.LINEAR,
    [ip]: n.LINEAR_MIPMAP_NEAREST,
    [ar]: n.LINEAR_MIPMAP_LINEAR
  }, mt = {
    [GL]: n.NEVER,
    [ZL]: n.ALWAYS,
    [XL]: n.LESS,
    [KE]: n.LEQUAL,
    [qL]: n.EQUAL,
    [WL]: n.GEQUAL,
    [YL]: n.GREATER,
    [kL]: n.NOTEQUAL
  };
  function Rt(F, N) {
    if (N.type === fa && t.has("OES_texture_float_linear") === !1 && (N.magFilter === Qn || N.magFilter === ip || N.magFilter === Mf || N.magFilter === ar || N.minFilter === Qn || N.minFilter === ip || N.minFilter === Mf || N.minFilter === ar) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), n.texParameteri(F, n.TEXTURE_WRAP_S, it[N.wrapS]), n.texParameteri(F, n.TEXTURE_WRAP_T, it[N.wrapT]), (F === n.TEXTURE_3D || F === n.TEXTURE_2D_ARRAY) && n.texParameteri(F, n.TEXTURE_WRAP_R, it[N.wrapR]), n.texParameteri(F, n.TEXTURE_MAG_FILTER, lt[N.magFilter]), n.texParameteri(F, n.TEXTURE_MIN_FILTER, lt[N.minFilter]), N.compareFunction && (n.texParameteri(F, n.TEXTURE_COMPARE_MODE, n.COMPARE_REF_TO_TEXTURE), n.texParameteri(F, n.TEXTURE_COMPARE_FUNC, mt[N.compareFunction])), t.has("EXT_texture_filter_anisotropic") === !0) {
      if (N.magFilter === xi || N.minFilter !== Mf && N.minFilter !== ar || N.type === fa && t.has("OES_texture_float_linear") === !1) return;
      if (N.anisotropy > 1 || i.get(N).__currentAnisotropy) {
        const tt = t.get("EXT_texture_filter_anisotropic");
        n.texParameterf(F, tt.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(N.anisotropy, a.getMaxAnisotropy())), i.get(N).__currentAnisotropy = N.anisotropy;
      }
    }
  }
  function Qt(F, N) {
    let tt = !1;
    F.__webglInit === void 0 && (F.__webglInit = !0, N.addEventListener("dispose", D));
    const rt = N.source;
    let gt = m.get(rt);
    gt === void 0 && (gt = {}, m.set(rt, gt));
    const ot = Q(N);
    if (ot !== F.__cacheKey) {
      gt[ot] === void 0 && (gt[ot] = {
        texture: n.createTexture(),
        usedTimes: 0
      }, r.memory.textures++, tt = !0), gt[ot].usedTimes++;
      const Kt = gt[F.__cacheKey];
      Kt !== void 0 && (gt[F.__cacheKey].usedTimes--, Kt.usedTimes === 0 && R(N)), F.__cacheKey = ot, F.__webglTexture = gt[ot].texture;
    }
    return tt;
  }
  function $(F, N, tt) {
    return Math.floor(Math.floor(F / tt) / N);
  }
  function ht(F, N, tt, rt) {
    const ot = F.updateRanges;
    if (ot.length === 0)
      e.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, N.width, N.height, tt, rt, N.data);
    else {
      ot.sort((pt, zt) => pt.start - zt.start);
      let Kt = 0;
      for (let pt = 1; pt < ot.length; pt++) {
        const zt = ot[Kt], ee = ot[pt], ne = zt.start + zt.count, wt = $(ee.start, N.width, 4), se = $(zt.start, N.width, 4);
        ee.start <= ne + 1 && wt === se && $(ee.start + ee.count - 1, N.width, 4) === wt ? zt.count = Math.max(
          zt.count,
          ee.start + ee.count - zt.start
        ) : (++Kt, ot[Kt] = ee);
      }
      ot.length = Kt + 1;
      const Dt = n.getParameter(n.UNPACK_ROW_LENGTH), qt = n.getParameter(n.UNPACK_SKIP_PIXELS), jt = n.getParameter(n.UNPACK_SKIP_ROWS);
      n.pixelStorei(n.UNPACK_ROW_LENGTH, N.width);
      for (let pt = 0, zt = ot.length; pt < zt; pt++) {
        const ee = ot[pt], ne = Math.floor(ee.start / 4), wt = Math.ceil(ee.count / 4), se = ne % N.width, k = Math.floor(ne / N.width), Lt = wt, xt = 1;
        n.pixelStorei(n.UNPACK_SKIP_PIXELS, se), n.pixelStorei(n.UNPACK_SKIP_ROWS, k), e.texSubImage2D(n.TEXTURE_2D, 0, se, k, Lt, xt, tt, rt, N.data);
      }
      F.clearUpdateRanges(), n.pixelStorei(n.UNPACK_ROW_LENGTH, Dt), n.pixelStorei(n.UNPACK_SKIP_PIXELS, qt), n.pixelStorei(n.UNPACK_SKIP_ROWS, jt);
    }
  }
  function kt(F, N, tt) {
    let rt = n.TEXTURE_2D;
    (N.isDataArrayTexture || N.isCompressedArrayTexture) && (rt = n.TEXTURE_2D_ARRAY), N.isData3DTexture && (rt = n.TEXTURE_3D);
    const gt = Qt(F, N), ot = N.source;
    e.bindTexture(rt, F.__webglTexture, n.TEXTURE0 + tt);
    const Kt = i.get(ot);
    if (ot.version !== Kt.__version || gt === !0) {
      e.activeTexture(n.TEXTURE0 + tt);
      const Dt = Oe.getPrimaries(Oe.workingColorSpace), qt = N.colorSpace === Gr ? null : Oe.getPrimaries(N.colorSpace), jt = N.colorSpace === Gr || Dt === qt ? n.NONE : n.BROWSER_DEFAULT_WEBGL;
      n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, N.flipY), n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, N.premultiplyAlpha), n.pixelStorei(n.UNPACK_ALIGNMENT, N.unpackAlignment), n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL, jt);
      let pt = x(N.image, !1, a.maxTextureSize);
      pt = It(N, pt);
      const zt = s.convert(N.format, N.colorSpace), ee = s.convert(N.type);
      let ne = E(N.internalFormat, zt, ee, N.colorSpace, N.isVideoTexture);
      Rt(rt, N);
      let wt;
      const se = N.mipmaps, k = N.isVideoTexture !== !0, Lt = Kt.__version === void 0 || gt === !0, xt = ot.dataReady, Gt = w(N, pt);
      if (N.isDepthTexture)
        ne = T(N.format === rh, N.type), Lt && (k ? e.texStorage2D(n.TEXTURE_2D, 1, ne, pt.width, pt.height) : e.texImage2D(n.TEXTURE_2D, 0, ne, pt.width, pt.height, 0, zt, ee, null));
      else if (N.isDataTexture)
        if (se.length > 0) {
          k && Lt && e.texStorage2D(n.TEXTURE_2D, Gt, ne, se[0].width, se[0].height);
          for (let Mt = 0, dt = se.length; Mt < dt; Mt++)
            wt = se[Mt], k ? xt && e.texSubImage2D(n.TEXTURE_2D, Mt, 0, 0, wt.width, wt.height, zt, ee, wt.data) : e.texImage2D(n.TEXTURE_2D, Mt, ne, wt.width, wt.height, 0, zt, ee, wt.data);
          N.generateMipmaps = !1;
        } else
          k ? (Lt && e.texStorage2D(n.TEXTURE_2D, Gt, ne, pt.width, pt.height), xt && ht(N, pt, zt, ee)) : e.texImage2D(n.TEXTURE_2D, 0, ne, pt.width, pt.height, 0, zt, ee, pt.data);
      else if (N.isCompressedTexture)
        if (N.isCompressedArrayTexture) {
          k && Lt && e.texStorage3D(n.TEXTURE_2D_ARRAY, Gt, ne, se[0].width, se[0].height, pt.depth);
          for (let Mt = 0, dt = se.length; Mt < dt; Mt++)
            if (wt = se[Mt], N.format !== zi)
              if (zt !== null)
                if (k) {
                  if (xt)
                    if (N.layerUpdates.size > 0) {
                      const Wt = sb(wt.width, wt.height, N.format, N.type);
                      for (const le of N.layerUpdates) {
                        const Ye = wt.data.subarray(
                          le * Wt / wt.data.BYTES_PER_ELEMENT,
                          (le + 1) * Wt / wt.data.BYTES_PER_ELEMENT
                        );
                        e.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY, Mt, 0, 0, le, wt.width, wt.height, 1, zt, Ye);
                      }
                      N.clearLayerUpdates();
                    } else
                      e.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY, Mt, 0, 0, 0, wt.width, wt.height, pt.depth, zt, wt.data);
                } else
                  e.compressedTexImage3D(n.TEXTURE_2D_ARRAY, Mt, ne, wt.width, wt.height, pt.depth, 0, wt.data, 0, 0);
              else
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            else
              k ? xt && e.texSubImage3D(n.TEXTURE_2D_ARRAY, Mt, 0, 0, 0, wt.width, wt.height, pt.depth, zt, ee, wt.data) : e.texImage3D(n.TEXTURE_2D_ARRAY, Mt, ne, wt.width, wt.height, pt.depth, 0, zt, ee, wt.data);
        } else {
          k && Lt && e.texStorage2D(n.TEXTURE_2D, Gt, ne, se[0].width, se[0].height);
          for (let Mt = 0, dt = se.length; Mt < dt; Mt++)
            wt = se[Mt], N.format !== zi ? zt !== null ? k ? xt && e.compressedTexSubImage2D(n.TEXTURE_2D, Mt, 0, 0, wt.width, wt.height, zt, wt.data) : e.compressedTexImage2D(n.TEXTURE_2D, Mt, ne, wt.width, wt.height, 0, wt.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : k ? xt && e.texSubImage2D(n.TEXTURE_2D, Mt, 0, 0, wt.width, wt.height, zt, ee, wt.data) : e.texImage2D(n.TEXTURE_2D, Mt, ne, wt.width, wt.height, 0, zt, ee, wt.data);
        }
      else if (N.isDataArrayTexture)
        if (k) {
          if (Lt && e.texStorage3D(n.TEXTURE_2D_ARRAY, Gt, ne, pt.width, pt.height, pt.depth), xt)
            if (N.layerUpdates.size > 0) {
              const Mt = sb(pt.width, pt.height, N.format, N.type);
              for (const dt of N.layerUpdates) {
                const Wt = pt.data.subarray(
                  dt * Mt / pt.data.BYTES_PER_ELEMENT,
                  (dt + 1) * Mt / pt.data.BYTES_PER_ELEMENT
                );
                e.texSubImage3D(n.TEXTURE_2D_ARRAY, 0, 0, 0, dt, pt.width, pt.height, 1, zt, ee, Wt);
              }
              N.clearLayerUpdates();
            } else
              e.texSubImage3D(n.TEXTURE_2D_ARRAY, 0, 0, 0, 0, pt.width, pt.height, pt.depth, zt, ee, pt.data);
        } else
          e.texImage3D(n.TEXTURE_2D_ARRAY, 0, ne, pt.width, pt.height, pt.depth, 0, zt, ee, pt.data);
      else if (N.isData3DTexture)
        k ? (Lt && e.texStorage3D(n.TEXTURE_3D, Gt, ne, pt.width, pt.height, pt.depth), xt && e.texSubImage3D(n.TEXTURE_3D, 0, 0, 0, 0, pt.width, pt.height, pt.depth, zt, ee, pt.data)) : e.texImage3D(n.TEXTURE_3D, 0, ne, pt.width, pt.height, pt.depth, 0, zt, ee, pt.data);
      else if (N.isFramebufferTexture) {
        if (Lt)
          if (k)
            e.texStorage2D(n.TEXTURE_2D, Gt, ne, pt.width, pt.height);
          else {
            let Mt = pt.width, dt = pt.height;
            for (let Wt = 0; Wt < Gt; Wt++)
              e.texImage2D(n.TEXTURE_2D, Wt, ne, Mt, dt, 0, zt, ee, null), Mt >>= 1, dt >>= 1;
          }
      } else if (se.length > 0) {
        if (k && Lt) {
          const Mt = he(se[0]);
          e.texStorage2D(n.TEXTURE_2D, Gt, ne, Mt.width, Mt.height);
        }
        for (let Mt = 0, dt = se.length; Mt < dt; Mt++)
          wt = se[Mt], k ? xt && e.texSubImage2D(n.TEXTURE_2D, Mt, 0, 0, zt, ee, wt) : e.texImage2D(n.TEXTURE_2D, Mt, ne, zt, ee, wt);
        N.generateMipmaps = !1;
      } else if (k) {
        if (Lt) {
          const Mt = he(pt);
          e.texStorage2D(n.TEXTURE_2D, Gt, ne, Mt.width, Mt.height);
        }
        xt && e.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, zt, ee, pt);
      } else
        e.texImage2D(n.TEXTURE_2D, 0, ne, zt, ee, pt);
      M(N) && v(rt), Kt.__version = ot.version, N.onUpdate && N.onUpdate(N);
    }
    F.__version = N.version;
  }
  function Ot(F, N, tt) {
    if (N.image.length !== 6) return;
    const rt = Qt(F, N), gt = N.source;
    e.bindTexture(n.TEXTURE_CUBE_MAP, F.__webglTexture, n.TEXTURE0 + tt);
    const ot = i.get(gt);
    if (gt.version !== ot.__version || rt === !0) {
      e.activeTexture(n.TEXTURE0 + tt);
      const Kt = Oe.getPrimaries(Oe.workingColorSpace), Dt = N.colorSpace === Gr ? null : Oe.getPrimaries(N.colorSpace), qt = N.colorSpace === Gr || Kt === Dt ? n.NONE : n.BROWSER_DEFAULT_WEBGL;
      n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, N.flipY), n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, N.premultiplyAlpha), n.pixelStorei(n.UNPACK_ALIGNMENT, N.unpackAlignment), n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL, qt);
      const jt = N.isCompressedTexture || N.image[0].isCompressedTexture, pt = N.image[0] && N.image[0].isDataTexture, zt = [];
      for (let dt = 0; dt < 6; dt++)
        !jt && !pt ? zt[dt] = x(N.image[dt], !0, a.maxCubemapSize) : zt[dt] = pt ? N.image[dt].image : N.image[dt], zt[dt] = It(N, zt[dt]);
      const ee = zt[0], ne = s.convert(N.format, N.colorSpace), wt = s.convert(N.type), se = E(N.internalFormat, ne, wt, N.colorSpace), k = N.isVideoTexture !== !0, Lt = ot.__version === void 0 || rt === !0, xt = gt.dataReady;
      let Gt = w(N, ee);
      Rt(n.TEXTURE_CUBE_MAP, N);
      let Mt;
      if (jt) {
        k && Lt && e.texStorage2D(n.TEXTURE_CUBE_MAP, Gt, se, ee.width, ee.height);
        for (let dt = 0; dt < 6; dt++) {
          Mt = zt[dt].mipmaps;
          for (let Wt = 0; Wt < Mt.length; Wt++) {
            const le = Mt[Wt];
            N.format !== zi ? ne !== null ? k ? xt && e.compressedTexSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, Wt, 0, 0, le.width, le.height, ne, le.data) : e.compressedTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, Wt, se, le.width, le.height, 0, le.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : k ? xt && e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, Wt, 0, 0, le.width, le.height, ne, wt, le.data) : e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, Wt, se, le.width, le.height, 0, ne, wt, le.data);
          }
        }
      } else {
        if (Mt = N.mipmaps, k && Lt) {
          Mt.length > 0 && Gt++;
          const dt = he(zt[0]);
          e.texStorage2D(n.TEXTURE_CUBE_MAP, Gt, se, dt.width, dt.height);
        }
        for (let dt = 0; dt < 6; dt++)
          if (pt) {
            k ? xt && e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, 0, 0, 0, zt[dt].width, zt[dt].height, ne, wt, zt[dt].data) : e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, 0, se, zt[dt].width, zt[dt].height, 0, ne, wt, zt[dt].data);
            for (let Wt = 0; Wt < Mt.length; Wt++) {
              const Ye = Mt[Wt].image[dt].image;
              k ? xt && e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, Wt + 1, 0, 0, Ye.width, Ye.height, ne, wt, Ye.data) : e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, Wt + 1, se, Ye.width, Ye.height, 0, ne, wt, Ye.data);
            }
          } else {
            k ? xt && e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, 0, 0, 0, ne, wt, zt[dt]) : e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, 0, se, ne, wt, zt[dt]);
            for (let Wt = 0; Wt < Mt.length; Wt++) {
              const le = Mt[Wt];
              k ? xt && e.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, Wt + 1, 0, 0, ne, wt, le.image[dt]) : e.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + dt, Wt + 1, se, ne, wt, le.image[dt]);
            }
          }
      }
      M(N) && v(n.TEXTURE_CUBE_MAP), ot.__version = gt.version, N.onUpdate && N.onUpdate(N);
    }
    F.__version = N.version;
  }
  function Xt(F, N, tt, rt, gt, ot) {
    const Kt = s.convert(tt.format, tt.colorSpace), Dt = s.convert(tt.type), qt = E(tt.internalFormat, Kt, Dt, tt.colorSpace), jt = i.get(N), pt = i.get(tt);
    if (pt.__renderTarget = N, !jt.__hasExternalTextures) {
      const zt = Math.max(1, N.width >> ot), ee = Math.max(1, N.height >> ot);
      gt === n.TEXTURE_3D || gt === n.TEXTURE_2D_ARRAY ? e.texImage3D(gt, ot, qt, zt, ee, N.depth, 0, Kt, Dt, null) : e.texImage2D(gt, ot, qt, zt, ee, 0, Kt, Dt, null);
    }
    e.bindFramebuffer(n.FRAMEBUFFER, F), Ht(N) ? l.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, rt, gt, pt.__webglTexture, 0, ct(N)) : (gt === n.TEXTURE_2D || gt >= n.TEXTURE_CUBE_MAP_POSITIVE_X && gt <= n.TEXTURE_CUBE_MAP_NEGATIVE_Z) && n.framebufferTexture2D(n.FRAMEBUFFER, rt, gt, pt.__webglTexture, ot), e.bindFramebuffer(n.FRAMEBUFFER, null);
  }
  function pe(F, N, tt) {
    if (n.bindRenderbuffer(n.RENDERBUFFER, F), N.depthBuffer) {
      const rt = N.depthTexture, gt = rt && rt.isDepthTexture ? rt.type : null, ot = T(N.stencilBuffer, gt), Kt = N.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, Dt = ct(N);
      Ht(N) ? l.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, Dt, ot, N.width, N.height) : tt ? n.renderbufferStorageMultisample(n.RENDERBUFFER, Dt, ot, N.width, N.height) : n.renderbufferStorage(n.RENDERBUFFER, ot, N.width, N.height), n.framebufferRenderbuffer(n.FRAMEBUFFER, Kt, n.RENDERBUFFER, F);
    } else {
      const rt = N.textures;
      for (let gt = 0; gt < rt.length; gt++) {
        const ot = rt[gt], Kt = s.convert(ot.format, ot.colorSpace), Dt = s.convert(ot.type), qt = E(ot.internalFormat, Kt, Dt, ot.colorSpace), jt = ct(N);
        tt && Ht(N) === !1 ? n.renderbufferStorageMultisample(n.RENDERBUFFER, jt, qt, N.width, N.height) : Ht(N) ? l.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, jt, qt, N.width, N.height) : n.renderbufferStorage(n.RENDERBUFFER, qt, N.width, N.height);
      }
    }
    n.bindRenderbuffer(n.RENDERBUFFER, null);
  }
  function $t(F, N) {
    if (N && N.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
    if (e.bindFramebuffer(n.FRAMEBUFFER, F), !(N.depthTexture && N.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    const rt = i.get(N.depthTexture);
    rt.__renderTarget = N, (!rt.__webglTexture || N.depthTexture.image.width !== N.width || N.depthTexture.image.height !== N.height) && (N.depthTexture.image.width = N.width, N.depthTexture.image.height = N.height, N.depthTexture.needsUpdate = !0), J(N.depthTexture, 0);
    const gt = rt.__webglTexture, ot = ct(N);
    if (N.depthTexture.format === sh)
      Ht(N) ? l.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.TEXTURE_2D, gt, 0, ot) : n.framebufferTexture2D(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.TEXTURE_2D, gt, 0);
    else if (N.depthTexture.format === rh)
      Ht(N) ? l.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.TEXTURE_2D, gt, 0, ot) : n.framebufferTexture2D(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.TEXTURE_2D, gt, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function qe(F) {
    const N = i.get(F), tt = F.isWebGLCubeRenderTarget === !0;
    if (N.__boundDepthTexture !== F.depthTexture) {
      const rt = F.depthTexture;
      if (N.__depthDisposeCallback && N.__depthDisposeCallback(), rt) {
        const gt = () => {
          delete N.__boundDepthTexture, delete N.__depthDisposeCallback, rt.removeEventListener("dispose", gt);
        };
        rt.addEventListener("dispose", gt), N.__depthDisposeCallback = gt;
      }
      N.__boundDepthTexture = rt;
    }
    if (F.depthTexture && !N.__autoAllocateDepthBuffer) {
      if (tt) throw new Error("target.depthTexture not supported in Cube render targets");
      const rt = F.texture.mipmaps;
      rt && rt.length > 0 ? $t(N.__webglFramebuffer[0], F) : $t(N.__webglFramebuffer, F);
    } else if (tt) {
      N.__webglDepthbuffer = [];
      for (let rt = 0; rt < 6; rt++)
        if (e.bindFramebuffer(n.FRAMEBUFFER, N.__webglFramebuffer[rt]), N.__webglDepthbuffer[rt] === void 0)
          N.__webglDepthbuffer[rt] = n.createRenderbuffer(), pe(N.__webglDepthbuffer[rt], F, !1);
        else {
          const gt = F.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, ot = N.__webglDepthbuffer[rt];
          n.bindRenderbuffer(n.RENDERBUFFER, ot), n.framebufferRenderbuffer(n.FRAMEBUFFER, gt, n.RENDERBUFFER, ot);
        }
    } else {
      const rt = F.texture.mipmaps;
      if (rt && rt.length > 0 ? e.bindFramebuffer(n.FRAMEBUFFER, N.__webglFramebuffer[0]) : e.bindFramebuffer(n.FRAMEBUFFER, N.__webglFramebuffer), N.__webglDepthbuffer === void 0)
        N.__webglDepthbuffer = n.createRenderbuffer(), pe(N.__webglDepthbuffer, F, !1);
      else {
        const gt = F.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, ot = N.__webglDepthbuffer;
        n.bindRenderbuffer(n.RENDERBUFFER, ot), n.framebufferRenderbuffer(n.FRAMEBUFFER, gt, n.RENDERBUFFER, ot);
      }
    }
    e.bindFramebuffer(n.FRAMEBUFFER, null);
  }
  function Me(F, N, tt) {
    const rt = i.get(F);
    N !== void 0 && Xt(rt.__webglFramebuffer, F, F.texture, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, 0), tt !== void 0 && qe(F);
  }
  function ce(F) {
    const N = F.texture, tt = i.get(F), rt = i.get(N);
    F.addEventListener("dispose", U);
    const gt = F.textures, ot = F.isWebGLCubeRenderTarget === !0, Kt = gt.length > 1;
    if (Kt || (rt.__webglTexture === void 0 && (rt.__webglTexture = n.createTexture()), rt.__version = N.version, r.memory.textures++), ot) {
      tt.__webglFramebuffer = [];
      for (let Dt = 0; Dt < 6; Dt++)
        if (N.mipmaps && N.mipmaps.length > 0) {
          tt.__webglFramebuffer[Dt] = [];
          for (let qt = 0; qt < N.mipmaps.length; qt++)
            tt.__webglFramebuffer[Dt][qt] = n.createFramebuffer();
        } else
          tt.__webglFramebuffer[Dt] = n.createFramebuffer();
    } else {
      if (N.mipmaps && N.mipmaps.length > 0) {
        tt.__webglFramebuffer = [];
        for (let Dt = 0; Dt < N.mipmaps.length; Dt++)
          tt.__webglFramebuffer[Dt] = n.createFramebuffer();
      } else
        tt.__webglFramebuffer = n.createFramebuffer();
      if (Kt)
        for (let Dt = 0, qt = gt.length; Dt < qt; Dt++) {
          const jt = i.get(gt[Dt]);
          jt.__webglTexture === void 0 && (jt.__webglTexture = n.createTexture(), r.memory.textures++);
        }
      if (F.samples > 0 && Ht(F) === !1) {
        tt.__webglMultisampledFramebuffer = n.createFramebuffer(), tt.__webglColorRenderbuffer = [], e.bindFramebuffer(n.FRAMEBUFFER, tt.__webglMultisampledFramebuffer);
        for (let Dt = 0; Dt < gt.length; Dt++) {
          const qt = gt[Dt];
          tt.__webglColorRenderbuffer[Dt] = n.createRenderbuffer(), n.bindRenderbuffer(n.RENDERBUFFER, tt.__webglColorRenderbuffer[Dt]);
          const jt = s.convert(qt.format, qt.colorSpace), pt = s.convert(qt.type), zt = E(qt.internalFormat, jt, pt, qt.colorSpace, F.isXRRenderTarget === !0), ee = ct(F);
          n.renderbufferStorageMultisample(n.RENDERBUFFER, ee, zt, F.width, F.height), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + Dt, n.RENDERBUFFER, tt.__webglColorRenderbuffer[Dt]);
        }
        n.bindRenderbuffer(n.RENDERBUFFER, null), F.depthBuffer && (tt.__webglDepthRenderbuffer = n.createRenderbuffer(), pe(tt.__webglDepthRenderbuffer, F, !0)), e.bindFramebuffer(n.FRAMEBUFFER, null);
      }
    }
    if (ot) {
      e.bindTexture(n.TEXTURE_CUBE_MAP, rt.__webglTexture), Rt(n.TEXTURE_CUBE_MAP, N);
      for (let Dt = 0; Dt < 6; Dt++)
        if (N.mipmaps && N.mipmaps.length > 0)
          for (let qt = 0; qt < N.mipmaps.length; qt++)
            Xt(tt.__webglFramebuffer[Dt][qt], F, N, n.COLOR_ATTACHMENT0, n.TEXTURE_CUBE_MAP_POSITIVE_X + Dt, qt);
        else
          Xt(tt.__webglFramebuffer[Dt], F, N, n.COLOR_ATTACHMENT0, n.TEXTURE_CUBE_MAP_POSITIVE_X + Dt, 0);
      M(N) && v(n.TEXTURE_CUBE_MAP), e.unbindTexture();
    } else if (Kt) {
      for (let Dt = 0, qt = gt.length; Dt < qt; Dt++) {
        const jt = gt[Dt], pt = i.get(jt);
        e.bindTexture(n.TEXTURE_2D, pt.__webglTexture), Rt(n.TEXTURE_2D, jt), Xt(tt.__webglFramebuffer, F, jt, n.COLOR_ATTACHMENT0 + Dt, n.TEXTURE_2D, 0), M(jt) && v(n.TEXTURE_2D);
      }
      e.unbindTexture();
    } else {
      let Dt = n.TEXTURE_2D;
      if ((F.isWebGL3DRenderTarget || F.isWebGLArrayRenderTarget) && (Dt = F.isWebGL3DRenderTarget ? n.TEXTURE_3D : n.TEXTURE_2D_ARRAY), e.bindTexture(Dt, rt.__webglTexture), Rt(Dt, N), N.mipmaps && N.mipmaps.length > 0)
        for (let qt = 0; qt < N.mipmaps.length; qt++)
          Xt(tt.__webglFramebuffer[qt], F, N, n.COLOR_ATTACHMENT0, Dt, qt);
      else
        Xt(tt.__webglFramebuffer, F, N, n.COLOR_ATTACHMENT0, Dt, 0);
      M(N) && v(Dt), e.unbindTexture();
    }
    F.depthBuffer && qe(F);
  }
  function I(F) {
    const N = F.textures;
    for (let tt = 0, rt = N.length; tt < rt; tt++) {
      const gt = N[tt];
      if (M(gt)) {
        const ot = S(F), Kt = i.get(gt).__webglTexture;
        e.bindTexture(ot, Kt), v(ot), e.unbindTexture();
      }
    }
  }
  const Ct = [], yt = [];
  function Et(F) {
    if (F.samples > 0) {
      if (Ht(F) === !1) {
        const N = F.textures, tt = F.width, rt = F.height;
        let gt = n.COLOR_BUFFER_BIT;
        const ot = F.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, Kt = i.get(F), Dt = N.length > 1;
        if (Dt)
          for (let jt = 0; jt < N.length; jt++)
            e.bindFramebuffer(n.FRAMEBUFFER, Kt.__webglMultisampledFramebuffer), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + jt, n.RENDERBUFFER, null), e.bindFramebuffer(n.FRAMEBUFFER, Kt.__webglFramebuffer), n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0 + jt, n.TEXTURE_2D, null, 0);
        e.bindFramebuffer(n.READ_FRAMEBUFFER, Kt.__webglMultisampledFramebuffer);
        const qt = F.texture.mipmaps;
        qt && qt.length > 0 ? e.bindFramebuffer(n.DRAW_FRAMEBUFFER, Kt.__webglFramebuffer[0]) : e.bindFramebuffer(n.DRAW_FRAMEBUFFER, Kt.__webglFramebuffer);
        for (let jt = 0; jt < N.length; jt++) {
          if (F.resolveDepthBuffer && (F.depthBuffer && (gt |= n.DEPTH_BUFFER_BIT), F.stencilBuffer && F.resolveStencilBuffer && (gt |= n.STENCIL_BUFFER_BIT)), Dt) {
            n.framebufferRenderbuffer(n.READ_FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.RENDERBUFFER, Kt.__webglColorRenderbuffer[jt]);
            const pt = i.get(N[jt]).__webglTexture;
            n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, pt, 0);
          }
          n.blitFramebuffer(0, 0, tt, rt, 0, 0, tt, rt, gt, n.NEAREST), c === !0 && (Ct.length = 0, yt.length = 0, Ct.push(n.COLOR_ATTACHMENT0 + jt), F.depthBuffer && F.resolveDepthBuffer === !1 && (Ct.push(ot), yt.push(ot), n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER, yt)), n.invalidateFramebuffer(n.READ_FRAMEBUFFER, Ct));
        }
        if (e.bindFramebuffer(n.READ_FRAMEBUFFER, null), e.bindFramebuffer(n.DRAW_FRAMEBUFFER, null), Dt)
          for (let jt = 0; jt < N.length; jt++) {
            e.bindFramebuffer(n.FRAMEBUFFER, Kt.__webglMultisampledFramebuffer), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + jt, n.RENDERBUFFER, Kt.__webglColorRenderbuffer[jt]);
            const pt = i.get(N[jt]).__webglTexture;
            e.bindFramebuffer(n.FRAMEBUFFER, Kt.__webglFramebuffer), n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0 + jt, n.TEXTURE_2D, pt, 0);
          }
        e.bindFramebuffer(n.DRAW_FRAMEBUFFER, Kt.__webglMultisampledFramebuffer);
      } else if (F.depthBuffer && F.resolveDepthBuffer === !1 && c) {
        const N = F.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT;
        n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER, [N]);
      }
    }
  }
  function ct(F) {
    return Math.min(a.maxSamples, F.samples);
  }
  function Ht(F) {
    const N = i.get(F);
    return F.samples > 0 && t.has("WEBGL_multisampled_render_to_texture") === !0 && N.__useRenderToTexture !== !1;
  }
  function _t(F) {
    const N = r.render.frame;
    d.get(F) !== N && (d.set(F, N), F.update());
  }
  function It(F, N) {
    const tt = F.colorSpace, rt = F.format, gt = F.type;
    return F.isCompressedTexture === !0 || F.isVideoTexture === !0 || tt !== vl && tt !== Gr && (Oe.getTransfer(tt) === je ? (rt !== zi || gt !== Ss) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", tt)), N;
  }
  function he(F) {
    return typeof HTMLImageElement < "u" && F instanceof HTMLImageElement ? (f.width = F.naturalWidth || F.width, f.height = F.naturalHeight || F.height) : typeof VideoFrame < "u" && F instanceof VideoFrame ? (f.width = F.displayWidth, f.height = F.displayHeight) : (f.width = F.width, f.height = F.height), f;
  }
  this.allocateTextureUnit = V, this.resetTextureUnits = Y, this.setTexture2D = J, this.setTexture2DArray = P, this.setTexture3D = q, this.setTextureCube = G, this.rebindTextures = Me, this.setupRenderTarget = ce, this.updateRenderTargetMipmap = I, this.updateMultisampleRenderTarget = Et, this.setupDepthRenderbuffer = qe, this.setupFrameBufferTexture = Xt, this.useMultisampledRTT = Ht;
}
function r4(n, t) {
  function e(i, a = Gr) {
    let s;
    const r = Oe.getTransfer(a);
    if (i === Ss) return n.UNSIGNED_BYTE;
    if (i === Y_) return n.UNSIGNED_SHORT_4_4_4_4;
    if (i === k_) return n.UNSIGNED_SHORT_5_5_5_1;
    if (i === YE) return n.UNSIGNED_INT_5_9_9_9_REV;
    if (i === XE) return n.BYTE;
    if (i === qE) return n.SHORT;
    if (i === ih) return n.UNSIGNED_SHORT;
    if (i === q_) return n.INT;
    if (i === lo) return n.UNSIGNED_INT;
    if (i === fa) return n.FLOAT;
    if (i === Mh) return n.HALF_FLOAT;
    if (i === kE) return n.ALPHA;
    if (i === WE) return n.RGB;
    if (i === zi) return n.RGBA;
    if (i === sh) return n.DEPTH_COMPONENT;
    if (i === rh) return n.DEPTH_STENCIL;
    if (i === W_) return n.RED;
    if (i === _m) return n.RED_INTEGER;
    if (i === ZE) return n.RG;
    if (i === Z_) return n.RG_INTEGER;
    if (i === j_) return n.RGBA_INTEGER;
    if (i === ap || i === sp || i === rp || i === op)
      if (r === je)
        if (s = t.get("WEBGL_compressed_texture_s3tc_srgb"), s !== null) {
          if (i === ap) return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (i === sp) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (i === rp) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (i === op) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (s = t.get("WEBGL_compressed_texture_s3tc"), s !== null) {
        if (i === ap) return s.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (i === sp) return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (i === rp) return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (i === op) return s.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (i === Iv || i === Hv || i === Fv || i === Vv)
      if (s = t.get("WEBGL_compressed_texture_pvrtc"), s !== null) {
        if (i === Iv) return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (i === Hv) return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (i === Fv) return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (i === Vv) return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (i === Gv || i === Xv || i === qv)
      if (s = t.get("WEBGL_compressed_texture_etc"), s !== null) {
        if (i === Gv || i === Xv) return r === je ? s.COMPRESSED_SRGB8_ETC2 : s.COMPRESSED_RGB8_ETC2;
        if (i === qv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : s.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (i === Yv || i === kv || i === Wv || i === Zv || i === jv || i === Qv || i === Kv || i === Jv || i === $v || i === t_ || i === e_ || i === n_ || i === i_ || i === a_)
      if (s = t.get("WEBGL_compressed_texture_astc"), s !== null) {
        if (i === Yv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : s.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (i === kv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : s.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (i === Wv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : s.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (i === Zv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : s.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (i === jv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : s.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (i === Qv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : s.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (i === Kv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : s.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (i === Jv) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : s.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (i === $v) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : s.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (i === t_) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : s.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (i === e_) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : s.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (i === n_) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : s.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (i === i_) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : s.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (i === a_) return r === je ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : s.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (i === lp || i === s_ || i === r_)
      if (s = t.get("EXT_texture_compression_bptc"), s !== null) {
        if (i === lp) return r === je ? s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : s.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (i === s_) return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (i === r_) return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (i === jE || i === o_ || i === l_ || i === u_)
      if (s = t.get("EXT_texture_compression_rgtc"), s !== null) {
        if (i === lp) return s.COMPRESSED_RED_RGTC1_EXT;
        if (i === o_) return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (i === l_) return s.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (i === u_) return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return i === ah ? n.UNSIGNED_INT_24_8 : n[i] !== void 0 ? n[i] : null;
  }
  return { convert: e };
}
const bY = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, EY = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class TY {
  /**
   * Constructs a new depth sensing module.
   */
  constructor() {
    this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
  }
  /**
   * Inits the depth sensing module
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {XRWebGLDepthInformation} depthData - The XR depth data.
   * @param {XRRenderState} renderState - The XR render state.
   */
  init(t, e, i) {
    if (this.texture === null) {
      const a = new Sn(), s = t.properties.get(a);
      s.__webglTexture = e.texture, (e.depthNear !== i.depthNear || e.depthFar !== i.depthFar) && (this.depthNear = e.depthNear, this.depthFar = e.depthFar), this.texture = a;
    }
  }
  /**
   * Returns a plane mesh that visualizes the depth texture.
   *
   * @param {ArrayCamera} cameraXR - The XR camera.
   * @return {?Mesh} The plane mesh.
   */
  getMesh(t) {
    if (this.texture !== null && this.mesh === null) {
      const e = t.cameras[0].viewport, i = new Ms({
        vertexShader: bY,
        fragmentShader: EY,
        uniforms: {
          depthColor: { value: this.texture },
          depthWidth: { value: e.z },
          depthHeight: { value: e.w }
        }
      });
      this.mesh = new Yn(new Th(20, 20), i);
    }
    return this.mesh;
  }
  /**
   * Resets the module
   */
  reset() {
    this.texture = null, this.mesh = null;
  }
  /**
   * Returns a texture representing the depth of the user's environment.
   *
   * @return {?Texture} The depth texture.
   */
  getDepthTexture() {
    return this.texture;
  }
}
class AY extends gr {
  /**
   * Constructs a new WebGL renderer.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGL2RenderingContext} gl - The rendering context.
   */
  constructor(t, e) {
    super();
    const i = this;
    let a = null, s = 1, r = null, l = "local-floor", c = 1, f = null, d = null, p = null, m = null, g = null, y = null;
    const x = new TY(), M = e.getContextAttributes();
    let v = null, S = null;
    const E = [], T = [], w = new ft();
    let D = null;
    const U = new li();
    U.viewport = new De();
    const O = new li();
    O.viewport = new De();
    const R = [U, O], C = new Zz();
    let B = null, Y = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function($) {
      let ht = E[$];
      return ht === void 0 && (ht = new G0(), E[$] = ht), ht.getTargetRaySpace();
    }, this.getControllerGrip = function($) {
      let ht = E[$];
      return ht === void 0 && (ht = new G0(), E[$] = ht), ht.getGripSpace();
    }, this.getHand = function($) {
      let ht = E[$];
      return ht === void 0 && (ht = new G0(), E[$] = ht), ht.getHandSpace();
    };
    function V($) {
      const ht = T.indexOf($.inputSource);
      if (ht === -1)
        return;
      const kt = E[ht];
      kt !== void 0 && (kt.update($.inputSource, $.frame, f || r), kt.dispatchEvent({ type: $.type, data: $.inputSource }));
    }
    function Q() {
      a.removeEventListener("select", V), a.removeEventListener("selectstart", V), a.removeEventListener("selectend", V), a.removeEventListener("squeeze", V), a.removeEventListener("squeezestart", V), a.removeEventListener("squeezeend", V), a.removeEventListener("end", Q), a.removeEventListener("inputsourceschange", J);
      for (let $ = 0; $ < E.length; $++) {
        const ht = T[$];
        ht !== null && (T[$] = null, E[$].disconnect(ht));
      }
      B = null, Y = null, x.reset(), t.setRenderTarget(v), g = null, m = null, p = null, a = null, S = null, Qt.stop(), i.isPresenting = !1, t.setPixelRatio(D), t.setSize(w.width, w.height, !1), i.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function($) {
      s = $, i.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function($) {
      l = $, i.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return f || r;
    }, this.setReferenceSpace = function($) {
      f = $;
    }, this.getBaseLayer = function() {
      return m !== null ? m : g;
    }, this.getBinding = function() {
      return p;
    }, this.getFrame = function() {
      return y;
    }, this.getSession = function() {
      return a;
    }, this.setSession = async function($) {
      if (a = $, a !== null) {
        if (v = t.getRenderTarget(), a.addEventListener("select", V), a.addEventListener("selectstart", V), a.addEventListener("selectend", V), a.addEventListener("squeeze", V), a.addEventListener("squeezestart", V), a.addEventListener("squeezeend", V), a.addEventListener("end", Q), a.addEventListener("inputsourceschange", J), M.xrCompatible !== !0 && await e.makeXRCompatible(), D = t.getPixelRatio(), t.getSize(w), typeof XRWebGLBinding < "u" && "createProjectionLayer" in XRWebGLBinding.prototype) {
          let kt = null, Ot = null, Xt = null;
          M.depth && (Xt = M.stencil ? e.DEPTH24_STENCIL8 : e.DEPTH_COMPONENT24, kt = M.stencil ? rh : sh, Ot = M.stencil ? ah : lo);
          const pe = {
            colorFormat: e.RGBA8,
            depthFormat: Xt,
            scaleFactor: s
          };
          p = new XRWebGLBinding(a, e), m = p.createProjectionLayer(pe), a.updateRenderState({ layers: [m] }), t.setPixelRatio(1), t.setSize(m.textureWidth, m.textureHeight, !1), S = new dr(
            m.textureWidth,
            m.textureHeight,
            {
              format: zi,
              type: Ss,
              depthTexture: new oT(m.textureWidth, m.textureHeight, Ot, void 0, void 0, void 0, void 0, void 0, void 0, kt),
              stencilBuffer: M.stencil,
              colorSpace: t.outputColorSpace,
              samples: M.antialias ? 4 : 0,
              resolveDepthBuffer: m.ignoreDepthValues === !1,
              resolveStencilBuffer: m.ignoreDepthValues === !1
            }
          );
        } else {
          const kt = {
            antialias: M.antialias,
            alpha: !0,
            depth: M.depth,
            stencil: M.stencil,
            framebufferScaleFactor: s
          };
          g = new XRWebGLLayer(a, e, kt), a.updateRenderState({ baseLayer: g }), t.setPixelRatio(1), t.setSize(g.framebufferWidth, g.framebufferHeight, !1), S = new dr(
            g.framebufferWidth,
            g.framebufferHeight,
            {
              format: zi,
              type: Ss,
              colorSpace: t.outputColorSpace,
              stencilBuffer: M.stencil,
              resolveDepthBuffer: g.ignoreDepthValues === !1,
              resolveStencilBuffer: g.ignoreDepthValues === !1
            }
          );
        }
        S.isXRRenderTarget = !0, this.setFoveation(c), f = null, r = await a.requestReferenceSpace(l), Qt.setContext(a), Qt.start(), i.isPresenting = !0, i.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (a !== null)
        return a.environmentBlendMode;
    }, this.getDepthTexture = function() {
      return x.getDepthTexture();
    };
    function J($) {
      for (let ht = 0; ht < $.removed.length; ht++) {
        const kt = $.removed[ht], Ot = T.indexOf(kt);
        Ot >= 0 && (T[Ot] = null, E[Ot].disconnect(kt));
      }
      for (let ht = 0; ht < $.added.length; ht++) {
        const kt = $.added[ht];
        let Ot = T.indexOf(kt);
        if (Ot === -1) {
          for (let pe = 0; pe < E.length; pe++)
            if (pe >= T.length) {
              T.push(kt), Ot = pe;
              break;
            } else if (T[pe] === null) {
              T[pe] = kt, Ot = pe;
              break;
            }
          if (Ot === -1) break;
        }
        const Xt = E[Ot];
        Xt && Xt.connect(kt);
      }
    }
    const P = new H(), q = new H();
    function G($, ht, kt) {
      P.setFromMatrixPosition(ht.matrixWorld), q.setFromMatrixPosition(kt.matrixWorld);
      const Ot = P.distanceTo(q), Xt = ht.projectionMatrix.elements, pe = kt.projectionMatrix.elements, $t = Xt[14] / (Xt[10] - 1), qe = Xt[14] / (Xt[10] + 1), Me = (Xt[9] + 1) / Xt[5], ce = (Xt[9] - 1) / Xt[5], I = (Xt[8] - 1) / Xt[0], Ct = (pe[8] + 1) / pe[0], yt = $t * I, Et = $t * Ct, ct = Ot / (-I + Ct), Ht = ct * -I;
      if (ht.matrixWorld.decompose($.position, $.quaternion, $.scale), $.translateX(Ht), $.translateZ(ct), $.matrixWorld.compose($.position, $.quaternion, $.scale), $.matrixWorldInverse.copy($.matrixWorld).invert(), Xt[10] === -1)
        $.projectionMatrix.copy(ht.projectionMatrix), $.projectionMatrixInverse.copy(ht.projectionMatrixInverse);
      else {
        const _t = $t + ct, It = qe + ct, he = yt - Ht, F = Et + (Ot - Ht), N = Me * qe / It * _t, tt = ce * qe / It * _t;
        $.projectionMatrix.makePerspective(he, F, N, tt, _t, It), $.projectionMatrixInverse.copy($.projectionMatrix).invert();
      }
    }
    function it($, ht) {
      ht === null ? $.matrixWorld.copy($.matrix) : $.matrixWorld.multiplyMatrices(ht.matrixWorld, $.matrix), $.matrixWorldInverse.copy($.matrixWorld).invert();
    }
    this.updateCamera = function($) {
      if (a === null) return;
      let ht = $.near, kt = $.far;
      x.texture !== null && (x.depthNear > 0 && (ht = x.depthNear), x.depthFar > 0 && (kt = x.depthFar)), C.near = O.near = U.near = ht, C.far = O.far = U.far = kt, (B !== C.near || Y !== C.far) && (a.updateRenderState({
        depthNear: C.near,
        depthFar: C.far
      }), B = C.near, Y = C.far), U.layers.mask = $.layers.mask | 2, O.layers.mask = $.layers.mask | 4, C.layers.mask = U.layers.mask | O.layers.mask;
      const Ot = $.parent, Xt = C.cameras;
      it(C, Ot);
      for (let pe = 0; pe < Xt.length; pe++)
        it(Xt[pe], Ot);
      Xt.length === 2 ? G(C, U, O) : C.projectionMatrix.copy(U.projectionMatrix), lt($, C, Ot);
    };
    function lt($, ht, kt) {
      kt === null ? $.matrix.copy(ht.matrixWorld) : ($.matrix.copy(kt.matrixWorld), $.matrix.invert(), $.matrix.multiply(ht.matrixWorld)), $.matrix.decompose($.position, $.quaternion, $.scale), $.updateMatrixWorld(!0), $.projectionMatrix.copy(ht.projectionMatrix), $.projectionMatrixInverse.copy(ht.projectionMatrixInverse), $.isPerspectiveCamera && ($.fov = oh * 2 * Math.atan(1 / $.projectionMatrix.elements[5]), $.zoom = 1);
    }
    this.getCamera = function() {
      return C;
    }, this.getFoveation = function() {
      if (!(m === null && g === null))
        return c;
    }, this.setFoveation = function($) {
      c = $, m !== null && (m.fixedFoveation = $), g !== null && g.fixedFoveation !== void 0 && (g.fixedFoveation = $);
    }, this.hasDepthSensing = function() {
      return x.texture !== null;
    }, this.getDepthSensingMesh = function() {
      return x.getMesh(C);
    };
    let mt = null;
    function Rt($, ht) {
      if (d = ht.getViewerPose(f || r), y = ht, d !== null) {
        const kt = d.views;
        g !== null && (t.setRenderTargetFramebuffer(S, g.framebuffer), t.setRenderTarget(S));
        let Ot = !1;
        kt.length !== C.cameras.length && (C.cameras.length = 0, Ot = !0);
        for (let $t = 0; $t < kt.length; $t++) {
          const qe = kt[$t];
          let Me = null;
          if (g !== null)
            Me = g.getViewport(qe);
          else {
            const I = p.getViewSubImage(m, qe);
            Me = I.viewport, $t === 0 && (t.setRenderTargetTextures(
              S,
              I.colorTexture,
              I.depthStencilTexture
            ), t.setRenderTarget(S));
          }
          let ce = R[$t];
          ce === void 0 && (ce = new li(), ce.layers.enable($t), ce.viewport = new De(), R[$t] = ce), ce.matrix.fromArray(qe.transform.matrix), ce.matrix.decompose(ce.position, ce.quaternion, ce.scale), ce.projectionMatrix.fromArray(qe.projectionMatrix), ce.projectionMatrixInverse.copy(ce.projectionMatrix).invert(), ce.viewport.set(Me.x, Me.y, Me.width, Me.height), $t === 0 && (C.matrix.copy(ce.matrix), C.matrix.decompose(C.position, C.quaternion, C.scale)), Ot === !0 && C.cameras.push(ce);
        }
        const Xt = a.enabledFeatures;
        if (Xt && Xt.includes("depth-sensing") && a.depthUsage == "gpu-optimized" && p) {
          const $t = p.getDepthInformation(kt[0]);
          $t && $t.isValid && $t.texture && x.init(t, $t, a.renderState);
        }
      }
      for (let kt = 0; kt < E.length; kt++) {
        const Ot = T[kt], Xt = E[kt];
        Ot !== null && Xt !== void 0 && Xt.update(Ot, ht, f || r);
      }
      mt && mt($, ht), ht.detectedPlanes && i.dispatchEvent({ type: "planesdetected", data: ht }), y = null;
    }
    const Qt = new e4();
    Qt.setAnimationLoop(Rt), this.setAnimationLoop = function($) {
      mt = $;
    }, this.dispose = function() {
    };
  }
}
const lu = /* @__PURE__ */ new _a(), RY = /* @__PURE__ */ new ae();
function CY(n, t) {
  function e(M, v) {
    M.matrixAutoUpdate === !0 && M.updateMatrix(), v.value.copy(M.matrix);
  }
  function i(M, v) {
    v.color.getRGB(M.fogColor.value, tz(n)), v.isFog ? (M.fogNear.value = v.near, M.fogFar.value = v.far) : v.isFogExp2 && (M.fogDensity.value = v.density);
  }
  function a(M, v, S, E, T) {
    v.isMeshBasicMaterial || v.isMeshLambertMaterial ? s(M, v) : v.isMeshToonMaterial ? (s(M, v), p(M, v)) : v.isMeshPhongMaterial ? (s(M, v), d(M, v)) : v.isMeshStandardMaterial ? (s(M, v), m(M, v), v.isMeshPhysicalMaterial && g(M, v, T)) : v.isMeshMatcapMaterial ? (s(M, v), y(M, v)) : v.isMeshDepthMaterial ? s(M, v) : v.isMeshDistanceMaterial ? (s(M, v), x(M, v)) : v.isMeshNormalMaterial ? s(M, v) : v.isLineBasicMaterial ? (r(M, v), v.isLineDashedMaterial && l(M, v)) : v.isPointsMaterial ? c(M, v, S, E) : v.isSpriteMaterial ? f(M, v) : v.isShadowMaterial ? (M.color.value.copy(v.color), M.opacity.value = v.opacity) : v.isShaderMaterial && (v.uniformsNeedUpdate = !1);
  }
  function s(M, v) {
    M.opacity.value = v.opacity, v.color && M.diffuse.value.copy(v.color), v.emissive && M.emissive.value.copy(v.emissive).multiplyScalar(v.emissiveIntensity), v.map && (M.map.value = v.map, e(v.map, M.mapTransform)), v.alphaMap && (M.alphaMap.value = v.alphaMap, e(v.alphaMap, M.alphaMapTransform)), v.bumpMap && (M.bumpMap.value = v.bumpMap, e(v.bumpMap, M.bumpMapTransform), M.bumpScale.value = v.bumpScale, v.side === Ki && (M.bumpScale.value *= -1)), v.normalMap && (M.normalMap.value = v.normalMap, e(v.normalMap, M.normalMapTransform), M.normalScale.value.copy(v.normalScale), v.side === Ki && M.normalScale.value.negate()), v.displacementMap && (M.displacementMap.value = v.displacementMap, e(v.displacementMap, M.displacementMapTransform), M.displacementScale.value = v.displacementScale, M.displacementBias.value = v.displacementBias), v.emissiveMap && (M.emissiveMap.value = v.emissiveMap, e(v.emissiveMap, M.emissiveMapTransform)), v.specularMap && (M.specularMap.value = v.specularMap, e(v.specularMap, M.specularMapTransform)), v.alphaTest > 0 && (M.alphaTest.value = v.alphaTest);
    const S = t.get(v), E = S.envMap, T = S.envMapRotation;
    E && (M.envMap.value = E, lu.copy(T), lu.x *= -1, lu.y *= -1, lu.z *= -1, E.isCubeTexture && E.isRenderTargetTexture === !1 && (lu.y *= -1, lu.z *= -1), M.envMapRotation.value.setFromMatrix4(RY.makeRotationFromEuler(lu)), M.flipEnvMap.value = E.isCubeTexture && E.isRenderTargetTexture === !1 ? -1 : 1, M.reflectivity.value = v.reflectivity, M.ior.value = v.ior, M.refractionRatio.value = v.refractionRatio), v.lightMap && (M.lightMap.value = v.lightMap, M.lightMapIntensity.value = v.lightMapIntensity, e(v.lightMap, M.lightMapTransform)), v.aoMap && (M.aoMap.value = v.aoMap, M.aoMapIntensity.value = v.aoMapIntensity, e(v.aoMap, M.aoMapTransform));
  }
  function r(M, v) {
    M.diffuse.value.copy(v.color), M.opacity.value = v.opacity, v.map && (M.map.value = v.map, e(v.map, M.mapTransform));
  }
  function l(M, v) {
    M.dashSize.value = v.dashSize, M.totalSize.value = v.dashSize + v.gapSize, M.scale.value = v.scale;
  }
  function c(M, v, S, E) {
    M.diffuse.value.copy(v.color), M.opacity.value = v.opacity, M.size.value = v.size * S, M.scale.value = E * 0.5, v.map && (M.map.value = v.map, e(v.map, M.uvTransform)), v.alphaMap && (M.alphaMap.value = v.alphaMap, e(v.alphaMap, M.alphaMapTransform)), v.alphaTest > 0 && (M.alphaTest.value = v.alphaTest);
  }
  function f(M, v) {
    M.diffuse.value.copy(v.color), M.opacity.value = v.opacity, M.rotation.value = v.rotation, v.map && (M.map.value = v.map, e(v.map, M.mapTransform)), v.alphaMap && (M.alphaMap.value = v.alphaMap, e(v.alphaMap, M.alphaMapTransform)), v.alphaTest > 0 && (M.alphaTest.value = v.alphaTest);
  }
  function d(M, v) {
    M.specular.value.copy(v.specular), M.shininess.value = Math.max(v.shininess, 1e-4);
  }
  function p(M, v) {
    v.gradientMap && (M.gradientMap.value = v.gradientMap);
  }
  function m(M, v) {
    M.metalness.value = v.metalness, v.metalnessMap && (M.metalnessMap.value = v.metalnessMap, e(v.metalnessMap, M.metalnessMapTransform)), M.roughness.value = v.roughness, v.roughnessMap && (M.roughnessMap.value = v.roughnessMap, e(v.roughnessMap, M.roughnessMapTransform)), v.envMap && (M.envMapIntensity.value = v.envMapIntensity);
  }
  function g(M, v, S) {
    M.ior.value = v.ior, v.sheen > 0 && (M.sheenColor.value.copy(v.sheenColor).multiplyScalar(v.sheen), M.sheenRoughness.value = v.sheenRoughness, v.sheenColorMap && (M.sheenColorMap.value = v.sheenColorMap, e(v.sheenColorMap, M.sheenColorMapTransform)), v.sheenRoughnessMap && (M.sheenRoughnessMap.value = v.sheenRoughnessMap, e(v.sheenRoughnessMap, M.sheenRoughnessMapTransform))), v.clearcoat > 0 && (M.clearcoat.value = v.clearcoat, M.clearcoatRoughness.value = v.clearcoatRoughness, v.clearcoatMap && (M.clearcoatMap.value = v.clearcoatMap, e(v.clearcoatMap, M.clearcoatMapTransform)), v.clearcoatRoughnessMap && (M.clearcoatRoughnessMap.value = v.clearcoatRoughnessMap, e(v.clearcoatRoughnessMap, M.clearcoatRoughnessMapTransform)), v.clearcoatNormalMap && (M.clearcoatNormalMap.value = v.clearcoatNormalMap, e(v.clearcoatNormalMap, M.clearcoatNormalMapTransform), M.clearcoatNormalScale.value.copy(v.clearcoatNormalScale), v.side === Ki && M.clearcoatNormalScale.value.negate())), v.dispersion > 0 && (M.dispersion.value = v.dispersion), v.iridescence > 0 && (M.iridescence.value = v.iridescence, M.iridescenceIOR.value = v.iridescenceIOR, M.iridescenceThicknessMinimum.value = v.iridescenceThicknessRange[0], M.iridescenceThicknessMaximum.value = v.iridescenceThicknessRange[1], v.iridescenceMap && (M.iridescenceMap.value = v.iridescenceMap, e(v.iridescenceMap, M.iridescenceMapTransform)), v.iridescenceThicknessMap && (M.iridescenceThicknessMap.value = v.iridescenceThicknessMap, e(v.iridescenceThicknessMap, M.iridescenceThicknessMapTransform))), v.transmission > 0 && (M.transmission.value = v.transmission, M.transmissionSamplerMap.value = S.texture, M.transmissionSamplerSize.value.set(S.width, S.height), v.transmissionMap && (M.transmissionMap.value = v.transmissionMap, e(v.transmissionMap, M.transmissionMapTransform)), M.thickness.value = v.thickness, v.thicknessMap && (M.thicknessMap.value = v.thicknessMap, e(v.thicknessMap, M.thicknessMapTransform)), M.attenuationDistance.value = v.attenuationDistance, M.attenuationColor.value.copy(v.attenuationColor)), v.anisotropy > 0 && (M.anisotropyVector.value.set(v.anisotropy * Math.cos(v.anisotropyRotation), v.anisotropy * Math.sin(v.anisotropyRotation)), v.anisotropyMap && (M.anisotropyMap.value = v.anisotropyMap, e(v.anisotropyMap, M.anisotropyMapTransform))), M.specularIntensity.value = v.specularIntensity, M.specularColor.value.copy(v.specularColor), v.specularColorMap && (M.specularColorMap.value = v.specularColorMap, e(v.specularColorMap, M.specularColorMapTransform)), v.specularIntensityMap && (M.specularIntensityMap.value = v.specularIntensityMap, e(v.specularIntensityMap, M.specularIntensityMapTransform));
  }
  function y(M, v) {
    v.matcap && (M.matcap.value = v.matcap);
  }
  function x(M, v) {
    const S = t.get(v).light;
    M.referencePosition.value.setFromMatrixPosition(S.matrixWorld), M.nearDistance.value = S.shadow.camera.near, M.farDistance.value = S.shadow.camera.far;
  }
  return {
    refreshFogUniforms: i,
    refreshMaterialUniforms: a
  };
}
function wY(n, t, e, i) {
  let a = {}, s = {}, r = [];
  const l = n.getParameter(n.MAX_UNIFORM_BUFFER_BINDINGS);
  function c(S, E) {
    const T = E.program;
    i.uniformBlockBinding(S, T);
  }
  function f(S, E) {
    let T = a[S.id];
    T === void 0 && (y(S), T = d(S), a[S.id] = T, S.addEventListener("dispose", M));
    const w = E.program;
    i.updateUBOMapping(S, w);
    const D = t.render.frame;
    s[S.id] !== D && (m(S), s[S.id] = D);
  }
  function d(S) {
    const E = p();
    S.__bindingPointIndex = E;
    const T = n.createBuffer(), w = S.__size, D = S.usage;
    return n.bindBuffer(n.UNIFORM_BUFFER, T), n.bufferData(n.UNIFORM_BUFFER, w, D), n.bindBuffer(n.UNIFORM_BUFFER, null), n.bindBufferBase(n.UNIFORM_BUFFER, E, T), T;
  }
  function p() {
    for (let S = 0; S < l; S++)
      if (r.indexOf(S) === -1)
        return r.push(S), S;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function m(S) {
    const E = a[S.id], T = S.uniforms, w = S.__cache;
    n.bindBuffer(n.UNIFORM_BUFFER, E);
    for (let D = 0, U = T.length; D < U; D++) {
      const O = Array.isArray(T[D]) ? T[D] : [T[D]];
      for (let R = 0, C = O.length; R < C; R++) {
        const B = O[R];
        if (g(B, D, R, w) === !0) {
          const Y = B.__offset, V = Array.isArray(B.value) ? B.value : [B.value];
          let Q = 0;
          for (let J = 0; J < V.length; J++) {
            const P = V[J], q = x(P);
            typeof P == "number" || typeof P == "boolean" ? (B.__data[0] = P, n.bufferSubData(n.UNIFORM_BUFFER, Y + Q, B.__data)) : P.isMatrix3 ? (B.__data[0] = P.elements[0], B.__data[1] = P.elements[1], B.__data[2] = P.elements[2], B.__data[3] = 0, B.__data[4] = P.elements[3], B.__data[5] = P.elements[4], B.__data[6] = P.elements[5], B.__data[7] = 0, B.__data[8] = P.elements[6], B.__data[9] = P.elements[7], B.__data[10] = P.elements[8], B.__data[11] = 0) : (P.toArray(B.__data, Q), Q += q.storage / Float32Array.BYTES_PER_ELEMENT);
          }
          n.bufferSubData(n.UNIFORM_BUFFER, Y, B.__data);
        }
      }
    }
    n.bindBuffer(n.UNIFORM_BUFFER, null);
  }
  function g(S, E, T, w) {
    const D = S.value, U = E + "_" + T;
    if (w[U] === void 0)
      return typeof D == "number" || typeof D == "boolean" ? w[U] = D : w[U] = D.clone(), !0;
    {
      const O = w[U];
      if (typeof D == "number" || typeof D == "boolean") {
        if (O !== D)
          return w[U] = D, !0;
      } else if (O.equals(D) === !1)
        return O.copy(D), !0;
    }
    return !1;
  }
  function y(S) {
    const E = S.uniforms;
    let T = 0;
    const w = 16;
    for (let U = 0, O = E.length; U < O; U++) {
      const R = Array.isArray(E[U]) ? E[U] : [E[U]];
      for (let C = 0, B = R.length; C < B; C++) {
        const Y = R[C], V = Array.isArray(Y.value) ? Y.value : [Y.value];
        for (let Q = 0, J = V.length; Q < J; Q++) {
          const P = V[Q], q = x(P), G = T % w, it = G % q.boundary, lt = G + it;
          T += it, lt !== 0 && w - lt < q.storage && (T += w - lt), Y.__data = new Float32Array(q.storage / Float32Array.BYTES_PER_ELEMENT), Y.__offset = T, T += q.storage;
        }
      }
    }
    const D = T % w;
    return D > 0 && (T += w - D), S.__size = T, S.__cache = {}, this;
  }
  function x(S) {
    const E = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof S == "number" || typeof S == "boolean" ? (E.boundary = 4, E.storage = 4) : S.isVector2 ? (E.boundary = 8, E.storage = 8) : S.isVector3 || S.isColor ? (E.boundary = 16, E.storage = 12) : S.isVector4 ? (E.boundary = 16, E.storage = 16) : S.isMatrix3 ? (E.boundary = 48, E.storage = 48) : S.isMatrix4 ? (E.boundary = 64, E.storage = 64) : S.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", S), E;
  }
  function M(S) {
    const E = S.target;
    E.removeEventListener("dispose", M);
    const T = r.indexOf(E.__bindingPointIndex);
    r.splice(T, 1), n.deleteBuffer(a[E.id]), delete a[E.id], delete s[E.id];
  }
  function v() {
    for (const S in a)
      n.deleteBuffer(a[S]);
    r = [], a = {}, s = {};
  }
  return {
    bind: c,
    update: f,
    dispose: v
  };
}
class o4 {
  /**
   * Constructs a new WebGL renderer.
   *
   * @param {WebGLRenderer~Options} [parameters] - The configuration parameter.
   */
  constructor(t = {}) {
    const {
      canvas: e = KL(),
      context: i = null,
      depth: a = !0,
      stencil: s = !1,
      alpha: r = !1,
      antialias: l = !1,
      premultipliedAlpha: c = !0,
      preserveDrawingBuffer: f = !1,
      powerPreference: d = "default",
      failIfMajorPerformanceCaveat: p = !1,
      reverseDepthBuffer: m = !1
    } = t;
    this.isWebGLRenderer = !0;
    let g;
    if (i !== null) {
      if (typeof WebGLRenderingContext < "u" && i instanceof WebGLRenderingContext)
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      g = i.getContextAttributes().alpha;
    } else
      g = r;
    const y = new Uint32Array(4), x = new Int32Array(4);
    let M = null, v = null;
    const S = [], E = [];
    this.domElement = e, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled.
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.toneMapping = cr, this.toneMappingExposure = 1, this.transmissionResolutionScale = 1;
    const T = this;
    let w = !1;
    this._outputColorSpace = Di;
    let D = 0, U = 0, O = null, R = -1, C = null;
    const B = new De(), Y = new De();
    let V = null;
    const Q = new Pt(0);
    let J = 0, P = e.width, q = e.height, G = 1, it = null, lt = null;
    const mt = new De(0, 0, P, q), Rt = new De(0, 0, P, q);
    let Qt = !1;
    const $ = new Eh();
    let ht = !1, kt = !1;
    const Ot = new ae(), Xt = new ae(), pe = new H(), $t = new De(), qe = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    let Me = !1;
    function ce() {
      return O === null ? G : 1;
    }
    let I = i;
    function Ct(L, W) {
      return e.getContext(L, W);
    }
    try {
      const L = {
        alpha: !0,
        depth: a,
        stencil: s,
        antialias: l,
        premultipliedAlpha: c,
        preserveDrawingBuffer: f,
        powerPreference: d,
        failIfMajorPerformanceCaveat: p
      };
      if ("setAttribute" in e && e.setAttribute("data-engine", `three.js r${gm}`), e.addEventListener("webglcontextlost", Gt, !1), e.addEventListener("webglcontextrestored", Mt, !1), e.addEventListener("webglcontextcreationerror", dt, !1), I === null) {
        const W = "webgl2";
        if (I = Ct(W, L), I === null)
          throw Ct(W) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
    } catch (L) {
      throw console.error("THREE.WebGLRenderer: " + L.message), L;
    }
    let yt, Et, ct, Ht, _t, It, he, F, N, tt, rt, gt, ot, Kt, Dt, qt, jt, pt, zt, ee, ne, wt, se, k;
    function Lt() {
      yt = new VX(I), yt.init(), wt = new r4(I, yt), Et = new LX(I, yt, t, wt), ct = new SY(I, yt), Et.reverseDepthBuffer && m && ct.buffers.depth.setReversed(!0), Ht = new qX(I), _t = new lY(), It = new MY(I, yt, ct, _t, Et, wt, Ht), he = new BX(T), F = new FX(T), N = new QG(I), se = new OX(I, N), tt = new GX(I, N, Ht, se), rt = new kX(I, tt, N, Ht), zt = new YX(I, Et, It), qt = new zX(_t), gt = new oY(T, he, F, yt, Et, se, qt), ot = new CY(T, _t), Kt = new cY(), Dt = new gY(yt), pt = new UX(T, he, F, ct, rt, g, c), jt = new yY(T, rt, Et), k = new wY(I, Ht, Et, ct), ee = new NX(I, yt, Ht), ne = new XX(I, yt, Ht), Ht.programs = gt.programs, T.capabilities = Et, T.extensions = yt, T.properties = _t, T.renderLists = Kt, T.shadowMap = jt, T.state = ct, T.info = Ht;
    }
    Lt();
    const xt = new AY(T, I);
    this.xr = xt, this.getContext = function() {
      return I;
    }, this.getContextAttributes = function() {
      return I.getContextAttributes();
    }, this.forceContextLoss = function() {
      const L = yt.get("WEBGL_lose_context");
      L && L.loseContext();
    }, this.forceContextRestore = function() {
      const L = yt.get("WEBGL_lose_context");
      L && L.restoreContext();
    }, this.getPixelRatio = function() {
      return G;
    }, this.setPixelRatio = function(L) {
      L !== void 0 && (G = L, this.setSize(P, q, !1));
    }, this.getSize = function(L) {
      return L.set(P, q);
    }, this.setSize = function(L, W, nt = !0) {
      if (xt.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      P = L, q = W, e.width = Math.floor(L * G), e.height = Math.floor(W * G), nt === !0 && (e.style.width = L + "px", e.style.height = W + "px"), this.setViewport(0, 0, L, W);
    }, this.getDrawingBufferSize = function(L) {
      return L.set(P * G, q * G).floor();
    }, this.setDrawingBufferSize = function(L, W, nt) {
      P = L, q = W, G = nt, e.width = Math.floor(L * nt), e.height = Math.floor(W * nt), this.setViewport(0, 0, L, W);
    }, this.getCurrentViewport = function(L) {
      return L.copy(B);
    }, this.getViewport = function(L) {
      return L.copy(mt);
    }, this.setViewport = function(L, W, nt, at) {
      L.isVector4 ? mt.set(L.x, L.y, L.z, L.w) : mt.set(L, W, nt, at), ct.viewport(B.copy(mt).multiplyScalar(G).round());
    }, this.getScissor = function(L) {
      return L.copy(Rt);
    }, this.setScissor = function(L, W, nt, at) {
      L.isVector4 ? Rt.set(L.x, L.y, L.z, L.w) : Rt.set(L, W, nt, at), ct.scissor(Y.copy(Rt).multiplyScalar(G).round());
    }, this.getScissorTest = function() {
      return Qt;
    }, this.setScissorTest = function(L) {
      ct.setScissorTest(Qt = L);
    }, this.setOpaqueSort = function(L) {
      it = L;
    }, this.setTransparentSort = function(L) {
      lt = L;
    }, this.getClearColor = function(L) {
      return L.copy(pt.getClearColor());
    }, this.setClearColor = function() {
      pt.setClearColor(...arguments);
    }, this.getClearAlpha = function() {
      return pt.getClearAlpha();
    }, this.setClearAlpha = function() {
      pt.setClearAlpha(...arguments);
    }, this.clear = function(L = !0, W = !0, nt = !0) {
      let at = 0;
      if (L) {
        let Z = !1;
        if (O !== null) {
          const St = O.texture.format;
          Z = St === j_ || St === Z_ || St === _m;
        }
        if (Z) {
          const St = O.texture.type, Ut = St === Ss || St === lo || St === ih || St === ah || St === Y_ || St === k_, Yt = pt.getClearColor(), Vt = pt.getClearAlpha(), re = Yt.r, oe = Yt.g, Jt = Yt.b;
          Ut ? (y[0] = re, y[1] = oe, y[2] = Jt, y[3] = Vt, I.clearBufferuiv(I.COLOR, 0, y)) : (x[0] = re, x[1] = oe, x[2] = Jt, x[3] = Vt, I.clearBufferiv(I.COLOR, 0, x));
        } else
          at |= I.COLOR_BUFFER_BIT;
      }
      W && (at |= I.DEPTH_BUFFER_BIT), nt && (at |= I.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), I.clear(at);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      e.removeEventListener("webglcontextlost", Gt, !1), e.removeEventListener("webglcontextrestored", Mt, !1), e.removeEventListener("webglcontextcreationerror", dt, !1), pt.dispose(), Kt.dispose(), Dt.dispose(), _t.dispose(), he.dispose(), F.dispose(), rt.dispose(), se.dispose(), k.dispose(), gt.dispose(), xt.dispose(), xt.removeEventListener("sessionstart", Ch), xt.removeEventListener("sessionend", ic), Es.stop();
    };
    function Gt(L) {
      L.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), w = !0;
    }
    function Mt() {
      console.log("THREE.WebGLRenderer: Context Restored."), w = !1;
      const L = Ht.autoReset, W = jt.enabled, nt = jt.autoUpdate, at = jt.needsUpdate, Z = jt.type;
      Lt(), Ht.autoReset = L, jt.enabled = W, jt.autoUpdate = nt, jt.needsUpdate = at, jt.type = Z;
    }
    function dt(L) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", L.statusMessage);
    }
    function Wt(L) {
      const W = L.target;
      W.removeEventListener("dispose", Wt), le(W);
    }
    function le(L) {
      Ye(L), _t.remove(L);
    }
    function Ye(L) {
      const W = _t.get(L).programs;
      W !== void 0 && (W.forEach(function(nt) {
        gt.releaseProgram(nt);
      }), L.isShaderMaterial && gt.releaseShaderCache(L));
    }
    this.renderBufferDirect = function(L, W, nt, at, Z, St) {
      W === null && (W = qe);
      const Ut = Z.isMesh && Z.matrixWorld.determinant() < 0, Yt = Dm(L, W, nt, at, Z);
      ct.setMaterial(at, Ut);
      let Vt = nt.index, re = 1;
      if (at.wireframe === !0) {
        if (Vt = tt.getWireframeAttribute(nt), Vt === void 0) return;
        re = 2;
      }
      const oe = nt.drawRange, Jt = nt.attributes.position;
      let Te = oe.start * re, Fe = (oe.start + oe.count) * re;
      St !== null && (Te = Math.max(Te, St.start * re), Fe = Math.min(Fe, (St.start + St.count) * re)), Vt !== null ? (Te = Math.max(Te, 0), Fe = Math.min(Fe, Vt.count)) : Jt != null && (Te = Math.max(Te, 0), Fe = Math.min(Fe, Jt.count));
      const un = Fe - Te;
      if (un < 0 || un === 1 / 0) return;
      se.setup(Z, at, Yt, nt, Vt);
      let cn, Ue = ee;
      if (Vt !== null && (cn = N.get(Vt), Ue = ne, Ue.setIndex(cn)), Z.isMesh)
        at.wireframe === !0 ? (ct.setLineWidth(at.wireframeLinewidth * ce()), Ue.setMode(I.LINES)) : Ue.setMode(I.TRIANGLES);
      else if (Z.isLine) {
        let ie = at.linewidth;
        ie === void 0 && (ie = 1), ct.setLineWidth(ie * ce()), Z.isLineSegments ? Ue.setMode(I.LINES) : Z.isLineLoop ? Ue.setMode(I.LINE_LOOP) : Ue.setMode(I.LINE_STRIP);
      } else Z.isPoints ? Ue.setMode(I.POINTS) : Z.isSprite && Ue.setMode(I.TRIANGLES);
      if (Z.isBatchedMesh)
        if (Z._multiDrawInstances !== null)
          Pf("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."), Ue.renderMultiDrawInstances(Z._multiDrawStarts, Z._multiDrawCounts, Z._multiDrawCount, Z._multiDrawInstances);
        else if (yt.get("WEBGL_multi_draw"))
          Ue.renderMultiDraw(Z._multiDrawStarts, Z._multiDrawCounts, Z._multiDrawCount);
        else {
          const ie = Z._multiDrawStarts, In = Z._multiDrawCounts, Pe = Z._multiDrawCount, na = Vt ? N.get(Vt).bytesPerElement : 1, Xs = _t.get(at).currentProgram.getUniforms();
          for (let Mi = 0; Mi < Pe; Mi++)
            Xs.setValue(I, "_gl_DrawID", Mi), Ue.render(ie[Mi] / na, In[Mi]);
        }
      else if (Z.isInstancedMesh)
        Ue.renderInstances(Te, un, Z.count);
      else if (nt.isInstancedBufferGeometry) {
        const ie = nt._maxInstanceCount !== void 0 ? nt._maxInstanceCount : 1 / 0, In = Math.min(nt.instanceCount, ie);
        Ue.renderInstances(Te, un, In);
      } else
        Ue.render(Te, un);
    };
    function Le(L, W, nt) {
      L.transparent === !0 && L.side === Ps && L.forceSinglePass === !1 ? (L.side = Ki, L.needsUpdate = !0, ln(L, W, nt), L.side = ro, L.needsUpdate = !0, ln(L, W, nt), L.side = Ps) : ln(L, W, nt);
    }
    this.compile = function(L, W, nt = null) {
      nt === null && (nt = L), v = Dt.get(nt), v.init(W), E.push(v), nt.traverseVisible(function(Z) {
        Z.isLight && Z.layers.test(W.layers) && (v.pushLight(Z), Z.castShadow && v.pushShadow(Z));
      }), L !== nt && L.traverseVisible(function(Z) {
        Z.isLight && Z.layers.test(W.layers) && (v.pushLight(Z), Z.castShadow && v.pushShadow(Z));
      }), v.setupLights();
      const at = /* @__PURE__ */ new Set();
      return L.traverse(function(Z) {
        if (!(Z.isMesh || Z.isPoints || Z.isLine || Z.isSprite))
          return;
        const St = Z.material;
        if (St)
          if (Array.isArray(St))
            for (let Ut = 0; Ut < St.length; Ut++) {
              const Yt = St[Ut];
              Le(Yt, nt, Z), at.add(Yt);
            }
          else
            Le(St, nt, Z), at.add(St);
      }), v = E.pop(), at;
    }, this.compileAsync = function(L, W, nt = null) {
      const at = this.compile(L, W, nt);
      return new Promise((Z) => {
        function St() {
          if (at.forEach(function(Ut) {
            _t.get(Ut).currentProgram.isReady() && at.delete(Ut);
          }), at.size === 0) {
            Z(L);
            return;
          }
          setTimeout(St, 10);
        }
        yt.get("KHR_parallel_shader_compile") !== null ? St() : setTimeout(St, 10);
      });
    };
    let ta = null;
    function ja(L) {
      ta && ta(L);
    }
    function Ch() {
      Es.stop();
    }
    function ic() {
      Es.start();
    }
    const Es = new e4();
    Es.setAnimationLoop(ja), typeof self < "u" && Es.setContext(self), this.setAnimationLoop = function(L) {
      ta = L, xt.setAnimationLoop(L), L === null ? Es.stop() : Es.start();
    }, xt.addEventListener("sessionstart", Ch), xt.addEventListener("sessionend", ic), this.render = function(L, W) {
      if (W !== void 0 && W.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (w === !0) return;
      if (L.matrixWorldAutoUpdate === !0 && L.updateMatrixWorld(), W.parent === null && W.matrixWorldAutoUpdate === !0 && W.updateMatrixWorld(), xt.enabled === !0 && xt.isPresenting === !0 && (xt.cameraAutoUpdate === !0 && xt.updateCamera(W), W = xt.getCamera()), L.isScene === !0 && L.onBeforeRender(T, L, W, O), v = Dt.get(L, E.length), v.init(W), E.push(v), Xt.multiplyMatrices(W.projectionMatrix, W.matrixWorldInverse), $.setFromProjectionMatrix(Xt), kt = this.localClippingEnabled, ht = qt.init(this.clippingPlanes, kt), M = Kt.get(L, S.length), M.init(), S.push(M), xt.enabled === !0 && xt.isPresenting === !0) {
        const St = T.xr.getDepthSensingMesh();
        St !== null && Qa(St, W, -1 / 0, T.sortObjects);
      }
      Qa(L, W, 0, T.sortObjects), M.finish(), T.sortObjects === !0 && M.sort(it, lt), Me = xt.enabled === !1 || xt.isPresenting === !1 || xt.hasDepthSensing() === !1, Me && pt.addToRenderList(M, L), this.info.render.frame++, ht === !0 && qt.beginShadows();
      const nt = v.state.shadowsArray;
      jt.render(nt, L, W), ht === !0 && qt.endShadows(), this.info.autoReset === !0 && this.info.reset();
      const at = M.opaque, Z = M.transmissive;
      if (v.setupLights(), W.isArrayCamera) {
        const St = W.cameras;
        if (Z.length > 0)
          for (let Ut = 0, Yt = St.length; Ut < Yt; Ut++) {
            const Vt = St[Ut];
            Ts(at, Z, L, Vt);
          }
        Me && pt.render(L);
        for (let Ut = 0, Yt = St.length; Ut < Yt; Ut++) {
          const Vt = St[Ut];
          wh(M, L, Vt, Vt.viewport);
        }
      } else
        Z.length > 0 && Ts(at, Z, L, W), Me && pt.render(L), wh(M, L, W);
      O !== null && U === 0 && (It.updateMultisampleRenderTarget(O), It.updateRenderTargetMipmap(O)), L.isScene === !0 && L.onAfterRender(T, L, W), se.resetDefaultState(), R = -1, C = null, E.pop(), E.length > 0 ? (v = E[E.length - 1], ht === !0 && qt.setGlobalState(T.clippingPlanes, v.state.camera)) : v = null, S.pop(), S.length > 0 ? M = S[S.length - 1] : M = null;
    };
    function Qa(L, W, nt, at) {
      if (L.visible === !1) return;
      if (L.layers.test(W.layers)) {
        if (L.isGroup)
          nt = L.renderOrder;
        else if (L.isLOD)
          L.autoUpdate === !0 && L.update(W);
        else if (L.isLight)
          v.pushLight(L), L.castShadow && v.pushShadow(L);
        else if (L.isSprite) {
          if (!L.frustumCulled || $.intersectsSprite(L)) {
            at && $t.setFromMatrixPosition(L.matrixWorld).applyMatrix4(Xt);
            const Ut = rt.update(L), Yt = L.material;
            Yt.visible && M.push(L, Ut, Yt, nt, $t.z, null);
          }
        } else if ((L.isMesh || L.isLine || L.isPoints) && (!L.frustumCulled || $.intersectsObject(L))) {
          const Ut = rt.update(L), Yt = L.material;
          if (at && (L.boundingSphere !== void 0 ? (L.boundingSphere === null && L.computeBoundingSphere(), $t.copy(L.boundingSphere.center)) : (Ut.boundingSphere === null && Ut.computeBoundingSphere(), $t.copy(Ut.boundingSphere.center)), $t.applyMatrix4(L.matrixWorld).applyMatrix4(Xt)), Array.isArray(Yt)) {
            const Vt = Ut.groups;
            for (let re = 0, oe = Vt.length; re < oe; re++) {
              const Jt = Vt[re], Te = Yt[Jt.materialIndex];
              Te && Te.visible && M.push(L, Ut, Te, nt, $t.z, Jt);
            }
          } else Yt.visible && M.push(L, Ut, Yt, nt, $t.z, null);
        }
      }
      const St = L.children;
      for (let Ut = 0, Yt = St.length; Ut < Yt; Ut++)
        Qa(St[Ut], W, nt, at);
    }
    function wh(L, W, nt, at) {
      const Z = L.opaque, St = L.transmissive, Ut = L.transparent;
      v.setupLightsView(nt), ht === !0 && qt.setGlobalState(T.clippingPlanes, nt), at && ct.viewport(B.copy(at)), Z.length > 0 && ea(Z, W, nt), St.length > 0 && ea(St, W, nt), Ut.length > 0 && ea(Ut, W, nt), ct.buffers.depth.setTest(!0), ct.buffers.depth.setMask(!0), ct.buffers.color.setMask(!0), ct.setPolygonOffset(!1);
    }
    function Ts(L, W, nt, at) {
      if ((nt.isScene === !0 ? nt.overrideMaterial : null) !== null)
        return;
      v.state.transmissionRenderTarget[at.id] === void 0 && (v.state.transmissionRenderTarget[at.id] = new dr(1, 1, {
        generateMipmaps: !0,
        type: yt.has("EXT_color_buffer_half_float") || yt.has("EXT_color_buffer_float") ? Mh : Ss,
        minFilter: ar,
        samples: 4,
        stencilBuffer: s,
        resolveDepthBuffer: !1,
        resolveStencilBuffer: !1,
        colorSpace: Oe.workingColorSpace
      }));
      const St = v.state.transmissionRenderTarget[at.id], Ut = at.viewport || B;
      St.setSize(Ut.z * T.transmissionResolutionScale, Ut.w * T.transmissionResolutionScale);
      const Yt = T.getRenderTarget();
      T.setRenderTarget(St), T.getClearColor(Q), J = T.getClearAlpha(), J < 1 && T.setClearColor(16777215, 0.5), T.clear(), Me && pt.render(nt);
      const Vt = T.toneMapping;
      T.toneMapping = cr;
      const re = at.viewport;
      if (at.viewport !== void 0 && (at.viewport = void 0), v.setupLightsView(at), ht === !0 && qt.setGlobalState(T.clippingPlanes, at), ea(L, nt, at), It.updateMultisampleRenderTarget(St), It.updateRenderTargetMipmap(St), yt.has("WEBGL_multisampled_render_to_texture") === !1) {
        let oe = !1;
        for (let Jt = 0, Te = W.length; Jt < Te; Jt++) {
          const Fe = W[Jt], un = Fe.object, cn = Fe.geometry, Ue = Fe.material, ie = Fe.group;
          if (Ue.side === Ps && un.layers.test(at.layers)) {
            const In = Ue.side;
            Ue.side = Ki, Ue.needsUpdate = !0, Rl(un, nt, at, cn, Ue, ie), Ue.side = In, Ue.needsUpdate = !0, oe = !0;
          }
        }
        oe === !0 && (It.updateMultisampleRenderTarget(St), It.updateRenderTargetMipmap(St));
      }
      T.setRenderTarget(Yt), T.setClearColor(Q, J), re !== void 0 && (at.viewport = re), T.toneMapping = Vt;
    }
    function ea(L, W, nt) {
      const at = W.isScene === !0 ? W.overrideMaterial : null;
      for (let Z = 0, St = L.length; Z < St; Z++) {
        const Ut = L[Z], Yt = Ut.object, Vt = Ut.geometry, re = Ut.group;
        let oe = Ut.material;
        oe.allowOverride === !0 && at !== null && (oe = at), Yt.layers.test(nt.layers) && Rl(Yt, W, nt, Vt, oe, re);
      }
    }
    function Rl(L, W, nt, at, Z, St) {
      L.onBeforeRender(T, W, nt, at, Z, St), L.modelViewMatrix.multiplyMatrices(nt.matrixWorldInverse, L.matrixWorld), L.normalMatrix.getNormalMatrix(L.modelViewMatrix), Z.onBeforeRender(T, W, nt, at, L, St), Z.transparent === !0 && Z.side === Ps && Z.forceSinglePass === !1 ? (Z.side = Ki, Z.needsUpdate = !0, T.renderBufferDirect(nt, W, at, Z, L, St), Z.side = ro, Z.needsUpdate = !0, T.renderBufferDirect(nt, W, at, Z, L, St), Z.side = Ps) : T.renderBufferDirect(nt, W, at, Z, L, St), L.onAfterRender(T, W, nt, at, Z, St);
    }
    function ln(L, W, nt) {
      W.isScene !== !0 && (W = qe);
      const at = _t.get(L), Z = v.state.lights, St = v.state.shadowsArray, Ut = Z.state.version, Yt = gt.getParameters(L, Z.state, St, W, nt), Vt = gt.getProgramCacheKey(Yt);
      let re = at.programs;
      at.environment = L.isMeshStandardMaterial ? W.environment : null, at.fog = W.fog, at.envMap = (L.isMeshStandardMaterial ? F : he).get(L.envMap || at.environment), at.envMapRotation = at.environment !== null && L.envMap === null ? W.environmentRotation : L.envMapRotation, re === void 0 && (L.addEventListener("dispose", Wt), re = /* @__PURE__ */ new Map(), at.programs = re);
      let oe = re.get(Vt);
      if (oe !== void 0) {
        if (at.currentProgram === oe && at.lightsStateVersion === Ut)
          return sc(L, Yt), oe;
      } else
        Yt.uniforms = gt.getUniforms(L), L.onBeforeCompile(Yt, T), oe = gt.acquireProgram(Yt, Vt), re.set(Vt, oe), at.uniforms = Yt.uniforms;
      const Jt = at.uniforms;
      return (!L.isShaderMaterial && !L.isRawShaderMaterial || L.clipping === !0) && (Jt.clippingPlanes = qt.uniform), sc(L, Yt), at.needsLights = Ay(L), at.lightsStateVersion = Ut, at.needsLights && (Jt.ambientLightColor.value = Z.state.ambient, Jt.lightProbe.value = Z.state.probe, Jt.directionalLights.value = Z.state.directional, Jt.directionalLightShadows.value = Z.state.directionalShadow, Jt.spotLights.value = Z.state.spot, Jt.spotLightShadows.value = Z.state.spotShadow, Jt.rectAreaLights.value = Z.state.rectArea, Jt.ltc_1.value = Z.state.rectAreaLTC1, Jt.ltc_2.value = Z.state.rectAreaLTC2, Jt.pointLights.value = Z.state.point, Jt.pointLightShadows.value = Z.state.pointShadow, Jt.hemisphereLights.value = Z.state.hemi, Jt.directionalShadowMap.value = Z.state.directionalShadowMap, Jt.directionalShadowMatrix.value = Z.state.directionalShadowMatrix, Jt.spotShadowMap.value = Z.state.spotShadowMap, Jt.spotLightMatrix.value = Z.state.spotLightMatrix, Jt.spotLightMap.value = Z.state.spotLightMap, Jt.pointShadowMap.value = Z.state.pointShadowMap, Jt.pointShadowMatrix.value = Z.state.pointShadowMatrix), at.currentProgram = oe, at.uniformsList = null, oe;
    }
    function ac(L) {
      if (L.uniformsList === null) {
        const W = L.currentProgram.getUniforms();
        L.uniformsList = X0.seqWithValue(W.seq, L.uniforms);
      }
      return L.uniformsList;
    }
    function sc(L, W) {
      const nt = _t.get(L);
      nt.outputColorSpace = W.outputColorSpace, nt.batching = W.batching, nt.batchingColor = W.batchingColor, nt.instancing = W.instancing, nt.instancingColor = W.instancingColor, nt.instancingMorph = W.instancingMorph, nt.skinning = W.skinning, nt.morphTargets = W.morphTargets, nt.morphNormals = W.morphNormals, nt.morphColors = W.morphColors, nt.morphTargetsCount = W.morphTargetsCount, nt.numClippingPlanes = W.numClippingPlanes, nt.numIntersection = W.numClipIntersection, nt.vertexAlphas = W.vertexAlphas, nt.vertexTangents = W.vertexTangents, nt.toneMapping = W.toneMapping;
    }
    function Dm(L, W, nt, at, Z) {
      W.isScene !== !0 && (W = qe), It.resetTextureUnits();
      const St = W.fog, Ut = at.isMeshStandardMaterial ? W.environment : null, Yt = O === null ? T.outputColorSpace : O.isXRRenderTarget === !0 ? O.texture.colorSpace : vl, Vt = (at.isMeshStandardMaterial ? F : he).get(at.envMap || Ut), re = at.vertexColors === !0 && !!nt.attributes.color && nt.attributes.color.itemSize === 4, oe = !!nt.attributes.tangent && (!!at.normalMap || at.anisotropy > 0), Jt = !!nt.morphAttributes.position, Te = !!nt.morphAttributes.normal, Fe = !!nt.morphAttributes.color;
      let un = cr;
      at.toneMapped && (O === null || O.isXRRenderTarget === !0) && (un = T.toneMapping);
      const cn = nt.morphAttributes.position || nt.morphAttributes.normal || nt.morphAttributes.color, Ue = cn !== void 0 ? cn.length : 0, ie = _t.get(at), In = v.state.lights;
      if (ht === !0 && (kt === !0 || L !== C)) {
        const hi = L === C && at.id === R;
        qt.setState(at, L, hi);
      }
      let Pe = !1;
      at.version === ie.__version ? (ie.needsLights && ie.lightsStateVersion !== In.state.version || ie.outputColorSpace !== Yt || Z.isBatchedMesh && ie.batching === !1 || !Z.isBatchedMesh && ie.batching === !0 || Z.isBatchedMesh && ie.batchingColor === !0 && Z.colorTexture === null || Z.isBatchedMesh && ie.batchingColor === !1 && Z.colorTexture !== null || Z.isInstancedMesh && ie.instancing === !1 || !Z.isInstancedMesh && ie.instancing === !0 || Z.isSkinnedMesh && ie.skinning === !1 || !Z.isSkinnedMesh && ie.skinning === !0 || Z.isInstancedMesh && ie.instancingColor === !0 && Z.instanceColor === null || Z.isInstancedMesh && ie.instancingColor === !1 && Z.instanceColor !== null || Z.isInstancedMesh && ie.instancingMorph === !0 && Z.morphTexture === null || Z.isInstancedMesh && ie.instancingMorph === !1 && Z.morphTexture !== null || ie.envMap !== Vt || at.fog === !0 && ie.fog !== St || ie.numClippingPlanes !== void 0 && (ie.numClippingPlanes !== qt.numPlanes || ie.numIntersection !== qt.numIntersection) || ie.vertexAlphas !== re || ie.vertexTangents !== oe || ie.morphTargets !== Jt || ie.morphNormals !== Te || ie.morphColors !== Fe || ie.toneMapping !== un || ie.morphTargetsCount !== Ue) && (Pe = !0) : (Pe = !0, ie.__version = at.version);
      let na = ie.currentProgram;
      Pe === !0 && (na = ln(at, W, Z));
      let Xs = !1, Mi = !1, fo = !1;
      const sn = na.getUniforms(), Hi = ie.uniforms;
      if (ct.useProgram(na.program) && (Xs = !0, Mi = !0, fo = !0), at.id !== R && (R = at.id, Mi = !0), Xs || C !== L) {
        ct.buffers.depth.getReversed() ? (Ot.copy(L.projectionMatrix), yV(Ot), xV(Ot), sn.setValue(I, "projectionMatrix", Ot)) : sn.setValue(I, "projectionMatrix", L.projectionMatrix), sn.setValue(I, "viewMatrix", L.matrixWorldInverse);
        const di = sn.map.cameraPosition;
        di !== void 0 && di.setValue(I, pe.setFromMatrixPosition(L.matrixWorld)), Et.logarithmicDepthBuffer && sn.setValue(
          I,
          "logDepthBufFC",
          2 / (Math.log(L.far + 1) / Math.LN2)
        ), (at.isMeshPhongMaterial || at.isMeshToonMaterial || at.isMeshLambertMaterial || at.isMeshBasicMaterial || at.isMeshStandardMaterial || at.isShaderMaterial) && sn.setValue(I, "isOrthographic", L.isOrthographicCamera === !0), C !== L && (C = L, Mi = !0, fo = !0);
      }
      if (Z.isSkinnedMesh) {
        sn.setOptional(I, Z, "bindMatrix"), sn.setOptional(I, Z, "bindMatrixInverse");
        const hi = Z.skeleton;
        hi && (hi.boneTexture === null && hi.computeBoneTexture(), sn.setValue(I, "boneTexture", hi.boneTexture, It));
      }
      Z.isBatchedMesh && (sn.setOptional(I, Z, "batchingTexture"), sn.setValue(I, "batchingTexture", Z._matricesTexture, It), sn.setOptional(I, Z, "batchingIdTexture"), sn.setValue(I, "batchingIdTexture", Z._indirectTexture, It), sn.setOptional(I, Z, "batchingColorTexture"), Z._colorsTexture !== null && sn.setValue(I, "batchingColorTexture", Z._colorsTexture, It));
      const Fi = nt.morphAttributes;
      if ((Fi.position !== void 0 || Fi.normal !== void 0 || Fi.color !== void 0) && zt.update(Z, nt, na), (Mi || ie.receiveShadow !== Z.receiveShadow) && (ie.receiveShadow = Z.receiveShadow, sn.setValue(I, "receiveShadow", Z.receiveShadow)), at.isMeshGouraudMaterial && at.envMap !== null && (Hi.envMap.value = Vt, Hi.flipEnvMap.value = Vt.isCubeTexture && Vt.isRenderTargetTexture === !1 ? -1 : 1), at.isMeshStandardMaterial && at.envMap === null && W.environment !== null && (Hi.envMapIntensity.value = W.environmentIntensity), Mi && (sn.setValue(I, "toneMappingExposure", T.toneMappingExposure), ie.needsLights && Um(Hi, fo), St && at.fog === !0 && ot.refreshFogUniforms(Hi, St), ot.refreshMaterialUniforms(Hi, at, G, q, v.state.transmissionRenderTarget[L.id]), X0.upload(I, ac(ie), Hi, It)), at.isShaderMaterial && at.uniformsNeedUpdate === !0 && (X0.upload(I, ac(ie), Hi, It), at.uniformsNeedUpdate = !1), at.isSpriteMaterial && sn.setValue(I, "center", Z.center), sn.setValue(I, "modelViewMatrix", Z.modelViewMatrix), sn.setValue(I, "normalMatrix", Z.normalMatrix), sn.setValue(I, "modelMatrix", Z.matrixWorld), at.isShaderMaterial || at.isRawShaderMaterial) {
        const hi = at.uniformsGroups;
        for (let di = 0, qs = hi.length; di < qs; di++) {
          const Ys = hi[di];
          k.update(Ys, na), k.bind(Ys, na);
        }
      }
      return na;
    }
    function Um(L, W) {
      L.ambientLightColor.needsUpdate = W, L.lightProbe.needsUpdate = W, L.directionalLights.needsUpdate = W, L.directionalLightShadows.needsUpdate = W, L.pointLights.needsUpdate = W, L.pointLightShadows.needsUpdate = W, L.spotLights.needsUpdate = W, L.spotLightShadows.needsUpdate = W, L.rectAreaLights.needsUpdate = W, L.hemisphereLights.needsUpdate = W;
    }
    function Ay(L) {
      return L.isMeshLambertMaterial || L.isMeshToonMaterial || L.isMeshPhongMaterial || L.isMeshStandardMaterial || L.isShadowMaterial || L.isShaderMaterial && L.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return D;
    }, this.getActiveMipmapLevel = function() {
      return U;
    }, this.getRenderTarget = function() {
      return O;
    }, this.setRenderTargetTextures = function(L, W, nt) {
      const at = _t.get(L);
      at.__autoAllocateDepthBuffer = L.resolveDepthBuffer === !1, at.__autoAllocateDepthBuffer === !1 && (at.__useRenderToTexture = !1), _t.get(L.texture).__webglTexture = W, _t.get(L.depthTexture).__webglTexture = at.__autoAllocateDepthBuffer ? void 0 : nt, at.__hasExternalTextures = !0;
    }, this.setRenderTargetFramebuffer = function(L, W) {
      const nt = _t.get(L);
      nt.__webglFramebuffer = W, nt.__useDefaultFramebuffer = W === void 0;
    };
    const Dh = I.createFramebuffer();
    this.setRenderTarget = function(L, W = 0, nt = 0) {
      O = L, D = W, U = nt;
      let at = !0, Z = null, St = !1, Ut = !1;
      if (L) {
        const Vt = _t.get(L);
        if (Vt.__useDefaultFramebuffer !== void 0)
          ct.bindFramebuffer(I.FRAMEBUFFER, null), at = !1;
        else if (Vt.__webglFramebuffer === void 0)
          It.setupRenderTarget(L);
        else if (Vt.__hasExternalTextures)
          It.rebindTextures(L, _t.get(L.texture).__webglTexture, _t.get(L.depthTexture).__webglTexture);
        else if (L.depthBuffer) {
          const Jt = L.depthTexture;
          if (Vt.__boundDepthTexture !== Jt) {
            if (Jt !== null && _t.has(Jt) && (L.width !== Jt.image.width || L.height !== Jt.image.height))
              throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
            It.setupDepthRenderbuffer(L);
          }
        }
        const re = L.texture;
        (re.isData3DTexture || re.isDataArrayTexture || re.isCompressedArrayTexture) && (Ut = !0);
        const oe = _t.get(L).__webglFramebuffer;
        L.isWebGLCubeRenderTarget ? (Array.isArray(oe[W]) ? Z = oe[W][nt] : Z = oe[W], St = !0) : L.samples > 0 && It.useMultisampledRTT(L) === !1 ? Z = _t.get(L).__webglMultisampledFramebuffer : Array.isArray(oe) ? Z = oe[nt] : Z = oe, B.copy(L.viewport), Y.copy(L.scissor), V = L.scissorTest;
      } else
        B.copy(mt).multiplyScalar(G).floor(), Y.copy(Rt).multiplyScalar(G).floor(), V = Qt;
      if (nt !== 0 && (Z = Dh), ct.bindFramebuffer(I.FRAMEBUFFER, Z) && at && ct.drawBuffers(L, Z), ct.viewport(B), ct.scissor(Y), ct.setScissorTest(V), St) {
        const Vt = _t.get(L.texture);
        I.framebufferTexture2D(I.FRAMEBUFFER, I.COLOR_ATTACHMENT0, I.TEXTURE_CUBE_MAP_POSITIVE_X + W, Vt.__webglTexture, nt);
      } else if (Ut) {
        const Vt = _t.get(L.texture), re = W;
        I.framebufferTextureLayer(I.FRAMEBUFFER, I.COLOR_ATTACHMENT0, Vt.__webglTexture, nt, re);
      } else if (L !== null && nt !== 0) {
        const Vt = _t.get(L.texture);
        I.framebufferTexture2D(I.FRAMEBUFFER, I.COLOR_ATTACHMENT0, I.TEXTURE_2D, Vt.__webglTexture, nt);
      }
      R = -1;
    }, this.readRenderTargetPixels = function(L, W, nt, at, Z, St, Ut, Yt = 0) {
      if (!(L && L.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let Vt = _t.get(L).__webglFramebuffer;
      if (L.isWebGLCubeRenderTarget && Ut !== void 0 && (Vt = Vt[Ut]), Vt) {
        ct.bindFramebuffer(I.FRAMEBUFFER, Vt);
        try {
          const re = L.textures[Yt], oe = re.format, Jt = re.type;
          if (!Et.textureFormatReadable(oe)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (!Et.textureTypeReadable(Jt)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          W >= 0 && W <= L.width - at && nt >= 0 && nt <= L.height - Z && (L.textures.length > 1 && I.readBuffer(I.COLOR_ATTACHMENT0 + Yt), I.readPixels(W, nt, at, Z, wt.convert(oe), wt.convert(Jt), St));
        } finally {
          const re = O !== null ? _t.get(O).__webglFramebuffer : null;
          ct.bindFramebuffer(I.FRAMEBUFFER, re);
        }
      }
    }, this.readRenderTargetPixelsAsync = async function(L, W, nt, at, Z, St, Ut, Yt = 0) {
      if (!(L && L.isWebGLRenderTarget))
        throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      let Vt = _t.get(L).__webglFramebuffer;
      if (L.isWebGLCubeRenderTarget && Ut !== void 0 && (Vt = Vt[Ut]), Vt)
        if (W >= 0 && W <= L.width - at && nt >= 0 && nt <= L.height - Z) {
          ct.bindFramebuffer(I.FRAMEBUFFER, Vt);
          const re = L.textures[Yt], oe = re.format, Jt = re.type;
          if (!Et.textureFormatReadable(oe))
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          if (!Et.textureTypeReadable(Jt))
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          const Te = I.createBuffer();
          I.bindBuffer(I.PIXEL_PACK_BUFFER, Te), I.bufferData(I.PIXEL_PACK_BUFFER, St.byteLength, I.STREAM_READ), L.textures.length > 1 && I.readBuffer(I.COLOR_ATTACHMENT0 + Yt), I.readPixels(W, nt, at, Z, wt.convert(oe), wt.convert(Jt), 0);
          const Fe = O !== null ? _t.get(O).__webglFramebuffer : null;
          ct.bindFramebuffer(I.FRAMEBUFFER, Fe);
          const un = I.fenceSync(I.SYNC_GPU_COMMANDS_COMPLETE, 0);
          return I.flush(), await _V(I, un, 4), I.bindBuffer(I.PIXEL_PACK_BUFFER, Te), I.getBufferSubData(I.PIXEL_PACK_BUFFER, 0, St), I.deleteBuffer(Te), I.deleteSync(un), St;
        } else
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
    }, this.copyFramebufferToTexture = function(L, W = null, nt = 0) {
      const at = Math.pow(2, -nt), Z = Math.floor(L.image.width * at), St = Math.floor(L.image.height * at), Ut = W !== null ? W.x : 0, Yt = W !== null ? W.y : 0;
      It.setTexture2D(L, 0), I.copyTexSubImage2D(I.TEXTURE_2D, nt, 0, 0, Ut, Yt, Z, St), ct.unbindTexture();
    };
    const Uh = I.createFramebuffer(), Oh = I.createFramebuffer();
    this.copyTextureToTexture = function(L, W, nt = null, at = null, Z = 0, St = null) {
      St === null && (Z !== 0 ? (Pf("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."), St = Z, Z = 0) : St = 0);
      let Ut, Yt, Vt, re, oe, Jt, Te, Fe, un;
      const cn = L.isCompressedTexture ? L.mipmaps[St] : L.image;
      if (nt !== null)
        Ut = nt.max.x - nt.min.x, Yt = nt.max.y - nt.min.y, Vt = nt.isBox3 ? nt.max.z - nt.min.z : 1, re = nt.min.x, oe = nt.min.y, Jt = nt.isBox3 ? nt.min.z : 0;
      else {
        const Fi = Math.pow(2, -Z);
        Ut = Math.floor(cn.width * Fi), Yt = Math.floor(cn.height * Fi), L.isDataArrayTexture ? Vt = cn.depth : L.isData3DTexture ? Vt = Math.floor(cn.depth * Fi) : Vt = 1, re = 0, oe = 0, Jt = 0;
      }
      at !== null ? (Te = at.x, Fe = at.y, un = at.z) : (Te = 0, Fe = 0, un = 0);
      const Ue = wt.convert(W.format), ie = wt.convert(W.type);
      let In;
      W.isData3DTexture ? (It.setTexture3D(W, 0), In = I.TEXTURE_3D) : W.isDataArrayTexture || W.isCompressedArrayTexture ? (It.setTexture2DArray(W, 0), In = I.TEXTURE_2D_ARRAY) : (It.setTexture2D(W, 0), In = I.TEXTURE_2D), I.pixelStorei(I.UNPACK_FLIP_Y_WEBGL, W.flipY), I.pixelStorei(I.UNPACK_PREMULTIPLY_ALPHA_WEBGL, W.premultiplyAlpha), I.pixelStorei(I.UNPACK_ALIGNMENT, W.unpackAlignment);
      const Pe = I.getParameter(I.UNPACK_ROW_LENGTH), na = I.getParameter(I.UNPACK_IMAGE_HEIGHT), Xs = I.getParameter(I.UNPACK_SKIP_PIXELS), Mi = I.getParameter(I.UNPACK_SKIP_ROWS), fo = I.getParameter(I.UNPACK_SKIP_IMAGES);
      I.pixelStorei(I.UNPACK_ROW_LENGTH, cn.width), I.pixelStorei(I.UNPACK_IMAGE_HEIGHT, cn.height), I.pixelStorei(I.UNPACK_SKIP_PIXELS, re), I.pixelStorei(I.UNPACK_SKIP_ROWS, oe), I.pixelStorei(I.UNPACK_SKIP_IMAGES, Jt);
      const sn = L.isDataArrayTexture || L.isData3DTexture, Hi = W.isDataArrayTexture || W.isData3DTexture;
      if (L.isDepthTexture) {
        const Fi = _t.get(L), hi = _t.get(W), di = _t.get(Fi.__renderTarget), qs = _t.get(hi.__renderTarget);
        ct.bindFramebuffer(I.READ_FRAMEBUFFER, di.__webglFramebuffer), ct.bindFramebuffer(I.DRAW_FRAMEBUFFER, qs.__webglFramebuffer);
        for (let Ys = 0; Ys < Vt; Ys++)
          sn && (I.framebufferTextureLayer(I.READ_FRAMEBUFFER, I.COLOR_ATTACHMENT0, _t.get(L).__webglTexture, Z, Jt + Ys), I.framebufferTextureLayer(I.DRAW_FRAMEBUFFER, I.COLOR_ATTACHMENT0, _t.get(W).__webglTexture, St, un + Ys)), I.blitFramebuffer(re, oe, Ut, Yt, Te, Fe, Ut, Yt, I.DEPTH_BUFFER_BIT, I.NEAREST);
        ct.bindFramebuffer(I.READ_FRAMEBUFFER, null), ct.bindFramebuffer(I.DRAW_FRAMEBUFFER, null);
      } else if (Z !== 0 || L.isRenderTargetTexture || _t.has(L)) {
        const Fi = _t.get(L), hi = _t.get(W);
        ct.bindFramebuffer(I.READ_FRAMEBUFFER, Uh), ct.bindFramebuffer(I.DRAW_FRAMEBUFFER, Oh);
        for (let di = 0; di < Vt; di++)
          sn ? I.framebufferTextureLayer(I.READ_FRAMEBUFFER, I.COLOR_ATTACHMENT0, Fi.__webglTexture, Z, Jt + di) : I.framebufferTexture2D(I.READ_FRAMEBUFFER, I.COLOR_ATTACHMENT0, I.TEXTURE_2D, Fi.__webglTexture, Z), Hi ? I.framebufferTextureLayer(I.DRAW_FRAMEBUFFER, I.COLOR_ATTACHMENT0, hi.__webglTexture, St, un + di) : I.framebufferTexture2D(I.DRAW_FRAMEBUFFER, I.COLOR_ATTACHMENT0, I.TEXTURE_2D, hi.__webglTexture, St), Z !== 0 ? I.blitFramebuffer(re, oe, Ut, Yt, Te, Fe, Ut, Yt, I.COLOR_BUFFER_BIT, I.NEAREST) : Hi ? I.copyTexSubImage3D(In, St, Te, Fe, un + di, re, oe, Ut, Yt) : I.copyTexSubImage2D(In, St, Te, Fe, re, oe, Ut, Yt);
        ct.bindFramebuffer(I.READ_FRAMEBUFFER, null), ct.bindFramebuffer(I.DRAW_FRAMEBUFFER, null);
      } else
        Hi ? L.isDataTexture || L.isData3DTexture ? I.texSubImage3D(In, St, Te, Fe, un, Ut, Yt, Vt, Ue, ie, cn.data) : W.isCompressedArrayTexture ? I.compressedTexSubImage3D(In, St, Te, Fe, un, Ut, Yt, Vt, Ue, cn.data) : I.texSubImage3D(In, St, Te, Fe, un, Ut, Yt, Vt, Ue, ie, cn) : L.isDataTexture ? I.texSubImage2D(I.TEXTURE_2D, St, Te, Fe, Ut, Yt, Ue, ie, cn.data) : L.isCompressedTexture ? I.compressedTexSubImage2D(I.TEXTURE_2D, St, Te, Fe, cn.width, cn.height, Ue, cn.data) : I.texSubImage2D(I.TEXTURE_2D, St, Te, Fe, Ut, Yt, Ue, ie, cn);
      I.pixelStorei(I.UNPACK_ROW_LENGTH, Pe), I.pixelStorei(I.UNPACK_IMAGE_HEIGHT, na), I.pixelStorei(I.UNPACK_SKIP_PIXELS, Xs), I.pixelStorei(I.UNPACK_SKIP_ROWS, Mi), I.pixelStorei(I.UNPACK_SKIP_IMAGES, fo), St === 0 && W.generateMipmaps && I.generateMipmap(In), ct.unbindTexture();
    }, this.copyTextureToTexture3D = function(L, W, nt = null, at = null, Z = 0) {
      return Pf('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'), this.copyTextureToTexture(L, W, nt, at, Z);
    }, this.initRenderTarget = function(L) {
      _t.get(L).__webglFramebuffer === void 0 && It.setupRenderTarget(L);
    }, this.initTexture = function(L) {
      L.isCubeTexture ? It.setTextureCube(L, 0) : L.isData3DTexture ? It.setTexture3D(L, 0) : L.isDataArrayTexture || L.isCompressedArrayTexture ? It.setTexture2DArray(L, 0) : It.setTexture2D(L, 0), ct.unbindTexture();
    }, this.resetState = function() {
      D = 0, U = 0, O = null, ct.reset(), se.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  /**
   * Defines the coordinate system of the renderer.
   *
   * In `WebGLRenderer`, the value is always `WebGLCoordinateSystem`.
   *
   * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}
   * @default WebGLCoordinateSystem
   * @readonly
   */
  get coordinateSystem() {
    return _s;
  }
  /**
   * Defines the output color space of the renderer.
   *
   * @type {SRGBColorSpace|LinearSRGBColorSpace}
   * @default SRGBColorSpace
   */
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(t) {
    this._outputColorSpace = t;
    const e = this.getContext();
    e.drawingBufferColorSpace = Oe._getDrawingBufferColorSpace(t), e.unpackColorSpace = Oe._getUnpackColorSpace();
  }
}
const DY = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: VE,
  AddEquation: Yo,
  AddOperation: CL,
  AdditiveAnimationBlendMode: QE,
  AdditiveBlending: WM,
  AgXToneMapping: NL,
  AlphaFormat: kE,
  AlwaysCompare: ZL,
  AlwaysDepth: Ov,
  AlwaysStencilFunc: KM,
  AmbientLight: Gz,
  AnimationAction: Kz,
  AnimationClip: Qp,
  AnimationLoader: k8,
  AnimationMixer: xG,
  AnimationObjectGroup: _G,
  AnimationUtils: G8,
  ArcCurve: dz,
  ArrayCamera: Zz,
  ArrowHelper: VG,
  AttachedBindMode: QM,
  Audio: jz,
  AudioAnalyser: lG,
  AudioContext: MT,
  AudioListener: sG,
  AudioLoader: nG,
  AxesHelper: GG,
  BackSide: Ki,
  BasicDepthPacking: HL,
  BasicShadowMap: lL,
  BatchedMesh: lz,
  Bone: sT,
  BooleanKeyframeTrack: ec,
  Box2: RG,
  Box3: Pi,
  Box3Helper: HG,
  BoxGeometry: tc,
  BoxHelper: IG,
  BufferAttribute: an,
  BufferGeometry: ye,
  BufferGeometryLoader: Wz,
  ByteType: XE,
  Cache: jr,
  Camera: $_,
  CameraHelper: PG,
  CanvasTexture: f8,
  CapsuleGeometry: ry,
  CatmullRomCurve3: pz,
  CineonToneMapping: UL,
  CircleGeometry: oy,
  ClampToEdgeWrapping: vs,
  Clock: bT,
  Color: Pt,
  ColorKeyframeTrack: yT,
  ColorManagement: Oe,
  CompressedArrayTexture: u8,
  CompressedCubeTexture: c8,
  CompressedTexture: sy,
  CompressedTextureLoader: W8,
  ConeGeometry: Sm,
  ConstantAlphaFactor: TL,
  ConstantColorFactor: bL,
  Controls: qG,
  CubeCamera: ez,
  CubeReflectionMapping: oo,
  CubeRefractionMapping: gl,
  CubeTexture: ym,
  CubeTextureLoader: Z8,
  CubeUVReflectionMapping: Sh,
  CubicBezierCurve: uT,
  CubicBezierCurve3: mz,
  CubicInterpolant: Lz,
  CullFaceBack: kM,
  CullFaceFront: oL,
  CullFaceFrontBack: _F,
  CullFaceNone: rL,
  Curve: Gs,
  CurvePath: vz,
  CustomBlending: uL,
  CustomToneMapping: OL,
  CylinderGeometry: xm,
  Cylindrical: AG,
  Data3DTexture: J_,
  DataArrayTexture: K_,
  DataTexture: fr,
  DataTextureLoader: j8,
  DataUtils: zV,
  DecrementStencilOp: OF,
  DecrementWrapStencilOp: LF,
  DefaultLoadingManager: Pz,
  DepthFormat: sh,
  DepthStencilFormat: rh,
  DepthTexture: oT,
  DetachedBindMode: zL,
  DirectionalLight: Vz,
  DirectionalLightHelper: BG,
  DiscreteInterpolant: zz,
  DodecahedronGeometry: ly,
  DoubleSide: Ps,
  DstAlphaFactor: _L,
  DstColorFactor: xL,
  DynamicCopyUsage: jF,
  DynamicDrawUsage: XF,
  DynamicReadUsage: kF,
  EdgesGeometry: hz,
  EllipseCurve: uy,
  EqualCompare: qL,
  EqualDepth: Lv,
  EqualStencilFunc: IF,
  EquirectangularReflectionMapping: zp,
  EquirectangularRefractionMapping: Bp,
  Euler: _a,
  EventDispatcher: gr,
  ExtrudeGeometry: cy,
  FileLoader: uo,
  Float16BufferAttribute: GV,
  Float32BufferAttribute: Zt,
  FloatType: fa,
  Fog: ey,
  FogExp2: ty,
  FramebufferTexture: l8,
  FrontSide: ro,
  Frustum: Eh,
  FrustumArray: ay,
  GLBufferAttribute: TG,
  GLSL1: KF,
  GLSL3: JM,
  GreaterCompare: YL,
  GreaterDepth: Bv,
  GreaterEqualCompare: WL,
  GreaterEqualDepth: zv,
  GreaterEqualStencilFunc: GF,
  GreaterStencilFunc: FF,
  GridHelper: LG,
  Group: Ef,
  HalfFloatType: Mh,
  HemisphereLight: Iz,
  HemisphereLightHelper: NG,
  IcosahedronGeometry: fy,
  ImageBitmapLoader: eG,
  ImageLoader: Kp,
  ImageUtils: JL,
  IncrementStencilOp: UF,
  IncrementWrapStencilOp: NF,
  InstancedBufferAttribute: ch,
  InstancedBufferGeometry: kz,
  InstancedInterleavedBuffer: EG,
  InstancedMesh: oz,
  Int16BufferAttribute: FV,
  Int32BufferAttribute: VV,
  Int8BufferAttribute: PV,
  IntType: q_,
  InterleavedBuffer: ny,
  InterleavedBufferAttribute: qu,
  Interpolant: Em,
  InterpolateDiscrete: Hp,
  InterpolateLinear: c_,
  InterpolateSmooth: V0,
  InterpolationSamplingMode: tV,
  InterpolationSamplingType: $F,
  InvertStencilOp: zF,
  KeepStencilOp: pu,
  KeyframeTrack: bs,
  LOD: sz,
  LatheGeometry: hy,
  Layers: lh,
  LessCompare: XL,
  LessDepth: Nv,
  LessEqualCompare: KE,
  LessEqualDepth: Xu,
  LessEqualStencilFunc: HF,
  LessStencilFunc: PF,
  Light: Tl,
  LightProbe: Yz,
  Line: _l,
  Line3: CG,
  LineBasicMaterial: $i,
  LineCurve: cT,
  LineCurve3: gz,
  LineDashedMaterial: Uz,
  LineLoop: uz,
  LineSegments: vr,
  LinearFilter: Qn,
  LinearInterpolant: _T,
  LinearMipMapLinearFilter: MF,
  LinearMipMapNearestFilter: SF,
  LinearMipmapLinearFilter: ar,
  LinearMipmapNearestFilter: ip,
  LinearSRGBColorSpace: vl,
  LinearToneMapping: wL,
  LinearTransfer: Vp,
  Loader: xa,
  LoaderUtils: ib,
  LoadingManager: xT,
  LoopOnce: BL,
  LoopPingPong: IL,
  LoopRepeat: PL,
  MOUSE: gF,
  Material: Ii,
  MaterialLoader: xy,
  MathUtils: jL,
  Matrix2: RT,
  Matrix3: ge,
  Matrix4: ae,
  MaxEquation: dL,
  Mesh: Yn,
  MeshBasicMaterial: bl,
  MeshDepthMaterial: mT,
  MeshDistanceMaterial: gT,
  MeshLambertMaterial: wz,
  MeshMatcapMaterial: Dz,
  MeshNormalMaterial: Cz,
  MeshPhongMaterial: Az,
  MeshPhysicalMaterial: Tz,
  MeshStandardMaterial: pT,
  MeshToonMaterial: Rz,
  MinEquation: hL,
  MirroredRepeatWrapping: Ip,
  MixOperation: RL,
  MultiplyBlending: jM,
  MultiplyOperation: vm,
  NearestFilter: xi,
  NearestMipMapLinearFilter: xF,
  NearestMipMapNearestFilter: yF,
  NearestMipmapLinearFilter: Mf,
  NearestMipmapNearestFilter: GE,
  NeutralToneMapping: LL,
  NeverCompare: GL,
  NeverDepth: Uv,
  NeverStencilFunc: BF,
  NoBlending: Jr,
  NoColorSpace: Gr,
  NoToneMapping: cr,
  NormalAnimationBlendMode: Q_,
  NormalBlending: zu,
  NotEqualCompare: kL,
  NotEqualDepth: Pv,
  NotEqualStencilFunc: VF,
  NumberKeyframeTrack: Zp,
  Object3D: He,
  ObjectLoader: $8,
  ObjectSpaceNormalMap: VL,
  OctahedronGeometry: Mm,
  OneFactor: mL,
  OneMinusConstantAlphaFactor: AL,
  OneMinusConstantColorFactor: EL,
  OneMinusDstAlphaFactor: yL,
  OneMinusDstColorFactor: SL,
  OneMinusSrcAlphaFactor: Dv,
  OneMinusSrcColorFactor: vL,
  OrthographicCamera: Am,
  PCFShadowMap: G_,
  PCFSoftShadowMap: np,
  PMREMGenerator: rb,
  Path: p_,
  PerspectiveCamera: li,
  Plane: Fo,
  PlaneGeometry: Th,
  PlaneHelper: FG,
  PointLight: Fz,
  PointLightHelper: UG,
  Points: cz,
  PointsMaterial: rT,
  PolarGridHelper: zG,
  PolyhedronGeometry: El,
  PositionalAudio: oG,
  PropertyBinding: Ie,
  PropertyMixer: Qz,
  QuadraticBezierCurve: fT,
  QuadraticBezierCurve3: hT,
  Quaternion: Jn,
  QuaternionKeyframeTrack: Tm,
  QuaternionLinearInterpolant: Bz,
  RED_GREEN_RGTC2_Format: l_,
  RED_RGTC1_Format: jE,
  REVISION: gm,
  RGBADepthPacking: FL,
  RGBAFormat: zi,
  RGBAIntegerFormat: j_,
  RGBA_ASTC_10x10_Format: n_,
  RGBA_ASTC_10x5_Format: $v,
  RGBA_ASTC_10x6_Format: t_,
  RGBA_ASTC_10x8_Format: e_,
  RGBA_ASTC_12x10_Format: i_,
  RGBA_ASTC_12x12_Format: a_,
  RGBA_ASTC_4x4_Format: Yv,
  RGBA_ASTC_5x4_Format: kv,
  RGBA_ASTC_5x5_Format: Wv,
  RGBA_ASTC_6x5_Format: Zv,
  RGBA_ASTC_6x6_Format: jv,
  RGBA_ASTC_8x5_Format: Qv,
  RGBA_ASTC_8x6_Format: Kv,
  RGBA_ASTC_8x8_Format: Jv,
  RGBA_BPTC_Format: lp,
  RGBA_ETC2_EAC_Format: qv,
  RGBA_PVRTC_2BPPV1_Format: Vv,
  RGBA_PVRTC_4BPPV1_Format: Fv,
  RGBA_S3TC_DXT1_Format: sp,
  RGBA_S3TC_DXT3_Format: rp,
  RGBA_S3TC_DXT5_Format: op,
  RGBDepthPacking: RF,
  RGBFormat: WE,
  RGBIntegerFormat: bF,
  RGB_BPTC_SIGNED_Format: s_,
  RGB_BPTC_UNSIGNED_Format: r_,
  RGB_ETC1_Format: Gv,
  RGB_ETC2_Format: Xv,
  RGB_PVRTC_2BPPV1_Format: Hv,
  RGB_PVRTC_4BPPV1_Format: Iv,
  RGB_S3TC_DXT1_Format: ap,
  RGDepthPacking: CF,
  RGFormat: ZE,
  RGIntegerFormat: Z_,
  RawShaderMaterial: Ez,
  Ray: bh,
  Raycaster: Jz,
  RectAreaLight: Xz,
  RedFormat: W_,
  RedIntegerFormat: _m,
  ReinhardToneMapping: DL,
  RenderTarget: $E,
  RenderTarget3D: SG,
  RepeatWrapping: Pp,
  ReplaceStencilOp: DF,
  ReverseSubtractEquation: fL,
  RingGeometry: dy,
  SIGNED_RED_GREEN_RGTC2_Format: u_,
  SIGNED_RED_RGTC1_Format: o_,
  SRGBColorSpace: Di,
  SRGBTransfer: je,
  Scene: iT,
  ShaderChunk: xe,
  ShaderLib: Bs,
  ShaderMaterial: Ms,
  ShadowMaterial: bz,
  Shape: Pu,
  ShapeGeometry: py,
  ShapePath: XG,
  ShapeUtils: Is,
  ShortType: qE,
  Skeleton: iy,
  SkeletonHelper: DG,
  SkinnedMesh: rz,
  Source: tl,
  Sphere: Si,
  SphereGeometry: bm,
  Spherical: $z,
  SphericalHarmonics3: qz,
  SplineCurve: dT,
  SpotLight: Hz,
  SpotLightHelper: wG,
  Sprite: az,
  SpriteMaterial: aT,
  SrcAlphaFactor: wv,
  SrcAlphaSaturateFactor: ML,
  SrcColorFactor: gL,
  StaticCopyUsage: ZF,
  StaticDrawUsage: Gp,
  StaticReadUsage: YF,
  StereoCamera: iG,
  StreamCopyUsage: QF,
  StreamDrawUsage: qF,
  StreamReadUsage: WF,
  StringKeyframeTrack: nc,
  SubtractEquation: cL,
  SubtractiveBlending: ZM,
  TOUCH: vF,
  TangentSpaceNormalMap: Ml,
  TetrahedronGeometry: my,
  Texture: Sn,
  TextureLoader: yy,
  TextureUtils: jG,
  TimestampQuery: JF,
  TorusGeometry: gy,
  TorusKnotGeometry: vy,
  Triangle: ca,
  TriangleFanDrawMode: AF,
  TriangleStripDrawMode: TF,
  TrianglesDrawMode: EF,
  TubeGeometry: _y,
  UVMapping: X_,
  Uint16BufferAttribute: tT,
  Uint32BufferAttribute: eT,
  Uint8BufferAttribute: IV,
  Uint8ClampedBufferAttribute: HV,
  Uniform: AT,
  UniformsGroup: bG,
  UniformsLib: Nt,
  UniformsUtils: nT,
  UnsignedByteType: Ss,
  UnsignedInt248Type: ah,
  UnsignedInt5999Type: YE,
  UnsignedIntType: lo,
  UnsignedShort4444Type: Y_,
  UnsignedShort5551Type: k_,
  UnsignedShortType: ih,
  VSMShadowMap: Ls,
  Vector2: ft,
  Vector3: H,
  Vector4: De,
  VectorKeyframeTrack: jp,
  VideoFrameTexture: o8,
  VideoTexture: fz,
  WebGL3DRenderTarget: TV,
  WebGLArrayRenderTarget: EV,
  WebGLCoordinateSystem: _s,
  WebGLCubeRenderTarget: nz,
  WebGLRenderTarget: dr,
  WebGLRenderer: o4,
  WebGLUtils: r4,
  WebGPUCoordinateSystem: Xp,
  WebXRController: G0,
  WireframeGeometry: Mz,
  WrapAroundEnding: Fp,
  ZeroCurvatureEnding: _u,
  ZeroFactor: pL,
  ZeroSlopeEnding: yu,
  ZeroStencilOp: wF,
  createCanvasElement: KL
}, Symbol.toStringTag, { value: "Module" }));
var l4 = { exports: {} }, Al = {};
/**
 * @license React
 * react-reconciler-constants.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Al.ConcurrentRoot = 1;
Al.ContinuousEventPriority = 8;
Al.DefaultEventPriority = 32;
Al.DiscreteEventPriority = 2;
Al.IdleEventPriority = 268435456;
Al.LegacyRoot = 0;
Al.NoEventPriority = 0;
l4.exports = Al;
var q0 = l4.exports, u4 = { exports: {} }, c4 = {}, f4 = { exports: {} }, h4 = {};
/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hh = Tt;
function UY(n, t) {
  return n === t && (n !== 0 || 1 / n === 1 / t) || n !== n && t !== t;
}
var OY = typeof Object.is == "function" ? Object.is : UY, NY = hh.useState, LY = hh.useEffect, zY = hh.useLayoutEffect, BY = hh.useDebugValue;
function PY(n, t) {
  var e = t(), i = NY({ inst: { value: e, getSnapshot: t } }), a = i[0].inst, s = i[1];
  return zY(
    function() {
      a.value = e, a.getSnapshot = t, A1(a) && s({ inst: a });
    },
    [n, e, t]
  ), LY(
    function() {
      return A1(a) && s({ inst: a }), n(function() {
        A1(a) && s({ inst: a });
      });
    },
    [n]
  ), BY(e), e;
}
function A1(n) {
  var t = n.getSnapshot;
  n = n.value;
  try {
    var e = t();
    return !OY(n, e);
  } catch {
    return !0;
  }
}
function IY(n, t) {
  return t();
}
var HY = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? IY : PY;
h4.useSyncExternalStore = hh.useSyncExternalStore !== void 0 ? hh.useSyncExternalStore : HY;
f4.exports = h4;
var FY = f4.exports;
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var My = Tt, VY = FY;
function GY(n, t) {
  return n === t && (n !== 0 || 1 / n === 1 / t) || n !== n && t !== t;
}
var XY = typeof Object.is == "function" ? Object.is : GY, qY = VY.useSyncExternalStore, YY = My.useRef, kY = My.useEffect, WY = My.useMemo, ZY = My.useDebugValue;
c4.useSyncExternalStoreWithSelector = function(n, t, e, i, a) {
  var s = YY(null);
  if (s.current === null) {
    var r = { hasValue: !1, value: null };
    s.current = r;
  } else r = s.current;
  s = WY(
    function() {
      function c(g) {
        if (!f) {
          if (f = !0, d = g, g = i(g), a !== void 0 && r.hasValue) {
            var y = r.value;
            if (a(y, g))
              return p = y;
          }
          return p = g;
        }
        if (y = p, XY(d, g)) return y;
        var x = i(g);
        return a !== void 0 && a(y, x) ? (d = g, y) : (d = g, p = x);
      }
      var f = !1, d, p, m = e === void 0 ? null : e;
      return [
        function() {
          return c(t());
        },
        m === null ? void 0 : function() {
          return c(m());
        }
      ];
    },
    [t, e, i, a]
  );
  var l = qY(n, s[0], s[1]);
  return kY(
    function() {
      r.hasValue = !0, r.value = l;
    },
    [l]
  ), ZY(l), l;
};
u4.exports = c4;
var jY = u4.exports;
const QY = /* @__PURE__ */ Mb(jY), f3 = (n) => {
  let t;
  const e = /* @__PURE__ */ new Set(), i = (f, d) => {
    const p = typeof f == "function" ? f(t) : f;
    if (!Object.is(p, t)) {
      const m = t;
      t = d ?? (typeof p != "object" || p === null) ? p : Object.assign({}, t, p), e.forEach((g) => g(t, m));
    }
  }, a = () => t, l = { setState: i, getState: a, getInitialState: () => c, subscribe: (f) => (e.add(f), () => e.delete(f)) }, c = t = n(i, a, l);
  return l;
}, KY = (n) => n ? f3(n) : f3, { useSyncExternalStoreWithSelector: JY } = QY, $Y = (n) => n;
function tk(n, t = $Y, e) {
  const i = JY(
    n.subscribe,
    n.getState,
    n.getInitialState,
    t,
    e
  );
  return MI.useDebugValue(i), i;
}
const h3 = (n, t) => {
  const e = KY(n), i = (a, s = t) => tk(e, a, s);
  return Object.assign(i, e), i;
}, ek = (n, t) => n ? h3(n, t) : h3;
var d4 = { exports: {} }, p4 = { exports: {} }, m4 = { exports: {} }, g4 = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(n) {
  function t(P, q) {
    var G = P.length;
    P.push(q);
    t: for (; 0 < G; ) {
      var it = G - 1 >>> 1, lt = P[it];
      if (0 < a(lt, q))
        P[it] = q, P[G] = lt, G = it;
      else break t;
    }
  }
  function e(P) {
    return P.length === 0 ? null : P[0];
  }
  function i(P) {
    if (P.length === 0) return null;
    var q = P[0], G = P.pop();
    if (G !== q) {
      P[0] = G;
      t: for (var it = 0, lt = P.length, mt = lt >>> 1; it < mt; ) {
        var Rt = 2 * (it + 1) - 1, Qt = P[Rt], $ = Rt + 1, ht = P[$];
        if (0 > a(Qt, G))
          $ < lt && 0 > a(ht, Qt) ? (P[it] = ht, P[$] = G, it = $) : (P[it] = Qt, P[Rt] = G, it = Rt);
        else if ($ < lt && 0 > a(ht, G))
          P[it] = ht, P[$] = G, it = $;
        else break t;
      }
    }
    return q;
  }
  function a(P, q) {
    var G = P.sortIndex - q.sortIndex;
    return G !== 0 ? G : P.id - q.id;
  }
  if (n.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
    var s = performance;
    n.unstable_now = function() {
      return s.now();
    };
  } else {
    var r = Date, l = r.now();
    n.unstable_now = function() {
      return r.now() - l;
    };
  }
  var c = [], f = [], d = 1, p = null, m = 3, g = !1, y = !1, x = !1, M = typeof setTimeout == "function" ? setTimeout : null, v = typeof clearTimeout == "function" ? clearTimeout : null, S = typeof setImmediate < "u" ? setImmediate : null;
  function E(P) {
    for (var q = e(f); q !== null; ) {
      if (q.callback === null) i(f);
      else if (q.startTime <= P)
        i(f), q.sortIndex = q.expirationTime, t(c, q);
      else break;
      q = e(f);
    }
  }
  function T(P) {
    if (x = !1, E(P), !y)
      if (e(c) !== null)
        y = !0, Q();
      else {
        var q = e(f);
        q !== null && J(T, q.startTime - P);
      }
  }
  var w = !1, D = -1, U = 5, O = -1;
  function R() {
    return !(n.unstable_now() - O < U);
  }
  function C() {
    if (w) {
      var P = n.unstable_now();
      O = P;
      var q = !0;
      try {
        t: {
          y = !1, x && (x = !1, v(D), D = -1), g = !0;
          var G = m;
          try {
            e: {
              for (E(P), p = e(c); p !== null && !(p.expirationTime > P && R()); ) {
                var it = p.callback;
                if (typeof it == "function") {
                  p.callback = null, m = p.priorityLevel;
                  var lt = it(
                    p.expirationTime <= P
                  );
                  if (P = n.unstable_now(), typeof lt == "function") {
                    p.callback = lt, E(P), q = !0;
                    break e;
                  }
                  p === e(c) && i(c), E(P);
                } else i(c);
                p = e(c);
              }
              if (p !== null) q = !0;
              else {
                var mt = e(f);
                mt !== null && J(
                  T,
                  mt.startTime - P
                ), q = !1;
              }
            }
            break t;
          } finally {
            p = null, m = G, g = !1;
          }
          q = void 0;
        }
      } finally {
        q ? B() : w = !1;
      }
    }
  }
  var B;
  if (typeof S == "function")
    B = function() {
      S(C);
    };
  else if (typeof MessageChannel < "u") {
    var Y = new MessageChannel(), V = Y.port2;
    Y.port1.onmessage = C, B = function() {
      V.postMessage(null);
    };
  } else
    B = function() {
      M(C, 0);
    };
  function Q() {
    w || (w = !0, B());
  }
  function J(P, q) {
    D = M(function() {
      P(n.unstable_now());
    }, q);
  }
  n.unstable_IdlePriority = 5, n.unstable_ImmediatePriority = 1, n.unstable_LowPriority = 4, n.unstable_NormalPriority = 3, n.unstable_Profiling = null, n.unstable_UserBlockingPriority = 2, n.unstable_cancelCallback = function(P) {
    P.callback = null;
  }, n.unstable_continueExecution = function() {
    y || g || (y = !0, Q());
  }, n.unstable_forceFrameRate = function(P) {
    0 > P || 125 < P ? console.error(
      "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
    ) : U = 0 < P ? Math.floor(1e3 / P) : 5;
  }, n.unstable_getCurrentPriorityLevel = function() {
    return m;
  }, n.unstable_getFirstCallbackNode = function() {
    return e(c);
  }, n.unstable_next = function(P) {
    switch (m) {
      case 1:
      case 2:
      case 3:
        var q = 3;
        break;
      default:
        q = m;
    }
    var G = m;
    m = q;
    try {
      return P();
    } finally {
      m = G;
    }
  }, n.unstable_pauseExecution = function() {
  }, n.unstable_requestPaint = function() {
  }, n.unstable_runWithPriority = function(P, q) {
    switch (P) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        P = 3;
    }
    var G = m;
    m = P;
    try {
      return q();
    } finally {
      m = G;
    }
  }, n.unstable_scheduleCallback = function(P, q, G) {
    var it = n.unstable_now();
    switch (typeof G == "object" && G !== null ? (G = G.delay, G = typeof G == "number" && 0 < G ? it + G : it) : G = it, P) {
      case 1:
        var lt = -1;
        break;
      case 2:
        lt = 250;
        break;
      case 5:
        lt = 1073741823;
        break;
      case 4:
        lt = 1e4;
        break;
      default:
        lt = 5e3;
    }
    return lt = G + lt, P = {
      id: d++,
      callback: q,
      priorityLevel: P,
      startTime: G,
      expirationTime: lt,
      sortIndex: -1
    }, G > it ? (P.sortIndex = G, t(f, P), e(c) === null && P === e(f) && (x ? (v(D), D = -1) : x = !0, J(T, G - it))) : (P.sortIndex = lt, t(c, P), y || g || (y = !0, Q())), P;
  }, n.unstable_shouldYield = R, n.unstable_wrapCallback = function(P) {
    var q = m;
    return function() {
      var G = m;
      m = q;
      try {
        return P.apply(this, arguments);
      } finally {
        m = G;
      }
    };
  };
})(g4);
m4.exports = g4;
var lb = m4.exports;
/**
 * @license React
 * react-reconciler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(n) {
  n.exports = function(t) {
    function e(o, u, h, _) {
      return new MB(o, u, h, _);
    }
    function i() {
    }
    function a(o) {
      var u = "https://react.dev/errors/" + o;
      if (1 < arguments.length) {
        u += "?args[]=" + encodeURIComponent(arguments[1]);
        for (var h = 2; h < arguments.length; h++)
          u += "&args[]=" + encodeURIComponent(arguments[h]);
      }
      return "Minified React error #" + o + "; visit " + u + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    function s(o) {
      return o === null || typeof o != "object" ? null : (o = h2 && o[h2] || o["@@iterator"], typeof o == "function" ? o : null);
    }
    function r(o) {
      if (o == null) return null;
      if (typeof o == "function")
        return o.$$typeof === CB ? null : o.displayName || o.name || null;
      if (typeof o == "string") return o;
      switch (o) {
        case fc:
          return "Fragment";
        case cc:
          return "Portal";
        case mx:
          return "Profiler";
        case u2:
          return "StrictMode";
        case vx:
          return "Suspense";
        case _x:
          return "SuspenseList";
      }
      if (typeof o == "object")
        switch (o.$$typeof) {
          case _o:
            return (o.displayName || "Context") + ".Provider";
          case c2:
            return (o._context.displayName || "Context") + ".Consumer";
          case gx:
            var u = o.render;
            return o = o.displayName, o || (o = u.displayName || u.name || "", o = o !== "" ? "ForwardRef(" + o + ")" : "ForwardRef"), o;
          case yx:
            return u = o.displayName || null, u !== null ? u : r(o.type) || "Memo";
          case yo:
            u = o._payload, o = o._init;
            try {
              return r(o(u));
            } catch {
            }
        }
      return null;
    }
    function l(o) {
      if (xx === void 0)
        try {
          throw Error();
        } catch (h) {
          var u = h.stack.trim().match(/\n( *(at )?)/);
          xx = u && u[1] || "", d2 = -1 < h.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < h.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
      return `
` + xx + o + d2;
    }
    function c(o, u) {
      if (!o || Sx) return "";
      Sx = !0;
      var h = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        var _ = {
          DetermineComponentFrameRoot: function() {
            try {
              if (u) {
                var Bt = function() {
                  throw Error();
                };
                if (Object.defineProperty(Bt.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                }), typeof Reflect == "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Bt, []);
                  } catch (ve) {
                    var Ft = ve;
                  }
                  Reflect.construct(o, [], Bt);
                } else {
                  try {
                    Bt.call();
                  } catch (ve) {
                    Ft = ve;
                  }
                  o.call(Bt.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (ve) {
                  Ft = ve;
                }
                (Bt = o()) && typeof Bt.catch == "function" && Bt.catch(function() {
                });
              }
            } catch (ve) {
              if (ve && Ft && typeof ve.stack == "string")
                return [ve.stack, Ft.stack];
            }
            return [null, null];
          }
        };
        _.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var b = Object.getOwnPropertyDescriptor(
          _.DetermineComponentFrameRoot,
          "name"
        );
        b && b.configurable && Object.defineProperty(
          _.DetermineComponentFrameRoot,
          "name",
          { value: "DetermineComponentFrameRoot" }
        );
        var A = _.DetermineComponentFrameRoot(), z = A[0], X = A[1];
        if (z && X) {
          var K = z.split(`
`), ut = X.split(`
`);
          for (b = _ = 0; _ < K.length && !K[_].includes("DetermineComponentFrameRoot"); )
            _++;
          for (; b < ut.length && !ut[b].includes(
            "DetermineComponentFrameRoot"
          ); )
            b++;
          if (_ === K.length || b === ut.length)
            for (_ = K.length - 1, b = ut.length - 1; 1 <= _ && 0 <= b && K[_] !== ut[b]; )
              b--;
          for (; 1 <= _ && 0 <= b; _--, b--)
            if (K[_] !== ut[b]) {
              if (_ !== 1 || b !== 1)
                do
                  if (_--, b--, 0 > b || K[_] !== ut[b]) {
                    var At = `
` + K[_].replace(" at new ", " at ");
                    return o.displayName && At.includes("<anonymous>") && (At = At.replace("<anonymous>", o.displayName)), At;
                  }
                while (1 <= _ && 0 <= b);
              break;
            }
        }
      } finally {
        Sx = !1, Error.prepareStackTrace = h;
      }
      return (h = o ? o.displayName || o.name : "") ? l(h) : "";
    }
    function f(o) {
      switch (o.tag) {
        case 26:
        case 27:
        case 5:
          return l(o.type);
        case 16:
          return l("Lazy");
        case 13:
          return l("Suspense");
        case 19:
          return l("SuspenseList");
        case 0:
        case 15:
          return o = c(o.type, !1), o;
        case 11:
          return o = c(o.type.render, !1), o;
        case 1:
          return o = c(o.type, !0), o;
        default:
          return "";
      }
    }
    function d(o) {
      try {
        var u = "";
        do
          u += f(o), o = o.return;
        while (o);
        return u;
      } catch (h) {
        return `
Error generating stack: ` + h.message + `
` + h.stack;
      }
    }
    function p(o) {
      var u = o, h = o;
      if (o.alternate) for (; u.return; ) u = u.return;
      else {
        o = u;
        do
          u = o, u.flags & 4098 && (h = u.return), o = u.return;
        while (o);
      }
      return u.tag === 3 ? h : null;
    }
    function m(o) {
      if (p(o) !== o)
        throw Error(a(188));
    }
    function g(o) {
      var u = o.alternate;
      if (!u) {
        if (u = p(o), u === null) throw Error(a(188));
        return u !== o ? null : o;
      }
      for (var h = o, _ = u; ; ) {
        var b = h.return;
        if (b === null) break;
        var A = b.alternate;
        if (A === null) {
          if (_ = b.return, _ !== null) {
            h = _;
            continue;
          }
          break;
        }
        if (b.child === A.child) {
          for (A = b.child; A; ) {
            if (A === h) return m(b), o;
            if (A === _) return m(b), u;
            A = A.sibling;
          }
          throw Error(a(188));
        }
        if (h.return !== _.return) h = b, _ = A;
        else {
          for (var z = !1, X = b.child; X; ) {
            if (X === h) {
              z = !0, h = b, _ = A;
              break;
            }
            if (X === _) {
              z = !0, _ = b, h = A;
              break;
            }
            X = X.sibling;
          }
          if (!z) {
            for (X = A.child; X; ) {
              if (X === h) {
                z = !0, h = A, _ = b;
                break;
              }
              if (X === _) {
                z = !0, _ = A, h = b;
                break;
              }
              X = X.sibling;
            }
            if (!z) throw Error(a(189));
          }
        }
        if (h.alternate !== _) throw Error(a(190));
      }
      if (h.tag !== 3) throw Error(a(188));
      return h.stateNode.current === h ? o : u;
    }
    function y(o) {
      var u = o.tag;
      if (u === 5 || u === 26 || u === 27 || u === 6) return o;
      for (o = o.child; o !== null; ) {
        if (u = y(o), u !== null) return u;
        o = o.sibling;
      }
      return null;
    }
    function x(o) {
      var u = o.tag;
      if (u === 5 || u === 26 || u === 27 || u === 6) return o;
      for (o = o.child; o !== null; ) {
        if (o.tag !== 4 && (u = x(o), u !== null))
          return u;
        o = o.sibling;
      }
      return null;
    }
    function M(o) {
      return { current: o };
    }
    function v(o) {
      0 > dc || (o.current = Rx[dc], Rx[dc] = null, dc--);
    }
    function S(o, u) {
      dc++, Rx[dc] = o.current, o.current = u;
    }
    function E(o) {
      return o >>>= 0, o === 0 ? 32 : 31 - (XP(o) / qP | 0) | 0;
    }
    function T(o) {
      var u = o & 42;
      if (u !== 0) return u;
      switch (o & -o) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
          return 64;
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return o & 4194176;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          return o & 62914560;
        case 67108864:
          return 67108864;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 0;
        default:
          return o;
      }
    }
    function w(o, u) {
      var h = o.pendingLanes;
      if (h === 0) return 0;
      var _ = 0, b = o.suspendedLanes, A = o.pingedLanes, z = o.warmLanes;
      o = o.finishedLanes !== 0;
      var X = h & 134217727;
      return X !== 0 ? (h = X & ~b, h !== 0 ? _ = T(h) : (A &= X, A !== 0 ? _ = T(A) : o || (z = X & ~z, z !== 0 && (_ = T(z))))) : (X = h & ~b, X !== 0 ? _ = T(X) : A !== 0 ? _ = T(A) : o || (z = h & ~z, z !== 0 && (_ = T(z)))), _ === 0 ? 0 : u !== 0 && u !== _ && !(u & b) && (b = _ & -_, z = u & -u, b >= z || b === 32 && (z & 4194176) !== 0) ? u : _;
    }
    function D(o, u) {
      return (o.pendingLanes & ~(o.suspendedLanes & ~o.pingedLanes) & u) === 0;
    }
    function U(o, u) {
      switch (o) {
        case 1:
        case 2:
        case 4:
        case 8:
          return u + 250;
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return u + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          return -1;
        case 67108864:
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function O() {
      var o = Wm;
      return Wm <<= 1, !(Wm & 4194176) && (Wm = 128), o;
    }
    function R() {
      var o = Zm;
      return Zm <<= 1, !(Zm & 62914560) && (Zm = 4194304), o;
    }
    function C(o) {
      for (var u = [], h = 0; 31 > h; h++) u.push(o);
      return u;
    }
    function B(o, u) {
      o.pendingLanes |= u, u !== 268435456 && (o.suspendedLanes = 0, o.pingedLanes = 0, o.warmLanes = 0);
    }
    function Y(o, u, h, _, b, A) {
      var z = o.pendingLanes;
      o.pendingLanes = h, o.suspendedLanes = 0, o.pingedLanes = 0, o.warmLanes = 0, o.expiredLanes &= h, o.entangledLanes &= h, o.errorRecoveryDisabledLanes &= h, o.shellSuspendCounter = 0;
      var X = o.entanglements, K = o.expirationTimes, ut = o.hiddenUpdates;
      for (h = z & ~h; 0 < h; ) {
        var At = 31 - Aa(h), Bt = 1 << At;
        X[At] = 0, K[At] = -1;
        var Ft = ut[At];
        if (Ft !== null)
          for (ut[At] = null, At = 0; At < Ft.length; At++) {
            var ve = Ft[At];
            ve !== null && (ve.lane &= -536870913);
          }
        h &= ~Bt;
      }
      _ !== 0 && V(o, _, 0), A !== 0 && b === 0 && o.tag !== 0 && (o.suspendedLanes |= A & ~(z & ~u));
    }
    function V(o, u, h) {
      o.pendingLanes |= u, o.suspendedLanes &= ~u;
      var _ = 31 - Aa(u);
      o.entangledLanes |= u, o.entanglements[_] = o.entanglements[_] | 1073741824 | h & 4194218;
    }
    function Q(o, u) {
      var h = o.entangledLanes |= u;
      for (o = o.entanglements; h; ) {
        var _ = 31 - Aa(h), b = 1 << _;
        b & u | o[_] & u && (o[_] |= u), h &= ~b;
      }
    }
    function J(o) {
      return o &= -o, 2 < o ? 8 < o ? o & 134217727 ? 32 : 268435456 : 8 : 2;
    }
    function P(o) {
      if (Ra && typeof Ra.onCommitFiberRoot == "function")
        try {
          Ra.onCommitFiberRoot(
            qh,
            o,
            void 0,
            (o.current.flags & 128) === 128
          );
        } catch {
        }
    }
    function q(o) {
      if (typeof jP == "function" && QP(o), Ra && typeof Ra.setStrictMode == "function")
        try {
          Ra.setStrictMode(qh, o);
        } catch {
        }
    }
    function G(o, u) {
      return o === u && (o !== 0 || 1 / o === 1 / u) || o !== o && u !== u;
    }
    function it(o, u) {
      if (typeof o == "object" && o !== null) {
        var h = H2.get(o);
        return h !== void 0 ? h : (u = {
          value: o,
          source: u,
          stack: d(u)
        }, H2.set(o, u), u);
      }
      return {
        value: o,
        source: u,
        stack: d(u)
      };
    }
    function lt(o, u) {
      mc[gc++] = Km, mc[gc++] = Qm, Qm = o, Km = u;
    }
    function mt(o, u, h) {
      $a[ts++] = br, $a[ts++] = Er, $a[ts++] = Bl, Bl = o;
      var _ = br;
      o = Er;
      var b = 32 - Aa(_) - 1;
      _ &= ~(1 << b), h += 1;
      var A = 32 - Aa(u) + b;
      if (30 < A) {
        var z = b - b % 5;
        A = (_ & (1 << z) - 1).toString(32), _ >>= z, b -= z, br = 1 << 32 - Aa(u) + b | h << b | _, Er = A + o;
      } else
        br = 1 << A | h << b | _, Er = o;
    }
    function Rt(o) {
      o.return !== null && (lt(o, 1), mt(o, 1, 0));
    }
    function Qt(o) {
      for (; o === Qm; )
        Qm = mc[--gc], mc[gc] = null, Km = mc[--gc], mc[gc] = null;
      for (; o === Bl; )
        Bl = $a[--ts], $a[ts] = null, Er = $a[--ts], $a[ts] = null, br = $a[--ts], $a[ts] = null;
    }
    function $(o, u) {
      S(So, u), S(Yh, o), S(mi, null), o = UB(u), v(mi), S(mi, o);
    }
    function ht() {
      v(mi), v(Yh), v(So);
    }
    function kt(o) {
      o.memoizedState !== null && S(Jm, o);
      var u = mi.current, h = OB(u, o.type);
      u !== h && (S(Yh, o), S(mi, h));
    }
    function Ot(o) {
      Yh.current === o && (v(mi), v(Yh)), Jm.current === o && (v(Jm), Mr ? zl._currentValue = hc : zl._currentValue2 = hc);
    }
    function Xt(o) {
      var u = Error(a(418, ""));
      throw ce(it(u, o)), Dx;
    }
    function pe(o, u) {
      if (!Ka) throw Error(a(175));
      TP(
        o.stateNode,
        o.type,
        o.memoizedProps,
        u,
        o
      ) || Xt(o);
    }
    function $t(o) {
      for (Gi = o.return; Gi; )
        switch (Gi.tag) {
          case 3:
          case 27:
            ks = !0;
            return;
          case 5:
          case 13:
            ks = !1;
            return;
          default:
            Gi = Gi.return;
        }
    }
    function qe(o) {
      if (!Ka || o !== Gi) return !1;
      if (!Ve) return $t(o), Ve = !0, !1;
      var u = !1;
      if (Ti ? o.tag !== 3 && o.tag !== 27 && (o.tag !== 5 || C2(o.type) && !km(o.type, o.memoizedProps)) && (u = !0) : o.tag !== 3 && (o.tag !== 5 || C2(o.type) && !km(o.type, o.memoizedProps)) && (u = !0), u && Ai && Xt(o), $t(o), o.tag === 13) {
        if (!Ka) throw Error(a(316));
        if (o = o.memoizedState, o = o !== null ? o.dehydrated : null, !o) throw Error(a(317));
        Ai = CP(o);
      } else
        Ai = Gi ? A2(o.stateNode) : null;
      return !0;
    }
    function Me() {
      Ka && (Ai = Gi = null, Ve = !1);
    }
    function ce(o) {
      Cs === null ? Cs = [o] : Cs.push(o);
    }
    function I() {
      for (var o = vc, u = Ux = vc = 0; u < o; ) {
        var h = es[u];
        es[u++] = null;
        var _ = es[u];
        es[u++] = null;
        var b = es[u];
        es[u++] = null;
        var A = es[u];
        if (es[u++] = null, _ !== null && b !== null) {
          var z = _.pending;
          z === null ? b.next = b : (b.next = z.next, z.next = b), _.pending = b;
        }
        A !== 0 && ct(h, b, A);
      }
    }
    function Ct(o, u, h, _) {
      es[vc++] = o, es[vc++] = u, es[vc++] = h, es[vc++] = _, Ux |= _, o.lanes |= _, o = o.alternate, o !== null && (o.lanes |= _);
    }
    function yt(o, u, h, _) {
      return Ct(o, u, h, _), Ht(o);
    }
    function Et(o, u) {
      return Ct(o, null, null, u), Ht(o);
    }
    function ct(o, u, h) {
      o.lanes |= h;
      var _ = o.alternate;
      _ !== null && (_.lanes |= h);
      for (var b = !1, A = o.return; A !== null; )
        A.childLanes |= h, _ = A.alternate, _ !== null && (_.childLanes |= h), A.tag === 22 && (o = A.stateNode, o === null || o._visibility & 1 || (b = !0)), o = A, A = A.return;
      b && u !== null && o.tag === 3 && (A = o.stateNode, b = 31 - Aa(h), A = A.hiddenUpdates, o = A[b], o === null ? A[b] = [u] : o.push(u), u.lane = h | 536870912);
    }
    function Ht(o) {
      if (50 < td)
        throw td = 0, Wx = null, Error(a(185));
      for (var u = o.return; u !== null; )
        o = u, u = o.return;
      return o.tag === 3 ? o.stateNode : null;
    }
    function _t(o) {
      o !== _c && o.next === null && (_c === null ? $m = _c = o : _c = _c.next = o), tg = !0, Ox || (Ox = !0, rt(he));
    }
    function It(o, u) {
      if (!Nx && tg) {
        Nx = !0;
        do
          for (var h = !1, _ = $m; _ !== null; ) {
            if (o !== 0) {
              var b = _.pendingLanes;
              if (b === 0) var A = 0;
              else {
                var z = _.suspendedLanes, X = _.pingedLanes;
                A = (1 << 31 - Aa(42 | o) + 1) - 1, A &= b & ~(z & ~X), A = A & 201326677 ? A & 201326677 | 1 : A ? A | 2 : 0;
              }
              A !== 0 && (h = !0, tt(_, A));
            } else
              A = ze, A = w(
                _,
                _ === fn ? A : 0
              ), !(A & 3) || D(_, A) || (h = !0, tt(_, A));
            _ = _.next;
          }
        while (h);
        Nx = !1;
      }
    }
    function he() {
      tg = Ox = !1;
      var o = 0;
      yc !== 0 && (FB() && (o = yc), yc = 0);
      for (var u = Rs(), h = null, _ = $m; _ !== null; ) {
        var b = _.next, A = F(_, u);
        A === 0 ? (_.next = null, h === null ? $m = b : h.next = b, b === null && (_c = h)) : (h = _, (o !== 0 || A & 3) && (tg = !0)), _ = b;
      }
      It(o);
    }
    function F(o, u) {
      for (var h = o.suspendedLanes, _ = o.pingedLanes, b = o.expirationTimes, A = o.pendingLanes & -62914561; 0 < A; ) {
        var z = 31 - Aa(A), X = 1 << z, K = b[z];
        K === -1 ? (!(X & h) || X & _) && (b[z] = U(X, u)) : K <= u && (o.expiredLanes |= X), A &= ~X;
      }
      if (u = fn, h = ze, h = w(
        o,
        o === u ? h : 0
      ), _ = o.callbackNode, h === 0 || o === u && hn === 2 || o.cancelPendingCommit !== null)
        return _ !== null && _ !== null && Cx(_), o.callbackNode = null, o.callbackPriority = 0;
      if (!(h & 3) || D(o, h)) {
        if (u = h & -h, u === o.callbackPriority) return u;
        switch (_ !== null && Cx(_), J(h)) {
          case 2:
          case 8:
            h = WP;
            break;
          case 32:
            h = wx;
            break;
          case 268435456:
            h = ZP;
            break;
          default:
            h = wx;
        }
        return _ = N.bind(null, o), h = jm(h, _), o.callbackPriority = u, o.callbackNode = h, u;
      }
      return _ !== null && _ !== null && Cx(_), o.callbackPriority = 2, o.callbackNode = null, 2;
    }
    function N(o, u) {
      var h = o.callbackNode;
      if (Ol() && o.callbackNode !== h)
        return null;
      var _ = ze;
      return _ = w(
        o,
        o === fn ? _ : 0
      ), _ === 0 ? null : (GA(o, _, u), F(o, Rs()), o.callbackNode != null && o.callbackNode === h ? N.bind(null, o) : null);
    }
    function tt(o, u) {
      if (Ol()) return null;
      GA(o, u, !0);
    }
    function rt(o) {
      kB ? WB(function() {
        $e & 6 ? jm(I2, o) : o();
      }) : jm(I2, o);
    }
    function gt() {
      return yc === 0 && (yc = O()), yc;
    }
    function ot(o, u) {
      if (kh === null) {
        var h = kh = [];
        Lx = 0, xc = gt(), Sc = {
          status: "pending",
          value: void 0,
          then: function(_) {
            h.push(_);
          }
        };
      }
      return Lx++, u.then(Kt, Kt), u;
    }
    function Kt() {
      if (--Lx === 0 && kh !== null) {
        Sc !== null && (Sc.status = "fulfilled");
        var o = kh;
        kh = null, xc = 0, Sc = null;
        for (var u = 0; u < o.length; u++) (0, o[u])();
      }
    }
    function Dt(o, u) {
      var h = [], _ = {
        status: "pending",
        value: null,
        reason: null,
        then: function(b) {
          h.push(b);
        }
      };
      return o.then(
        function() {
          _.status = "fulfilled", _.value = u;
          for (var b = 0; b < h.length; b++) (0, h[b])(u);
        },
        function(b) {
          for (_.status = "rejected", _.reason = b, b = 0; b < h.length; b++)
            (0, h[b])(void 0);
        }
      ), _;
    }
    function qt(o) {
      o.updateQueue = {
        baseState: o.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: { pending: null, lanes: 0, hiddenCallbacks: null },
        callbacks: null
      };
    }
    function jt(o, u) {
      o = o.updateQueue, u.updateQueue === o && (u.updateQueue = {
        baseState: o.baseState,
        firstBaseUpdate: o.firstBaseUpdate,
        lastBaseUpdate: o.lastBaseUpdate,
        shared: o.shared,
        callbacks: null
      });
    }
    function pt(o) {
      return { lane: o, tag: 0, payload: null, callback: null, next: null };
    }
    function zt(o, u, h) {
      var _ = o.updateQueue;
      if (_ === null) return null;
      if (_ = _.shared, $e & 2) {
        var b = _.pending;
        return b === null ? u.next = u : (u.next = b.next, b.next = u), _.pending = u, u = Ht(o), ct(o, null, h), u;
      }
      return Ct(o, _, u, h), Ht(o);
    }
    function ee(o, u, h) {
      if (u = u.updateQueue, u !== null && (u = u.shared, (h & 4194176) !== 0)) {
        var _ = u.lanes;
        _ &= o.pendingLanes, h |= _, u.lanes = h, Q(o, h);
      }
    }
    function ne(o, u) {
      var h = o.updateQueue, _ = o.alternate;
      if (_ !== null && (_ = _.updateQueue, h === _)) {
        var b = null, A = null;
        if (h = h.firstBaseUpdate, h !== null) {
          do {
            var z = {
              lane: h.lane,
              tag: h.tag,
              payload: h.payload,
              callback: null,
              next: null
            };
            A === null ? b = A = z : A = A.next = z, h = h.next;
          } while (h !== null);
          A === null ? b = A = u : A = A.next = u;
        } else b = A = u;
        h = {
          baseState: _.baseState,
          firstBaseUpdate: b,
          lastBaseUpdate: A,
          shared: _.shared,
          callbacks: _.callbacks
        }, o.updateQueue = h;
        return;
      }
      o = h.lastBaseUpdate, o === null ? h.firstBaseUpdate = u : o.next = u, h.lastBaseUpdate = u;
    }
    function wt() {
      if (zx) {
        var o = Sc;
        if (o !== null) throw o;
      }
    }
    function se(o, u, h, _) {
      zx = !1;
      var b = o.updateQueue;
      Mo = !1;
      var A = b.firstBaseUpdate, z = b.lastBaseUpdate, X = b.shared.pending;
      if (X !== null) {
        b.shared.pending = null;
        var K = X, ut = K.next;
        K.next = null, z === null ? A = ut : z.next = ut, z = K;
        var At = o.alternate;
        At !== null && (At = At.updateQueue, X = At.lastBaseUpdate, X !== z && (X === null ? At.firstBaseUpdate = ut : X.next = ut, At.lastBaseUpdate = K));
      }
      if (A !== null) {
        var Bt = b.baseState;
        z = 0, At = ut = K = null, X = A;
        do {
          var Ft = X.lane & -536870913, ve = Ft !== X.lane;
          if (ve ? (ze & Ft) === Ft : (_ & Ft) === Ft) {
            Ft !== 0 && Ft === xc && (zx = !0), At !== null && (At = At.next = {
              lane: 0,
              tag: X.tag,
              payload: X.payload,
              callback: null,
              next: null
            });
            t: {
              var as = o, ed = X;
              Ft = u;
              var Yl = h;
              switch (ed.tag) {
                case 1:
                  if (as = ed.payload, typeof as == "function") {
                    Bt = as.call(
                      Yl,
                      Bt,
                      Ft
                    );
                    break t;
                  }
                  Bt = as;
                  break t;
                case 3:
                  as.flags = as.flags & -65537 | 128;
                case 0:
                  if (as = ed.payload, Ft = typeof as == "function" ? as.call(Yl, Bt, Ft) : as, Ft == null) break t;
                  Bt = px({}, Bt, Ft);
                  break t;
                case 2:
                  Mo = !0;
              }
            }
            Ft = X.callback, Ft !== null && (o.flags |= 64, ve && (o.flags |= 8192), ve = b.callbacks, ve === null ? b.callbacks = [Ft] : ve.push(Ft));
          } else
            ve = {
              lane: Ft,
              tag: X.tag,
              payload: X.payload,
              callback: X.callback,
              next: null
            }, At === null ? (ut = At = ve, K = Bt) : At = At.next = ve, z |= Ft;
          if (X = X.next, X === null) {
            if (X = b.shared.pending, X === null)
              break;
            ve = X, X = ve.next, ve.next = null, b.lastBaseUpdate = ve, b.shared.pending = null;
          }
        } while (!0);
        At === null && (K = Bt), b.baseState = K, b.firstBaseUpdate = ut, b.lastBaseUpdate = At, A === null && (b.shared.lanes = 0), To |= z, o.lanes = z, o.memoizedState = Bt;
      }
    }
    function k(o, u) {
      if (typeof o != "function")
        throw Error(a(191, o));
      o.call(u);
    }
    function Lt(o, u) {
      var h = o.callbacks;
      if (h !== null)
        for (o.callbacks = null, o = 0; o < h.length; o++)
          k(h[o], u);
    }
    function xt(o, u) {
      if (Ca(o, u)) return !0;
      if (typeof o != "object" || o === null || typeof u != "object" || u === null)
        return !1;
      var h = Object.keys(o), _ = Object.keys(u);
      if (h.length !== _.length) return !1;
      for (_ = 0; _ < h.length; _++) {
        var b = h[_];
        if (!KP.call(u, b) || !Ca(o[b], u[b]))
          return !1;
      }
      return !0;
    }
    function Gt(o) {
      return o = o.status, o === "fulfilled" || o === "rejected";
    }
    function Mt() {
    }
    function dt(o, u, h) {
      switch (h = o[h], h === void 0 ? o.push(u) : h !== u && (u.then(Mt, Mt), u = h), u.status) {
        case "fulfilled":
          return u.value;
        case "rejected":
          throw o = u.reason, o === Wh ? Error(a(483)) : o;
        default:
          if (typeof u.status == "string") u.then(Mt, Mt);
          else {
            if (o = fn, o !== null && 100 < o.shellSuspendCounter)
              throw Error(a(482));
            o = u, o.status = "pending", o.then(
              function(_) {
                if (u.status === "pending") {
                  var b = u;
                  b.status = "fulfilled", b.value = _;
                }
              },
              function(_) {
                if (u.status === "pending") {
                  var b = u;
                  b.status = "rejected", b.reason = _;
                }
              }
            );
          }
          switch (u.status) {
            case "fulfilled":
              return u.value;
            case "rejected":
              throw o = u.reason, o === Wh ? Error(a(483)) : o;
          }
          throw Mc = u, Wh;
      }
    }
    function Wt() {
      if (Mc === null) throw Error(a(459));
      var o = Mc;
      return Mc = null, o;
    }
    function le(o) {
      var u = Zh;
      return Zh += 1, bc === null && (bc = []), dt(bc, o, u);
    }
    function Ye(o, u) {
      u = u.props.ref, o.ref = u !== void 0 ? u : null;
    }
    function Le(o, u) {
      throw u.$$typeof === TB ? Error(a(525)) : (o = Object.prototype.toString.call(u), Error(
        a(
          31,
          o === "[object Object]" ? "object with keys {" + Object.keys(u).join(", ") + "}" : o
        )
      ));
    }
    function ta(o) {
      var u = o._init;
      return u(o._payload);
    }
    function ja(o) {
      function u(et, j) {
        if (o) {
          var st = et.deletions;
          st === null ? (et.deletions = [j], et.flags |= 16) : st.push(j);
        }
      }
      function h(et, j) {
        if (!o) return null;
        for (; j !== null; )
          u(et, j), j = j.sibling;
        return null;
      }
      function _(et) {
        for (var j = /* @__PURE__ */ new Map(); et !== null; )
          et.key !== null ? j.set(et.key, et) : j.set(et.index, et), et = et.sibling;
        return j;
      }
      function b(et, j) {
        return et = vo(et, j), et.index = 0, et.sibling = null, et;
      }
      function A(et, j, st) {
        return et.index = st, o ? (st = et.alternate, st !== null ? (st = st.index, st < j ? (et.flags |= 33554434, j) : st) : (et.flags |= 33554434, j)) : (et.flags |= 1048576, j);
      }
      function z(et) {
        return o && et.alternate === null && (et.flags |= 33554434), et;
      }
      function X(et, j, st, bt) {
        return j === null || j.tag !== 6 ? (j = fx(st, et.mode, bt), j.return = et, j) : (j = b(j, st), j.return = et, j);
      }
      function K(et, j, st, bt) {
        var te = st.type;
        return te === fc ? At(
          et,
          j,
          st.props.children,
          bt,
          st.key
        ) : j !== null && (j.elementType === te || typeof te == "object" && te !== null && te.$$typeof === yo && ta(te) === j.type) ? (j = b(j, st.props), Ye(j, st), j.return = et, j) : (j = Xm(
          st.type,
          st.key,
          st.props,
          null,
          et.mode,
          bt
        ), Ye(j, st), j.return = et, j);
      }
      function ut(et, j, st, bt) {
        return j === null || j.tag !== 4 || j.stateNode.containerInfo !== st.containerInfo || j.stateNode.implementation !== st.implementation ? (j = hx(st, et.mode, bt), j.return = et, j) : (j = b(j, st.children || []), j.return = et, j);
      }
      function At(et, j, st, bt, te) {
        return j === null || j.tag !== 7 ? (j = Nl(
          st,
          et.mode,
          bt,
          te
        ), j.return = et, j) : (j = b(j, st), j.return = et, j);
      }
      function Bt(et, j, st) {
        if (typeof j == "string" && j !== "" || typeof j == "number" || typeof j == "bigint")
          return j = fx(
            "" + j,
            et.mode,
            st
          ), j.return = et, j;
        if (typeof j == "object" && j !== null) {
          switch (j.$$typeof) {
            case qm:
              return st = Xm(
                j.type,
                j.key,
                j.props,
                null,
                et.mode,
                st
              ), Ye(st, j), st.return = et, st;
            case cc:
              return j = hx(
                j,
                et.mode,
                st
              ), j.return = et, j;
            case yo:
              var bt = j._init;
              return j = bt(j._payload), Bt(et, j, st);
          }
          if (Ym(j) || s(j))
            return j = Nl(
              j,
              et.mode,
              st,
              null
            ), j.return = et, j;
          if (typeof j.then == "function")
            return Bt(et, le(j), st);
          if (j.$$typeof === _o)
            return Bt(
              et,
              Pm(et, j),
              st
            );
          Le(et, j);
        }
        return null;
      }
      function Ft(et, j, st, bt) {
        var te = j !== null ? j.key : null;
        if (typeof st == "string" && st !== "" || typeof st == "number" || typeof st == "bigint")
          return te !== null ? null : X(et, j, "" + st, bt);
        if (typeof st == "object" && st !== null) {
          switch (st.$$typeof) {
            case qm:
              return st.key === te ? K(et, j, st, bt) : null;
            case cc:
              return st.key === te ? ut(et, j, st, bt) : null;
            case yo:
              return te = st._init, st = te(st._payload), Ft(et, j, st, bt);
          }
          if (Ym(st) || s(st))
            return te !== null ? null : At(et, j, st, bt, null);
          if (typeof st.then == "function")
            return Ft(
              et,
              j,
              le(st),
              bt
            );
          if (st.$$typeof === _o)
            return Ft(
              et,
              j,
              Pm(et, st),
              bt
            );
          Le(et, st);
        }
        return null;
      }
      function ve(et, j, st, bt, te) {
        if (typeof bt == "string" && bt !== "" || typeof bt == "number" || typeof bt == "bigint")
          return et = et.get(st) || null, X(j, et, "" + bt, te);
        if (typeof bt == "object" && bt !== null) {
          switch (bt.$$typeof) {
            case qm:
              return et = et.get(
                bt.key === null ? st : bt.key
              ) || null, K(j, et, bt, te);
            case cc:
              return et = et.get(
                bt.key === null ? st : bt.key
              ) || null, ut(j, et, bt, te);
            case yo:
              var pn = bt._init;
              return bt = pn(bt._payload), ve(
                et,
                j,
                st,
                bt,
                te
              );
          }
          if (Ym(bt) || s(bt))
            return et = et.get(st) || null, At(j, et, bt, te, null);
          if (typeof bt.then == "function")
            return ve(
              et,
              j,
              st,
              le(bt),
              te
            );
          if (bt.$$typeof === _o)
            return ve(
              et,
              j,
              st,
              Pm(j, bt),
              te
            );
          Le(j, bt);
        }
        return null;
      }
      function as(et, j, st, bt) {
        for (var te = null, pn = null, fe = j, Ge = j = 0, ai = null; fe !== null && Ge < st.length; Ge++) {
          fe.index > Ge ? (ai = fe, fe = null) : ai = fe.sibling;
          var Xe = Ft(
            et,
            fe,
            st[Ge],
            bt
          );
          if (Xe === null) {
            fe === null && (fe = ai);
            break;
          }
          o && fe && Xe.alternate === null && u(et, fe), j = A(Xe, j, Ge), pn === null ? te = Xe : pn.sibling = Xe, pn = Xe, fe = ai;
        }
        if (Ge === st.length)
          return h(et, fe), Ve && lt(et, Ge), te;
        if (fe === null) {
          for (; Ge < st.length; Ge++)
            fe = Bt(et, st[Ge], bt), fe !== null && (j = A(
              fe,
              j,
              Ge
            ), pn === null ? te = fe : pn.sibling = fe, pn = fe);
          return Ve && lt(et, Ge), te;
        }
        for (fe = _(fe); Ge < st.length; Ge++)
          ai = ve(
            fe,
            et,
            Ge,
            st[Ge],
            bt
          ), ai !== null && (o && ai.alternate !== null && fe.delete(
            ai.key === null ? Ge : ai.key
          ), j = A(
            ai,
            j,
            Ge
          ), pn === null ? te = ai : pn.sibling = ai, pn = ai);
        return o && fe.forEach(function(Ro) {
          return u(et, Ro);
        }), Ve && lt(et, Ge), te;
      }
      function ed(et, j, st, bt) {
        if (st == null) throw Error(a(151));
        for (var te = null, pn = null, fe = j, Ge = j = 0, ai = null, Xe = st.next(); fe !== null && !Xe.done; Ge++, Xe = st.next()) {
          fe.index > Ge ? (ai = fe, fe = null) : ai = fe.sibling;
          var Ro = Ft(et, fe, Xe.value, bt);
          if (Ro === null) {
            fe === null && (fe = ai);
            break;
          }
          o && fe && Ro.alternate === null && u(et, fe), j = A(Ro, j, Ge), pn === null ? te = Ro : pn.sibling = Ro, pn = Ro, fe = ai;
        }
        if (Xe.done)
          return h(et, fe), Ve && lt(et, Ge), te;
        if (fe === null) {
          for (; !Xe.done; Ge++, Xe = st.next())
            Xe = Bt(et, Xe.value, bt), Xe !== null && (j = A(
              Xe,
              j,
              Ge
            ), pn === null ? te = Xe : pn.sibling = Xe, pn = Xe);
          return Ve && lt(et, Ge), te;
        }
        for (fe = _(fe); !Xe.done; Ge++, Xe = st.next())
          Xe = ve(
            fe,
            et,
            Ge,
            Xe.value,
            bt
          ), Xe !== null && (o && Xe.alternate !== null && fe.delete(Xe.key === null ? Ge : Xe.key), j = A(Xe, j, Ge), pn === null ? te = Xe : pn.sibling = Xe, pn = Xe);
        return o && fe.forEach(function(aI) {
          return u(et, aI);
        }), Ve && lt(et, Ge), te;
      }
      function Yl(et, j, st, bt) {
        if (typeof st == "object" && st !== null && st.type === fc && st.key === null && (st = st.props.children), typeof st == "object" && st !== null) {
          switch (st.$$typeof) {
            case qm:
              t: {
                for (var te = st.key; j !== null; ) {
                  if (j.key === te) {
                    if (te = st.type, te === fc) {
                      if (j.tag === 7) {
                        h(
                          et,
                          j.sibling
                        ), bt = b(
                          j,
                          st.props.children
                        ), bt.return = et, et = bt;
                        break t;
                      }
                    } else if (j.elementType === te || typeof te == "object" && te !== null && te.$$typeof === yo && ta(te) === j.type) {
                      h(
                        et,
                        j.sibling
                      ), bt = b(j, st.props), Ye(bt, st), bt.return = et, et = bt;
                      break t;
                    }
                    h(et, j);
                    break;
                  } else u(et, j);
                  j = j.sibling;
                }
                st.type === fc ? (bt = Nl(
                  st.props.children,
                  et.mode,
                  bt,
                  st.key
                ), bt.return = et, et = bt) : (bt = Xm(
                  st.type,
                  st.key,
                  st.props,
                  null,
                  et.mode,
                  bt
                ), Ye(bt, st), bt.return = et, et = bt);
              }
              return z(et);
            case cc:
              t: {
                for (te = st.key; j !== null; ) {
                  if (j.key === te)
                    if (j.tag === 4 && j.stateNode.containerInfo === st.containerInfo && j.stateNode.implementation === st.implementation) {
                      h(
                        et,
                        j.sibling
                      ), bt = b(
                        j,
                        st.children || []
                      ), bt.return = et, et = bt;
                      break t;
                    } else {
                      h(et, j);
                      break;
                    }
                  else u(et, j);
                  j = j.sibling;
                }
                bt = hx(st, et.mode, bt), bt.return = et, et = bt;
              }
              return z(et);
            case yo:
              return te = st._init, st = te(st._payload), Yl(
                et,
                j,
                st,
                bt
              );
          }
          if (Ym(st))
            return as(
              et,
              j,
              st,
              bt
            );
          if (s(st)) {
            if (te = s(st), typeof te != "function")
              throw Error(a(150));
            return st = te.call(st), ed(
              et,
              j,
              st,
              bt
            );
          }
          if (typeof st.then == "function")
            return Yl(
              et,
              j,
              le(st),
              bt
            );
          if (st.$$typeof === _o)
            return Yl(
              et,
              j,
              Pm(et, st),
              bt
            );
          Le(et, st);
        }
        return typeof st == "string" && st !== "" || typeof st == "number" || typeof st == "bigint" ? (st = "" + st, j !== null && j.tag === 6 ? (h(et, j.sibling), bt = b(j, st), bt.return = et, et = bt) : (h(et, j), bt = fx(st, et.mode, bt), bt.return = et, et = bt), z(et)) : h(et, j);
      }
      return function(et, j, st, bt) {
        try {
          Zh = 0;
          var te = Yl(
            et,
            j,
            st,
            bt
          );
          return bc = null, te;
        } catch (fe) {
          if (fe === Wh) throw fe;
          var pn = e(29, fe, null, et.mode);
          return pn.lanes = bt, pn.return = et, pn;
        } finally {
        }
      };
    }
    function Ch(o, u) {
      o = Cr, S(ng, o), S(Ec, u), Cr = o | u.baseLanes;
    }
    function ic() {
      S(ng, Cr), S(Ec, Ec.current);
    }
    function Es() {
      Cr = ng.current, v(Ec), v(ng);
    }
    function Qa(o) {
      var u = o.alternate;
      S(Wn, Wn.current & 1), S(ns, o), Ws === null && (u === null || Ec.current !== null || u.memoizedState !== null) && (Ws = o);
    }
    function wh(o) {
      if (o.tag === 22) {
        if (S(Wn, Wn.current), S(ns, o), Ws === null) {
          var u = o.alternate;
          u !== null && u.memoizedState !== null && (Ws = o);
        }
      } else Ts();
    }
    function Ts() {
      S(Wn, Wn.current), S(ns, ns.current);
    }
    function ea(o) {
      v(ns), Ws === o && (Ws = null), v(Wn);
    }
    function Rl(o) {
      for (var u = o; u !== null; ) {
        if (u.tag === 13) {
          var h = u.memoizedState;
          if (h !== null && (h = h.dehydrated, h === null || Ex(h) || Tx(h)))
            return u;
        } else if (u.tag === 19 && u.memoizedProps.revealOrder !== void 0) {
          if (u.flags & 128) return u;
        } else if (u.child !== null) {
          u.child.return = u, u = u.child;
          continue;
        }
        if (u === o) break;
        for (; u.sibling === null; ) {
          if (u.return === null || u.return === o) return null;
          u = u.return;
        }
        u.sibling.return = u.return, u = u.sibling;
      }
      return null;
    }
    function ln() {
      throw Error(a(321));
    }
    function ac(o, u) {
      if (u === null) return !1;
      for (var h = 0; h < u.length && h < o.length; h++)
        if (!Ca(o[h], u[h])) return !1;
      return !0;
    }
    function sc(o, u, h, _, b, A) {
      return bo = A, be = u, u.memoizedState = null, u.updateQueue = null, u.lanes = 0, de.H = o === null || o.memoizedState === null ? Hl : Eo, Il = !1, A = h(_, b), Il = !1, Tc && (A = Um(
        u,
        h,
        _,
        b
      )), Dm(o), A;
    }
    function Dm(o) {
      de.H = Zs;
      var u = Je !== null && Je.next !== null;
      if (bo = 0, Hn = Je = be = null, ig = !1, jh = 0, Ac = null, u) throw Error(a(300));
      o === null || ni || (o = o.dependencies, o !== null && Bm(o) && (ni = !0));
    }
    function Um(o, u, h, _) {
      be = o;
      var b = 0;
      do {
        if (Tc && (Ac = null), jh = 0, Tc = !1, 25 <= b) throw Error(a(301));
        if (b += 1, Hn = Je = null, o.updateQueue != null) {
          var A = o.updateQueue;
          A.lastEffect = null, A.events = null, A.stores = null, A.memoCache != null && (A.memoCache.index = 0);
        }
        de.H = Fl, A = u(h, _);
      } while (Tc);
      return A;
    }
    function Ay() {
      var o = de.H, u = o.useState()[0];
      return u = typeof u.then == "function" ? nt(u) : u, o = o.useState()[0], (Je !== null ? Je.memoizedState : null) !== o && (be.flags |= 1024), u;
    }
    function Dh() {
      var o = ag !== 0;
      return ag = 0, o;
    }
    function Uh(o, u, h) {
      u.updateQueue = o.updateQueue, u.flags &= -2053, o.lanes &= ~h;
    }
    function Oh(o) {
      if (ig) {
        for (o = o.memoizedState; o !== null; ) {
          var u = o.queue;
          u !== null && (u.pending = null), o = o.next;
        }
        ig = !1;
      }
      bo = 0, Hn = Je = be = null, Tc = !1, jh = ag = 0, Ac = null;
    }
    function L() {
      var o = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      return Hn === null ? be.memoizedState = Hn = o : Hn = Hn.next = o, Hn;
    }
    function W() {
      if (Je === null) {
        var o = be.alternate;
        o = o !== null ? o.memoizedState : null;
      } else o = Je.next;
      var u = Hn === null ? be.memoizedState : Hn.next;
      if (u !== null)
        Hn = u, Je = o;
      else {
        if (o === null)
          throw be.alternate === null ? Error(a(467)) : Error(a(310));
        Je = o, o = {
          memoizedState: Je.memoizedState,
          baseState: Je.baseState,
          baseQueue: Je.baseQueue,
          queue: Je.queue,
          next: null
        }, Hn === null ? be.memoizedState = Hn = o : Hn = Hn.next = o;
      }
      return Hn;
    }
    function nt(o) {
      var u = jh;
      return jh += 1, Ac === null && (Ac = []), o = dt(Ac, o, u), u = be, (Hn === null ? u.memoizedState : Hn.next) === null && (u = u.alternate, de.H = u === null || u.memoizedState === null ? Hl : Eo), o;
    }
    function at(o) {
      if (o !== null && typeof o == "object") {
        if (typeof o.then == "function") return nt(o);
        if (o.$$typeof === _o) return bi(o);
      }
      throw Error(a(438, String(o)));
    }
    function Z(o) {
      var u = null, h = be.updateQueue;
      if (h !== null && (u = h.memoCache), u == null) {
        var _ = be.alternate;
        _ !== null && (_ = _.updateQueue, _ !== null && (_ = _.memoCache, _ != null && (u = {
          data: _.data.map(function(b) {
            return b.slice();
          }),
          index: 0
        })));
      }
      if (u == null && (u = { data: [], index: 0 }), h === null && (h = Px(), be.updateQueue = h), h.memoCache = u, h = u.data[u.index], h === void 0)
        for (h = u.data[u.index] = Array(o), _ = 0; _ < o; _++)
          h[_] = RB;
      return u.index++, h;
    }
    function St(o, u) {
      return typeof u == "function" ? u(o) : u;
    }
    function Ut(o) {
      var u = W();
      return Yt(u, Je, o);
    }
    function Yt(o, u, h) {
      var _ = o.queue;
      if (_ === null) throw Error(a(311));
      _.lastRenderedReducer = h;
      var b = o.baseQueue, A = _.pending;
      if (A !== null) {
        if (b !== null) {
          var z = b.next;
          b.next = A.next, A.next = z;
        }
        u.baseQueue = b = A, _.pending = null;
      }
      if (A = o.baseState, b === null) o.memoizedState = A;
      else {
        u = b.next;
        var X = z = null, K = null, ut = u, At = !1;
        do {
          var Bt = ut.lane & -536870913;
          if (Bt !== ut.lane ? (ze & Bt) === Bt : (bo & Bt) === Bt) {
            var Ft = ut.revertLane;
            if (Ft === 0)
              K !== null && (K = K.next = {
                lane: 0,
                revertLane: 0,
                action: ut.action,
                hasEagerState: ut.hasEagerState,
                eagerState: ut.eagerState,
                next: null
              }), Bt === xc && (At = !0);
            else if ((bo & Ft) === Ft) {
              ut = ut.next, Ft === xc && (At = !0);
              continue;
            } else
              Bt = {
                lane: 0,
                revertLane: ut.revertLane,
                action: ut.action,
                hasEagerState: ut.hasEagerState,
                eagerState: ut.eagerState,
                next: null
              }, K === null ? (X = K = Bt, z = A) : K = K.next = Bt, be.lanes |= Ft, To |= Ft;
            Bt = ut.action, Il && h(A, Bt), A = ut.hasEagerState ? ut.eagerState : h(A, Bt);
          } else
            Ft = {
              lane: Bt,
              revertLane: ut.revertLane,
              action: ut.action,
              hasEagerState: ut.hasEagerState,
              eagerState: ut.eagerState,
              next: null
            }, K === null ? (X = K = Ft, z = A) : K = K.next = Ft, be.lanes |= Bt, To |= Bt;
          ut = ut.next;
        } while (ut !== null && ut !== u);
        if (K === null ? z = A : K.next = X, !Ca(A, o.memoizedState) && (ni = !0, At && (h = Sc, h !== null)))
          throw h;
        o.memoizedState = A, o.baseState = z, o.baseQueue = K, _.lastRenderedState = A;
      }
      return b === null && (_.lanes = 0), [o.memoizedState, _.dispatch];
    }
    function Vt(o) {
      var u = W(), h = u.queue;
      if (h === null) throw Error(a(311));
      h.lastRenderedReducer = o;
      var _ = h.dispatch, b = h.pending, A = u.memoizedState;
      if (b !== null) {
        h.pending = null;
        var z = b = b.next;
        do
          A = o(A, z.action), z = z.next;
        while (z !== b);
        Ca(A, u.memoizedState) || (ni = !0), u.memoizedState = A, u.baseQueue === null && (u.baseState = A), h.lastRenderedState = A;
      }
      return [A, _];
    }
    function re(o, u, h) {
      var _ = be, b = W(), A = Ve;
      if (A) {
        if (h === void 0)
          throw Error(a(407));
        h = h();
      } else h = u();
      var z = !Ca(
        (Je || b).memoizedState,
        h
      );
      if (z && (b.memoizedState = h, ni = !0), b = b.queue, Ry(Te.bind(null, _, b, o), [
        o
      ]), b.getSnapshot !== u || z || Hn !== null && Hn.memoizedState.tag & 1) {
        if (_.flags |= 2048, qs(
          9,
          Jt.bind(
            null,
            _,
            b,
            h,
            u
          ),
          { destroy: void 0 },
          null
        ), fn === null) throw Error(a(349));
        A || bo & 60 || oe(_, u, h);
      }
      return h;
    }
    function oe(o, u, h) {
      o.flags |= 16384, o = { getSnapshot: u, value: h }, u = be.updateQueue, u === null ? (u = Px(), be.updateQueue = u, u.stores = [o]) : (h = u.stores, h === null ? u.stores = [o] : h.push(o));
    }
    function Jt(o, u, h, _) {
      u.value = h, u.getSnapshot = _, Fe(u) && un(o);
    }
    function Te(o, u, h) {
      return h(function() {
        Fe(u) && un(o);
      });
    }
    function Fe(o) {
      var u = o.getSnapshot;
      o = o.value;
      try {
        var h = u();
        return !Ca(o, h);
      } catch {
        return !0;
      }
    }
    function un(o) {
      var u = Et(o, 2);
      u !== null && Vi(u, o, 2);
    }
    function cn(o) {
      var u = L();
      if (typeof o == "function") {
        var h = o;
        if (o = h(), Il) {
          q(!0);
          try {
            h();
          } finally {
            q(!1);
          }
        }
      }
      return u.memoizedState = u.baseState = o, u.queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: St,
        lastRenderedState: o
      }, u;
    }
    function Ue(o, u, h, _) {
      return o.baseState = h, Yt(
        o,
        Je,
        typeof _ == "function" ? _ : St
      );
    }
    function ie(o, u, h, _, b) {
      if (Lm(o)) throw Error(a(485));
      if (o = u.action, o !== null) {
        var A = {
          payload: b,
          action: o,
          next: null,
          isTransition: !0,
          status: "pending",
          value: null,
          reason: null,
          listeners: [],
          then: function(z) {
            A.listeners.push(z);
          }
        };
        de.T !== null ? h(!0) : A.isTransition = !1, _(A), h = u.pending, h === null ? (A.next = u.pending = A, In(u, A)) : (A.next = h.next, u.pending = h.next = A);
      }
    }
    function In(o, u) {
      var h = u.action, _ = u.payload, b = o.state;
      if (u.isTransition) {
        var A = de.T, z = {};
        de.T = z;
        try {
          var X = h(b, _), K = de.S;
          K !== null && K(z, X), Pe(o, u, X);
        } catch (ut) {
          Xs(o, u, ut);
        } finally {
          de.T = A;
        }
      } else
        try {
          A = h(b, _), Pe(o, u, A);
        } catch (ut) {
          Xs(o, u, ut);
        }
    }
    function Pe(o, u, h) {
      h !== null && typeof h == "object" && typeof h.then == "function" ? h.then(
        function(_) {
          na(o, u, _);
        },
        function(_) {
          return Xs(o, u, _);
        }
      ) : na(o, u, h);
    }
    function na(o, u, h) {
      u.status = "fulfilled", u.value = h, Mi(u), o.state = h, u = o.pending, u !== null && (h = u.next, h === u ? o.pending = null : (h = h.next, u.next = h, In(o, h)));
    }
    function Xs(o, u, h) {
      var _ = o.pending;
      if (o.pending = null, _ !== null) {
        _ = _.next;
        do
          u.status = "rejected", u.reason = h, Mi(u), u = u.next;
        while (u !== _);
      }
      o.action = null;
    }
    function Mi(o) {
      o = o.listeners;
      for (var u = 0; u < o.length; u++) (0, o[u])();
    }
    function fo(o, u) {
      return u;
    }
    function sn(o, u) {
      if (Ve) {
        var h = fn.formState;
        if (h !== null) {
          t: {
            var _ = be;
            if (Ve) {
              if (Ai) {
                var b = _P(
                  Ai,
                  ks
                );
                if (b) {
                  Ai = A2(b), _ = yP(b);
                  break t;
                }
              }
              Xt(_);
            }
            _ = !1;
          }
          _ && (u = h[0]);
        }
      }
      h = L(), h.memoizedState = h.baseState = u, _ = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: fo,
        lastRenderedState: u
      }, h.queue = _, h = KT.bind(
        null,
        be,
        _
      ), _.dispatch = h, _ = cn(!1);
      var A = Uy.bind(
        null,
        be,
        !1,
        _.queue
      );
      return _ = L(), b = {
        state: u,
        dispatch: null,
        action: o,
        pending: null
      }, _.queue = b, h = ie.bind(
        null,
        be,
        b,
        A,
        h
      ), b.dispatch = h, _.memoizedState = o, [u, h, !1];
    }
    function Hi(o) {
      var u = W();
      return Fi(u, Je, o);
    }
    function Fi(o, u, h) {
      u = Yt(
        o,
        u,
        fo
      )[0], o = Ut(St)[0], u = typeof u == "object" && u !== null && typeof u.then == "function" ? nt(u) : u;
      var _ = W(), b = _.queue, A = b.dispatch;
      return h !== _.memoizedState && (be.flags |= 2048, qs(
        9,
        hi.bind(null, b, h),
        { destroy: void 0 },
        null
      )), [u, A, o];
    }
    function hi(o, u) {
      o.action = u;
    }
    function di(o) {
      var u = W(), h = Je;
      if (h !== null)
        return Fi(u, h, o);
      W(), u = u.memoizedState, h = W();
      var _ = h.queue.dispatch;
      return h.memoizedState = o, [u, _, !1];
    }
    function qs(o, u, h, _) {
      return o = { tag: o, create: u, inst: h, deps: _, next: null }, u = be.updateQueue, u === null && (u = Px(), be.updateQueue = u), h = u.lastEffect, h === null ? u.lastEffect = o.next = o : (_ = h.next, h.next = o, o.next = _, u.lastEffect = o), o;
    }
    function Ys() {
      return W().memoizedState;
    }
    function Om(o, u, h, _) {
      var b = L();
      be.flags |= o, b.memoizedState = qs(
        1 | u,
        h,
        { destroy: void 0 },
        _ === void 0 ? null : _
      );
    }
    function Nm(o, u, h, _) {
      var b = W();
      _ = _ === void 0 ? null : _;
      var A = b.memoizedState.inst;
      Je !== null && _ !== null && ac(_, Je.memoizedState.deps) ? b.memoizedState = qs(u, h, A, _) : (be.flags |= o, b.memoizedState = qs(1 | u, h, A, _));
    }
    function HT(o, u) {
      Om(8390656, 8, o, u);
    }
    function Ry(o, u) {
      Nm(2048, 8, o, u);
    }
    function FT(o, u) {
      return Nm(4, 2, o, u);
    }
    function VT(o, u) {
      return Nm(4, 4, o, u);
    }
    function GT(o, u) {
      if (typeof u == "function") {
        o = o();
        var h = u(o);
        return function() {
          typeof h == "function" ? h() : u(null);
        };
      }
      if (u != null)
        return o = o(), u.current = o, function() {
          u.current = null;
        };
    }
    function XT(o, u, h) {
      h = h != null ? h.concat([o]) : null, Nm(
        4,
        4,
        GT.bind(null, u, o),
        h
      );
    }
    function Cy() {
    }
    function qT(o, u) {
      var h = W();
      u = u === void 0 ? null : u;
      var _ = h.memoizedState;
      return u !== null && ac(u, _[1]) ? _[0] : (h.memoizedState = [o, u], o);
    }
    function YT(o, u) {
      var h = W();
      u = u === void 0 ? null : u;
      var _ = h.memoizedState;
      if (u !== null && ac(u, _[1]))
        return _[0];
      if (_ = o(), Il) {
        q(!0);
        try {
          o();
        } finally {
          q(!1);
        }
      }
      return h.memoizedState = [_, u], _;
    }
    function wy(o, u, h) {
      return h === void 0 || bo & 1073741824 ? o.memoizedState = u : (o.memoizedState = h, o = VA(), be.lanes |= o, To |= o, h);
    }
    function kT(o, u, h, _) {
      return Ca(h, u) ? h : Ec.current !== null ? (o = wy(o, h, _), Ca(o, u) || (ni = !0), o) : bo & 42 ? (o = VA(), be.lanes |= o, To |= o, u) : (ni = !0, o.memoizedState = h);
    }
    function WT(o, u, h, _, b) {
      var A = Ll();
      aa(
        A !== 0 && 8 > A ? A : 8
      );
      var z = de.T, X = {};
      de.T = X, Uy(o, !1, u, h);
      try {
        var K = b(), ut = de.S;
        if (ut !== null && ut(X, K), K !== null && typeof K == "object" && typeof K.then == "function") {
          var At = Dt(
            K,
            _
          );
          Nh(
            o,
            u,
            At,
            Ea(o)
          );
        } else
          Nh(
            o,
            u,
            _,
            Ea(o)
          );
      } catch (Bt) {
        Nh(
          o,
          u,
          { then: function() {
          }, status: "rejected", reason: Bt },
          Ea()
        );
      } finally {
        aa(A), de.T = z;
      }
    }
    function ZT(o) {
      var u = o.memoizedState;
      if (u !== null) return u;
      u = {
        memoizedState: hc,
        baseState: hc,
        baseQueue: null,
        queue: {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: St,
          lastRenderedState: hc
        },
        next: null
      };
      var h = {};
      return u.next = {
        memoizedState: h,
        baseState: h,
        baseQueue: null,
        queue: {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: St,
          lastRenderedState: h
        },
        next: null
      }, o.memoizedState = u, o = o.alternate, o !== null && (o.memoizedState = u), u;
    }
    function Dy() {
      return bi(zl);
    }
    function jT() {
      return W().memoizedState;
    }
    function QT() {
      return W().memoizedState;
    }
    function sB(o) {
      for (var u = o.return; u !== null; ) {
        switch (u.tag) {
          case 24:
          case 3:
            var h = Ea();
            o = pt(h);
            var _ = zt(u, o, h);
            _ !== null && (Vi(_, u, h), ee(_, u, h)), u = { cache: qy() }, o.payload = u;
            return;
        }
        u = u.return;
      }
    }
    function rB(o, u, h) {
      var _ = Ea();
      h = {
        lane: _,
        revertLane: 0,
        action: h,
        hasEagerState: !1,
        eagerState: null,
        next: null
      }, Lm(o) ? JT(u, h) : (h = yt(o, u, h, _), h !== null && (Vi(h, o, _), $T(h, u, _)));
    }
    function KT(o, u, h) {
      var _ = Ea();
      Nh(o, u, h, _);
    }
    function Nh(o, u, h, _) {
      var b = {
        lane: _,
        revertLane: 0,
        action: h,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (Lm(o)) JT(u, b);
      else {
        var A = o.alternate;
        if (o.lanes === 0 && (A === null || A.lanes === 0) && (A = u.lastRenderedReducer, A !== null))
          try {
            var z = u.lastRenderedState, X = A(z, h);
            if (b.hasEagerState = !0, b.eagerState = X, Ca(X, z))
              return Ct(o, u, b, 0), fn === null && I(), !1;
          } catch {
          } finally {
          }
        if (h = yt(o, u, b, _), h !== null)
          return Vi(h, o, _), $T(h, u, _), !0;
      }
      return !1;
    }
    function Uy(o, u, h, _) {
      if (_ = {
        lane: 2,
        revertLane: gt(),
        action: _,
        hasEagerState: !1,
        eagerState: null,
        next: null
      }, Lm(o)) {
        if (u) throw Error(a(479));
      } else
        u = yt(
          o,
          h,
          _,
          2
        ), u !== null && Vi(u, o, 2);
    }
    function Lm(o) {
      var u = o.alternate;
      return o === be || u !== null && u === be;
    }
    function JT(o, u) {
      Tc = ig = !0;
      var h = o.pending;
      h === null ? u.next = u : (u.next = h.next, h.next = u), o.pending = u;
    }
    function $T(o, u, h) {
      if (h & 4194176) {
        var _ = u.lanes;
        _ &= o.pendingLanes, h |= _, u.lanes = h, Q(o, h);
      }
    }
    function Oy(o, u, h, _) {
      u = o.memoizedState, h = h(_, u), h = h == null ? u : px({}, u, h), o.memoizedState = h, o.lanes === 0 && (o.updateQueue.baseState = h);
    }
    function tA(o, u, h, _, b, A, z) {
      return o = o.stateNode, typeof o.shouldComponentUpdate == "function" ? o.shouldComponentUpdate(_, A, z) : u.prototype && u.prototype.isPureReactComponent ? !xt(h, _) || !xt(b, A) : !0;
    }
    function eA(o, u, h, _) {
      o = u.state, typeof u.componentWillReceiveProps == "function" && u.componentWillReceiveProps(h, _), typeof u.UNSAFE_componentWillReceiveProps == "function" && u.UNSAFE_componentWillReceiveProps(h, _), u.state !== o && Ix.enqueueReplaceState(u, u.state, null);
    }
    function Cl(o, u) {
      var h = u;
      if ("ref" in u) {
        h = {};
        for (var _ in u)
          _ !== "ref" && (h[_] = u[_]);
      }
      if (o = o.defaultProps) {
        h === u && (h = px({}, h));
        for (var b in o)
          h[b] === void 0 && (h[b] = o[b]);
      }
      return h;
    }
    function zm(o, u) {
      try {
        var h = o.onUncaughtError;
        h(u.value, { componentStack: u.stack });
      } catch (_) {
        setTimeout(function() {
          throw _;
        });
      }
    }
    function nA(o, u, h) {
      try {
        var _ = o.onCaughtError;
        _(h.value, {
          componentStack: h.stack,
          errorBoundary: u.tag === 1 ? u.stateNode : null
        });
      } catch (b) {
        setTimeout(function() {
          throw b;
        });
      }
    }
    function Ny(o, u, h) {
      return h = pt(h), h.tag = 3, h.payload = { element: null }, h.callback = function() {
        zm(o, u);
      }, h;
    }
    function iA(o) {
      return o = pt(o), o.tag = 3, o;
    }
    function aA(o, u, h, _) {
      var b = h.type.getDerivedStateFromError;
      if (typeof b == "function") {
        var A = _.value;
        o.payload = function() {
          return b(A);
        }, o.callback = function() {
          nA(u, h, _);
        };
      }
      var z = h.stateNode;
      z !== null && typeof z.componentDidCatch == "function" && (o.callback = function() {
        nA(u, h, _), typeof b != "function" && (Ao === null ? Ao = /* @__PURE__ */ new Set([this]) : Ao.add(this));
        var X = _.stack;
        this.componentDidCatch(_.value, {
          componentStack: X !== null ? X : ""
        });
      });
    }
    function oB(o, u, h, _, b) {
      if (h.flags |= 32768, _ !== null && typeof _ == "object" && typeof _.then == "function") {
        if (u = h.alternate, u !== null && zh(
          u,
          h,
          b,
          !0
        ), h = ns.current, h !== null) {
          switch (h.tag) {
            case 13:
              return Ws === null ? ox() : h.alternate === null && wn === 0 && (wn = 3), h.flags &= -257, h.flags |= 65536, h.lanes = b, _ === eg ? h.flags |= 16384 : (u = h.updateQueue, u === null ? h.updateQueue = /* @__PURE__ */ new Set([_]) : u.add(_), ux(o, _, b)), !1;
            case 22:
              return h.flags |= 65536, _ === eg ? h.flags |= 16384 : (u = h.updateQueue, u === null ? (u = {
                transitions: null,
                markerInstances: null,
                retryQueue: /* @__PURE__ */ new Set([_])
              }, h.updateQueue = u) : (h = u.retryQueue, h === null ? u.retryQueue = /* @__PURE__ */ new Set([_]) : h.add(_)), ux(o, _, b)), !1;
          }
          throw Error(a(435, h.tag));
        }
        return ux(o, _, b), ox(), !1;
      }
      if (Ve)
        return u = ns.current, u !== null ? (!(u.flags & 65536) && (u.flags |= 256), u.flags |= 65536, u.lanes = b, _ !== Dx && (o = Error(a(422), { cause: _ }), ce(
          it(o, h)
        ))) : (_ !== Dx && (u = Error(a(423), {
          cause: _
        }), ce(
          it(u, h)
        )), o = o.current.alternate, o.flags |= 65536, b &= -b, o.lanes |= b, _ = it(_, h), b = Ny(
          o.stateNode,
          _,
          b
        ), ne(o, b), wn !== 4 && (wn = 2)), !1;
      var A = Error(a(520), { cause: _ });
      if (A = it(A, h), Kh === null ? Kh = [A] : Kh.push(A), wn !== 4 && (wn = 2), u === null) return !0;
      _ = it(_, h), h = u;
      do {
        switch (h.tag) {
          case 3:
            return h.flags |= 65536, o = b & -b, h.lanes |= o, o = Ny(h.stateNode, _, o), ne(h, o), !1;
          case 1:
            if (u = h.type, A = h.stateNode, (h.flags & 128) === 0 && (typeof u.getDerivedStateFromError == "function" || A !== null && typeof A.componentDidCatch == "function" && (Ao === null || !Ao.has(
              A
            ))))
              return h.flags |= 65536, b &= -b, h.lanes |= b, b = iA(b), aA(
                b,
                o,
                h,
                _
              ), ne(h, b), !1;
        }
        h = h.return;
      } while (h !== null);
      return !1;
    }
    function pi(o, u, h, _) {
      u.child = o === null ? F2(u, null, h, _) : Pl(
        u,
        o.child,
        h,
        _
      );
    }
    function sA(o, u, h, _, b) {
      h = h.render;
      var A = u.ref;
      if ("ref" in _) {
        var z = {};
        for (var X in _)
          X !== "ref" && (z[X] = _[X]);
      } else z = _;
      return wl(u), _ = sc(
        o,
        u,
        h,
        z,
        A,
        b
      ), X = Dh(), o !== null && !ni ? (Uh(o, u, b), _r(o, u, b)) : (Ve && X && Rt(u), u.flags |= 1, pi(o, u, _, b), u.child);
    }
    function rA(o, u, h, _, b) {
      if (o === null) {
        var A = h.type;
        return typeof A == "function" && !cx(A) && A.defaultProps === void 0 && h.compare === null ? (u.tag = 15, u.type = A, oA(
          o,
          u,
          A,
          _,
          b
        )) : (o = Xm(
          h.type,
          null,
          _,
          u,
          u.mode,
          b
        ), o.ref = u.ref, o.return = u, u.child = o);
      }
      if (A = o.child, !Vy(o, b)) {
        var z = A.memoizedProps;
        if (h = h.compare, h = h !== null ? h : xt, h(z, _) && o.ref === u.ref)
          return _r(
            o,
            u,
            b
          );
      }
      return u.flags |= 1, o = vo(A, _), o.ref = u.ref, o.return = u, u.child = o;
    }
    function oA(o, u, h, _, b) {
      if (o !== null) {
        var A = o.memoizedProps;
        if (xt(A, _) && o.ref === u.ref)
          if (ni = !1, u.pendingProps = _ = A, Vy(o, b))
            o.flags & 131072 && (ni = !0);
          else
            return u.lanes = o.lanes, _r(o, u, b);
      }
      return Ly(
        o,
        u,
        h,
        _,
        b
      );
    }
    function lA(o, u, h) {
      var _ = u.pendingProps, b = _.children, A = (u.stateNode._pendingVisibility & 2) !== 0, z = o !== null ? o.memoizedState : null;
      if (Lh(o, u), _.mode === "hidden" || A) {
        if (u.flags & 128) {
          if (_ = z !== null ? z.baseLanes | h : h, o !== null) {
            for (b = u.child = o.child, A = 0; b !== null; )
              A = A | b.lanes | b.childLanes, b = b.sibling;
            u.childLanes = A & ~_;
          } else u.childLanes = 0, u.child = null;
          return uA(
            o,
            u,
            _,
            h
          );
        }
        if (h & 536870912)
          u.memoizedState = { baseLanes: 0, cachePool: null }, o !== null && Im(
            u,
            z !== null ? z.cachePool : null
          ), z !== null ? Ch(u, z) : ic(), wh(u);
        else
          return u.lanes = u.childLanes = 536870912, uA(
            o,
            u,
            z !== null ? z.baseLanes | h : h,
            h
          );
      } else
        z !== null ? (Im(u, z.cachePool), Ch(u, z), Ts(), u.memoizedState = null) : (o !== null && Im(u, null), ic(), Ts());
      return pi(o, u, b, h), u.child;
    }
    function uA(o, u, h, _) {
      var b = Yy();
      return b = b === null ? null : {
        parent: Mr ? Rn._currentValue : Rn._currentValue2,
        pool: b
      }, u.memoizedState = {
        baseLanes: h,
        cachePool: b
      }, o !== null && Im(u, null), ic(), wh(u), o !== null && zh(o, u, _, !0), null;
    }
    function Lh(o, u) {
      var h = u.ref;
      if (h === null)
        o !== null && o.ref !== null && (u.flags |= 2097664);
      else {
        if (typeof h != "function" && typeof h != "object")
          throw Error(a(284));
        (o === null || o.ref !== h) && (u.flags |= 2097664);
      }
    }
    function Ly(o, u, h, _, b) {
      return wl(u), h = sc(
        o,
        u,
        h,
        _,
        void 0,
        b
      ), _ = Dh(), o !== null && !ni ? (Uh(o, u, b), _r(o, u, b)) : (Ve && _ && Rt(u), u.flags |= 1, pi(o, u, h, b), u.child);
    }
    function cA(o, u, h, _, b, A) {
      return wl(u), u.updateQueue = null, h = Um(
        u,
        _,
        h,
        b
      ), Dm(o), _ = Dh(), o !== null && !ni ? (Uh(o, u, A), _r(o, u, A)) : (Ve && _ && Rt(u), u.flags |= 1, pi(o, u, h, A), u.child);
    }
    function fA(o, u, h, _, b) {
      if (wl(u), u.stateNode === null) {
        var A = pc, z = h.contextType;
        typeof z == "object" && z !== null && (A = bi(z)), A = new h(_, A), u.memoizedState = A.state !== null && A.state !== void 0 ? A.state : null, A.updater = Ix, u.stateNode = A, A._reactInternals = u, A = u.stateNode, A.props = _, A.state = u.memoizedState, A.refs = {}, qt(u), z = h.contextType, A.context = typeof z == "object" && z !== null ? bi(z) : pc, A.state = u.memoizedState, z = h.getDerivedStateFromProps, typeof z == "function" && (Oy(
          u,
          h,
          z,
          _
        ), A.state = u.memoizedState), typeof h.getDerivedStateFromProps == "function" || typeof A.getSnapshotBeforeUpdate == "function" || typeof A.UNSAFE_componentWillMount != "function" && typeof A.componentWillMount != "function" || (z = A.state, typeof A.componentWillMount == "function" && A.componentWillMount(), typeof A.UNSAFE_componentWillMount == "function" && A.UNSAFE_componentWillMount(), z !== A.state && Ix.enqueueReplaceState(
          A,
          A.state,
          null
        ), se(u, _, A, b), wt(), A.state = u.memoizedState), typeof A.componentDidMount == "function" && (u.flags |= 4194308), _ = !0;
      } else if (o === null) {
        A = u.stateNode;
        var X = u.memoizedProps, K = Cl(h, X);
        A.props = K;
        var ut = A.context, At = h.contextType;
        z = pc, typeof At == "object" && At !== null && (z = bi(At));
        var Bt = h.getDerivedStateFromProps;
        At = typeof Bt == "function" || typeof A.getSnapshotBeforeUpdate == "function", X = u.pendingProps !== X, At || typeof A.UNSAFE_componentWillReceiveProps != "function" && typeof A.componentWillReceiveProps != "function" || (X || ut !== z) && eA(
          u,
          A,
          _,
          z
        ), Mo = !1;
        var Ft = u.memoizedState;
        A.state = Ft, se(u, _, A, b), wt(), ut = u.memoizedState, X || Ft !== ut || Mo ? (typeof Bt == "function" && (Oy(
          u,
          h,
          Bt,
          _
        ), ut = u.memoizedState), (K = Mo || tA(
          u,
          h,
          K,
          _,
          Ft,
          ut,
          z
        )) ? (At || typeof A.UNSAFE_componentWillMount != "function" && typeof A.componentWillMount != "function" || (typeof A.componentWillMount == "function" && A.componentWillMount(), typeof A.UNSAFE_componentWillMount == "function" && A.UNSAFE_componentWillMount()), typeof A.componentDidMount == "function" && (u.flags |= 4194308)) : (typeof A.componentDidMount == "function" && (u.flags |= 4194308), u.memoizedProps = _, u.memoizedState = ut), A.props = _, A.state = ut, A.context = z, _ = K) : (typeof A.componentDidMount == "function" && (u.flags |= 4194308), _ = !1);
      } else {
        A = u.stateNode, jt(o, u), z = u.memoizedProps, At = Cl(h, z), A.props = At, Bt = u.pendingProps, Ft = A.context, ut = h.contextType, K = pc, typeof ut == "object" && ut !== null && (K = bi(ut)), X = h.getDerivedStateFromProps, (ut = typeof X == "function" || typeof A.getSnapshotBeforeUpdate == "function") || typeof A.UNSAFE_componentWillReceiveProps != "function" && typeof A.componentWillReceiveProps != "function" || (z !== Bt || Ft !== K) && eA(
          u,
          A,
          _,
          K
        ), Mo = !1, Ft = u.memoizedState, A.state = Ft, se(u, _, A, b), wt();
        var ve = u.memoizedState;
        z !== Bt || Ft !== ve || Mo || o !== null && o.dependencies !== null && Bm(o.dependencies) ? (typeof X == "function" && (Oy(
          u,
          h,
          X,
          _
        ), ve = u.memoizedState), (At = Mo || tA(
          u,
          h,
          At,
          _,
          Ft,
          ve,
          K
        ) || o !== null && o.dependencies !== null && Bm(o.dependencies)) ? (ut || typeof A.UNSAFE_componentWillUpdate != "function" && typeof A.componentWillUpdate != "function" || (typeof A.componentWillUpdate == "function" && A.componentWillUpdate(_, ve, K), typeof A.UNSAFE_componentWillUpdate == "function" && A.UNSAFE_componentWillUpdate(
          _,
          ve,
          K
        )), typeof A.componentDidUpdate == "function" && (u.flags |= 4), typeof A.getSnapshotBeforeUpdate == "function" && (u.flags |= 1024)) : (typeof A.componentDidUpdate != "function" || z === o.memoizedProps && Ft === o.memoizedState || (u.flags |= 4), typeof A.getSnapshotBeforeUpdate != "function" || z === o.memoizedProps && Ft === o.memoizedState || (u.flags |= 1024), u.memoizedProps = _, u.memoizedState = ve), A.props = _, A.state = ve, A.context = K, _ = At) : (typeof A.componentDidUpdate != "function" || z === o.memoizedProps && Ft === o.memoizedState || (u.flags |= 4), typeof A.getSnapshotBeforeUpdate != "function" || z === o.memoizedProps && Ft === o.memoizedState || (u.flags |= 1024), _ = !1);
      }
      return A = _, Lh(o, u), _ = (u.flags & 128) !== 0, A || _ ? (A = u.stateNode, h = _ && typeof h.getDerivedStateFromError != "function" ? null : A.render(), u.flags |= 1, o !== null && _ ? (u.child = Pl(
        u,
        o.child,
        null,
        b
      ), u.child = Pl(
        u,
        null,
        h,
        b
      )) : pi(o, u, h, b), u.memoizedState = A.state, o = u.child) : o = _r(
        o,
        u,
        b
      ), o;
    }
    function hA(o, u, h, _) {
      return Me(), u.flags |= 256, pi(o, u, h, _), u.child;
    }
    function zy(o) {
      return { baseLanes: o, cachePool: _A() };
    }
    function By(o, u, h) {
      return o = o !== null ? o.childLanes & ~h : 0, u && (o |= is), o;
    }
    function dA(o, u, h) {
      var _ = u.pendingProps, b = !1, A = (u.flags & 128) !== 0, z;
      if ((z = A) || (z = o !== null && o.memoizedState === null ? !1 : (Wn.current & 2) !== 0), z && (b = !0, u.flags &= -129), z = (u.flags & 32) !== 0, u.flags &= -33, o === null) {
        if (Ve) {
          if (b ? Qa(u) : Ts(), Ve) {
            var X = Ai, K;
            (K = X) && (X = EP(
              X,
              ks
            ), X !== null ? (u.memoizedState = {
              dehydrated: X,
              treeContext: Bl !== null ? { id: br, overflow: Er } : null,
              retryLane: 536870912
            }, K = e(18, null, null, 0), K.stateNode = X, K.return = u, u.child = K, Gi = u, Ai = null, K = !0) : K = !1), K || Xt(u);
          }
          if (X = u.memoizedState, X !== null && (X = X.dehydrated, X !== null))
            return Tx(X) ? u.lanes = 16 : u.lanes = 536870912, null;
          ea(u);
        }
        return X = _.children, _ = _.fallback, b ? (Ts(), b = u.mode, X = Iy(
          { mode: "hidden", children: X },
          b
        ), _ = Nl(
          _,
          b,
          h,
          null
        ), X.return = u, _.return = u, X.sibling = _, u.child = X, b = u.child, b.memoizedState = zy(h), b.childLanes = By(
          o,
          z,
          h
        ), u.memoizedState = Hx, _) : (Qa(u), Py(u, X));
      }
      if (K = o.memoizedState, K !== null && (X = K.dehydrated, X !== null)) {
        if (A)
          u.flags & 256 ? (Qa(u), u.flags &= -257, u = Hy(
            o,
            u,
            h
          )) : u.memoizedState !== null ? (Ts(), u.child = o.child, u.flags |= 128, u = null) : (Ts(), b = _.fallback, X = u.mode, _ = Iy(
            { mode: "visible", children: _.children },
            X
          ), b = Nl(
            b,
            X,
            h,
            null
          ), b.flags |= 2, _.return = u, b.return = u, _.sibling = b, u.child = _, Pl(
            u,
            o.child,
            null,
            h
          ), _ = u.child, _.memoizedState = zy(h), _.childLanes = By(
            o,
            z,
            h
          ), u.memoizedState = Hx, u = b);
        else if (Qa(u), Tx(X))
          z = gP(X).digest, _ = Error(a(419)), _.stack = "", _.digest = z, ce({ value: _, source: null, stack: null }), u = Hy(
            o,
            u,
            h
          );
        else if (ni || zh(
          o,
          u,
          h,
          !1
        ), z = (h & o.childLanes) !== 0, ni || z) {
          if (z = fn, z !== null) {
            if (_ = h & -h, _ & 42) _ = 1;
            else
              switch (_) {
                case 2:
                  _ = 1;
                  break;
                case 8:
                  _ = 4;
                  break;
                case 32:
                  _ = 16;
                  break;
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                  _ = 64;
                  break;
                case 268435456:
                  _ = 134217728;
                  break;
                default:
                  _ = 0;
              }
            if (_ = _ & (z.suspendedLanes | h) ? 0 : _, _ !== 0 && _ !== K.retryLane)
              throw K.retryLane = _, Et(o, _), Vi(z, o, _), G2;
          }
          Ex(X) || ox(), u = Hy(
            o,
            u,
            h
          );
        } else
          Ex(X) ? (u.flags |= 128, u.child = o.child, u = yB.bind(
            null,
            o
          ), vP(X, u), u = null) : (o = K.treeContext, Ka && (Ai = SP(X), Gi = u, Ve = !0, Cs = null, ks = !1, o !== null && ($a[ts++] = br, $a[ts++] = Er, $a[ts++] = Bl, br = o.id, Er = o.overflow, Bl = u)), u = Py(
            u,
            _.children
          ), u.flags |= 4096);
        return u;
      }
      return b ? (Ts(), b = _.fallback, X = u.mode, K = o.child, A = K.sibling, _ = vo(K, {
        mode: "hidden",
        children: _.children
      }), _.subtreeFlags = K.subtreeFlags & 31457280, A !== null ? b = vo(A, b) : (b = Nl(
        b,
        X,
        h,
        null
      ), b.flags |= 2), b.return = u, _.return = u, _.sibling = b, u.child = _, _ = b, b = u.child, X = o.child.memoizedState, X === null ? X = zy(h) : (K = X.cachePool, K !== null ? (A = Mr ? Rn._currentValue : Rn._currentValue2, K = K.parent !== A ? { parent: A, pool: A } : K) : K = _A(), X = {
        baseLanes: X.baseLanes | h,
        cachePool: K
      }), b.memoizedState = X, b.childLanes = By(
        o,
        z,
        h
      ), u.memoizedState = Hx, _) : (Qa(u), h = o.child, o = h.sibling, h = vo(h, {
        mode: "visible",
        children: _.children
      }), h.return = u, h.sibling = null, o !== null && (z = u.deletions, z === null ? (u.deletions = [o], u.flags |= 16) : z.push(o)), u.child = h, u.memoizedState = null, h);
    }
    function Py(o, u) {
      return u = Iy(
        { mode: "visible", children: u },
        o.mode
      ), u.return = o, o.child = u;
    }
    function Iy(o, u) {
      return i2(o, u, 0, null);
    }
    function Hy(o, u, h) {
      return Pl(u, o.child, null, h), o = Py(
        u,
        u.pendingProps.children
      ), o.flags |= 2, u.memoizedState = null, o;
    }
    function pA(o, u, h) {
      o.lanes |= u;
      var _ = o.alternate;
      _ !== null && (_.lanes |= u), Gy(o.return, u, h);
    }
    function Fy(o, u, h, _, b) {
      var A = o.memoizedState;
      A === null ? o.memoizedState = {
        isBackwards: u,
        rendering: null,
        renderingStartTime: 0,
        last: _,
        tail: h,
        tailMode: b
      } : (A.isBackwards = u, A.rendering = null, A.renderingStartTime = 0, A.last = _, A.tail = h, A.tailMode = b);
    }
    function mA(o, u, h) {
      var _ = u.pendingProps, b = _.revealOrder, A = _.tail;
      if (pi(o, u, _.children, h), _ = Wn.current, _ & 2)
        _ = _ & 1 | 2, u.flags |= 128;
      else {
        if (o !== null && o.flags & 128)
          t: for (o = u.child; o !== null; ) {
            if (o.tag === 13)
              o.memoizedState !== null && pA(o, h, u);
            else if (o.tag === 19)
              pA(o, h, u);
            else if (o.child !== null) {
              o.child.return = o, o = o.child;
              continue;
            }
            if (o === u) break t;
            for (; o.sibling === null; ) {
              if (o.return === null || o.return === u)
                break t;
              o = o.return;
            }
            o.sibling.return = o.return, o = o.sibling;
          }
        _ &= 1;
      }
      switch (S(Wn, _), b) {
        case "forwards":
          for (h = u.child, b = null; h !== null; )
            o = h.alternate, o !== null && Rl(o) === null && (b = h), h = h.sibling;
          h = b, h === null ? (b = u.child, u.child = null) : (b = h.sibling, h.sibling = null), Fy(
            u,
            !1,
            b,
            h,
            A
          );
          break;
        case "backwards":
          for (h = null, b = u.child, u.child = null; b !== null; ) {
            if (o = b.alternate, o !== null && Rl(o) === null) {
              u.child = b;
              break;
            }
            o = b.sibling, b.sibling = h, h = b, b = o;
          }
          Fy(
            u,
            !0,
            h,
            null,
            A
          );
          break;
        case "together":
          Fy(u, !1, null, null, void 0);
          break;
        default:
          u.memoizedState = null;
      }
      return u.child;
    }
    function _r(o, u, h) {
      if (o !== null && (u.dependencies = o.dependencies), To |= u.lanes, !(h & u.childLanes))
        if (o !== null) {
          if (zh(
            o,
            u,
            h,
            !1
          ), (h & u.childLanes) === 0)
            return null;
        } else return null;
      if (o !== null && u.child !== o.child)
        throw Error(a(153));
      if (u.child !== null) {
        for (o = u.child, h = vo(o, o.pendingProps), u.child = h, h.return = u; o.sibling !== null; )
          o = o.sibling, h = h.sibling = vo(o, o.pendingProps), h.return = u;
        h.sibling = null;
      }
      return u.child;
    }
    function Vy(o, u) {
      return o.lanes & u ? !0 : (o = o.dependencies, !!(o !== null && Bm(o)));
    }
    function lB(o, u, h) {
      switch (u.tag) {
        case 3:
          $(
            u,
            u.stateNode.containerInfo
          ), ho(u, Rn, o.memoizedState.cache), Me();
          break;
        case 27:
        case 5:
          kt(u);
          break;
        case 4:
          $(
            u,
            u.stateNode.containerInfo
          );
          break;
        case 10:
          ho(
            u,
            u.type,
            u.memoizedProps.value
          );
          break;
        case 13:
          var _ = u.memoizedState;
          if (_ !== null)
            return _.dehydrated !== null ? (Qa(u), u.flags |= 128, null) : h & u.child.childLanes ? dA(
              o,
              u,
              h
            ) : (Qa(u), o = _r(
              o,
              u,
              h
            ), o !== null ? o.sibling : null);
          Qa(u);
          break;
        case 19:
          var b = (o.flags & 128) !== 0;
          if (_ = (h & u.childLanes) !== 0, _ || (zh(
            o,
            u,
            h,
            !1
          ), _ = (h & u.childLanes) !== 0), b) {
            if (_)
              return mA(
                o,
                u,
                h
              );
            u.flags |= 128;
          }
          if (b = u.memoizedState, b !== null && (b.rendering = null, b.tail = null, b.lastEffect = null), S(Wn, Wn.current), _) break;
          return null;
        case 22:
        case 23:
          return u.lanes = 0, lA(o, u, h);
        case 24:
          ho(u, Rn, o.memoizedState.cache);
      }
      return _r(o, u, h);
    }
    function gA(o, u, h) {
      if (o !== null)
        if (o.memoizedProps !== u.pendingProps)
          ni = !0;
        else {
          if (!Vy(o, h) && !(u.flags & 128))
            return ni = !1, lB(
              o,
              u,
              h
            );
          ni = !!(o.flags & 131072);
        }
      else
        ni = !1, Ve && u.flags & 1048576 && mt(u, Km, u.index);
      switch (u.lanes = 0, u.tag) {
        case 16:
          t: {
            o = u.pendingProps;
            var _ = u.elementType, b = _._init;
            if (_ = b(_._payload), u.type = _, typeof _ == "function")
              cx(_) ? (o = Cl(_, o), u.tag = 1, u = fA(
                null,
                u,
                _,
                o,
                h
              )) : (u.tag = 0, u = Ly(
                null,
                u,
                _,
                o,
                h
              ));
            else {
              if (_ != null) {
                if (b = _.$$typeof, b === gx) {
                  u.tag = 11, u = sA(
                    null,
                    u,
                    _,
                    o,
                    h
                  );
                  break t;
                } else if (b === yx) {
                  u.tag = 14, u = rA(
                    null,
                    u,
                    _,
                    o,
                    h
                  );
                  break t;
                }
              }
              throw u = r(_) || _, Error(a(306, u, ""));
            }
          }
          return u;
        case 0:
          return Ly(
            o,
            u,
            u.type,
            u.pendingProps,
            h
          );
        case 1:
          return _ = u.type, b = Cl(
            _,
            u.pendingProps
          ), fA(
            o,
            u,
            _,
            b,
            h
          );
        case 3:
          t: {
            if ($(
              u,
              u.stateNode.containerInfo
            ), o === null) throw Error(a(387));
            var A = u.pendingProps;
            b = u.memoizedState, _ = b.element, jt(o, u), se(u, A, null, h);
            var z = u.memoizedState;
            if (A = z.cache, ho(u, Rn, A), A !== b.cache && Xy(
              u,
              [Rn],
              h,
              !0
            ), wt(), A = z.element, Ka && b.isDehydrated)
              if (b = {
                element: A,
                isDehydrated: !1,
                cache: z.cache
              }, u.updateQueue.baseState = b, u.memoizedState = b, u.flags & 256) {
                u = hA(
                  o,
                  u,
                  A,
                  h
                );
                break t;
              } else if (A !== _) {
                _ = it(
                  Error(a(424)),
                  u
                ), ce(_), u = hA(
                  o,
                  u,
                  A,
                  h
                );
                break t;
              } else
                for (Ka && (Ai = xP(
                  u.stateNode.containerInfo
                ), Gi = u, Ve = !0, Cs = null, ks = !0), h = F2(
                  u,
                  null,
                  A,
                  h
                ), u.child = h; h; )
                  h.flags = h.flags & -3 | 4096, h = h.sibling;
            else {
              if (Me(), A === _) {
                u = _r(
                  o,
                  u,
                  h
                );
                break t;
              }
              pi(o, u, A, h);
            }
            u = u.child;
          }
          return u;
        case 26:
          if (Ja)
            return Lh(o, u), o === null ? (h = D2(
              u.type,
              null,
              u.pendingProps,
              null
            )) ? u.memoizedState = h : Ve || (u.stateNode = BP(
              u.type,
              u.pendingProps,
              So.current,
              u
            )) : u.memoizedState = D2(
              u.type,
              o.memoizedProps,
              u.pendingProps,
              o.memoizedState
            ), null;
        case 27:
          if (Ti)
            return kt(u), o === null && Ti && Ve && (_ = u.stateNode = B2(
              u.type,
              u.pendingProps,
              So.current,
              mi.current,
              !1
            ), Gi = u, ks = !0, Ai = R2(_)), _ = u.pendingProps.children, o !== null || Ve ? pi(
              o,
              u,
              _,
              h
            ) : u.child = Pl(
              u,
              null,
              _,
              h
            ), Lh(o, u), u.child;
        case 5:
          return o === null && Ve && (NP(
            u.type,
            u.pendingProps,
            mi.current
          ), (b = _ = Ai) && (_ = MP(
            _,
            u.type,
            u.pendingProps,
            ks
          ), _ !== null ? (u.stateNode = _, Gi = u, Ai = R2(_), ks = !1, b = !0) : b = !1), b || Xt(u)), kt(u), b = u.type, A = u.pendingProps, z = o !== null ? o.memoizedProps : null, _ = A.children, km(b, A) ? _ = null : z !== null && km(b, z) && (u.flags |= 32), u.memoizedState !== null && (b = sc(
            o,
            u,
            Ay,
            null,
            null,
            h
          ), Mr ? zl._currentValue = b : zl._currentValue2 = b), Lh(o, u), pi(o, u, _, h), u.child;
        case 6:
          return o === null && Ve && (LP(
            u.pendingProps,
            mi.current
          ), (o = h = Ai) && (h = bP(
            h,
            u.pendingProps,
            ks
          ), h !== null ? (u.stateNode = h, Gi = u, Ai = null, o = !0) : o = !1), o || Xt(u)), null;
        case 13:
          return dA(o, u, h);
        case 4:
          return $(
            u,
            u.stateNode.containerInfo
          ), _ = u.pendingProps, o === null ? u.child = Pl(
            u,
            null,
            _,
            h
          ) : pi(
            o,
            u,
            _,
            h
          ), u.child;
        case 11:
          return sA(
            o,
            u,
            u.type,
            u.pendingProps,
            h
          );
        case 7:
          return pi(
            o,
            u,
            u.pendingProps,
            h
          ), u.child;
        case 8:
          return pi(
            o,
            u,
            u.pendingProps.children,
            h
          ), u.child;
        case 12:
          return pi(
            o,
            u,
            u.pendingProps.children,
            h
          ), u.child;
        case 10:
          return _ = u.pendingProps, ho(
            u,
            u.type,
            _.value
          ), pi(
            o,
            u,
            _.children,
            h
          ), u.child;
        case 9:
          return b = u.type._context, _ = u.pendingProps.children, wl(u), b = bi(b), _ = _(b), u.flags |= 1, pi(
            o,
            u,
            _,
            h
          ), u.child;
        case 14:
          return rA(
            o,
            u,
            u.type,
            u.pendingProps,
            h
          );
        case 15:
          return oA(
            o,
            u,
            u.type,
            u.pendingProps,
            h
          );
        case 19:
          return mA(
            o,
            u,
            h
          );
        case 22:
          return lA(o, u, h);
        case 24:
          return wl(u), _ = bi(Rn), o === null ? (b = Yy(), b === null && (b = fn, A = qy(), b.pooledCache = A, A.refCount++, A !== null && (b.pooledCacheLanes |= h), b = A), u.memoizedState = {
            parent: _,
            cache: b
          }, qt(u), ho(u, Rn, b)) : (o.lanes & h && (jt(o, u), se(u, null, null, h), wt()), b = o.memoizedState, A = u.memoizedState, b.parent !== _ ? (b = { parent: _, cache: _ }, u.memoizedState = b, u.lanes === 0 && (u.memoizedState = u.updateQueue.baseState = b), ho(u, Rn, _)) : (_ = A.cache, ho(u, Rn, _), _ !== b.cache && Xy(
            u,
            [Rn],
            h,
            !0
          ))), pi(
            o,
            u,
            u.pendingProps.children,
            h
          ), u.child;
        case 29:
          throw u.pendingProps;
      }
      throw Error(a(156, u.tag));
    }
    function ho(o, u, h) {
      Mr ? (S(sg, u._currentValue), u._currentValue = h) : (S(sg, u._currentValue2), u._currentValue2 = h);
    }
    function yr(o) {
      var u = sg.current;
      Mr ? o._currentValue = u : o._currentValue2 = u, v(sg);
    }
    function Gy(o, u, h) {
      for (; o !== null; ) {
        var _ = o.alternate;
        if ((o.childLanes & u) !== u ? (o.childLanes |= u, _ !== null && (_.childLanes |= u)) : _ !== null && (_.childLanes & u) !== u && (_.childLanes |= u), o === h) break;
        o = o.return;
      }
    }
    function Xy(o, u, h, _) {
      var b = o.child;
      for (b !== null && (b.return = o); b !== null; ) {
        var A = b.dependencies;
        if (A !== null) {
          var z = b.child;
          A = A.firstContext;
          t: for (; A !== null; ) {
            var X = A;
            A = b;
            for (var K = 0; K < u.length; K++)
              if (X.context === u[K]) {
                A.lanes |= h, X = A.alternate, X !== null && (X.lanes |= h), Gy(
                  A.return,
                  h,
                  o
                ), _ || (z = null);
                break t;
              }
            A = X.next;
          }
        } else if (b.tag === 18) {
          if (z = b.return, z === null) throw Error(a(341));
          z.lanes |= h, A = z.alternate, A !== null && (A.lanes |= h), Gy(z, h, o), z = null;
        } else z = b.child;
        if (z !== null) z.return = b;
        else
          for (z = b; z !== null; ) {
            if (z === o) {
              z = null;
              break;
            }
            if (b = z.sibling, b !== null) {
              b.return = z.return, z = b;
              break;
            }
            z = z.return;
          }
        b = z;
      }
    }
    function zh(o, u, h, _) {
      o = null;
      for (var b = u, A = !1; b !== null; ) {
        if (!A) {
          if (b.flags & 524288) A = !0;
          else if (b.flags & 262144) break;
        }
        if (b.tag === 10) {
          var z = b.alternate;
          if (z === null) throw Error(a(387));
          if (z = z.memoizedProps, z !== null) {
            var X = b.type;
            Ca(b.pendingProps.value, z.value) || (o !== null ? o.push(X) : o = [X]);
          }
        } else if (b === Jm.current) {
          if (z = b.alternate, z === null) throw Error(a(387));
          z.memoizedState.memoizedState !== b.memoizedState.memoizedState && (o !== null ? o.push(zl) : o = [zl]);
        }
        b = b.return;
      }
      o !== null && Xy(
        u,
        o,
        h,
        _
      ), u.flags |= 262144;
    }
    function Bm(o) {
      for (o = o.firstContext; o !== null; ) {
        var u = o.context;
        if (!Ca(
          Mr ? u._currentValue : u._currentValue2,
          o.memoizedValue
        ))
          return !0;
        o = o.next;
      }
      return !1;
    }
    function wl(o) {
      Vl = o, Tr = null, o = o.dependencies, o !== null && (o.firstContext = null);
    }
    function bi(o) {
      return vA(Vl, o);
    }
    function Pm(o, u) {
      return Vl === null && wl(o), vA(o, u);
    }
    function vA(o, u) {
      var h = Mr ? u._currentValue : u._currentValue2;
      if (u = { context: u, memoizedValue: h, next: null }, Tr === null) {
        if (o === null) throw Error(a(308));
        Tr = u, o.dependencies = { lanes: 0, firstContext: u }, o.flags |= 524288;
      } else Tr = Tr.next = u;
      return h;
    }
    function qy() {
      return {
        controller: new $P(),
        data: /* @__PURE__ */ new Map(),
        refCount: 0
      };
    }
    function Bh(o) {
      o.refCount--, o.refCount === 0 && tI(eI, function() {
        o.controller.abort();
      });
    }
    function Yy() {
      var o = Gl.current;
      return o !== null ? o : fn.pooledCache;
    }
    function Im(o, u) {
      u === null ? S(Gl, Gl.current) : S(Gl, u.pool);
    }
    function _A() {
      var o = Yy();
      return o === null ? null : {
        parent: Mr ? Rn._currentValue : Rn._currentValue2,
        pool: o
      };
    }
    function Sa(o) {
      o.flags |= 4;
    }
    function yA(o, u) {
      if (o !== null && o.child === u.child) return !1;
      if (u.flags & 16) return !0;
      for (o = u.child; o !== null; ) {
        if (o.flags & 13878 || o.subtreeFlags & 13878)
          return !0;
        o = o.sibling;
      }
      return !1;
    }
    function ky(o, u, h, _) {
      if (Ei)
        for (h = u.child; h !== null; ) {
          if (h.tag === 5 || h.tag === 6)
            Mx(o, h.stateNode);
          else if (!(h.tag === 4 || Ti && h.tag === 27) && h.child !== null) {
            h.child.return = h, h = h.child;
            continue;
          }
          if (h === u) break;
          for (; h.sibling === null; ) {
            if (h.return === null || h.return === u)
              return;
            h = h.return;
          }
          h.sibling.return = h.return, h = h.sibling;
        }
      else if (xo)
        for (var b = u.child; b !== null; ) {
          if (b.tag === 5) {
            var A = b.stateNode;
            h && _ && (A = E2(
              A,
              b.type,
              b.memoizedProps
            )), Mx(o, A);
          } else if (b.tag === 6)
            A = b.stateNode, h && _ && (A = T2(
              A,
              b.memoizedProps
            )), Mx(o, A);
          else if (b.tag !== 4) {
            if (b.tag === 22 && b.memoizedState !== null)
              A = b.child, A !== null && (A.return = b), ky(o, b, !0, !0);
            else if (b.child !== null) {
              b.child.return = b, b = b.child;
              continue;
            }
          }
          if (b === u) break;
          for (; b.sibling === null; ) {
            if (b.return === null || b.return === u)
              return;
            b = b.return;
          }
          b.sibling.return = b.return, b = b.sibling;
        }
    }
    function xA(o, u, h, _) {
      if (xo)
        for (var b = u.child; b !== null; ) {
          if (b.tag === 5) {
            var A = b.stateNode;
            h && _ && (A = E2(
              A,
              b.type,
              b.memoizedProps
            )), M2(o, A);
          } else if (b.tag === 6)
            A = b.stateNode, h && _ && (A = T2(
              A,
              b.memoizedProps
            )), M2(o, A);
          else if (b.tag !== 4) {
            if (b.tag === 22 && b.memoizedState !== null)
              A = b.child, A !== null && (A.return = b), xA(
                o,
                b,
                !(b.memoizedProps !== null && b.memoizedProps.mode === "manual"),
                !0
              );
            else if (b.child !== null) {
              b.child.return = b, b = b.child;
              continue;
            }
          }
          if (b === u) break;
          for (; b.sibling === null; ) {
            if (b.return === null || b.return === u) return;
            b = b.return;
          }
          b.sibling.return = b.return, b = b.sibling;
        }
    }
    function SA(o, u) {
      if (xo && yA(o, u)) {
        o = u.stateNode;
        var h = o.containerInfo, _ = S2();
        xA(_, u, !1, !1), o.pendingChildren = _, Sa(u), mP(h, _);
      }
    }
    function Wy(o, u, h, _) {
      if (Ei)
        o.memoizedProps !== _ && Sa(u);
      else if (xo) {
        var b = o.stateNode, A = o.memoizedProps;
        if ((o = yA(o, u)) || A !== _) {
          var z = mi.current;
          A = pP(
            b,
            h,
            A,
            _,
            !o,
            null
          ), A === b ? u.stateNode = b : (m2(
            A,
            h,
            _,
            z
          ) && Sa(u), u.stateNode = A, o ? ky(A, u, !1, !1) : Sa(u));
        } else u.stateNode = b;
      }
    }
    function Zy(o, u, h) {
      if (GB(u, h)) {
        if (o.flags |= 16777216, !_2(u, h))
          if (kA()) o.flags |= 8192;
          else
            throw Mc = eg, Bx;
      } else o.flags &= -16777217;
    }
    function MA(o, u) {
      if (IP(u)) {
        if (o.flags |= 16777216, !z2(u))
          if (kA()) o.flags |= 8192;
          else
            throw Mc = eg, Bx;
      } else o.flags &= -16777217;
    }
    function Hm(o, u) {
      u !== null && (o.flags |= 4), o.flags & 16384 && (u = o.tag !== 22 ? R() : 536870912, o.lanes |= u, wc |= u);
    }
    function Ph(o, u) {
      if (!Ve)
        switch (o.tailMode) {
          case "hidden":
            u = o.tail;
            for (var h = null; u !== null; )
              u.alternate !== null && (h = u), u = u.sibling;
            h === null ? o.tail = null : h.sibling = null;
            break;
          case "collapsed":
            h = o.tail;
            for (var _ = null; h !== null; )
              h.alternate !== null && (_ = h), h = h.sibling;
            _ === null ? u || o.tail === null ? o.tail = null : o.tail.sibling = null : _.sibling = null;
        }
    }
    function Mn(o) {
      var u = o.alternate !== null && o.alternate.child === o.child, h = 0, _ = 0;
      if (u)
        for (var b = o.child; b !== null; )
          h |= b.lanes | b.childLanes, _ |= b.subtreeFlags & 31457280, _ |= b.flags & 31457280, b.return = o, b = b.sibling;
      else
        for (b = o.child; b !== null; )
          h |= b.lanes | b.childLanes, _ |= b.subtreeFlags, _ |= b.flags, b.return = o, b = b.sibling;
      return o.subtreeFlags |= _, o.childLanes = h, u;
    }
    function uB(o, u, h) {
      var _ = u.pendingProps;
      switch (Qt(u), u.tag) {
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return Mn(u), null;
        case 1:
          return Mn(u), null;
        case 3:
          return h = u.stateNode, _ = null, o !== null && (_ = o.memoizedState.cache), u.memoizedState.cache !== _ && (u.flags |= 2048), yr(Rn), ht(), h.pendingContext && (h.context = h.pendingContext, h.pendingContext = null), (o === null || o.child === null) && (qe(u) ? Sa(u) : o === null || o.memoizedState.isDehydrated && !(u.flags & 256) || (u.flags |= 1024, Cs !== null && (sx(Cs), Cs = null))), SA(o, u), Mn(u), null;
        case 26:
          if (Ja) {
            h = u.type;
            var b = u.memoizedState;
            return o === null ? (Sa(u), b !== null ? (Mn(u), MA(
              u,
              b
            )) : (Mn(u), Zy(
              u,
              h,
              _
            ))) : b ? b !== o.memoizedState ? (Sa(u), Mn(u), MA(
              u,
              b
            )) : (Mn(u), u.flags &= -16777217) : (Ei ? o.memoizedProps !== _ && Sa(u) : Wy(
              o,
              u,
              h,
              _
            ), Mn(u), Zy(
              u,
              h,
              _
            )), null;
          }
        case 27:
          if (Ti) {
            if (Ot(u), h = So.current, b = u.type, o !== null && u.stateNode != null)
              Ei ? o.memoizedProps !== _ && Sa(u) : Wy(
                o,
                u,
                b,
                _
              );
            else {
              if (!_) {
                if (u.stateNode === null)
                  throw Error(a(166));
                return Mn(u), null;
              }
              o = mi.current, qe(u) ? pe(u, o) : (o = B2(
                b,
                _,
                h,
                o,
                !0
              ), u.stateNode = o, Sa(u));
            }
            return Mn(u), null;
          }
        case 5:
          if (Ot(u), h = u.type, o !== null && u.stateNode != null)
            Wy(o, u, h, _);
          else {
            if (!_) {
              if (u.stateNode === null)
                throw Error(a(166));
              return Mn(u), null;
            }
            o = mi.current, qe(u) ? pe(u, o) : (b = zB(
              h,
              _,
              So.current,
              o,
              u
            ), ky(b, u, !1, !1), u.stateNode = b, m2(
              b,
              h,
              _,
              o
            ) && Sa(u));
          }
          return Mn(u), Zy(
            u,
            u.type,
            u.pendingProps
          ), null;
        case 6:
          if (o && u.stateNode != null)
            h = o.memoizedProps, Ei ? h !== _ && Sa(u) : xo && (h !== _ ? (u.stateNode = g2(
              _,
              So.current,
              mi.current,
              u
            ), Sa(u)) : u.stateNode = o.stateNode);
          else {
            if (typeof _ != "string" && u.stateNode === null)
              throw Error(a(166));
            if (o = So.current, h = mi.current, qe(u)) {
              if (!Ka) throw Error(a(176));
              if (o = u.stateNode, h = u.memoizedProps, _ = null, b = Gi, b !== null)
                switch (b.tag) {
                  case 27:
                  case 5:
                    _ = b.memoizedProps;
                }
              AP(
                o,
                h,
                u,
                _
              ) || Xt(u);
            } else
              u.stateNode = g2(
                _,
                o,
                h,
                u
              );
          }
          return Mn(u), null;
        case 13:
          if (_ = u.memoizedState, o === null || o.memoizedState !== null && o.memoizedState.dehydrated !== null) {
            if (b = qe(u), _ !== null && _.dehydrated !== null) {
              if (o === null) {
                if (!b) throw Error(a(318));
                if (!Ka) throw Error(a(344));
                if (b = u.memoizedState, b = b !== null ? b.dehydrated : null, !b) throw Error(a(317));
                RP(b, u);
              } else
                Me(), !(u.flags & 128) && (u.memoizedState = null), u.flags |= 4;
              Mn(u), b = !1;
            } else
              Cs !== null && (sx(Cs), Cs = null), b = !0;
            if (!b)
              return u.flags & 256 ? (ea(u), u) : (ea(u), null);
          }
          if (ea(u), u.flags & 128)
            return u.lanes = h, u;
          if (h = _ !== null, o = o !== null && o.memoizedState !== null, h) {
            _ = u.child, b = null, _.alternate !== null && _.alternate.memoizedState !== null && _.alternate.memoizedState.cachePool !== null && (b = _.alternate.memoizedState.cachePool.pool);
            var A = null;
            _.memoizedState !== null && _.memoizedState.cachePool !== null && (A = _.memoizedState.cachePool.pool), A !== b && (_.flags |= 2048);
          }
          return h !== o && h && (u.child.flags |= 8192), Hm(u, u.updateQueue), Mn(u), null;
        case 4:
          return ht(), SA(o, u), o === null && IB(u.stateNode.containerInfo), Mn(u), null;
        case 10:
          return yr(u.type), Mn(u), null;
        case 19:
          if (v(Wn), b = u.memoizedState, b === null)
            return Mn(u), null;
          if (_ = (u.flags & 128) !== 0, A = b.rendering, A === null)
            if (_) Ph(b, !1);
            else {
              if (wn !== 0 || o !== null && o.flags & 128)
                for (o = u.child; o !== null; ) {
                  if (A = Rl(o), A !== null) {
                    for (u.flags |= 128, Ph(b, !1), o = A.updateQueue, u.updateQueue = o, Hm(u, o), u.subtreeFlags = 0, o = h, h = u.child; h !== null; )
                      n2(h, o), h = h.sibling;
                    return S(
                      Wn,
                      Wn.current & 1 | 2
                    ), u.child;
                  }
                  o = o.sibling;
                }
              b.tail !== null && Rs() > Jh && (u.flags |= 128, _ = !0, Ph(b, !1), u.lanes = 4194304);
            }
          else {
            if (!_)
              if (o = Rl(A), o !== null) {
                if (u.flags |= 128, _ = !0, o = o.updateQueue, u.updateQueue = o, Hm(u, o), Ph(b, !0), b.tail === null && b.tailMode === "hidden" && !A.alternate && !Ve)
                  return Mn(u), null;
              } else
                2 * Rs() - b.renderingStartTime > Jh && h !== 536870912 && (u.flags |= 128, _ = !0, Ph(b, !1), u.lanes = 4194304);
            b.isBackwards ? (A.sibling = u.child, u.child = A) : (o = b.last, o !== null ? o.sibling = A : u.child = A, b.last = A);
          }
          return b.tail !== null ? (u = b.tail, b.rendering = u, b.tail = u.sibling, b.renderingStartTime = Rs(), u.sibling = null, o = Wn.current, S(
            Wn,
            _ ? o & 1 | 2 : o & 1
          ), u) : (Mn(u), null);
        case 22:
        case 23:
          return ea(u), Es(), _ = u.memoizedState !== null, o !== null ? o.memoizedState !== null !== _ && (u.flags |= 8192) : _ && (u.flags |= 8192), _ ? h & 536870912 && !(u.flags & 128) && (Mn(u), u.subtreeFlags & 6 && (u.flags |= 8192)) : Mn(u), h = u.updateQueue, h !== null && Hm(u, h.retryQueue), h = null, o !== null && o.memoizedState !== null && o.memoizedState.cachePool !== null && (h = o.memoizedState.cachePool.pool), _ = null, u.memoizedState !== null && u.memoizedState.cachePool !== null && (_ = u.memoizedState.cachePool.pool), _ !== h && (u.flags |= 2048), o !== null && v(Gl), null;
        case 24:
          return h = null, o !== null && (h = o.memoizedState.cache), u.memoizedState.cache !== h && (u.flags |= 2048), yr(Rn), Mn(u), null;
        case 25:
          return null;
      }
      throw Error(a(156, u.tag));
    }
    function cB(o, u) {
      switch (Qt(u), u.tag) {
        case 1:
          return o = u.flags, o & 65536 ? (u.flags = o & -65537 | 128, u) : null;
        case 3:
          return yr(Rn), ht(), o = u.flags, o & 65536 && !(o & 128) ? (u.flags = o & -65537 | 128, u) : null;
        case 26:
        case 27:
        case 5:
          return Ot(u), null;
        case 13:
          if (ea(u), o = u.memoizedState, o !== null && o.dehydrated !== null) {
            if (u.alternate === null)
              throw Error(a(340));
            Me();
          }
          return o = u.flags, o & 65536 ? (u.flags = o & -65537 | 128, u) : null;
        case 19:
          return v(Wn), null;
        case 4:
          return ht(), null;
        case 10:
          return yr(u.type), null;
        case 22:
        case 23:
          return ea(u), Es(), o !== null && v(Gl), o = u.flags, o & 65536 ? (u.flags = o & -65537 | 128, u) : null;
        case 24:
          return yr(Rn), null;
        case 25:
          return null;
        default:
          return null;
      }
    }
    function bA(o, u) {
      switch (Qt(u), u.tag) {
        case 3:
          yr(Rn), ht();
          break;
        case 26:
        case 27:
        case 5:
          Ot(u);
          break;
        case 4:
          ht();
          break;
        case 13:
          ea(u);
          break;
        case 19:
          v(Wn);
          break;
        case 10:
          yr(u.type);
          break;
        case 22:
        case 23:
          ea(u), Es(), o !== null && v(Gl);
          break;
        case 24:
          yr(Rn);
      }
    }
    function Ih(o, u) {
      try {
        var h = u.updateQueue, _ = h !== null ? h.lastEffect : null;
        if (_ !== null) {
          var b = _.next;
          h = b;
          do {
            if ((h.tag & o) === o) {
              _ = void 0;
              var A = h.create, z = h.inst;
              _ = A(), z.destroy = _;
            }
            h = h.next;
          } while (h !== b);
        }
      } catch (X) {
        Ze(u, u.return, X);
      }
    }
    function po(o, u, h) {
      try {
        var _ = u.updateQueue, b = _ !== null ? _.lastEffect : null;
        if (b !== null) {
          var A = b.next;
          _ = A;
          do {
            if ((_.tag & o) === o) {
              var z = _.inst, X = z.destroy;
              if (X !== void 0) {
                z.destroy = void 0, b = u;
                var K = h;
                try {
                  X();
                } catch (ut) {
                  Ze(
                    b,
                    K,
                    ut
                  );
                }
              }
            }
            _ = _.next;
          } while (_ !== A);
        }
      } catch (ut) {
        Ze(u, u.return, ut);
      }
    }
    function EA(o) {
      var u = o.updateQueue;
      if (u !== null) {
        var h = o.stateNode;
        try {
          Lt(u, h);
        } catch (_) {
          Ze(o, o.return, _);
        }
      }
    }
    function TA(o, u, h) {
      h.props = Cl(
        o.type,
        o.memoizedProps
      ), h.state = o.memoizedState;
      try {
        h.componentWillUnmount();
      } catch (_) {
        Ze(o, u, _);
      }
    }
    function Dl(o, u) {
      try {
        var h = o.ref;
        if (h !== null) {
          var _ = o.stateNode;
          switch (o.tag) {
            case 26:
            case 27:
            case 5:
              var b = Vh(_);
              break;
            default:
              b = _;
          }
          typeof h == "function" ? o.refCleanup = h(b) : h.current = b;
        }
      } catch (A) {
        Ze(o, u, A);
      }
    }
    function Ma(o, u) {
      var h = o.ref, _ = o.refCleanup;
      if (h !== null)
        if (typeof _ == "function")
          try {
            _();
          } catch (b) {
            Ze(o, u, b);
          } finally {
            o.refCleanup = null, o = o.alternate, o != null && (o.refCleanup = null);
          }
        else if (typeof h == "function")
          try {
            h(null);
          } catch (b) {
            Ze(o, u, b);
          }
        else h.current = null;
    }
    function AA(o) {
      var u = o.type, h = o.memoizedProps, _ = o.stateNode;
      try {
        iP(_, u, h, o);
      } catch (b) {
        Ze(o, o.return, b);
      }
    }
    function RA(o, u, h) {
      try {
        aP(
          o.stateNode,
          o.type,
          h,
          u,
          o
        );
      } catch (_) {
        Ze(o, o.return, _);
      }
    }
    function CA(o) {
      return o.tag === 5 || o.tag === 3 || (Ja ? o.tag === 26 : !1) || (Ti ? o.tag === 27 : !1) || o.tag === 4;
    }
    function jy(o) {
      t: for (; ; ) {
        for (; o.sibling === null; ) {
          if (o.return === null || CA(o.return)) return null;
          o = o.return;
        }
        for (o.sibling.return = o.return, o = o.sibling; o.tag !== 5 && o.tag !== 6 && (!Ti || o.tag !== 27) && o.tag !== 18; ) {
          if (o.flags & 2 || o.child === null || o.tag === 4) continue t;
          o.child.return = o, o = o.child;
        }
        if (!(o.flags & 2)) return o.stateNode;
      }
    }
    function Qy(o, u, h) {
      var _ = o.tag;
      if (_ === 5 || _ === 6)
        o = o.stateNode, u ? rP(h, o, u) : eP(h, o);
      else if (!(_ === 4 || Ti && _ === 27) && (o = o.child, o !== null))
        for (Qy(o, u, h), o = o.sibling; o !== null; )
          Qy(o, u, h), o = o.sibling;
    }
    function Fm(o, u, h) {
      var _ = o.tag;
      if (_ === 5 || _ === 6)
        o = o.stateNode, u ? sP(h, o, u) : tP(h, o);
      else if (!(_ === 4 || Ti && _ === 27) && (o = o.child, o !== null))
        for (Fm(o, u, h), o = o.sibling; o !== null; )
          Fm(o, u, h), o = o.sibling;
    }
    function wA(o, u, h) {
      o = o.containerInfo;
      try {
        b2(o, h);
      } catch (_) {
        Ze(u, u.return, _);
      }
    }
    function fB(o, u) {
      for (NB(o.containerInfo), ii = u; ii !== null; )
        if (o = ii, u = o.child, (o.subtreeFlags & 1028) !== 0 && u !== null)
          u.return = o, ii = u;
        else
          for (; ii !== null; ) {
            o = ii;
            var h = o.alternate;
            switch (u = o.flags, o.tag) {
              case 0:
                break;
              case 11:
              case 15:
                break;
              case 1:
                if (u & 1024 && h !== null) {
                  u = void 0;
                  var _ = o, b = h.memoizedProps;
                  h = h.memoizedState;
                  var A = _.stateNode;
                  try {
                    var z = Cl(
                      _.type,
                      b,
                      _.elementType === _.type
                    );
                    u = A.getSnapshotBeforeUpdate(
                      z,
                      h
                    ), A.__reactInternalSnapshotBeforeUpdate = u;
                  } catch (X) {
                    Ze(
                      _,
                      _.return,
                      X
                    );
                  }
                }
                break;
              case 3:
                u & 1024 && Ei && dP(o.stateNode.containerInfo);
                break;
              case 5:
              case 26:
              case 27:
              case 6:
              case 4:
              case 17:
                break;
              default:
                if (u & 1024)
                  throw Error(a(163));
            }
            if (u = o.sibling, u !== null) {
              u.return = o.return, ii = u;
              break;
            }
            ii = o.return;
          }
      return z = Y2, Y2 = !1, z;
    }
    function DA(o, u, h) {
      var _ = h.flags;
      switch (h.tag) {
        case 0:
        case 11:
        case 15:
          xr(o, h), _ & 4 && Ih(5, h);
          break;
        case 1:
          if (xr(o, h), _ & 4)
            if (o = h.stateNode, u === null)
              try {
                o.componentDidMount();
              } catch (X) {
                Ze(h, h.return, X);
              }
            else {
              var b = Cl(
                h.type,
                u.memoizedProps
              );
              u = u.memoizedState;
              try {
                o.componentDidUpdate(
                  b,
                  u,
                  o.__reactInternalSnapshotBeforeUpdate
                );
              } catch (X) {
                Ze(
                  h,
                  h.return,
                  X
                );
              }
            }
          _ & 64 && EA(h), _ & 512 && Dl(h, h.return);
          break;
        case 3:
          if (xr(o, h), _ & 64 && (_ = h.updateQueue, _ !== null)) {
            if (o = null, h.child !== null)
              switch (h.child.tag) {
                case 27:
                case 5:
                  o = Vh(h.child.stateNode);
                  break;
                case 1:
                  o = h.child.stateNode;
              }
            try {
              Lt(_, o);
            } catch (X) {
              Ze(h, h.return, X);
            }
          }
          break;
        case 26:
          if (Ja) {
            xr(o, h), _ & 512 && Dl(h, h.return);
            break;
          }
        case 27:
        case 5:
          xr(o, h), u === null && _ & 4 && AA(h), _ & 512 && Dl(h, h.return);
          break;
        case 12:
          xr(o, h);
          break;
        case 13:
          xr(o, h), _ & 4 && OA(o, h);
          break;
        case 22:
          if (b = h.memoizedState !== null || Ar, !b) {
            u = u !== null && u.memoizedState !== null || Cn;
            var A = Ar, z = Cn;
            Ar = b, (Cn = u) && !z ? mo(
              o,
              h,
              (h.subtreeFlags & 8772) !== 0
            ) : xr(o, h), Ar = A, Cn = z;
          }
          _ & 512 && (h.memoizedProps.mode === "manual" ? Dl(h, h.return) : Ma(h, h.return));
          break;
        default:
          xr(o, h);
      }
    }
    function UA(o) {
      var u = o.alternate;
      u !== null && (o.alternate = null, UA(u)), o.child = null, o.deletions = null, o.sibling = null, o.tag === 5 && (u = o.stateNode, u !== null && VB(u)), o.stateNode = null, o.return = null, o.dependencies = null, o.memoizedProps = null, o.memoizedState = null, o.pendingProps = null, o.stateNode = null, o.updateQueue = null;
    }
    function As(o, u, h) {
      for (h = h.child; h !== null; )
        Ky(
          o,
          u,
          h
        ), h = h.sibling;
    }
    function Ky(o, u, h) {
      if (Ra && typeof Ra.onCommitFiberUnmount == "function")
        try {
          Ra.onCommitFiberUnmount(qh, h);
        } catch {
        }
      switch (h.tag) {
        case 26:
          if (Ja) {
            Cn || Ma(h, u), As(
              o,
              u,
              h
            ), h.memoizedState ? O2(h.memoizedState) : h.stateNode && L2(h.stateNode);
            break;
          }
        case 27:
          if (Ti) {
            Cn || Ma(h, u);
            var _ = Fn, b = wa;
            Fn = h.stateNode, As(
              o,
              u,
              h
            ), GP(h.stateNode), Fn = _, wa = b;
            break;
          }
        case 5:
          Cn || Ma(h, u);
        case 6:
          if (Ei) {
            if (_ = Fn, b = wa, Fn = null, As(
              o,
              u,
              h
            ), Fn = _, wa = b, Fn !== null)
              if (wa)
                try {
                  lP(Fn, h.stateNode);
                } catch (A) {
                  Ze(
                    h,
                    u,
                    A
                  );
                }
              else
                try {
                  oP(Fn, h.stateNode);
                } catch (A) {
                  Ze(
                    h,
                    u,
                    A
                  );
                }
          } else
            As(
              o,
              u,
              h
            );
          break;
        case 18:
          Ei && Fn !== null && (wa ? OP(
            Fn,
            h.stateNode
          ) : UP(Fn, h.stateNode));
          break;
        case 4:
          Ei ? (_ = Fn, b = wa, Fn = h.stateNode.containerInfo, wa = !0, As(
            o,
            u,
            h
          ), Fn = _, wa = b) : (xo && wA(
            h.stateNode,
            h,
            S2()
          ), As(
            o,
            u,
            h
          ));
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          Cn || po(2, h, u), Cn || po(4, h, u), As(
            o,
            u,
            h
          );
          break;
        case 1:
          Cn || (Ma(h, u), _ = h.stateNode, typeof _.componentWillUnmount == "function" && TA(
            h,
            u,
            _
          )), As(
            o,
            u,
            h
          );
          break;
        case 21:
          As(
            o,
            u,
            h
          );
          break;
        case 22:
          Cn || Ma(h, u), Cn = (_ = Cn) || h.memoizedState !== null, As(
            o,
            u,
            h
          ), Cn = _;
          break;
        default:
          As(
            o,
            u,
            h
          );
      }
    }
    function OA(o, u) {
      if (Ka && u.memoizedState === null && (o = u.alternate, o !== null && (o = o.memoizedState, o !== null && (o = o.dehydrated, o !== null))))
        try {
          DP(o);
        } catch (h) {
          Ze(u, u.return, h);
        }
    }
    function hB(o) {
      switch (o.tag) {
        case 13:
        case 19:
          var u = o.stateNode;
          return u === null && (u = o.stateNode = new q2()), u;
        case 22:
          return o = o.stateNode, u = o._retryCache, u === null && (u = o._retryCache = new q2()), u;
        default:
          throw Error(a(435, o.tag));
      }
    }
    function Jy(o, u) {
      var h = hB(o);
      u.forEach(function(_) {
        var b = xB.bind(null, o, _);
        h.has(_) || (h.add(_), _.then(b, b));
      });
    }
    function ia(o, u) {
      var h = u.deletions;
      if (h !== null)
        for (var _ = 0; _ < h.length; _++) {
          var b = h[_], A = o, z = u;
          if (Ei) {
            var X = z;
            t: for (; X !== null; ) {
              switch (X.tag) {
                case 27:
                case 5:
                  Fn = X.stateNode, wa = !1;
                  break t;
                case 3:
                  Fn = X.stateNode.containerInfo, wa = !0;
                  break t;
                case 4:
                  Fn = X.stateNode.containerInfo, wa = !0;
                  break t;
              }
              X = X.return;
            }
            if (Fn === null) throw Error(a(160));
            Ky(A, z, b), Fn = null, wa = !1;
          } else Ky(A, z, b);
          A = b.alternate, A !== null && (A.return = null), b.return = null;
        }
      if (u.subtreeFlags & 13878)
        for (u = u.child; u !== null; )
          NA(u, o), u = u.sibling;
    }
    function NA(o, u) {
      var h = o.alternate, _ = o.flags;
      switch (o.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ia(u, o), ba(o), _ & 4 && (po(3, o, o.return), Ih(3, o), po(5, o, o.return));
          break;
        case 1:
          ia(u, o), ba(o), _ & 512 && (Cn || h === null || Ma(h, h.return)), _ & 64 && Ar && (o = o.updateQueue, o !== null && (_ = o.callbacks, _ !== null && (h = o.shared.hiddenCallbacks, o.shared.hiddenCallbacks = h === null ? _ : h.concat(_))));
          break;
        case 26:
          if (Ja) {
            var b = ws;
            ia(u, o), ba(o), _ & 512 && (Cn || h === null || Ma(h, h.return)), _ & 4 && (_ = h !== null ? h.memoizedState : null, u = o.memoizedState, h === null ? u === null ? o.stateNode === null ? o.stateNode = zP(
              b,
              o.type,
              o.memoizedProps,
              o
            ) : N2(
              b,
              o.type,
              o.stateNode
            ) : o.stateNode = U2(
              b,
              u,
              o.memoizedProps
            ) : _ !== u ? (_ === null ? h.stateNode !== null && L2(h.stateNode) : O2(_), u === null ? N2(
              b,
              o.type,
              o.stateNode
            ) : U2(
              b,
              u,
              o.memoizedProps
            )) : u === null && o.stateNode !== null && RA(
              o,
              o.memoizedProps,
              h.memoizedProps
            ));
            break;
          }
        case 27:
          if (Ti && _ & 4 && o.alternate === null) {
            b = o.stateNode;
            var A = o.memoizedProps;
            try {
              FP(b), VP(
                o.type,
                A,
                b,
                o
              );
            } catch (At) {
              Ze(o, o.return, At);
            }
          }
        case 5:
          if (ia(u, o), ba(o), _ & 512 && (Cn || h === null || Ma(h, h.return)), Ei) {
            if (o.flags & 32) {
              u = o.stateNode;
              try {
                x2(u);
              } catch (At) {
                Ze(o, o.return, At);
              }
            }
            _ & 4 && o.stateNode != null && (u = o.memoizedProps, RA(
              o,
              u,
              h !== null ? h.memoizedProps : u
            )), _ & 1024 && (Fx = !0);
          }
          break;
        case 6:
          if (ia(u, o), ba(o), _ & 4 && Ei) {
            if (o.stateNode === null)
              throw Error(a(162));
            _ = o.memoizedProps, h = h !== null ? h.memoizedProps : _, u = o.stateNode;
            try {
              nP(u, h, _);
            } catch (At) {
              Ze(o, o.return, At);
            }
          }
          break;
        case 3:
          if (Ja ? (PP(), b = ws, ws = Ax(u.containerInfo), ia(u, o), ws = b) : ia(u, o), ba(o), _ & 4) {
            if (Ei && Ka && h !== null && h.memoizedState.isDehydrated)
              try {
                wP(u.containerInfo);
              } catch (At) {
                Ze(o, o.return, At);
              }
            if (xo) {
              _ = u.containerInfo, h = u.pendingChildren;
              try {
                b2(_, h);
              } catch (At) {
                Ze(o, o.return, At);
              }
            }
          }
          Fx && (Fx = !1, LA(o));
          break;
        case 4:
          Ja ? (h = ws, ws = Ax(
            o.stateNode.containerInfo
          ), ia(u, o), ba(o), ws = h) : (ia(u, o), ba(o)), _ & 4 && xo && wA(
            o.stateNode,
            o,
            o.stateNode.pendingChildren
          );
          break;
        case 12:
          ia(u, o), ba(o);
          break;
        case 13:
          ia(u, o), ba(o), o.child.flags & 8192 && o.memoizedState !== null != (h !== null && h.memoizedState !== null) && (qx = Rs()), _ & 4 && (_ = o.updateQueue, _ !== null && (o.updateQueue = null, Jy(o, _)));
          break;
        case 22:
          _ & 512 && (Cn || h === null || Ma(h, h.return)), b = o.memoizedState !== null;
          var z = h !== null && h.memoizedState !== null, X = Ar, K = Cn;
          if (Ar = X || b, Cn = K || z, ia(u, o), Cn = K, Ar = X, ba(o), u = o.stateNode, u._current = o, u._visibility &= -3, u._visibility |= u._pendingVisibility & 2, _ & 8192 && (u._visibility = b ? u._visibility & -2 : u._visibility | 1, b && (u = Ar || Cn, h === null || z || u || rc(o)), Ei && (o.memoizedProps === null || o.memoizedProps.mode !== "manual"))) {
            t: if (h = null, Ei)
              for (u = o; ; ) {
                if (u.tag === 5 || Ja && u.tag === 26 || Ti && u.tag === 27) {
                  if (h === null) {
                    z = h = u;
                    try {
                      A = z.stateNode, b ? uP(A) : fP(
                        z.stateNode,
                        z.memoizedProps
                      );
                    } catch (At) {
                      Ze(z, z.return, At);
                    }
                  }
                } else if (u.tag === 6) {
                  if (h === null) {
                    z = u;
                    try {
                      var ut = z.stateNode;
                      b ? cP(ut) : hP(ut, z.memoizedProps);
                    } catch (At) {
                      Ze(z, z.return, At);
                    }
                  }
                } else if ((u.tag !== 22 && u.tag !== 23 || u.memoizedState === null || u === o) && u.child !== null) {
                  u.child.return = u, u = u.child;
                  continue;
                }
                if (u === o) break t;
                for (; u.sibling === null; ) {
                  if (u.return === null || u.return === o)
                    break t;
                  h === u && (h = null), u = u.return;
                }
                h === u && (h = null), u.sibling.return = u.return, u = u.sibling;
              }
          }
          _ & 4 && (_ = o.updateQueue, _ !== null && (h = _.retryQueue, h !== null && (_.retryQueue = null, Jy(o, h))));
          break;
        case 19:
          ia(u, o), ba(o), _ & 4 && (_ = o.updateQueue, _ !== null && (o.updateQueue = null, Jy(o, _)));
          break;
        case 21:
          break;
        default:
          ia(u, o), ba(o);
      }
    }
    function ba(o) {
      var u = o.flags;
      if (u & 2) {
        try {
          if (Ei && (!Ti || o.tag !== 27)) {
            t: {
              for (var h = o.return; h !== null; ) {
                if (CA(h)) {
                  var _ = h;
                  break t;
                }
                h = h.return;
              }
              throw Error(a(160));
            }
            switch (_.tag) {
              case 27:
                if (Ti) {
                  var b = _.stateNode, A = jy(o);
                  Fm(
                    o,
                    A,
                    b
                  );
                  break;
                }
              case 5:
                var z = _.stateNode;
                _.flags & 32 && (x2(z), _.flags &= -33);
                var X = jy(o);
                Fm(o, X, z);
                break;
              case 3:
              case 4:
                var K = _.stateNode.containerInfo, ut = jy(o);
                Qy(
                  o,
                  ut,
                  K
                );
                break;
              default:
                throw Error(a(161));
            }
          }
        } catch (At) {
          Ze(o, o.return, At);
        }
        o.flags &= -3;
      }
      u & 4096 && (o.flags &= -4097);
    }
    function LA(o) {
      if (o.subtreeFlags & 1024)
        for (o = o.child; o !== null; ) {
          var u = o;
          LA(u), u.tag === 5 && u.flags & 1024 && YB(u.stateNode), o = o.sibling;
        }
    }
    function xr(o, u) {
      if (u.subtreeFlags & 8772)
        for (u = u.child; u !== null; )
          DA(o, u.alternate, u), u = u.sibling;
    }
    function rc(o) {
      for (o = o.child; o !== null; ) {
        var u = o;
        switch (u.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            po(4, u, u.return), rc(u);
            break;
          case 1:
            Ma(u, u.return);
            var h = u.stateNode;
            typeof h.componentWillUnmount == "function" && TA(
              u,
              u.return,
              h
            ), rc(u);
            break;
          case 26:
          case 27:
          case 5:
            Ma(u, u.return), rc(u);
            break;
          case 22:
            Ma(u, u.return), u.memoizedState === null && rc(u);
            break;
          default:
            rc(u);
        }
        o = o.sibling;
      }
    }
    function mo(o, u, h) {
      for (h = h && (u.subtreeFlags & 8772) !== 0, u = u.child; u !== null; ) {
        var _ = u.alternate, b = o, A = u, z = A.flags;
        switch (A.tag) {
          case 0:
          case 11:
          case 15:
            mo(
              b,
              A,
              h
            ), Ih(4, A);
            break;
          case 1:
            if (mo(
              b,
              A,
              h
            ), _ = A, b = _.stateNode, typeof b.componentDidMount == "function")
              try {
                b.componentDidMount();
              } catch (ut) {
                Ze(_, _.return, ut);
              }
            if (_ = A, b = _.updateQueue, b !== null) {
              var X = _.stateNode;
              try {
                var K = b.shared.hiddenCallbacks;
                if (K !== null)
                  for (b.shared.hiddenCallbacks = null, b = 0; b < K.length; b++)
                    k(K[b], X);
              } catch (ut) {
                Ze(_, _.return, ut);
              }
            }
            h && z & 64 && EA(A), Dl(A, A.return);
            break;
          case 26:
          case 27:
          case 5:
            mo(
              b,
              A,
              h
            ), h && _ === null && z & 4 && AA(A), Dl(A, A.return);
            break;
          case 12:
            mo(
              b,
              A,
              h
            );
            break;
          case 13:
            mo(
              b,
              A,
              h
            ), h && z & 4 && OA(b, A);
            break;
          case 22:
            A.memoizedState === null && mo(
              b,
              A,
              h
            ), Dl(A, A.return);
            break;
          default:
            mo(
              b,
              A,
              h
            );
        }
        u = u.sibling;
      }
    }
    function $y(o, u) {
      var h = null;
      o !== null && o.memoizedState !== null && o.memoizedState.cachePool !== null && (h = o.memoizedState.cachePool.pool), o = null, u.memoizedState !== null && u.memoizedState.cachePool !== null && (o = u.memoizedState.cachePool.pool), o !== h && (o != null && o.refCount++, h != null && Bh(h));
    }
    function tx(o, u) {
      o = null, u.alternate !== null && (o = u.alternate.memoizedState.cache), u = u.memoizedState.cache, u !== o && (u.refCount++, o != null && Bh(o));
    }
    function go(o, u, h, _) {
      if (u.subtreeFlags & 10256)
        for (u = u.child; u !== null; )
          zA(
            o,
            u,
            h,
            _
          ), u = u.sibling;
    }
    function zA(o, u, h, _) {
      var b = u.flags;
      switch (u.tag) {
        case 0:
        case 11:
        case 15:
          go(
            o,
            u,
            h,
            _
          ), b & 2048 && Ih(9, u);
          break;
        case 3:
          go(
            o,
            u,
            h,
            _
          ), b & 2048 && (o = null, u.alternate !== null && (o = u.alternate.memoizedState.cache), u = u.memoizedState.cache, u !== o && (u.refCount++, o != null && Bh(o)));
          break;
        case 12:
          if (b & 2048) {
            go(
              o,
              u,
              h,
              _
            ), o = u.stateNode;
            try {
              var A = u.memoizedProps, z = A.id, X = A.onPostCommit;
              typeof X == "function" && X(
                z,
                u.alternate === null ? "mount" : "update",
                o.passiveEffectDuration,
                -0
              );
            } catch (K) {
              Ze(u, u.return, K);
            }
          } else
            go(
              o,
              u,
              h,
              _
            );
          break;
        case 23:
          break;
        case 22:
          A = u.stateNode, u.memoizedState !== null ? A._visibility & 4 ? go(
            o,
            u,
            h,
            _
          ) : Hh(
            o,
            u
          ) : A._visibility & 4 ? go(
            o,
            u,
            h,
            _
          ) : (A._visibility |= 4, oc(
            o,
            u,
            h,
            _,
            (u.subtreeFlags & 10256) !== 0
          )), b & 2048 && $y(
            u.alternate,
            u
          );
          break;
        case 24:
          go(
            o,
            u,
            h,
            _
          ), b & 2048 && tx(u.alternate, u);
          break;
        default:
          go(
            o,
            u,
            h,
            _
          );
      }
    }
    function oc(o, u, h, _, b) {
      for (b = b && (u.subtreeFlags & 10256) !== 0, u = u.child; u !== null; ) {
        var A = o, z = u, X = h, K = _, ut = z.flags;
        switch (z.tag) {
          case 0:
          case 11:
          case 15:
            oc(
              A,
              z,
              X,
              K,
              b
            ), Ih(8, z);
            break;
          case 23:
            break;
          case 22:
            var At = z.stateNode;
            z.memoizedState !== null ? At._visibility & 4 ? oc(
              A,
              z,
              X,
              K,
              b
            ) : Hh(
              A,
              z
            ) : (At._visibility |= 4, oc(
              A,
              z,
              X,
              K,
              b
            )), b && ut & 2048 && $y(
              z.alternate,
              z
            );
            break;
          case 24:
            oc(
              A,
              z,
              X,
              K,
              b
            ), b && ut & 2048 && tx(z.alternate, z);
            break;
          default:
            oc(
              A,
              z,
              X,
              K,
              b
            );
        }
        u = u.sibling;
      }
    }
    function Hh(o, u) {
      if (u.subtreeFlags & 10256)
        for (u = u.child; u !== null; ) {
          var h = o, _ = u, b = _.flags;
          switch (_.tag) {
            case 22:
              Hh(h, _), b & 2048 && $y(
                _.alternate,
                _
              );
              break;
            case 24:
              Hh(h, _), b & 2048 && tx(
                _.alternate,
                _
              );
              break;
            default:
              Hh(h, _);
          }
          u = u.sibling;
        }
    }
    function Ul(o) {
      if (o.subtreeFlags & Rc)
        for (o = o.child; o !== null; )
          BA(o), o = o.sibling;
    }
    function BA(o) {
      switch (o.tag) {
        case 26:
          Ul(o), o.flags & Rc && (o.memoizedState !== null ? HP(
            ws,
            o.memoizedState,
            o.memoizedProps
          ) : y2(o.type, o.memoizedProps));
          break;
        case 5:
          Ul(o), o.flags & Rc && y2(o.type, o.memoizedProps);
          break;
        case 3:
        case 4:
          if (Ja) {
            var u = ws;
            ws = Ax(
              o.stateNode.containerInfo
            ), Ul(o), ws = u;
          } else Ul(o);
          break;
        case 22:
          o.memoizedState === null && (u = o.alternate, u !== null && u.memoizedState !== null ? (u = Rc, Rc = 16777216, Ul(o), Rc = u) : Ul(o));
          break;
        default:
          Ul(o);
      }
    }
    function PA(o) {
      var u = o.alternate;
      if (u !== null && (o = u.child, o !== null)) {
        u.child = null;
        do
          u = o.sibling, o.sibling = null, o = u;
        while (o !== null);
      }
    }
    function Fh(o) {
      var u = o.deletions;
      if (o.flags & 16) {
        if (u !== null)
          for (var h = 0; h < u.length; h++) {
            var _ = u[h];
            ii = _, HA(
              _,
              o
            );
          }
        PA(o);
      }
      if (o.subtreeFlags & 10256)
        for (o = o.child; o !== null; )
          IA(o), o = o.sibling;
    }
    function IA(o) {
      switch (o.tag) {
        case 0:
        case 11:
        case 15:
          Fh(o), o.flags & 2048 && po(9, o, o.return);
          break;
        case 3:
          Fh(o);
          break;
        case 12:
          Fh(o);
          break;
        case 22:
          var u = o.stateNode;
          o.memoizedState !== null && u._visibility & 4 && (o.return === null || o.return.tag !== 13) ? (u._visibility &= -5, Vm(o)) : Fh(o);
          break;
        default:
          Fh(o);
      }
    }
    function Vm(o) {
      var u = o.deletions;
      if (o.flags & 16) {
        if (u !== null)
          for (var h = 0; h < u.length; h++) {
            var _ = u[h];
            ii = _, HA(
              _,
              o
            );
          }
        PA(o);
      }
      for (o = o.child; o !== null; ) {
        switch (u = o, u.tag) {
          case 0:
          case 11:
          case 15:
            po(8, u, u.return), Vm(u);
            break;
          case 22:
            h = u.stateNode, h._visibility & 4 && (h._visibility &= -5, Vm(u));
            break;
          default:
            Vm(u);
        }
        o = o.sibling;
      }
    }
    function HA(o, u) {
      for (; ii !== null; ) {
        var h = ii;
        switch (h.tag) {
          case 0:
          case 11:
          case 15:
            po(8, h, u);
            break;
          case 23:
          case 22:
            if (h.memoizedState !== null && h.memoizedState.cachePool !== null) {
              var _ = h.memoizedState.cachePool.pool;
              _ != null && _.refCount++;
            }
            break;
          case 24:
            Bh(h.memoizedState.cache);
        }
        if (_ = h.child, _ !== null) _.return = h, ii = _;
        else
          t: for (h = o; ii !== null; ) {
            _ = ii;
            var b = _.sibling, A = _.return;
            if (UA(_), _ === h) {
              ii = null;
              break t;
            }
            if (b !== null) {
              b.return = A, ii = b;
              break t;
            }
            ii = A;
          }
      }
    }
    function ex(o) {
      var u = v2(o);
      if (u != null) {
        if (typeof u.memoizedProps["data-testname"] != "string")
          throw Error(a(364));
        return u;
      }
      if (o = ZB(o), o === null) throw Error(a(362));
      return o.stateNode.current;
    }
    function nx(o, u) {
      var h = o.tag;
      switch (u.$$typeof) {
        case rg:
          if (o.type === u.value) return !0;
          break;
        case og:
          t: {
            for (u = u.value, o = [o, 0], h = 0; h < o.length; ) {
              var _ = o[h++], b = _.tag, A = o[h++], z = u[A];
              if (b !== 5 && b !== 26 && b !== 27 || !Xh(_)) {
                for (; z != null && nx(_, z); )
                  A++, z = u[A];
                if (A === u.length) {
                  u = !0;
                  break t;
                } else
                  for (_ = _.child; _ !== null; )
                    o.push(_, A), _ = _.sibling;
              }
            }
            u = !1;
          }
          return u;
        case lg:
          if ((h === 5 || h === 26 || h === 27) && KB(o.stateNode, u.value))
            return !0;
          break;
        case cg:
          if ((h === 5 || h === 6 || h === 26 || h === 27) && (o = QB(o), o !== null && 0 <= o.indexOf(u.value)))
            return !0;
          break;
        case ug:
          if ((h === 5 || h === 26 || h === 27) && (o = o.memoizedProps["data-testname"], typeof o == "string" && o.toLowerCase() === u.value.toLowerCase()))
            return !0;
          break;
        default:
          throw Error(a(365));
      }
      return !1;
    }
    function ix(o) {
      switch (o.$$typeof) {
        case rg:
          return "<" + (r(o.value) || "Unknown") + ">";
        case og:
          return ":has(" + (ix(o) || "") + ")";
        case lg:
          return '[role="' + o.value + '"]';
        case cg:
          return '"' + o.value + '"';
        case ug:
          return '[data-testname="' + o.value + '"]';
        default:
          throw Error(a(365));
      }
    }
    function FA(o, u) {
      var h = [];
      o = [o, 0];
      for (var _ = 0; _ < o.length; ) {
        var b = o[_++], A = b.tag, z = o[_++], X = u[z];
        if (A !== 5 && A !== 26 && A !== 27 || !Xh(b)) {
          for (; X != null && nx(b, X); )
            z++, X = u[z];
          if (z === u.length) h.push(b);
          else
            for (b = b.child; b !== null; )
              o.push(b, z), b = b.sibling;
        }
      }
      return h;
    }
    function ax(o, u) {
      if (!Gh) throw Error(a(363));
      o = ex(o), o = FA(o, u), u = [], o = Array.from(o);
      for (var h = 0; h < o.length; ) {
        var _ = o[h++], b = _.tag;
        if (b === 5 || b === 26 || b === 27)
          Xh(_) || u.push(_.stateNode);
        else
          for (_ = _.child; _ !== null; )
            o.push(_), _ = _.sibling;
      }
      return u;
    }
    function Ea() {
      if ($e & 2 && ze !== 0)
        return ze & -ze;
      if (de.T !== null) {
        var o = xc;
        return o !== 0 ? o : gt();
      }
      return HB();
    }
    function VA() {
      is === 0 && (is = !(ze & 536870912) || Ve ? O() : 536870912);
      var o = ns.current;
      return o !== null && (o.flags |= 32), is;
    }
    function Vi(o, u, h) {
      (o === fn && hn === 2 || o.cancelPendingCommit !== null) && (lc(o, 0), Sr(
        o,
        ze,
        is,
        !1
      )), B(o, h), (!($e & 2) || o !== fn) && (o === fn && (!($e & 2) && (Xl |= h), wn === 4 && Sr(
        o,
        ze,
        is,
        !1
      )), _t(o));
    }
    function GA(o, u, h) {
      if ($e & 6) throw Error(a(327));
      var _ = !h && (u & 60) === 0 && (u & o.expiredLanes) === 0 || D(o, u), b = _ ? mB(o, u) : lx(o, u, !0), A = _;
      do {
        if (b === 0) {
          Cc && !_ && Sr(o, u, 0, !1);
          break;
        } else if (b === 6)
          Sr(
            o,
            u,
            0,
            !Rr
          );
        else {
          if (h = o.current.alternate, A && !dB(h)) {
            b = lx(o, u, !1), A = !1;
            continue;
          }
          if (b === 2) {
            if (A = u, o.errorRecoveryDisabledLanes & A)
              var z = 0;
            else
              z = o.pendingLanes & -536870913, z = z !== 0 ? z : z & 536870912 ? 536870912 : 0;
            if (z !== 0) {
              u = z;
              t: {
                var X = o;
                b = Kh;
                var K = Ka && X.current.memoizedState.isDehydrated;
                if (K && (lc(X, z).flags |= 256), z = lx(
                  X,
                  z,
                  !1
                ), z !== 2) {
                  if (Vx && !K) {
                    X.errorRecoveryDisabledLanes |= A, Xl |= A, b = 4;
                    break t;
                  }
                  A = js, js = b, A !== null && sx(A);
                }
                b = z;
              }
              if (A = !1, b !== 2) continue;
            }
          }
          if (b === 1) {
            lc(o, 0), Sr(o, u, 0, !0);
            break;
          }
          t: {
            switch (_ = o, b) {
              case 0:
              case 1:
                throw Error(a(345));
              case 4:
                if ((u & 4194176) === u) {
                  Sr(
                    _,
                    u,
                    is,
                    !Rr
                  );
                  break t;
                }
                break;
              case 2:
                js = null;
                break;
              case 3:
              case 5:
                break;
              default:
                throw Error(a(329));
            }
            if (_.finishedWork = h, _.finishedLanes = u, (u & 62914560) === u && (A = qx + 300 - Rs(), 10 < A)) {
              if (Sr(
                _,
                u,
                is,
                !Rr
              ), w(_, 0) !== 0) break t;
              _.timeoutHandle = BB(
                XA.bind(
                  null,
                  _,
                  h,
                  js,
                  fg,
                  Xx,
                  u,
                  is,
                  Xl,
                  wc,
                  Rr,
                  2,
                  -0,
                  0
                ),
                A
              );
              break t;
            }
            XA(
              _,
              h,
              js,
              fg,
              Xx,
              u,
              is,
              Xl,
              wc,
              Rr,
              0,
              -0,
              0
            );
          }
        }
        break;
      } while (!0);
      _t(o);
    }
    function sx(o) {
      js === null ? js = o : js.push.apply(
        js,
        o
      );
    }
    function XA(o, u, h, _, b, A, z, X, K, ut, At, Bt, Ft) {
      var ve = u.subtreeFlags;
      if ((ve & 8192 || (ve & 16785408) === 16785408) && (XB(), BA(u), u = qB(), u !== null)) {
        o.cancelPendingCommit = u(
          JA.bind(
            null,
            o,
            h,
            _,
            b,
            z,
            X,
            K,
            1,
            Bt,
            Ft
          )
        ), Sr(o, A, z, !ut);
        return;
      }
      JA(
        o,
        h,
        _,
        b,
        z,
        X,
        K,
        At,
        Bt,
        Ft
      );
    }
    function dB(o) {
      for (var u = o; ; ) {
        var h = u.tag;
        if ((h === 0 || h === 11 || h === 15) && u.flags & 16384 && (h = u.updateQueue, h !== null && (h = h.stores, h !== null)))
          for (var _ = 0; _ < h.length; _++) {
            var b = h[_], A = b.getSnapshot;
            b = b.value;
            try {
              if (!Ca(A(), b)) return !1;
            } catch {
              return !1;
            }
          }
        if (h = u.child, u.subtreeFlags & 16384 && h !== null)
          h.return = u, u = h;
        else {
          if (u === o) break;
          for (; u.sibling === null; ) {
            if (u.return === null || u.return === o) return !0;
            u = u.return;
          }
          u.sibling.return = u.return, u = u.sibling;
        }
      }
      return !0;
    }
    function Sr(o, u, h, _) {
      u &= ~Gx, u &= ~Xl, o.suspendedLanes |= u, o.pingedLanes &= ~u, _ && (o.warmLanes |= u), _ = o.expirationTimes;
      for (var b = u; 0 < b; ) {
        var A = 31 - Aa(b), z = 1 << A;
        _[A] = -1, b &= ~z;
      }
      h !== 0 && V(o, h, u);
    }
    function qA() {
      return $e & 6 ? !0 : (It(0), !1);
    }
    function rx() {
      if (Re !== null) {
        if (hn === 0)
          var o = Re.return;
        else
          o = Re, Tr = Vl = null, Oh(o), bc = null, Zh = 0, o = Re;
        for (; o !== null; )
          bA(o.alternate, o), o = o.return;
        Re = null;
      }
    }
    function lc(o, u) {
      o.finishedWork = null, o.finishedLanes = 0;
      var h = o.timeoutHandle;
      h !== bx && (o.timeoutHandle = bx, PB(h)), h = o.cancelPendingCommit, h !== null && (o.cancelPendingCommit = null, h()), rx(), fn = o, Re = h = vo(o.current, null), ze = u, hn = 0, Da = null, Rr = !1, Cc = D(o, u), Vx = !1, wc = is = Gx = Xl = To = wn = 0, js = Kh = null, Xx = !1, u & 8 && (u |= u & 32);
      var _ = o.entangledLanes;
      if (_ !== 0)
        for (o = o.entanglements, _ &= u; 0 < _; ) {
          var b = 31 - Aa(_), A = 1 << b;
          u |= o[b], _ &= ~A;
        }
      return Cr = u, I(), h;
    }
    function YA(o, u) {
      be = null, de.H = Zs, u === Wh ? (u = Wt(), hn = 3) : u === Bx ? (u = Wt(), hn = 4) : hn = u === G2 ? 8 : u !== null && typeof u == "object" && typeof u.then == "function" ? 6 : 1, Da = u, Re === null && (wn = 1, zm(
        o,
        it(u, o.current)
      ));
    }
    function kA() {
      var o = ns.current;
      return o === null ? !0 : (ze & 4194176) === ze ? Ws === null : (ze & 62914560) === ze || ze & 536870912 ? o === Ws : !1;
    }
    function WA() {
      var o = de.H;
      return de.H = Zs, o === null ? Zs : o;
    }
    function ZA() {
      var o = de.A;
      return de.A = nI, o;
    }
    function ox() {
      wn = 4, Rr || (ze & 4194176) !== ze && ns.current !== null || (Cc = !0), !(To & 134217727) && !(Xl & 134217727) || fn === null || Sr(
        fn,
        ze,
        is,
        !1
      );
    }
    function lx(o, u, h) {
      var _ = $e;
      $e |= 2;
      var b = WA(), A = ZA();
      (fn !== o || ze !== u) && (fg = null, lc(o, u)), u = !1;
      var z = wn;
      t: do
        try {
          if (hn !== 0 && Re !== null) {
            var X = Re, K = Da;
            switch (hn) {
              case 8:
                rx(), z = 6;
                break t;
              case 3:
              case 2:
              case 6:
                ns.current === null && (u = !0);
                var ut = hn;
                if (hn = 0, Da = null, uc(o, X, K, ut), h && Cc) {
                  z = 0;
                  break t;
                }
                break;
              default:
                ut = hn, hn = 0, Da = null, uc(o, X, K, ut);
            }
          }
          pB(), z = wn;
          break;
        } catch (At) {
          YA(o, At);
        }
      while (!0);
      return u && o.shellSuspendCounter++, Tr = Vl = null, $e = _, de.H = b, de.A = A, Re === null && (fn = null, ze = 0, I()), z;
    }
    function pB() {
      for (; Re !== null; ) jA(Re);
    }
    function mB(o, u) {
      var h = $e;
      $e |= 2;
      var _ = WA(), b = ZA();
      fn !== o || ze !== u ? (fg = null, Jh = Rs() + 500, lc(o, u)) : Cc = D(
        o,
        u
      );
      t: do
        try {
          if (hn !== 0 && Re !== null) {
            u = Re;
            var A = Da;
            e: switch (hn) {
              case 1:
                hn = 0, Da = null, uc(o, u, A, 1);
                break;
              case 2:
                if (Gt(A)) {
                  hn = 0, Da = null, QA(u);
                  break;
                }
                u = function() {
                  hn === 2 && fn === o && (hn = 7), _t(o);
                }, A.then(u, u);
                break t;
              case 3:
                hn = 7;
                break t;
              case 4:
                hn = 5;
                break t;
              case 7:
                Gt(A) ? (hn = 0, Da = null, QA(u)) : (hn = 0, Da = null, uc(o, u, A, 7));
                break;
              case 5:
                var z = null;
                switch (Re.tag) {
                  case 26:
                    z = Re.memoizedState;
                  case 5:
                  case 27:
                    var X = Re, K = X.type, ut = X.pendingProps;
                    if (z ? z2(z) : _2(K, ut)) {
                      hn = 0, Da = null;
                      var At = X.sibling;
                      if (At !== null) Re = At;
                      else {
                        var Bt = X.return;
                        Bt !== null ? (Re = Bt, Gm(Bt)) : Re = null;
                      }
                      break e;
                    }
                }
                hn = 0, Da = null, uc(o, u, A, 5);
                break;
              case 6:
                hn = 0, Da = null, uc(o, u, A, 6);
                break;
              case 8:
                rx(), wn = 6;
                break t;
              default:
                throw Error(a(462));
            }
          }
          gB();
          break;
        } catch (Ft) {
          YA(o, Ft);
        }
      while (!0);
      return Tr = Vl = null, de.H = _, de.A = b, $e = h, Re !== null ? 0 : (fn = null, ze = 0, I(), wn);
    }
    function gB() {
      for (; Re !== null && !YP(); )
        jA(Re);
    }
    function jA(o) {
      var u = gA(
        o.alternate,
        o,
        Cr
      );
      o.memoizedProps = o.pendingProps, u === null ? Gm(o) : Re = u;
    }
    function QA(o) {
      var u = o, h = u.alternate;
      switch (u.tag) {
        case 15:
        case 0:
          u = cA(
            h,
            u,
            u.pendingProps,
            u.type,
            void 0,
            ze
          );
          break;
        case 11:
          u = cA(
            h,
            u,
            u.pendingProps,
            u.type.render,
            u.ref,
            ze
          );
          break;
        case 5:
          Oh(u);
        default:
          bA(h, u), u = Re = n2(u, Cr), u = gA(h, u, Cr);
      }
      o.memoizedProps = o.pendingProps, u === null ? Gm(o) : Re = u;
    }
    function uc(o, u, h, _) {
      Tr = Vl = null, Oh(u), bc = null, Zh = 0;
      var b = u.return;
      try {
        if (oB(
          o,
          b,
          u,
          h,
          ze
        )) {
          wn = 1, zm(
            o,
            it(h, o.current)
          ), Re = null;
          return;
        }
      } catch (A) {
        if (b !== null) throw Re = b, A;
        wn = 1, zm(
          o,
          it(h, o.current)
        ), Re = null;
        return;
      }
      u.flags & 32768 ? (Ve || _ === 1 ? o = !0 : Cc || ze & 536870912 ? o = !1 : (Rr = o = !0, (_ === 2 || _ === 3 || _ === 6) && (_ = ns.current, _ !== null && _.tag === 13 && (_.flags |= 16384))), KA(u, o)) : Gm(u);
    }
    function Gm(o) {
      var u = o;
      do {
        if (u.flags & 32768) {
          KA(
            u,
            Rr
          );
          return;
        }
        o = u.return;
        var h = uB(
          u.alternate,
          u,
          Cr
        );
        if (h !== null) {
          Re = h;
          return;
        }
        if (u = u.sibling, u !== null) {
          Re = u;
          return;
        }
        Re = u = o;
      } while (u !== null);
      wn === 0 && (wn = 5);
    }
    function KA(o, u) {
      do {
        var h = cB(o.alternate, o);
        if (h !== null) {
          h.flags &= 32767, Re = h;
          return;
        }
        if (h = o.return, h !== null && (h.flags |= 32768, h.subtreeFlags = 0, h.deletions = null), !u && (o = o.sibling, o !== null)) {
          Re = o;
          return;
        }
        Re = o = h;
      } while (o !== null);
      wn = 6, Re = null;
    }
    function JA(o, u, h, _, b, A, z, X, K, ut) {
      var At = de.T, Bt = Ll();
      try {
        aa(2), de.T = null, vB(
          o,
          u,
          h,
          _,
          Bt,
          b,
          A,
          z,
          X,
          K,
          ut
        );
      } finally {
        de.T = At, aa(Bt);
      }
    }
    function vB(o, u, h, _, b, A, z, X) {
      do
        Ol();
      while (ql !== null);
      if ($e & 6) throw Error(a(327));
      var K = o.finishedWork;
      if (_ = o.finishedLanes, K === null) return null;
      if (o.finishedWork = null, o.finishedLanes = 0, K === o.current) throw Error(a(177));
      o.callbackNode = null, o.callbackPriority = 0, o.cancelPendingCommit = null;
      var ut = K.lanes | K.childLanes;
      if (ut |= Ux, Y(
        o,
        _,
        ut,
        A,
        z,
        X
      ), o === fn && (Re = fn = null, ze = 0), !(K.subtreeFlags & 10256) && !(K.flags & 10256) || hg || (hg = !0, Yx = ut, kx = h, SB(wx, function() {
        return Ol(), null;
      })), h = (K.flags & 15990) !== 0, K.subtreeFlags & 15990 || h ? (h = de.T, de.T = null, A = Ll(), aa(2), z = $e, $e |= 4, fB(o, K), NA(K, o), LB(o.containerInfo), o.current = K, DA(o, K.alternate, K), kP(), $e = z, aa(A), de.T = h) : o.current = K, hg ? (hg = !1, ql = o, $h = _) : $A(o, ut), ut = o.pendingLanes, ut === 0 && (Ao = null), P(K.stateNode), _t(o), u !== null)
        for (b = o.onRecoverableError, K = 0; K < u.length; K++)
          ut = u[K], b(ut.value, {
            componentStack: ut.stack
          });
      return $h & 3 && Ol(), ut = o.pendingLanes, _ & 4194218 && ut & 42 ? o === Wx ? td++ : (td = 0, Wx = o) : td = 0, It(0), null;
    }
    function $A(o, u) {
      (o.pooledCacheLanes &= u) === 0 && (u = o.pooledCache, u != null && (o.pooledCache = null, Bh(u)));
    }
    function Ol() {
      if (ql !== null) {
        var o = ql, u = Yx;
        Yx = 0;
        var h = J($h), _ = 32 > h ? 32 : h;
        h = de.T;
        var b = Ll();
        try {
          if (aa(_), de.T = null, ql === null)
            var A = !1;
          else {
            _ = kx, kx = null;
            var z = ql, X = $h;
            if (ql = null, $h = 0, $e & 6)
              throw Error(a(331));
            var K = $e;
            if ($e |= 4, IA(z.current), zA(
              z,
              z.current,
              X,
              _
            ), $e = K, It(0, !1), Ra && typeof Ra.onPostCommitFiberRoot == "function")
              try {
                Ra.onPostCommitFiberRoot(qh, z);
              } catch {
              }
            A = !0;
          }
          return A;
        } finally {
          aa(b), de.T = h, $A(o, u);
        }
      }
      return !1;
    }
    function t2(o, u, h) {
      u = it(h, u), u = Ny(o.stateNode, u, 2), o = zt(o, u, 2), o !== null && (B(o, 2), _t(o));
    }
    function Ze(o, u, h) {
      if (o.tag === 3)
        t2(o, o, h);
      else
        for (; u !== null; ) {
          if (u.tag === 3) {
            t2(
              u,
              o,
              h
            );
            break;
          } else if (u.tag === 1) {
            var _ = u.stateNode;
            if (typeof u.type.getDerivedStateFromError == "function" || typeof _.componentDidCatch == "function" && (Ao === null || !Ao.has(_))) {
              o = it(h, o), h = iA(2), _ = zt(u, h, 2), _ !== null && (aA(
                h,
                _,
                u,
                o
              ), B(_, 2), _t(_));
              break;
            }
          }
          u = u.return;
        }
    }
    function ux(o, u, h) {
      var _ = o.pingCache;
      if (_ === null) {
        _ = o.pingCache = new iI();
        var b = /* @__PURE__ */ new Set();
        _.set(u, b);
      } else
        b = _.get(u), b === void 0 && (b = /* @__PURE__ */ new Set(), _.set(u, b));
      b.has(h) || (Vx = !0, b.add(h), o = _B.bind(null, o, u, h), u.then(o, o));
    }
    function _B(o, u, h) {
      var _ = o.pingCache;
      _ !== null && _.delete(u), o.pingedLanes |= o.suspendedLanes & h, o.warmLanes &= ~h, fn === o && (ze & h) === h && (wn === 4 || wn === 3 && (ze & 62914560) === ze && 300 > Rs() - qx ? !($e & 2) && lc(o, 0) : Gx |= h, wc === ze && (wc = 0)), _t(o);
    }
    function e2(o, u) {
      u === 0 && (u = R()), o = Et(o, u), o !== null && (B(o, u), _t(o));
    }
    function yB(o) {
      var u = o.memoizedState, h = 0;
      u !== null && (h = u.retryLane), e2(o, h);
    }
    function xB(o, u) {
      var h = 0;
      switch (o.tag) {
        case 13:
          var _ = o.stateNode, b = o.memoizedState;
          b !== null && (h = b.retryLane);
          break;
        case 19:
          _ = o.stateNode;
          break;
        case 22:
          _ = o.stateNode._retryCache;
          break;
        default:
          throw Error(a(314));
      }
      _ !== null && _.delete(u), e2(o, h);
    }
    function SB(o, u) {
      return jm(o, u);
    }
    function MB(o, u, h, _) {
      this.tag = o, this.key = h, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = u, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = _, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
    }
    function cx(o) {
      return o = o.prototype, !(!o || !o.isReactComponent);
    }
    function vo(o, u) {
      var h = o.alternate;
      return h === null ? (h = e(
        o.tag,
        u,
        o.key,
        o.mode
      ), h.elementType = o.elementType, h.type = o.type, h.stateNode = o.stateNode, h.alternate = o, o.alternate = h) : (h.pendingProps = u, h.type = o.type, h.flags = 0, h.subtreeFlags = 0, h.deletions = null), h.flags = o.flags & 31457280, h.childLanes = o.childLanes, h.lanes = o.lanes, h.child = o.child, h.memoizedProps = o.memoizedProps, h.memoizedState = o.memoizedState, h.updateQueue = o.updateQueue, u = o.dependencies, h.dependencies = u === null ? null : {
        lanes: u.lanes,
        firstContext: u.firstContext
      }, h.sibling = o.sibling, h.index = o.index, h.ref = o.ref, h.refCleanup = o.refCleanup, h;
    }
    function n2(o, u) {
      o.flags &= 31457282;
      var h = o.alternate;
      return h === null ? (o.childLanes = 0, o.lanes = u, o.child = null, o.subtreeFlags = 0, o.memoizedProps = null, o.memoizedState = null, o.updateQueue = null, o.dependencies = null, o.stateNode = null) : (o.childLanes = h.childLanes, o.lanes = h.lanes, o.child = h.child, o.subtreeFlags = 0, o.deletions = null, o.memoizedProps = h.memoizedProps, o.memoizedState = h.memoizedState, o.updateQueue = h.updateQueue, o.type = h.type, u = h.dependencies, o.dependencies = u === null ? null : {
        lanes: u.lanes,
        firstContext: u.firstContext
      }), o;
    }
    function Xm(o, u, h, _, b, A) {
      var z = 0;
      if (_ = o, typeof o == "function") cx(o) && (z = 1);
      else if (typeof o == "string")
        z = Ja && Ti ? w2(o, h, mi.current) ? 26 : P2(o) ? 27 : 5 : Ja ? w2(
          o,
          h,
          mi.current
        ) ? 26 : 5 : Ti && P2(o) ? 27 : 5;
      else
        t: switch (o) {
          case fc:
            return Nl(
              h.children,
              b,
              A,
              u
            );
          case u2:
            z = 8, b |= 24;
            break;
          case mx:
            return o = e(12, h, u, b | 2), o.elementType = mx, o.lanes = A, o;
          case vx:
            return o = e(13, h, u, b), o.elementType = vx, o.lanes = A, o;
          case _x:
            return o = e(19, h, u, b), o.elementType = _x, o.lanes = A, o;
          case f2:
            return i2(h, b, A, u);
          default:
            if (typeof o == "object" && o !== null)
              switch (o.$$typeof) {
                case AB:
                case _o:
                  z = 10;
                  break t;
                case c2:
                  z = 9;
                  break t;
                case gx:
                  z = 11;
                  break t;
                case yx:
                  z = 14;
                  break t;
                case yo:
                  z = 16, _ = null;
                  break t;
              }
            z = 29, h = Error(
              a(
                130,
                o === null ? "null" : typeof o,
                ""
              )
            ), _ = null;
        }
      return u = e(z, h, u, b), u.elementType = o, u.type = _, u.lanes = A, u;
    }
    function Nl(o, u, h, _) {
      return o = e(7, o, _, u), o.lanes = h, o;
    }
    function i2(o, u, h, _) {
      o = e(22, o, _, u), o.elementType = f2, o.lanes = h;
      var b = {
        _visibility: 1,
        _pendingVisibility: 1,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null,
        _current: null,
        detach: function() {
          var A = b._current;
          if (A === null) throw Error(a(456));
          if (!(b._pendingVisibility & 2)) {
            var z = Et(A, 2);
            z !== null && (b._pendingVisibility |= 2, Vi(z, A, 2));
          }
        },
        attach: function() {
          var A = b._current;
          if (A === null) throw Error(a(456));
          if (b._pendingVisibility & 2) {
            var z = Et(A, 2);
            z !== null && (b._pendingVisibility &= -3, Vi(z, A, 2));
          }
        }
      };
      return o.stateNode = b, o;
    }
    function fx(o, u, h) {
      return o = e(6, o, null, u), o.lanes = h, o;
    }
    function hx(o, u, h) {
      return u = e(
        4,
        o.children !== null ? o.children : [],
        o.key,
        u
      ), u.lanes = h, u.stateNode = {
        containerInfo: o.containerInfo,
        pendingChildren: null,
        implementation: o.implementation
      }, u;
    }
    function bB(o, u, h, _, b, A, z, X) {
      this.tag = 1, this.containerInfo = o, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = bx, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = C(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = C(0), this.hiddenUpdates = C(null), this.identifierPrefix = _, this.onUncaughtError = b, this.onCaughtError = A, this.onRecoverableError = z, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = X, this.incompleteTransitions = /* @__PURE__ */ new Map();
    }
    function a2(o, u, h, _, b, A, z, X, K, ut, At, Bt) {
      return o = new bB(
        o,
        u,
        h,
        z,
        X,
        K,
        ut,
        Bt
      ), u = 1, A === !0 && (u |= 24), A = e(3, null, null, u), o.current = A, A.stateNode = o, u = qy(), u.refCount++, o.pooledCache = u, u.refCount++, A.memoizedState = {
        element: _,
        isDehydrated: h,
        cache: u
      }, qt(A), o;
    }
    function s2(o) {
      return o ? (o = pc, o) : pc;
    }
    function r2(o) {
      var u = o._reactInternals;
      if (u === void 0)
        throw typeof o.render == "function" ? Error(a(188)) : (o = Object.keys(o).join(","), Error(a(268, o)));
      return o = g(u), o = o !== null ? y(o) : null, o === null ? null : Vh(o.stateNode);
    }
    function o2(o, u, h, _, b, A) {
      b = s2(b), _.context === null ? _.context = b : _.pendingContext = b, _ = pt(u), _.payload = { element: h }, A = A === void 0 ? null : A, A !== null && (_.callback = A), h = zt(o, _, u), h !== null && (Vi(h, o, u), ee(h, o, u));
    }
    function l2(o, u) {
      if (o = o.memoizedState, o !== null && o.dehydrated !== null) {
        var h = o.retryLane;
        o.retryLane = h !== 0 && h < u ? h : u;
      }
    }
    function dx(o, u) {
      l2(o, u), (o = o.alternate) && l2(o, u);
    }
    var Ae = {}, EB = Tt, Ta = lb, px = Object.assign, TB = Symbol.for("react.element"), qm = Symbol.for("react.transitional.element"), cc = Symbol.for("react.portal"), fc = Symbol.for("react.fragment"), u2 = Symbol.for("react.strict_mode"), mx = Symbol.for("react.profiler"), AB = Symbol.for("react.provider"), c2 = Symbol.for("react.consumer"), _o = Symbol.for("react.context"), gx = Symbol.for("react.forward_ref"), vx = Symbol.for("react.suspense"), _x = Symbol.for("react.suspense_list"), yx = Symbol.for("react.memo"), yo = Symbol.for("react.lazy"), f2 = Symbol.for("react.offscreen"), RB = Symbol.for("react.memo_cache_sentinel"), h2 = Symbol.iterator, CB = Symbol.for("react.client.reference"), de = EB.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, xx, d2, Sx = !1, Ym = Array.isArray, wB = t.rendererVersion, DB = t.rendererPackageName, p2 = t.extraDevToolsConfig, Vh = t.getPublicInstance, UB = t.getRootHostContext, OB = t.getChildHostContext, NB = t.prepareForCommit, LB = t.resetAfterCommit, zB = t.createInstance, Mx = t.appendInitialChild, m2 = t.finalizeInitialChildren, km = t.shouldSetTextContent, g2 = t.createTextInstance, BB = t.scheduleTimeout, PB = t.cancelTimeout, bx = t.noTimeout, Mr = t.isPrimaryRenderer;
    t.warnsIfNotActing;
    var Ei = t.supportsMutation, xo = t.supportsPersistence, Ka = t.supportsHydration, v2 = t.getInstanceFromNode;
    t.beforeActiveInstanceBlur, t.afterActiveInstanceBlur;
    var IB = t.preparePortalMount;
    t.prepareScopeUpdate, t.getInstanceFromScope;
    var aa = t.setCurrentUpdatePriority, Ll = t.getCurrentUpdatePriority, HB = t.resolveUpdatePriority;
    t.resolveEventType, t.resolveEventTimeStamp;
    var FB = t.shouldAttemptEagerTransition, VB = t.detachDeletedInstance;
    t.requestPostPaintCallback;
    var GB = t.maySuspendCommit, _2 = t.preloadInstance, XB = t.startSuspendingCommit, y2 = t.suspendInstance, qB = t.waitForCommitToBeReady, hc = t.NotPendingTransition, zl = t.HostTransitionContext, YB = t.resetFormInstance;
    t.bindToConsole;
    var kB = t.supportsMicrotasks, WB = t.scheduleMicrotask, Gh = t.supportsTestSelectors, ZB = t.findFiberRoot, jB = t.getBoundingRect, QB = t.getTextContent, Xh = t.isHiddenSubtree, KB = t.matchAccessibilityRole, JB = t.setFocusIfFocusable, $B = t.setupIntersectionObserver, tP = t.appendChild, eP = t.appendChildToContainer, nP = t.commitTextUpdate, iP = t.commitMount, aP = t.commitUpdate, sP = t.insertBefore, rP = t.insertInContainerBefore, oP = t.removeChild, lP = t.removeChildFromContainer, x2 = t.resetTextContent, uP = t.hideInstance, cP = t.hideTextInstance, fP = t.unhideInstance, hP = t.unhideTextInstance, dP = t.clearContainer, pP = t.cloneInstance, S2 = t.createContainerChildSet, M2 = t.appendChildToContainerChildSet, mP = t.finalizeContainerChildren, b2 = t.replaceContainerChildren, E2 = t.cloneHiddenInstance, T2 = t.cloneHiddenTextInstance, Ex = t.isSuspenseInstancePending, Tx = t.isSuspenseInstanceFallback, gP = t.getSuspenseInstanceFallbackErrorDetails, vP = t.registerSuspenseInstanceRetry, _P = t.canHydrateFormStateMarker, yP = t.isFormStateMarkerMatching, A2 = t.getNextHydratableSibling, R2 = t.getFirstHydratableChild, xP = t.getFirstHydratableChildWithinContainer, SP = t.getFirstHydratableChildWithinSuspenseInstance, MP = t.canHydrateInstance, bP = t.canHydrateTextInstance, EP = t.canHydrateSuspenseInstance, TP = t.hydrateInstance, AP = t.hydrateTextInstance, RP = t.hydrateSuspenseInstance, CP = t.getNextHydratableInstanceAfterSuspenseInstance, wP = t.commitHydratedContainer, DP = t.commitHydratedSuspenseInstance, UP = t.clearSuspenseBoundary, OP = t.clearSuspenseBoundaryFromContainer, C2 = t.shouldDeleteUnhydratedTailInstances;
    t.diffHydratedPropsForDevWarnings, t.diffHydratedTextForDevWarnings, t.describeHydratableInstanceForDevWarnings;
    var NP = t.validateHydratableInstance, LP = t.validateHydratableTextInstance, Ja = t.supportsResources, w2 = t.isHostHoistableType, Ax = t.getHoistableRoot, D2 = t.getResource, U2 = t.acquireResource, O2 = t.releaseResource, zP = t.hydrateHoistable, N2 = t.mountHoistable, L2 = t.unmountHoistable, BP = t.createHoistableInstance, PP = t.prepareToCommitHoistables, IP = t.mayResourceSuspendCommit, z2 = t.preloadResource, HP = t.suspendResource, Ti = t.supportsSingletons, B2 = t.resolveSingletonInstance, FP = t.clearSingleton, VP = t.acquireSingletonInstance, GP = t.releaseSingletonInstance, P2 = t.isHostSingletonType, Rx = [], dc = -1, pc = {}, Aa = Math.clz32 ? Math.clz32 : E, XP = Math.log, qP = Math.LN2, Wm = 128, Zm = 4194304, jm = Ta.unstable_scheduleCallback, Cx = Ta.unstable_cancelCallback, YP = Ta.unstable_shouldYield, kP = Ta.unstable_requestPaint, Rs = Ta.unstable_now, I2 = Ta.unstable_ImmediatePriority, WP = Ta.unstable_UserBlockingPriority, wx = Ta.unstable_NormalPriority, ZP = Ta.unstable_IdlePriority, jP = Ta.log, QP = Ta.unstable_setDisableYieldValue, qh = null, Ra = null, Ca = typeof Object.is == "function" ? Object.is : G, H2 = /* @__PURE__ */ new WeakMap(), mc = [], gc = 0, Qm = null, Km = 0, $a = [], ts = 0, Bl = null, br = 1, Er = "", mi = M(null), Yh = M(null), So = M(null), Jm = M(null), Gi = null, Ai = null, Ve = !1, Cs = null, ks = !1, Dx = Error(a(519)), es = [], vc = 0, Ux = 0, $m = null, _c = null, Ox = !1, tg = !1, Nx = !1, yc = 0, kh = null, Lx = 0, xc = 0, Sc = null, Mo = !1, zx = !1, KP = Object.prototype.hasOwnProperty, Wh = Error(a(460)), Bx = Error(a(474)), eg = { then: function() {
    } }, Mc = null, bc = null, Zh = 0, Pl = ja(!0), F2 = ja(!1), Ec = M(null), ng = M(0), ns = M(null), Ws = null, Wn = M(0), bo = 0, be = null, Je = null, Hn = null, ig = !1, Tc = !1, Il = !1, ag = 0, jh = 0, Ac = null, JP = 0, Px = function() {
      return { lastEffect: null, events: null, stores: null, memoCache: null };
    }, Zs = {
      readContext: bi,
      use: at,
      useCallback: ln,
      useContext: ln,
      useEffect: ln,
      useImperativeHandle: ln,
      useLayoutEffect: ln,
      useInsertionEffect: ln,
      useMemo: ln,
      useReducer: ln,
      useRef: ln,
      useState: ln,
      useDebugValue: ln,
      useDeferredValue: ln,
      useTransition: ln,
      useSyncExternalStore: ln,
      useId: ln
    };
    Zs.useCacheRefresh = ln, Zs.useMemoCache = ln, Zs.useHostTransitionStatus = ln, Zs.useFormState = ln, Zs.useActionState = ln, Zs.useOptimistic = ln;
    var Hl = {
      readContext: bi,
      use: at,
      useCallback: function(o, u) {
        return L().memoizedState = [
          o,
          u === void 0 ? null : u
        ], o;
      },
      useContext: bi,
      useEffect: HT,
      useImperativeHandle: function(o, u, h) {
        h = h != null ? h.concat([o]) : null, Om(
          4194308,
          4,
          GT.bind(null, u, o),
          h
        );
      },
      useLayoutEffect: function(o, u) {
        return Om(4194308, 4, o, u);
      },
      useInsertionEffect: function(o, u) {
        Om(4, 2, o, u);
      },
      useMemo: function(o, u) {
        var h = L();
        u = u === void 0 ? null : u;
        var _ = o();
        if (Il) {
          q(!0);
          try {
            o();
          } finally {
            q(!1);
          }
        }
        return h.memoizedState = [_, u], _;
      },
      useReducer: function(o, u, h) {
        var _ = L();
        if (h !== void 0) {
          var b = h(u);
          if (Il) {
            q(!0);
            try {
              h(u);
            } finally {
              q(!1);
            }
          }
        } else b = u;
        return _.memoizedState = _.baseState = b, o = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: o,
          lastRenderedState: b
        }, _.queue = o, o = o.dispatch = rB.bind(
          null,
          be,
          o
        ), [_.memoizedState, o];
      },
      useRef: function(o) {
        var u = L();
        return o = { current: o }, u.memoizedState = o;
      },
      useState: function(o) {
        o = cn(o);
        var u = o.queue, h = KT.bind(
          null,
          be,
          u
        );
        return u.dispatch = h, [o.memoizedState, h];
      },
      useDebugValue: Cy,
      useDeferredValue: function(o, u) {
        var h = L();
        return wy(h, o, u);
      },
      useTransition: function() {
        var o = cn(!1);
        return o = WT.bind(
          null,
          be,
          o.queue,
          !0,
          !1
        ), L().memoizedState = o, [!1, o];
      },
      useSyncExternalStore: function(o, u, h) {
        var _ = be, b = L();
        if (Ve) {
          if (h === void 0)
            throw Error(a(407));
          h = h();
        } else {
          if (h = u(), fn === null)
            throw Error(a(349));
          ze & 60 || oe(_, u, h);
        }
        b.memoizedState = h;
        var A = { value: h, getSnapshot: u };
        return b.queue = A, HT(Te.bind(null, _, A, o), [
          o
        ]), _.flags |= 2048, qs(
          9,
          Jt.bind(
            null,
            _,
            A,
            h,
            u
          ),
          { destroy: void 0 },
          null
        ), h;
      },
      useId: function() {
        var o = L(), u = fn.identifierPrefix;
        if (Ve) {
          var h = Er, _ = br;
          h = (_ & ~(1 << 32 - Aa(_) - 1)).toString(32) + h, u = ":" + u + "R" + h, h = ag++, 0 < h && (u += "H" + h.toString(32)), u += ":";
        } else
          h = JP++, u = ":" + u + "r" + h.toString(32) + ":";
        return o.memoizedState = u;
      },
      useCacheRefresh: function() {
        return L().memoizedState = sB.bind(
          null,
          be
        );
      }
    };
    Hl.useMemoCache = Z, Hl.useHostTransitionStatus = Dy, Hl.useFormState = sn, Hl.useActionState = sn, Hl.useOptimistic = function(o) {
      var u = L();
      u.memoizedState = u.baseState = o;
      var h = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
      };
      return u.queue = h, u = Uy.bind(
        null,
        be,
        !0,
        h
      ), h.dispatch = u, [o, u];
    };
    var Eo = {
      readContext: bi,
      use: at,
      useCallback: qT,
      useContext: bi,
      useEffect: Ry,
      useImperativeHandle: XT,
      useInsertionEffect: FT,
      useLayoutEffect: VT,
      useMemo: YT,
      useReducer: Ut,
      useRef: Ys,
      useState: function() {
        return Ut(St);
      },
      useDebugValue: Cy,
      useDeferredValue: function(o, u) {
        var h = W();
        return kT(
          h,
          Je.memoizedState,
          o,
          u
        );
      },
      useTransition: function() {
        var o = Ut(St)[0], u = W().memoizedState;
        return [
          typeof o == "boolean" ? o : nt(o),
          u
        ];
      },
      useSyncExternalStore: re,
      useId: jT
    };
    Eo.useCacheRefresh = QT, Eo.useMemoCache = Z, Eo.useHostTransitionStatus = Dy, Eo.useFormState = Hi, Eo.useActionState = Hi, Eo.useOptimistic = function(o, u) {
      var h = W();
      return Ue(h, Je, o, u);
    };
    var Fl = {
      readContext: bi,
      use: at,
      useCallback: qT,
      useContext: bi,
      useEffect: Ry,
      useImperativeHandle: XT,
      useInsertionEffect: FT,
      useLayoutEffect: VT,
      useMemo: YT,
      useReducer: Vt,
      useRef: Ys,
      useState: function() {
        return Vt(St);
      },
      useDebugValue: Cy,
      useDeferredValue: function(o, u) {
        var h = W();
        return Je === null ? wy(h, o, u) : kT(
          h,
          Je.memoizedState,
          o,
          u
        );
      },
      useTransition: function() {
        var o = Vt(St)[0], u = W().memoizedState;
        return [
          typeof o == "boolean" ? o : nt(o),
          u
        ];
      },
      useSyncExternalStore: re,
      useId: jT
    };
    Fl.useCacheRefresh = QT, Fl.useMemoCache = Z, Fl.useHostTransitionStatus = Dy, Fl.useFormState = di, Fl.useActionState = di, Fl.useOptimistic = function(o, u) {
      var h = W();
      return Je !== null ? Ue(h, Je, o, u) : (h.baseState = o, [o, h.queue.dispatch]);
    };
    var Ix = {
      isMounted: function(o) {
        return (o = o._reactInternals) ? p(o) === o : !1;
      },
      enqueueSetState: function(o, u, h) {
        o = o._reactInternals;
        var _ = Ea(), b = pt(_);
        b.payload = u, h != null && (b.callback = h), u = zt(o, b, _), u !== null && (Vi(u, o, _), ee(u, o, _));
      },
      enqueueReplaceState: function(o, u, h) {
        o = o._reactInternals;
        var _ = Ea(), b = pt(_);
        b.tag = 1, b.payload = u, h != null && (b.callback = h), u = zt(o, b, _), u !== null && (Vi(u, o, _), ee(u, o, _));
      },
      enqueueForceUpdate: function(o, u) {
        o = o._reactInternals;
        var h = Ea(), _ = pt(h);
        _.tag = 2, u != null && (_.callback = u), u = zt(o, _, h), u !== null && (Vi(u, o, h), ee(u, o, h));
      }
    }, V2 = typeof reportError == "function" ? reportError : function(o) {
      if (typeof window == "object" && typeof window.ErrorEvent == "function") {
        var u = new window.ErrorEvent("error", {
          bubbles: !0,
          cancelable: !0,
          message: typeof o == "object" && o !== null && typeof o.message == "string" ? String(o.message) : String(o),
          error: o
        });
        if (!window.dispatchEvent(u)) return;
      } else if (typeof process == "object" && typeof process.emit == "function") {
        process.emit("uncaughtException", o);
        return;
      }
      console.error(o);
    }, G2 = Error(a(461)), ni = !1, Hx = { dehydrated: null, treeContext: null, retryLane: 0 }, sg = M(null), Vl = null, Tr = null, $P = typeof AbortController < "u" ? AbortController : function() {
      var o = [], u = this.signal = {
        aborted: !1,
        addEventListener: function(h, _) {
          o.push(_);
        }
      };
      this.abort = function() {
        u.aborted = !0, o.forEach(function(h) {
          return h();
        });
      };
    }, tI = Ta.unstable_scheduleCallback, eI = Ta.unstable_NormalPriority, Rn = {
      $$typeof: _o,
      Consumer: null,
      Provider: null,
      _currentValue: null,
      _currentValue2: null,
      _threadCount: 0
    }, X2 = de.S;
    de.S = function(o, u) {
      typeof u == "object" && u !== null && typeof u.then == "function" && ot(o, u), X2 !== null && X2(o, u);
    };
    var Gl = M(null), Ar = !1, Cn = !1, Fx = !1, q2 = typeof WeakSet == "function" ? WeakSet : Set, ii = null, Y2 = !1, Fn = null, wa = !1, ws = null, Rc = 8192, nI = {
      getCacheForType: function(o) {
        var u = bi(Rn), h = u.data.get(o);
        return h === void 0 && (h = o(), u.data.set(o, h)), h;
      }
    }, rg = 0, og = 1, lg = 2, ug = 3, cg = 4;
    if (typeof Symbol == "function" && Symbol.for) {
      var Qh = Symbol.for;
      rg = Qh("selector.component"), og = Qh("selector.has_pseudo_class"), lg = Qh("selector.role"), ug = Qh("selector.test_id"), cg = Qh("selector.text");
    }
    var iI = typeof WeakMap == "function" ? WeakMap : Map, $e = 0, fn = null, Re = null, ze = 0, hn = 0, Da = null, Rr = !1, Cc = !1, Vx = !1, Cr = 0, wn = 0, To = 0, Xl = 0, Gx = 0, is = 0, wc = 0, Kh = null, js = null, Xx = !1, qx = 0, Jh = 1 / 0, fg = null, Ao = null, hg = !1, ql = null, $h = 0, Yx = 0, kx = null, td = 0, Wx = null;
    return Ae.attemptContinuousHydration = function(o) {
      if (o.tag === 13) {
        var u = Et(o, 67108864);
        u !== null && Vi(u, o, 67108864), dx(o, 67108864);
      }
    }, Ae.attemptHydrationAtCurrentPriority = function(o) {
      if (o.tag === 13) {
        var u = Ea(), h = Et(o, u);
        h !== null && Vi(h, o, u), dx(o, u);
      }
    }, Ae.attemptSynchronousHydration = function(o) {
      switch (o.tag) {
        case 3:
          if (o = o.stateNode, o.current.memoizedState.isDehydrated) {
            var u = T(o.pendingLanes);
            if (u !== 0) {
              for (o.pendingLanes |= 2, o.entangledLanes |= 2; u; ) {
                var h = 1 << 31 - Aa(u);
                o.entanglements[1] |= h, u &= ~h;
              }
              _t(o), !($e & 6) && (Jh = Rs() + 500, It(0));
            }
          }
          break;
        case 13:
          u = Et(o, 2), u !== null && Vi(u, o, 2), qA(), dx(o, 2);
      }
    }, Ae.batchedUpdates = function(o, u) {
      return o(u);
    }, Ae.createComponentSelector = function(o) {
      return { $$typeof: rg, value: o };
    }, Ae.createContainer = function(o, u, h, _, b, A, z, X, K, ut) {
      return a2(
        o,
        u,
        !1,
        null,
        h,
        _,
        A,
        z,
        X,
        K,
        ut,
        null
      );
    }, Ae.createHasPseudoClassSelector = function(o) {
      return { $$typeof: og, value: o };
    }, Ae.createHydrationContainer = function(o, u, h, _, b, A, z, X, K, ut, At, Bt, Ft) {
      return o = a2(
        h,
        _,
        !0,
        o,
        b,
        A,
        X,
        K,
        ut,
        At,
        Bt,
        Ft
      ), o.context = s2(null), h = o.current, _ = Ea(), b = pt(_), b.callback = u ?? null, zt(h, b, _), o.current.lanes = _, B(o, _), _t(o), o;
    }, Ae.createPortal = function(o, u, h) {
      var _ = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        $$typeof: cc,
        key: _ == null ? null : "" + _,
        children: o,
        containerInfo: u,
        implementation: h
      };
    }, Ae.createRoleSelector = function(o) {
      return { $$typeof: lg, value: o };
    }, Ae.createTestNameSelector = function(o) {
      return { $$typeof: ug, value: o };
    }, Ae.createTextSelector = function(o) {
      return { $$typeof: cg, value: o };
    }, Ae.defaultOnCaughtError = function(o) {
      console.error(o);
    }, Ae.defaultOnRecoverableError = function(o) {
      V2(o);
    }, Ae.defaultOnUncaughtError = function(o) {
      V2(o);
    }, Ae.deferredUpdates = function(o) {
      var u = de.T, h = Ll();
      try {
        return aa(32), de.T = null, o();
      } finally {
        aa(h), de.T = u;
      }
    }, Ae.discreteUpdates = function(o, u, h, _, b) {
      var A = de.T, z = Ll();
      try {
        return aa(2), de.T = null, o(u, h, _, b);
      } finally {
        aa(z), de.T = A, $e === 0 && (Jh = Rs() + 500);
      }
    }, Ae.findAllNodes = ax, Ae.findBoundingRects = function(o, u) {
      if (!Gh) throw Error(a(363));
      u = ax(o, u), o = [];
      for (var h = 0; h < u.length; h++)
        o.push(jB(u[h]));
      for (u = o.length - 1; 0 < u; u--) {
        h = o[u];
        for (var _ = h.x, b = _ + h.width, A = h.y, z = A + h.height, X = u - 1; 0 <= X; X--)
          if (u !== X) {
            var K = o[X], ut = K.x, At = ut + K.width, Bt = K.y, Ft = Bt + K.height;
            if (_ >= ut && A >= Bt && b <= At && z <= Ft) {
              o.splice(u, 1);
              break;
            } else if (_ !== ut || h.width !== K.width || Ft < A || Bt > z) {
              if (!(A !== Bt || h.height !== K.height || At < _ || ut > b)) {
                ut > _ && (K.width += ut - _, K.x = _), At < b && (K.width = b - ut), o.splice(u, 1);
                break;
              }
            } else {
              Bt > A && (K.height += Bt - A, K.y = A), Ft < z && (K.height = z - Bt), o.splice(u, 1);
              break;
            }
          }
      }
      return o;
    }, Ae.findHostInstance = r2, Ae.findHostInstanceWithNoPortals = function(o) {
      return o = g(o), o = o !== null ? x(o) : null, o === null ? null : Vh(o.stateNode);
    }, Ae.findHostInstanceWithWarning = function(o) {
      return r2(o);
    }, Ae.flushPassiveEffects = Ol, Ae.flushSyncFromReconciler = function(o) {
      var u = $e;
      $e |= 1;
      var h = de.T, _ = Ll();
      try {
        if (aa(2), de.T = null, o)
          return o();
      } finally {
        aa(_), de.T = h, $e = u, !($e & 6) && It(0);
      }
    }, Ae.flushSyncWork = qA, Ae.focusWithin = function(o, u) {
      if (!Gh) throw Error(a(363));
      for (o = ex(o), u = FA(o, u), u = Array.from(u), o = 0; o < u.length; ) {
        var h = u[o++], _ = h.tag;
        if (!Xh(h)) {
          if ((_ === 5 || _ === 26 || _ === 27) && JB(h.stateNode))
            return !0;
          for (h = h.child; h !== null; )
            u.push(h), h = h.sibling;
        }
      }
      return !1;
    }, Ae.getFindAllNodesFailureDescription = function(o, u) {
      if (!Gh) throw Error(a(363));
      var h = 0, _ = [];
      o = [ex(o), 0];
      for (var b = 0; b < o.length; ) {
        var A = o[b++], z = A.tag, X = o[b++], K = u[X];
        if ((z !== 5 && z !== 26 && z !== 27 || !Xh(A)) && (nx(A, K) && (_.push(ix(K)), X++, X > h && (h = X)), X < u.length))
          for (A = A.child; A !== null; )
            o.push(A, X), A = A.sibling;
      }
      if (h < u.length) {
        for (o = []; h < u.length; h++)
          o.push(ix(u[h]));
        return `findAllNodes was able to match part of the selector:
  ` + (_.join(" > ") + `

No matching component was found for:
  `) + o.join(" > ");
      }
      return null;
    }, Ae.getPublicRootInstance = function(o) {
      if (o = o.current, !o.child) return null;
      switch (o.child.tag) {
        case 27:
        case 5:
          return Vh(o.child.stateNode);
        default:
          return o.child.stateNode;
      }
    }, Ae.injectIntoDevTools = function() {
      var o = {
        bundleType: 0,
        version: wB,
        rendererPackageName: DB,
        currentDispatcherRef: de,
        findFiberByHostInstance: v2,
        reconcilerVersion: "19.0.0"
      };
      if (p2 !== null && (o.rendererConfig = p2), typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u") o = !1;
      else {
        var u = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (u.isDisabled || !u.supportsFiber) o = !0;
        else {
          try {
            qh = u.inject(o), Ra = u;
          } catch {
          }
          o = !!u.checkDCE;
        }
      }
      return o;
    }, Ae.isAlreadyRendering = function() {
      return !1;
    }, Ae.observeVisibleRects = function(o, u, h, _) {
      if (!Gh) throw Error(a(363));
      o = ax(o, u);
      var b = $B(
        o,
        h,
        _
      ).disconnect;
      return {
        disconnect: function() {
          b();
        }
      };
    }, Ae.shouldError = function() {
      return null;
    }, Ae.shouldSuspend = function() {
      return !1;
    }, Ae.startHostTransition = function(o, u, h, _) {
      if (o.tag !== 5) throw Error(a(476));
      var b = ZT(o).queue;
      WT(
        o,
        b,
        u,
        hc,
        h === null ? i : function() {
          var A = ZT(o).next.queue;
          return Nh(
            o,
            A,
            {},
            Ea()
          ), h(_);
        }
      );
    }, Ae.updateContainer = function(o, u, h, _) {
      var b = u.current, A = Ea();
      return o2(
        b,
        A,
        o,
        u,
        h,
        _
      ), A;
    }, Ae.updateContainerSync = function(o, u, h, _) {
      return u.tag === 0 && Ol(), o2(
        u.current,
        2,
        o,
        u,
        h,
        _
      ), 2;
    }, Ae;
  }, n.exports.default = n.exports, Object.defineProperty(n.exports, "__esModule", { value: !0 });
})(p4);
var nk = p4.exports;
d4.exports = nk;
var ik = d4.exports;
const ak = /* @__PURE__ */ Mb(ik), sk = (n) => typeof n == "object" && typeof n.then == "function", Su = [];
function v4(n, t, e = (i, a) => i === a) {
  if (n === t) return !0;
  if (!n || !t) return !1;
  const i = n.length;
  if (t.length !== i) return !1;
  for (let a = 0; a < i; a++) if (!e(n[a], t[a])) return !1;
  return !0;
}
function _4(n, t = null, e = !1, i = {}) {
  t === null && (t = [n]);
  for (const s of Su)
    if (v4(t, s.keys, s.equal)) {
      if (e) return;
      if (Object.prototype.hasOwnProperty.call(s, "error")) throw s.error;
      if (Object.prototype.hasOwnProperty.call(s, "response"))
        return i.lifespan && i.lifespan > 0 && (s.timeout && clearTimeout(s.timeout), s.timeout = setTimeout(s.remove, i.lifespan)), s.response;
      if (!e) throw s.promise;
    }
  const a = {
    keys: t,
    equal: i.equal,
    remove: () => {
      const s = Su.indexOf(a);
      s !== -1 && Su.splice(s, 1);
    },
    promise: (
      // Execute the promise
      (sk(n) ? n : n(...t)).then((s) => {
        a.response = s, i.lifespan && i.lifespan > 0 && (a.timeout = setTimeout(a.remove, i.lifespan));
      }).catch((s) => a.error = s)
    )
  };
  if (Su.push(a), !e) throw a.promise;
}
const rk = (n, t, e) => _4(n, t, !1, e), ok = (n, t, e) => void _4(n, t, !0, e), lk = (n) => {
  if (n === void 0 || n.length === 0) Su.splice(0, Su.length);
  else {
    const t = Su.find((e) => v4(n, e.keys, e.equal));
    t && t.remove();
  }
};
function wT(n, t, e) {
  if (!n) return;
  if (e(n) === !0) return n;
  let i = t ? n.return : n.child;
  for (; i; ) {
    const a = wT(i, t, e);
    if (a) return a;
    i = t ? null : i.sibling;
  }
}
function y4(n) {
  try {
    return Object.defineProperties(n, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return n;
  }
}
const DT = /* @__PURE__ */ y4(/* @__PURE__ */ Tt.createContext(null));
class x4 extends Tt.Component {
  render() {
    return /* @__PURE__ */ Tt.createElement(DT.Provider, { value: this._reactInternals }, this.props.children);
  }
}
function S4() {
  const n = Tt.useContext(DT);
  if (n === null) throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const t = Tt.useId();
  return Tt.useMemo(() => {
    for (const e of [n, n == null ? void 0 : n.alternate]) {
      if (!e) continue;
      const i = wT(e, !1, (a) => {
        let s = a.memoizedState;
        for (; s; ) {
          if (s.memoizedState === t) return !0;
          s = s.next;
        }
      });
      if (i) return i;
    }
  }, [n, t]);
}
const uk = Symbol.for("react.context"), ck = (n) => n !== null && typeof n == "object" && "$$typeof" in n && n.$$typeof === uk;
function fk() {
  const n = S4(), [t] = Tt.useState(() => /* @__PURE__ */ new Map());
  t.clear();
  let e = n;
  for (; e; ) {
    const i = e.type;
    ck(i) && i !== DT && !t.has(i) && t.set(i, Tt.use(y4(i))), e = e.return;
  }
  return t;
}
function hk() {
  const n = fk();
  return Tt.useMemo(
    () => Array.from(n.keys()).reduce(
      (t, e) => (i) => /* @__PURE__ */ Tt.createElement(t, null, /* @__PURE__ */ Tt.createElement(e.Provider, { ...i, value: n.get(e) })),
      (t) => /* @__PURE__ */ Tt.createElement(x4, { ...t })
    ),
    [n]
  );
}
function M4(n) {
  let t = n.root;
  for (; t.getState().previousRoot; ) t = t.getState().previousRoot;
  return t;
}
const b4 = (n) => n && n.isOrthographicCamera, dk = (n) => n && n.hasOwnProperty("current"), pk = (n) => n != null && (typeof n == "string" || typeof n == "number" || n.isColor), Rm = /* @__PURE__ */ ((n, t) => typeof window < "u" && (((n = window.document) == null ? void 0 : n.createElement) || ((t = window.navigator) == null ? void 0 : t.product) === "ReactNative"))() ? Tt.useLayoutEffect : Tt.useEffect;
function E4(n) {
  const t = Tt.useRef(n);
  return Rm(() => void (t.current = n), [n]), t;
}
function mk() {
  const n = S4(), t = hk();
  return Tt.useMemo(() => ({
    children: e
  }) => {
    const a = !!wT(n, !0, (s) => s.type === Tt.StrictMode) ? Tt.StrictMode : Tt.Fragment;
    return /* @__PURE__ */ en.jsx(a, {
      children: /* @__PURE__ */ en.jsx(t, {
        children: e
      })
    });
  }, [n, t]);
}
function gk({
  set: n
}) {
  return Rm(() => (n(new Promise(() => null)), () => n(!1)), [n]), null;
}
const vk = /* @__PURE__ */ ((n) => (n = class extends Tt.Component {
  constructor(...e) {
    super(...e), this.state = {
      error: !1
    };
  }
  componentDidCatch(e) {
    this.props.set(e);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}, n.getDerivedStateFromError = () => ({
  error: !0
}), n))();
function T4(n) {
  var t;
  const e = typeof window < "u" ? (t = window.devicePixelRatio) != null ? t : 2 : 1;
  return Array.isArray(n) ? Math.min(Math.max(n[0], e), n[1]) : n;
}
function Kc(n) {
  var t;
  return (t = n.__r3f) == null ? void 0 : t.root.getState();
}
const vn = {
  obj: (n) => n === Object(n) && !vn.arr(n) && typeof n != "function",
  fun: (n) => typeof n == "function",
  str: (n) => typeof n == "string",
  num: (n) => typeof n == "number",
  boo: (n) => typeof n == "boolean",
  und: (n) => n === void 0,
  nul: (n) => n === null,
  arr: (n) => Array.isArray(n),
  equ(n, t, {
    arrays: e = "shallow",
    objects: i = "reference",
    strict: a = !0
  } = {}) {
    if (typeof n != typeof t || !!n != !!t) return !1;
    if (vn.str(n) || vn.num(n) || vn.boo(n)) return n === t;
    const s = vn.obj(n);
    if (s && i === "reference") return n === t;
    const r = vn.arr(n);
    if (r && e === "reference") return n === t;
    if ((r || s) && n === t) return !0;
    let l;
    for (l in n) if (!(l in t)) return !1;
    if (s && e === "shallow" && i === "shallow") {
      for (l in a ? t : n) if (!vn.equ(n[l], t[l], {
        strict: a,
        objects: "reference"
      })) return !1;
    } else
      for (l in a ? t : n) if (n[l] !== t[l]) return !1;
    if (vn.und(l)) {
      if (r && n.length === 0 && t.length === 0 || s && Object.keys(n).length === 0 && Object.keys(t).length === 0) return !0;
      if (n !== t) return !1;
    }
    return !0;
  }
};
function _k(n) {
  const t = {
    nodes: {},
    materials: {},
    meshes: {}
  };
  return n && n.traverse((e) => {
    e.name && (t.nodes[e.name] = e), e.material && !t.materials[e.material.name] && (t.materials[e.material.name] = e.material), e.isMesh && !t.meshes[e.name] && (t.meshes[e.name] = e);
  }), t;
}
function yk(n) {
  n.type !== "Scene" && (n.dispose == null || n.dispose());
  for (const t in n) {
    const e = n[t];
    (e == null ? void 0 : e.type) !== "Scene" && (e == null || e.dispose == null || e.dispose());
  }
}
const A4 = ["children", "key", "ref"];
function xk(n) {
  const t = {};
  for (const e in n)
    A4.includes(e) || (t[e] = n[e]);
  return t;
}
function m_(n, t, e, i) {
  const a = n;
  let s = a == null ? void 0 : a.__r3f;
  return s || (s = {
    root: t,
    type: e,
    parent: null,
    children: [],
    props: xk(i),
    object: a,
    eventCount: 0,
    handlers: {},
    isHidden: !1
  }, a && (a.__r3f = s)), s;
}
function Jp(n, t) {
  let e = n[t];
  if (!t.includes("-")) return {
    root: n,
    key: t,
    target: e
  };
  e = n;
  for (const a of t.split("-")) {
    var i;
    t = a, n = e, e = (i = e) == null ? void 0 : i[t];
  }
  return {
    root: n,
    key: t,
    target: e
  };
}
const d3 = /-\d+$/;
function g_(n, t) {
  if (vn.str(t.props.attach)) {
    if (d3.test(t.props.attach)) {
      const a = t.props.attach.replace(d3, ""), {
        root: s,
        key: r
      } = Jp(n.object, a);
      Array.isArray(s[r]) || (s[r] = []);
    }
    const {
      root: e,
      key: i
    } = Jp(n.object, t.props.attach);
    t.previousAttach = e[i], e[i] = t.object;
  } else vn.fun(t.props.attach) && (t.previousAttach = t.props.attach(n.object, t.object));
}
function v_(n, t) {
  if (vn.str(t.props.attach)) {
    const {
      root: e,
      key: i
    } = Jp(n.object, t.props.attach), a = t.previousAttach;
    a === void 0 ? delete e[i] : e[i] = a;
  } else
    t.previousAttach == null || t.previousAttach(n.object, t.object);
  delete t.previousAttach;
}
const ub = [
  ...A4,
  // Instance props
  "args",
  "dispose",
  "attach",
  "object",
  "onUpdate",
  // Behavior flags
  "dispose"
], p3 = /* @__PURE__ */ new Map();
function Sk(n) {
  let t = p3.get(n.constructor);
  try {
    t || (t = new n.constructor(), p3.set(n.constructor, t));
  } catch {
  }
  return t;
}
function Mk(n, t) {
  const e = {};
  for (const i in t)
    if (!ub.includes(i) && !vn.equ(t[i], n.props[i])) {
      e[i] = t[i];
      for (const a in t)
        a.startsWith(`${i}-`) && (e[a] = t[a]);
    }
  for (const i in n.props) {
    if (ub.includes(i) || t.hasOwnProperty(i)) continue;
    const {
      root: a,
      key: s
    } = Jp(n.object, i);
    if (a.constructor && a.constructor.length === 0) {
      const r = Sk(a);
      vn.und(r) || (e[s] = r[s]);
    } else
      e[s] = 0;
  }
  return e;
}
const bk = ["map", "emissiveMap", "sheenColorMap", "specularColorMap", "envMap"], Ek = /^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/;
function ko(n, t) {
  var e;
  const i = n.__r3f, a = i && M4(i).getState(), s = i == null ? void 0 : i.eventCount;
  for (const l in t) {
    let c = t[l];
    if (ub.includes(l)) continue;
    if (i && Ek.test(l)) {
      typeof c == "function" ? i.handlers[l] = c : delete i.handlers[l], i.eventCount = Object.keys(i.handlers).length;
      continue;
    }
    if (c === void 0) continue;
    let {
      root: f,
      key: d,
      target: p
    } = Jp(n, l);
    if (p instanceof lh && c instanceof lh)
      p.mask = c.mask;
    else if (p instanceof Pt && pk(c))
      p.set(c);
    else if (p !== null && typeof p == "object" && typeof p.set == "function" && typeof p.copy == "function" && c != null && c.constructor && p.constructor === c.constructor)
      p.copy(c);
    else if (p !== null && typeof p == "object" && typeof p.set == "function" && Array.isArray(c))
      typeof p.fromArray == "function" ? p.fromArray(c) : p.set(...c);
    else if (p !== null && typeof p == "object" && typeof p.set == "function" && typeof c == "number")
      typeof p.setScalar == "function" ? p.setScalar(c) : p.set(c);
    else {
      var r;
      f[d] = c, a && !a.linear && bk.includes(d) && (r = f[d]) != null && r.isTexture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
      f[d].format === zi && f[d].type === Ss && (f[d].colorSpace = Di);
    }
  }
  if (i != null && i.parent && a != null && a.internal && (e = i.object) != null && e.isObject3D && s !== i.eventCount) {
    const l = i.object, c = a.internal.interaction.indexOf(l);
    c > -1 && a.internal.interaction.splice(c, 1), i.eventCount && l.raycast !== null && a.internal.interaction.push(l);
  }
  return i && i.props.attach === void 0 && (i.object.isBufferGeometry ? i.props.attach = "geometry" : i.object.isMaterial && (i.props.attach = "material")), i && Rh(i), n;
}
function Rh(n) {
  var t;
  if (!n.parent) return;
  n.props.onUpdate == null || n.props.onUpdate(n.object);
  const e = (t = n.root) == null || t.getState == null ? void 0 : t.getState();
  e && e.internal.frames === 0 && e.invalidate();
}
function Tk(n, t) {
  n.manual || (b4(n) ? (n.left = t.width / -2, n.right = t.width / 2, n.top = t.height / 2, n.bottom = t.height / -2) : n.aspect = t.width / t.height, n.updateProjectionMatrix());
}
const Yi = (n) => n == null ? void 0 : n.isObject3D;
function x0(n) {
  return (n.eventObject || n.object).uuid + "/" + n.index + n.instanceId;
}
function R4(n, t, e, i) {
  const a = e.get(t);
  a && (e.delete(t), e.size === 0 && (n.delete(i), a.target.releasePointerCapture(i)));
}
function Ak(n, t) {
  const {
    internal: e
  } = n.getState();
  e.interaction = e.interaction.filter((i) => i !== t), e.initialHits = e.initialHits.filter((i) => i !== t), e.hovered.forEach((i, a) => {
    (i.eventObject === t || i.object === t) && e.hovered.delete(a);
  }), e.capturedMap.forEach((i, a) => {
    R4(e.capturedMap, t, i, a);
  });
}
function Rk(n) {
  function t(c) {
    const {
      internal: f
    } = n.getState(), d = c.offsetX - f.initialClick[0], p = c.offsetY - f.initialClick[1];
    return Math.round(Math.sqrt(d * d + p * p));
  }
  function e(c) {
    return c.filter((f) => ["Move", "Over", "Enter", "Out", "Leave"].some((d) => {
      var p;
      return (p = f.__r3f) == null ? void 0 : p.handlers["onPointer" + d];
    }));
  }
  function i(c, f) {
    const d = n.getState(), p = /* @__PURE__ */ new Set(), m = [], g = f ? f(d.internal.interaction) : d.internal.interaction;
    for (let v = 0; v < g.length; v++) {
      const S = Kc(g[v]);
      S && (S.raycaster.camera = void 0);
    }
    d.previousRoot || d.events.compute == null || d.events.compute(c, d);
    function y(v) {
      const S = Kc(v);
      if (!S || !S.events.enabled || S.raycaster.camera === null) return [];
      if (S.raycaster.camera === void 0) {
        var E;
        S.events.compute == null || S.events.compute(c, S, (E = S.previousRoot) == null ? void 0 : E.getState()), S.raycaster.camera === void 0 && (S.raycaster.camera = null);
      }
      return S.raycaster.camera ? S.raycaster.intersectObject(v, !0) : [];
    }
    let x = g.flatMap(y).sort((v, S) => {
      const E = Kc(v.object), T = Kc(S.object);
      return !E || !T ? v.distance - S.distance : T.events.priority - E.events.priority || v.distance - S.distance;
    }).filter((v) => {
      const S = x0(v);
      return p.has(S) ? !1 : (p.add(S), !0);
    });
    d.events.filter && (x = d.events.filter(x, d));
    for (const v of x) {
      let S = v.object;
      for (; S; ) {
        var M;
        (M = S.__r3f) != null && M.eventCount && m.push({
          ...v,
          eventObject: S
        }), S = S.parent;
      }
    }
    if ("pointerId" in c && d.internal.capturedMap.has(c.pointerId))
      for (let v of d.internal.capturedMap.get(c.pointerId).values())
        p.has(x0(v.intersection)) || m.push(v.intersection);
    return m;
  }
  function a(c, f, d, p) {
    if (c.length) {
      const m = {
        stopped: !1
      };
      for (const g of c) {
        let y = Kc(g.object);
        if (y || g.object.traverseAncestors((x) => {
          const M = Kc(x);
          if (M)
            return y = M, !1;
        }), y) {
          const {
            raycaster: x,
            pointer: M,
            camera: v,
            internal: S
          } = y, E = new H(M.x, M.y, 0).unproject(v), T = (R) => {
            var C, B;
            return (C = (B = S.capturedMap.get(R)) == null ? void 0 : B.has(g.eventObject)) != null ? C : !1;
          }, w = (R) => {
            const C = {
              intersection: g,
              target: f.target
            };
            S.capturedMap.has(R) ? S.capturedMap.get(R).set(g.eventObject, C) : S.capturedMap.set(R, /* @__PURE__ */ new Map([[g.eventObject, C]])), f.target.setPointerCapture(R);
          }, D = (R) => {
            const C = S.capturedMap.get(R);
            C && R4(S.capturedMap, g.eventObject, C, R);
          };
          let U = {};
          for (let R in f) {
            let C = f[R];
            typeof C != "function" && (U[R] = C);
          }
          let O = {
            ...g,
            ...U,
            pointer: M,
            intersections: c,
            stopped: m.stopped,
            delta: d,
            unprojectedPoint: E,
            ray: x.ray,
            camera: v,
            // Hijack stopPropagation, which just sets a flag
            stopPropagation() {
              const R = "pointerId" in f && S.capturedMap.get(f.pointerId);
              if (
                // ...if this pointer hasn't been captured
                (!R || // ... or if the hit object is capturing the pointer
                R.has(g.eventObject)) && (O.stopped = m.stopped = !0, S.hovered.size && Array.from(S.hovered.values()).find((C) => C.eventObject === g.eventObject))
              ) {
                const C = c.slice(0, c.indexOf(g));
                s([...C, g]);
              }
            },
            // there should be a distinction between target and currentTarget
            target: {
              hasPointerCapture: T,
              setPointerCapture: w,
              releasePointerCapture: D
            },
            currentTarget: {
              hasPointerCapture: T,
              setPointerCapture: w,
              releasePointerCapture: D
            },
            nativeEvent: f
          };
          if (p(O), m.stopped === !0) break;
        }
      }
    }
    return c;
  }
  function s(c) {
    const {
      internal: f
    } = n.getState();
    for (const d of f.hovered.values())
      if (!c.length || !c.find((p) => p.object === d.object && p.index === d.index && p.instanceId === d.instanceId)) {
        const m = d.eventObject.__r3f;
        if (f.hovered.delete(x0(d)), m != null && m.eventCount) {
          const g = m.handlers, y = {
            ...d,
            intersections: c
          };
          g.onPointerOut == null || g.onPointerOut(y), g.onPointerLeave == null || g.onPointerLeave(y);
        }
      }
  }
  function r(c, f) {
    for (let d = 0; d < f.length; d++) {
      const p = f[d].__r3f;
      p == null || p.handlers.onPointerMissed == null || p.handlers.onPointerMissed(c);
    }
  }
  function l(c) {
    switch (c) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => s([]);
      case "onLostPointerCapture":
        return (f) => {
          const {
            internal: d
          } = n.getState();
          "pointerId" in f && d.capturedMap.has(f.pointerId) && requestAnimationFrame(() => {
            d.capturedMap.has(f.pointerId) && (d.capturedMap.delete(f.pointerId), s([]));
          });
        };
    }
    return function(d) {
      const {
        onPointerMissed: p,
        internal: m
      } = n.getState();
      m.lastEvent.current = d;
      const g = c === "onPointerMove", y = c === "onClick" || c === "onContextMenu" || c === "onDoubleClick", M = i(d, g ? e : void 0), v = y ? t(d) : 0;
      c === "onPointerDown" && (m.initialClick = [d.offsetX, d.offsetY], m.initialHits = M.map((E) => E.eventObject)), y && !M.length && v <= 2 && (r(d, m.interaction), p && p(d)), g && s(M);
      function S(E) {
        const T = E.eventObject, w = T.__r3f;
        if (!(w != null && w.eventCount)) return;
        const D = w.handlers;
        if (g) {
          if (D.onPointerOver || D.onPointerEnter || D.onPointerOut || D.onPointerLeave) {
            const U = x0(E), O = m.hovered.get(U);
            O ? O.stopped && E.stopPropagation() : (m.hovered.set(U, E), D.onPointerOver == null || D.onPointerOver(E), D.onPointerEnter == null || D.onPointerEnter(E));
          }
          D.onPointerMove == null || D.onPointerMove(E);
        } else {
          const U = D[c];
          U ? (!y || m.initialHits.includes(T)) && (r(d, m.interaction.filter((O) => !m.initialHits.includes(O))), U(E)) : y && m.initialHits.includes(T) && r(d, m.interaction.filter((O) => !m.initialHits.includes(O)));
        }
      }
      a(M, d, v, S);
    };
  }
  return {
    handlePointer: l
  };
}
const m3 = (n) => !!(n != null && n.render), C4 = /* @__PURE__ */ Tt.createContext(null), Ck = (n, t) => {
  const e = ek((l, c) => {
    const f = new H(), d = new H(), p = new H();
    function m(v = c().camera, S = d, E = c().size) {
      const {
        width: T,
        height: w,
        top: D,
        left: U
      } = E, O = T / w;
      S.isVector3 ? p.copy(S) : p.set(...S);
      const R = v.getWorldPosition(f).distanceTo(p);
      if (b4(v))
        return {
          width: T / v.zoom,
          height: w / v.zoom,
          top: D,
          left: U,
          factor: 1,
          distance: R,
          aspect: O
        };
      {
        const C = v.fov * Math.PI / 180, B = 2 * Math.tan(C / 2) * R, Y = B * (T / w);
        return {
          width: Y,
          height: B,
          top: D,
          left: U,
          factor: T / Y,
          distance: R,
          aspect: O
        };
      }
    }
    let g;
    const y = (v) => l((S) => ({
      performance: {
        ...S.performance,
        current: v
      }
    })), x = new ft();
    return {
      set: l,
      get: c,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      scene: null,
      xr: null,
      invalidate: (v = 1) => n(c(), v),
      advance: (v, S) => t(v, S, c()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new bT(),
      pointer: x,
      mouse: x,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const v = c();
          g && clearTimeout(g), v.performance.current !== v.performance.min && y(v.performance.min), g = setTimeout(() => y(c().performance.max), v.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: m
      },
      setEvents: (v) => l((S) => ({
        ...S,
        events: {
          ...S.events,
          ...v
        }
      })),
      setSize: (v, S, E = 0, T = 0) => {
        const w = c().camera, D = {
          width: v,
          height: S,
          top: E,
          left: T
        };
        l((U) => ({
          size: D,
          viewport: {
            ...U.viewport,
            ...m(w, d, D)
          }
        }));
      },
      setDpr: (v) => l((S) => {
        const E = T4(v);
        return {
          viewport: {
            ...S.viewport,
            dpr: E,
            initialDpr: S.viewport.initialDpr || E
          }
        };
      }),
      setFrameloop: (v = "always") => {
        const S = c().clock;
        S.stop(), S.elapsedTime = 0, v !== "never" && (S.start(), S.elapsedTime = 0), l(() => ({
          frameloop: v
        }));
      },
      previousRoot: void 0,
      internal: {
        // Events
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        lastEvent: /* @__PURE__ */ Tt.createRef(),
        // Updates
        active: !1,
        frames: 0,
        priority: 0,
        subscribe: (v, S, E) => {
          const T = c().internal;
          return T.priority = T.priority + (S > 0 ? 1 : 0), T.subscribers.push({
            ref: v,
            priority: S,
            store: E
          }), T.subscribers = T.subscribers.sort((w, D) => w.priority - D.priority), () => {
            const w = c().internal;
            w != null && w.subscribers && (w.priority = w.priority - (S > 0 ? 1 : 0), w.subscribers = w.subscribers.filter((D) => D.ref !== v));
          };
        }
      }
    };
  }), i = e.getState();
  let a = i.size, s = i.viewport.dpr, r = i.camera;
  return e.subscribe(() => {
    const {
      camera: l,
      size: c,
      viewport: f,
      gl: d,
      set: p
    } = e.getState();
    if (c.width !== a.width || c.height !== a.height || f.dpr !== s) {
      a = c, s = f.dpr, Tk(l, c), f.dpr > 0 && d.setPixelRatio(f.dpr);
      const m = typeof HTMLCanvasElement < "u" && d.domElement instanceof HTMLCanvasElement;
      d.setSize(c.width, c.height, m);
    }
    l !== r && (r = l, p((m) => ({
      viewport: {
        ...m.viewport,
        ...m.viewport.getCurrentViewport(l)
      }
    })));
  }), e.subscribe((l) => n(l)), e;
};
function w4() {
  const n = Tt.useContext(C4);
  if (!n) throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return n;
}
function UT(n = (e) => e, t) {
  return w4()(n, t);
}
function OT(n, t = 0) {
  const e = w4(), i = e.getState().internal.subscribe, a = E4(n);
  return Rm(() => i(a, t, e), [t, i, e]), null;
}
const g3 = /* @__PURE__ */ new WeakMap(), wk = (n) => {
  var t;
  return typeof n == "function" && (n == null || (t = n.prototype) == null ? void 0 : t.constructor) === n;
};
function D4(n, t) {
  return function(e, ...i) {
    let a;
    return wk(e) ? (a = g3.get(e), a || (a = new e(), g3.set(e, a))) : a = e, n && n(a), Promise.all(i.map((s) => new Promise((r, l) => a.load(s, (c) => {
      Yi(c == null ? void 0 : c.scene) && Object.assign(c, _k(c.scene)), r(c);
    }, t, (c) => l(new Error(`Could not load ${s}: ${c == null ? void 0 : c.message}`))))));
  };
}
function Cm(n, t, e, i) {
  const a = Array.isArray(t) ? t : [t], s = rk(D4(e, i), [n, ...a], {
    equal: vn.equ
  });
  return Array.isArray(t) ? s : s[0];
}
Cm.preload = function(n, t, e) {
  const i = Array.isArray(t) ? t : [t];
  return ok(D4(e), [n, ...i]);
};
Cm.clear = function(n, t) {
  const e = Array.isArray(t) ? t : [t];
  return lk([n, ...e]);
};
function Dk(n) {
  const t = ak(n);
  return t.injectIntoDevTools({
    bundleType: 0,
    rendererPackageName: "@react-three/fiber",
    version: Tt.version
  }), t;
}
const U4 = 0, dh = {}, Uk = /^three(?=[A-Z])/, by = (n) => `${n[0].toUpperCase()}${n.slice(1)}`;
let Ok = 0;
const Nk = (n) => typeof n == "function";
function O4(n) {
  if (Nk(n)) {
    const t = `${Ok++}`;
    return dh[t] = n, t;
  } else
    Object.assign(dh, n);
}
function N4(n, t) {
  const e = by(n), i = dh[e];
  if (n !== "primitive" && !i) throw new Error(`R3F: ${e} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
  if (n === "primitive" && !t.object) throw new Error("R3F: Primitives without 'object' are invalid!");
  if (t.args !== void 0 && !Array.isArray(t.args)) throw new Error("R3F: The args prop must be an array!");
}
function Lk(n, t, e) {
  var i;
  return n = by(n) in dh ? n : n.replace(Uk, ""), N4(n, t), n === "primitive" && (i = t.object) != null && i.__r3f && delete t.object.__r3f, m_(t.object, e, n, t);
}
function zk(n) {
  if (!n.isHidden) {
    var t;
    n.props.attach && (t = n.parent) != null && t.object ? v_(n.parent, n) : Yi(n.object) && (n.object.visible = !1), n.isHidden = !0, Rh(n);
  }
}
function L4(n) {
  if (n.isHidden) {
    var t;
    n.props.attach && (t = n.parent) != null && t.object ? g_(n.parent, n) : Yi(n.object) && n.props.visible !== !1 && (n.object.visible = !0), n.isHidden = !1, Rh(n);
  }
}
function NT(n, t, e) {
  const i = t.root.getState();
  if (!(!n.parent && n.object !== i.scene)) {
    if (!t.object) {
      var a, s;
      const r = dh[by(t.type)];
      t.object = (a = t.props.object) != null ? a : new r(...(s = t.props.args) != null ? s : []), t.object.__r3f = t;
    }
    if (ko(t.object, t.props), t.props.attach)
      g_(n, t);
    else if (Yi(t.object) && Yi(n.object)) {
      const r = n.object.children.indexOf(e == null ? void 0 : e.object);
      if (e && r !== -1) {
        const l = n.object.children.indexOf(t.object);
        if (l !== -1) {
          n.object.children.splice(l, 1);
          const c = l < r ? r - 1 : r;
          n.object.children.splice(c, 0, t.object);
        } else
          t.object.parent = n.object, n.object.children.splice(r, 0, t.object), t.object.dispatchEvent({
            type: "added"
          }), n.object.dispatchEvent({
            type: "childadded",
            child: t.object
          });
      } else
        n.object.add(t.object);
    }
    for (const r of t.children) NT(t, r);
    Rh(t);
  }
}
function R1(n, t) {
  t && (t.parent = n, n.children.push(t), NT(n, t));
}
function v3(n, t, e) {
  if (!t || !e) return;
  t.parent = n;
  const i = n.children.indexOf(e);
  i !== -1 ? n.children.splice(i, 0, t) : n.children.push(t), NT(n, t, e);
}
function z4(n) {
  if (typeof n.dispose == "function") {
    const t = () => {
      try {
        n.dispose();
      } catch {
      }
    };
    typeof IS_REACT_ACT_ENVIRONMENT < "u" ? t() : lb.unstable_scheduleCallback(lb.unstable_IdlePriority, t);
  }
}
function cb(n, t, e) {
  if (!t) return;
  t.parent = null;
  const i = n.children.indexOf(t);
  i !== -1 && n.children.splice(i, 1), t.props.attach ? v_(n, t) : Yi(t.object) && Yi(n.object) && (n.object.remove(t.object), Ak(M4(t), t.object));
  const a = t.props.dispose !== null && e !== !1;
  for (let s = t.children.length - 1; s >= 0; s--) {
    const r = t.children[s];
    cb(t, r, a);
  }
  t.children.length = 0, delete t.object.__r3f, a && t.type !== "primitive" && t.object.type !== "Scene" && z4(t.object), e === void 0 && Rh(t);
}
function Bk(n, t) {
  for (const e of [n, n.alternate])
    if (e !== null)
      if (typeof e.ref == "function") {
        e.refCleanup == null || e.refCleanup();
        const i = e.ref(t);
        typeof i == "function" && (e.refCleanup = i);
      } else e.ref && (e.ref.current = t);
}
const Y0 = [];
function Pk() {
  for (const [e] of Y0) {
    const i = e.parent;
    if (i) {
      e.props.attach ? v_(i, e) : Yi(e.object) && Yi(i.object) && i.object.remove(e.object);
      for (const a of e.children)
        a.props.attach ? v_(e, a) : Yi(a.object) && Yi(e.object) && e.object.remove(a.object);
    }
    e.isHidden && L4(e), e.object.__r3f && delete e.object.__r3f, e.type !== "primitive" && z4(e.object);
  }
  for (const [e, i, a] of Y0) {
    e.props = i;
    const s = e.parent;
    if (s) {
      var n, t;
      const r = dh[by(e.type)];
      e.object = (n = e.props.object) != null ? n : new r(...(t = e.props.args) != null ? t : []), e.object.__r3f = e, Bk(a, e.object), ko(e.object, e.props), e.props.attach ? g_(s, e) : Yi(e.object) && Yi(s.object) && s.object.add(e.object);
      for (const l of e.children)
        l.props.attach ? g_(e, l) : Yi(l.object) && Yi(e.object) && e.object.add(l.object);
      Rh(e);
    }
  }
  Y0.length = 0;
}
const C1 = () => {
}, _3 = {};
let S0 = U4;
const Ik = 0, Hk = 4, fb = /* @__PURE__ */ Dk({
  isPrimaryRenderer: !1,
  warnsIfNotActing: !1,
  supportsMutation: !0,
  supportsPersistence: !1,
  supportsHydration: !1,
  createInstance: Lk,
  removeChild: cb,
  appendChild: R1,
  appendInitialChild: R1,
  insertBefore: v3,
  appendChildToContainer(n, t) {
    const e = n.getState().scene.__r3f;
    !t || !e || R1(e, t);
  },
  removeChildFromContainer(n, t) {
    const e = n.getState().scene.__r3f;
    !t || !e || cb(e, t);
  },
  insertInContainerBefore(n, t, e) {
    const i = n.getState().scene.__r3f;
    !t || !e || !i || v3(i, t, e);
  },
  getRootHostContext: () => _3,
  getChildHostContext: () => _3,
  commitUpdate(n, t, e, i, a) {
    var s, r, l;
    N4(t, i);
    let c = !1;
    if ((n.type === "primitive" && e.object !== i.object || ((s = i.args) == null ? void 0 : s.length) !== ((r = e.args) == null ? void 0 : r.length) || (l = i.args) != null && l.some((d, p) => {
      var m;
      return d !== ((m = e.args) == null ? void 0 : m[p]);
    })) && (c = !0), c)
      Y0.push([n, {
        ...i
      }, a]);
    else {
      const d = Mk(n, i);
      Object.keys(d).length && (Object.assign(n.props, d), ko(n.object, d));
    }
    (a.sibling === null || (a.flags & Hk) === Ik) && Pk();
  },
  finalizeInitialChildren: () => !1,
  commitMount() {
  },
  getPublicInstance: (n) => n == null ? void 0 : n.object,
  prepareForCommit: () => null,
  preparePortalMount: (n) => m_(n.getState().scene, n, "", {}),
  resetAfterCommit: () => {
  },
  shouldSetTextContent: () => !1,
  clearContainer: () => !1,
  hideInstance: zk,
  unhideInstance: L4,
  createTextInstance: C1,
  hideTextInstance: C1,
  unhideTextInstance: C1,
  scheduleTimeout: typeof setTimeout == "function" ? setTimeout : void 0,
  cancelTimeout: typeof clearTimeout == "function" ? clearTimeout : void 0,
  noTimeout: -1,
  getInstanceFromNode: () => null,
  beforeActiveInstanceBlur() {
  },
  afterActiveInstanceBlur() {
  },
  detachDeletedInstance() {
  },
  prepareScopeUpdate() {
  },
  getInstanceFromScope: () => null,
  shouldAttemptEagerTransition: () => !1,
  trackSchedulerEvent: () => {
  },
  resolveEventType: () => null,
  resolveEventTimeStamp: () => -1.1,
  requestPostPaintCallback() {
  },
  maySuspendCommit: () => !1,
  preloadInstance: () => !0,
  // true indicates already loaded
  startSuspendingCommit() {
  },
  suspendInstance() {
  },
  waitForCommitToBeReady: () => null,
  NotPendingTransition: null,
  HostTransitionContext: /* @__PURE__ */ Tt.createContext(null),
  setCurrentUpdatePriority(n) {
    S0 = n;
  },
  getCurrentUpdatePriority() {
    return S0;
  },
  resolveUpdatePriority() {
    var n;
    if (S0 !== U4) return S0;
    switch (typeof window < "u" && ((n = window.event) == null ? void 0 : n.type)) {
      case "click":
      case "contextmenu":
      case "dblclick":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
        return q0.DiscreteEventPriority;
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "pointerenter":
      case "pointerleave":
      case "wheel":
        return q0.ContinuousEventPriority;
      default:
        return q0.DefaultEventPriority;
    }
  },
  resetFormInstance() {
  }
}), ku = /* @__PURE__ */ new Map(), Jc = {
  objects: "shallow",
  strict: !1
};
function Fk(n, t) {
  if (!t && typeof HTMLCanvasElement < "u" && n instanceof HTMLCanvasElement && n.parentElement) {
    const {
      width: e,
      height: i,
      top: a,
      left: s
    } = n.parentElement.getBoundingClientRect();
    return {
      width: e,
      height: i,
      top: a,
      left: s
    };
  } else if (!t && typeof OffscreenCanvas < "u" && n instanceof OffscreenCanvas)
    return {
      width: n.width,
      height: n.height,
      top: 0,
      left: 0
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    ...t
  };
}
function Vk(n) {
  const t = ku.get(n), e = t == null ? void 0 : t.fiber, i = t == null ? void 0 : t.store;
  t && console.warn("R3F.createRoot should only be called once!");
  const a = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), s = i || Ck(pb, x3), r = e || fb.createContainer(
    s,
    // container
    q0.ConcurrentRoot,
    // tag
    null,
    // hydration callbacks
    !1,
    // isStrictMode
    null,
    // concurrentUpdatesByDefaultOverride
    "",
    // identifierPrefix
    a,
    // onUncaughtError
    a,
    // onCaughtError
    a,
    // onRecoverableError
    null
    // transitionCallbacks
  );
  t || ku.set(n, {
    fiber: r,
    store: s
  });
  let l, c, f = !1, d = null;
  return {
    async configure(p = {}) {
      let m;
      d = new Promise((mt) => m = mt);
      let {
        gl: g,
        size: y,
        scene: x,
        events: M,
        onCreated: v,
        shadows: S = !1,
        linear: E = !1,
        flat: T = !1,
        legacy: w = !1,
        orthographic: D = !1,
        frameloop: U = "always",
        dpr: O = [1, 2],
        performance: R,
        raycaster: C,
        camera: B,
        onPointerMissed: Y
      } = p, V = s.getState(), Q = V.gl;
      if (!V.gl) {
        const mt = {
          canvas: n,
          powerPreference: "high-performance",
          antialias: !0,
          alpha: !0
        }, Rt = typeof g == "function" ? await g(mt) : g;
        m3(Rt) ? Q = Rt : Q = new o4({
          ...mt,
          ...g
        }), V.set({
          gl: Q
        });
      }
      let J = V.raycaster;
      J || V.set({
        raycaster: J = new Jz()
      });
      const {
        params: P,
        ...q
      } = C || {};
      if (vn.equ(q, J, Jc) || ko(J, {
        ...q
      }), vn.equ(P, J.params, Jc) || ko(J, {
        params: {
          ...J.params,
          ...P
        }
      }), !V.camera || V.camera === c && !vn.equ(c, B, Jc)) {
        c = B;
        const mt = B == null ? void 0 : B.isCamera, Rt = mt ? B : D ? new Am(0, 0, 0, 0, 0.1, 1e3) : new li(75, 0, 0.1, 1e3);
        mt || (Rt.position.z = 5, B && (ko(Rt, B), Rt.manual || ("aspect" in B || "left" in B || "right" in B || "bottom" in B || "top" in B) && (Rt.manual = !0, Rt.updateProjectionMatrix())), !V.camera && !(B != null && B.rotation) && Rt.lookAt(0, 0, 0)), V.set({
          camera: Rt
        }), J.camera = Rt;
      }
      if (!V.scene) {
        let mt;
        x != null && x.isScene ? (mt = x, m_(mt, s, "", {})) : (mt = new iT(), m_(mt, s, "", {}), x && ko(mt, x)), V.set({
          scene: mt
        });
      }
      M && !V.events.handlers && V.set({
        events: M(s)
      });
      const G = Fk(n, y);
      if (vn.equ(G, V.size, Jc) || V.setSize(G.width, G.height, G.top, G.left), O && V.viewport.dpr !== T4(O) && V.setDpr(O), V.frameloop !== U && V.setFrameloop(U), V.onPointerMissed || V.set({
        onPointerMissed: Y
      }), R && !vn.equ(R, V.performance, Jc) && V.set((mt) => ({
        performance: {
          ...mt.performance,
          ...R
        }
      })), !V.xr) {
        var it;
        const mt = ($, ht) => {
          const kt = s.getState();
          kt.frameloop !== "never" && x3($, !0, kt, ht);
        }, Rt = () => {
          const $ = s.getState();
          $.gl.xr.enabled = $.gl.xr.isPresenting, $.gl.xr.setAnimationLoop($.gl.xr.isPresenting ? mt : null), $.gl.xr.isPresenting || pb($);
        }, Qt = {
          connect() {
            const $ = s.getState().gl;
            $.xr.addEventListener("sessionstart", Rt), $.xr.addEventListener("sessionend", Rt);
          },
          disconnect() {
            const $ = s.getState().gl;
            $.xr.removeEventListener("sessionstart", Rt), $.xr.removeEventListener("sessionend", Rt);
          }
        };
        typeof ((it = Q.xr) == null ? void 0 : it.addEventListener) == "function" && Qt.connect(), V.set({
          xr: Qt
        });
      }
      if (Q.shadowMap) {
        const mt = Q.shadowMap.enabled, Rt = Q.shadowMap.type;
        if (Q.shadowMap.enabled = !!S, vn.boo(S))
          Q.shadowMap.type = np;
        else if (vn.str(S)) {
          var lt;
          const Qt = {
            basic: lL,
            percentage: G_,
            soft: np,
            variance: Ls
          };
          Q.shadowMap.type = (lt = Qt[S]) != null ? lt : np;
        } else vn.obj(S) && Object.assign(Q.shadowMap, S);
        (mt !== Q.shadowMap.enabled || Rt !== Q.shadowMap.type) && (Q.shadowMap.needsUpdate = !0);
      }
      return Oe.enabled = !w, f || (Q.outputColorSpace = E ? vl : Di, Q.toneMapping = T ? cr : VE), V.legacy !== w && V.set(() => ({
        legacy: w
      })), V.linear !== E && V.set(() => ({
        linear: E
      })), V.flat !== T && V.set(() => ({
        flat: T
      })), g && !vn.fun(g) && !m3(g) && !vn.equ(g, Q, Jc) && ko(Q, g), l = v, f = !0, m(), this;
    },
    render(p) {
      return !f && !d && this.configure(), d.then(() => {
        fb.updateContainer(/* @__PURE__ */ en.jsx(Gk, {
          store: s,
          children: p,
          onCreated: l,
          rootElement: n
        }), r, null, () => {
        });
      }), s;
    },
    unmount() {
      B4(n);
    }
  };
}
function Gk({
  store: n,
  children: t,
  onCreated: e,
  rootElement: i
}) {
  return Rm(() => {
    const a = n.getState();
    a.set((s) => ({
      internal: {
        ...s.internal,
        active: !0
      }
    })), e && e(a), n.getState().events.connected || a.events.connect == null || a.events.connect(i);
  }, []), /* @__PURE__ */ en.jsx(C4.Provider, {
    value: n,
    children: t
  });
}
function B4(n, t) {
  const e = ku.get(n), i = e == null ? void 0 : e.fiber;
  if (i) {
    const a = e == null ? void 0 : e.store.getState();
    a && (a.internal.active = !1), fb.updateContainer(null, i, null, () => {
      a && setTimeout(() => {
        try {
          var s, r, l, c;
          a.events.disconnect == null || a.events.disconnect(), (s = a.gl) == null || (r = s.renderLists) == null || r.dispose == null || r.dispose(), (l = a.gl) == null || l.forceContextLoss == null || l.forceContextLoss(), (c = a.gl) != null && c.xr && a.xr.disconnect(), yk(a.scene), ku.delete(n);
        } catch {
        }
      }, 500);
    });
  }
}
const Xk = /* @__PURE__ */ new Set(), qk = /* @__PURE__ */ new Set(), Yk = /* @__PURE__ */ new Set();
function w1(n, t) {
  if (n.size)
    for (const {
      callback: e
    } of n.values())
      e(t);
}
function hp(n, t) {
  switch (n) {
    case "before":
      return w1(Xk, t);
    case "after":
      return w1(qk, t);
    case "tail":
      return w1(Yk, t);
  }
}
let D1, U1;
function hb(n, t, e) {
  let i = t.clock.getDelta();
  t.frameloop === "never" && typeof n == "number" && (i = n - t.clock.elapsedTime, t.clock.oldTime = t.clock.elapsedTime, t.clock.elapsedTime = n), D1 = t.internal.subscribers;
  for (let a = 0; a < D1.length; a++)
    U1 = D1[a], U1.ref.current(U1.store.getState(), i, e);
  return !t.internal.priority && t.gl.render && t.gl.render(t.scene, t.camera), t.internal.frames = Math.max(0, t.internal.frames - 1), t.frameloop === "always" ? 1 : t.internal.frames;
}
let __ = !1, db = !1, O1, y3, $c;
function P4(n) {
  y3 = requestAnimationFrame(P4), __ = !0, O1 = 0, hp("before", n), db = !0;
  for (const e of ku.values()) {
    var t;
    $c = e.store.getState(), $c.internal.active && ($c.frameloop === "always" || $c.internal.frames > 0) && !((t = $c.gl.xr) != null && t.isPresenting) && (O1 += hb(n, $c));
  }
  if (db = !1, hp("after", n), O1 === 0)
    return hp("tail", n), __ = !1, cancelAnimationFrame(y3);
}
function pb(n, t = 1) {
  var e;
  if (!n) return ku.forEach((i) => pb(i.store.getState(), t));
  (e = n.gl.xr) != null && e.isPresenting || !n.internal.active || n.frameloop === "never" || (t > 1 ? n.internal.frames = Math.min(60, n.internal.frames + t) : db ? n.internal.frames = 2 : n.internal.frames = 1, __ || (__ = !0, requestAnimationFrame(P4)));
}
function x3(n, t = !0, e, i) {
  if (t && hp("before", n), e) hb(n, e, i);
  else for (const a of ku.values()) hb(n, a.store.getState());
  t && hp("after", n);
}
const N1 = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function kk(n) {
  const {
    handlePointer: t
  } = Rk(n);
  return {
    priority: 1,
    enabled: !0,
    compute(e, i, a) {
      i.pointer.set(e.offsetX / i.size.width * 2 - 1, -(e.offsetY / i.size.height) * 2 + 1), i.raycaster.setFromCamera(i.pointer, i.camera);
    },
    connected: void 0,
    handlers: Object.keys(N1).reduce((e, i) => ({
      ...e,
      [i]: t(i)
    }), {}),
    update: () => {
      var e;
      const {
        events: i,
        internal: a
      } = n.getState();
      (e = a.lastEvent) != null && e.current && i.handlers && i.handlers.onPointerMove(a.lastEvent.current);
    },
    connect: (e) => {
      const {
        set: i,
        events: a
      } = n.getState();
      if (a.disconnect == null || a.disconnect(), i((s) => ({
        events: {
          ...s.events,
          connected: e
        }
      })), a.handlers)
        for (const s in a.handlers) {
          const r = a.handlers[s], [l, c] = N1[s];
          e.addEventListener(l, r, {
            passive: c
          });
        }
    },
    disconnect: () => {
      const {
        set: e,
        events: i
      } = n.getState();
      if (i.connected) {
        if (i.handlers)
          for (const a in i.handlers) {
            const s = i.handlers[a], [r] = N1[a];
            i.connected.removeEventListener(r, s);
          }
        e((a) => ({
          events: {
            ...a.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
function S3(n, t) {
  let e;
  return (...i) => {
    window.clearTimeout(e), e = window.setTimeout(() => n(...i), t);
  };
}
function Wk({ debounce: n, scroll: t, polyfill: e, offsetSize: i } = { debounce: 0, scroll: !1, offsetSize: !1 }) {
  const a = e || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!a) throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [s, r] = Tt.useState({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), l = Tt.useRef({ element: null, scrollContainers: null, resizeObserver: null, lastBounds: s, orientationHandler: null }), c = n ? typeof n == "number" ? n : n.scroll : null, f = n ? typeof n == "number" ? n : n.resize : null, d = Tt.useRef(!1);
  Tt.useEffect(() => (d.current = !0, () => void (d.current = !1)));
  const [p, m, g] = Tt.useMemo(() => {
    const v = () => {
      if (!l.current.element) return;
      const { left: S, top: E, width: T, height: w, bottom: D, right: U, x: O, y: R } = l.current.element.getBoundingClientRect(), C = { left: S, top: E, width: T, height: w, bottom: D, right: U, x: O, y: R };
      l.current.element instanceof HTMLElement && i && (C.height = l.current.element.offsetHeight, C.width = l.current.element.offsetWidth), Object.freeze(C), d.current && !Kk(l.current.lastBounds, C) && r(l.current.lastBounds = C);
    };
    return [v, f ? S3(v, f) : v, c ? S3(v, c) : v];
  }, [r, i, c, f]);
  function y() {
    l.current.scrollContainers && (l.current.scrollContainers.forEach((v) => v.removeEventListener("scroll", g, !0)), l.current.scrollContainers = null), l.current.resizeObserver && (l.current.resizeObserver.disconnect(), l.current.resizeObserver = null), l.current.orientationHandler && ("orientation" in screen && "removeEventListener" in screen.orientation ? screen.orientation.removeEventListener("change", l.current.orientationHandler) : "onorientationchange" in window && window.removeEventListener("orientationchange", l.current.orientationHandler));
  }
  function x() {
    l.current.element && (l.current.resizeObserver = new a(g), l.current.resizeObserver.observe(l.current.element), t && l.current.scrollContainers && l.current.scrollContainers.forEach((v) => v.addEventListener("scroll", g, { capture: !0, passive: !0 })), l.current.orientationHandler = () => {
      g();
    }, "orientation" in screen && "addEventListener" in screen.orientation ? screen.orientation.addEventListener("change", l.current.orientationHandler) : "onorientationchange" in window && window.addEventListener("orientationchange", l.current.orientationHandler));
  }
  const M = (v) => {
    !v || v === l.current.element || (y(), l.current.element = v, l.current.scrollContainers = I4(v), x());
  };
  return jk(g, !!t), Zk(m), Tt.useEffect(() => {
    y(), x();
  }, [t, g, m]), Tt.useEffect(() => y, []), [M, s, p];
}
function Zk(n) {
  Tt.useEffect(() => {
    const t = n;
    return window.addEventListener("resize", t), () => void window.removeEventListener("resize", t);
  }, [n]);
}
function jk(n, t) {
  Tt.useEffect(() => {
    if (t) {
      const e = n;
      return window.addEventListener("scroll", e, { capture: !0, passive: !0 }), () => void window.removeEventListener("scroll", e, !0);
    }
  }, [n, t]);
}
function I4(n) {
  const t = [];
  if (!n || n === document.body) return t;
  const { overflow: e, overflowX: i, overflowY: a } = window.getComputedStyle(n);
  return [e, i, a].some((s) => s === "auto" || s === "scroll") && t.push(n), [...t, ...I4(n.parentElement)];
}
const Qk = ["x", "y", "top", "bottom", "left", "right", "width", "height"], Kk = (n, t) => Qk.every((e) => n[e] === t[e]);
function Jk({
  ref: n,
  children: t,
  fallback: e,
  resize: i,
  style: a,
  gl: s,
  events: r = kk,
  eventSource: l,
  eventPrefix: c,
  shadows: f,
  linear: d,
  flat: p,
  legacy: m,
  orthographic: g,
  frameloop: y,
  dpr: x,
  performance: M,
  raycaster: v,
  camera: S,
  scene: E,
  onPointerMissed: T,
  onCreated: w,
  ...D
}) {
  Tt.useMemo(() => O4(DY), []);
  const U = mk(), [O, R] = Wk({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...i
  }), C = Tt.useRef(null), B = Tt.useRef(null);
  Tt.useImperativeHandle(n, () => C.current);
  const Y = E4(T), [V, Q] = Tt.useState(!1), [J, P] = Tt.useState(!1);
  if (V) throw V;
  if (J) throw J;
  const q = Tt.useRef(null);
  Rm(() => {
    const it = C.current;
    if (R.width > 0 && R.height > 0 && it) {
      q.current || (q.current = Vk(it));
      async function lt() {
        await q.current.configure({
          gl: s,
          scene: E,
          events: r,
          shadows: f,
          linear: d,
          flat: p,
          legacy: m,
          orthographic: g,
          frameloop: y,
          dpr: x,
          performance: M,
          raycaster: v,
          camera: S,
          size: R,
          // Pass mutable reference to onPointerMissed so it's free to update
          onPointerMissed: (...mt) => Y.current == null ? void 0 : Y.current(...mt),
          onCreated: (mt) => {
            mt.events.connect == null || mt.events.connect(l ? dk(l) ? l.current : l : B.current), c && mt.setEvents({
              compute: (Rt, Qt) => {
                const $ = Rt[c + "X"], ht = Rt[c + "Y"];
                Qt.pointer.set($ / Qt.size.width * 2 - 1, -(ht / Qt.size.height) * 2 + 1), Qt.raycaster.setFromCamera(Qt.pointer, Qt.camera);
              }
            }), w == null || w(mt);
          }
        }), q.current.render(/* @__PURE__ */ en.jsx(U, {
          children: /* @__PURE__ */ en.jsx(vk, {
            set: P,
            children: /* @__PURE__ */ en.jsx(Tt.Suspense, {
              fallback: /* @__PURE__ */ en.jsx(gk, {
                set: Q
              }),
              children: t ?? null
            })
          })
        }));
      }
      lt();
    }
  }), Tt.useEffect(() => {
    const it = C.current;
    if (it) return () => B4(it);
  }, []);
  const G = l ? "none" : "auto";
  return /* @__PURE__ */ en.jsx("div", {
    ref: B,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: G,
      ...a
    },
    ...D,
    children: /* @__PURE__ */ en.jsx("div", {
      ref: O,
      style: {
        width: "100%",
        height: "100%"
      },
      children: /* @__PURE__ */ en.jsx("canvas", {
        ref: C,
        style: {
          display: "block"
        },
        children: e
      })
    })
  });
}
function $k(n) {
  return /* @__PURE__ */ en.jsx(x4, {
    children: /* @__PURE__ */ en.jsx(Jk, {
      ...n
    })
  });
}
function Wu() {
  return Wu = Object.assign ? Object.assign.bind() : function(n) {
    for (var t = 1; t < arguments.length; t++) {
      var e = arguments[t];
      for (var i in e) ({}).hasOwnProperty.call(e, i) && (n[i] = e[i]);
    }
    return n;
  }, Wu.apply(null, arguments);
}
function dp(n, t, e) {
  return t in n ? Object.defineProperty(n, t, {
    value: e,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : n[t] = e, n;
}
function mb(n, t) {
  (t == null || t > n.length) && (t = n.length);
  for (var e = 0, i = new Array(t); e < t; e++) i[e] = n[e];
  return i;
}
function tW(n, t) {
  if (n) {
    if (typeof n == "string") return mb(n, t);
    var e = Object.prototype.toString.call(n).slice(8, -1);
    if (e === "Object" && n.constructor && (e = n.constructor.name), e === "Map" || e === "Set") return Array.from(n);
    if (e === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)) return mb(n, t);
  }
}
function eW(n) {
  if (Array.isArray(n)) return mb(n);
}
function nW(n) {
  if (typeof Symbol < "u" && n[Symbol.iterator] != null || n["@@iterator"] != null) return Array.from(n);
}
function iW() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function aW(n) {
  return eW(n) || nW(n) || tW(n) || iW();
}
new ft();
new ft();
function sW(n, t, e) {
  return Math.max(t, Math.min(e, n));
}
function rW(n, t) {
  return sW(n - Math.floor(n / t) * t, 0, t);
}
function oW(n, t) {
  var e = rW(t - n, Math.PI * 2);
  return e > Math.PI && (e -= Math.PI * 2), e;
}
function H4(n, t) {
  if (!(n instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
var rs = function n(t, e, i) {
  var a = this;
  H4(this, n), dp(this, "dot2", function(s, r) {
    return a.x * s + a.y * r;
  }), dp(this, "dot3", function(s, r, l) {
    return a.x * s + a.y * r + a.z * l;
  }), this.x = t, this.y = e, this.z = i;
}, lW = [new rs(1, 1, 0), new rs(-1, 1, 0), new rs(1, -1, 0), new rs(-1, -1, 0), new rs(1, 0, 1), new rs(-1, 0, 1), new rs(1, 0, -1), new rs(-1, 0, -1), new rs(0, 1, 1), new rs(0, -1, 1), new rs(0, 1, -1), new rs(0, -1, -1)], M3 = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180], b3 = new Array(512), E3 = new Array(512), uW = function(t) {
  t > 0 && t < 1 && (t *= 65536), t = Math.floor(t), t < 256 && (t |= t << 8);
  for (var e = 0; e < 256; e++) {
    var i;
    e & 1 ? i = M3[e] ^ t & 255 : i = M3[e] ^ t >> 8 & 255, b3[e] = b3[e + 256] = i, E3[e] = E3[e + 256] = lW[i % 12];
  }
};
uW(0);
function cW(n) {
  if (typeof n == "number")
    n = Math.abs(n);
  else if (typeof n == "string") {
    var t = n;
    n = 0;
    for (var e = 0; e < t.length; e++)
      n = (n + (e + 1) * (t.charCodeAt(e) % 96)) % 2147483647;
  }
  return n === 0 && (n = 311), n;
}
function T3(n) {
  var t = cW(n);
  return function() {
    var e = t * 48271 % 2147483647;
    return t = e, e / 2147483647;
  };
}
var fW = function n(t) {
  var e = this;
  H4(this, n), dp(this, "seed", 0), dp(this, "init", function(i) {
    e.seed = i, e.value = T3(i);
  }), dp(this, "value", T3(this.seed)), this.init(t);
};
new fW(Math.random());
var hW = function(t) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.01, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1 / (2 * Math.PI);
  return i / Math.atan(1 / e) * Math.atan(Math.sin(2 * Math.PI * t * a) / e);
}, F4 = function(t) {
  return 1 / (1 + t + 0.48 * t * t + 0.235 * t * t * t);
}, dW = function(t) {
  return t;
}, pW = {
  in: function(t) {
    return 1 - Math.cos(t * Math.PI / 2);
  },
  out: function(t) {
    return Math.sin(t * Math.PI / 2);
  },
  inOut: function(t) {
    return -(Math.cos(Math.PI * t) - 1) / 2;
  }
}, mW = {
  in: function(t) {
    return t * t * t;
  },
  out: function(t) {
    return 1 - Math.pow(1 - t, 3);
  },
  inOut: function(t) {
    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
  }
}, gW = {
  in: function(t) {
    return t * t * t * t * t;
  },
  out: function(t) {
    return 1 - Math.pow(1 - t, 5);
  },
  inOut: function(t) {
    return t < 0.5 ? 16 * t * t * t * t * t : 1 - Math.pow(-2 * t + 2, 5) / 2;
  }
}, vW = {
  in: function(t) {
    return 1 - Math.sqrt(1 - Math.pow(t, 2));
  },
  out: function(t) {
    return Math.sqrt(1 - Math.pow(t - 1, 2));
  },
  inOut: function(t) {
    return t < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * t, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * t + 2, 2)) + 1) / 2;
  }
}, _W = {
  in: function(t) {
    return t * t * t * t;
  },
  out: function(t) {
    return 1 - --t * t * t * t;
  },
  inOut: function(t) {
    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
  }
}, yW = {
  in: function(t) {
    return t === 0 ? 0 : Math.pow(2, 10 * t - 10);
  },
  out: function(t) {
    return t === 1 ? 1 : 1 - Math.pow(2, -10 * t);
  },
  inOut: function(t) {
    return t === 0 ? 0 : t === 1 ? 1 : t < 0.5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2;
  }
};
function Kn(n, t, e) {
  var i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25, a = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.01, s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 1 / 0, r = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : F4, l = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : 1e-3, c = "velocity_" + t;
  if (n.__damp === void 0 && (n.__damp = {}), n.__damp[c] === void 0 && (n.__damp[c] = 0), Math.abs(n[t] - e) <= l)
    return n[t] = e, !1;
  i = Math.max(1e-4, i);
  var f = 2 / i, d = r(f * a), p = n[t] - e, m = e, g = s * i;
  p = Math.min(Math.max(p, -g), g), e = n[t] - p;
  var y = (n.__damp[c] + f * p) * a;
  n.__damp[c] = (n.__damp[c] - f * y) * d;
  var x = e + (p + y) * d;
  return m - n[t] > 0 == x > m && (x = m, n.__damp[c] = (x - m) / a), n[t] = x, !0;
}
var xW = function(t) {
  return t && t.isCamera;
}, SW = function(t) {
  return t && t.isLight;
}, bd = /* @__PURE__ */ new H(), A3 = /* @__PURE__ */ new Jn(), R3 = /* @__PURE__ */ new Jn(), Ed = /* @__PURE__ */ new ae(), L1 = /* @__PURE__ */ new H();
function MW(n, t, e, i, a, s, r) {
  typeof t == "number" ? bd.setScalar(t) : Array.isArray(t) ? bd.set(t[0], t[1], t[2]) : bd.copy(t);
  var l = n.parent;
  n.updateWorldMatrix(!0, !1), L1.setFromMatrixPosition(n.matrixWorld), xW(n) || SW(n) ? Ed.lookAt(L1, bd, n.up) : Ed.lookAt(bd, L1, n.up), y_(n.quaternion, R3.setFromRotationMatrix(Ed), e, i, a, s, r), l && (Ed.extractRotation(l.matrixWorld), A3.setFromRotationMatrix(Ed), y_(n.quaternion, R3.copy(n.quaternion).premultiply(A3.invert()), e, i, a, s, r));
}
function Hf(n, t, e, i, a, s, r, l) {
  return Kn(n, t, n[t] + oW(n[t], e), i, a, s, r, l);
}
var Td = /* @__PURE__ */ new ft(), C3, w3;
function bW(n, t, e, i, a, s, r) {
  return typeof t == "number" ? Td.setScalar(t) : Array.isArray(t) ? Td.set(t[0], t[1]) : Td.copy(t), C3 = Kn(n, "x", Td.x, e, i, a, s, r), w3 = Kn(n, "y", Td.y, e, i, a, s, r), C3 || w3;
}
var tf = /* @__PURE__ */ new H(), D3, U3, O3;
function gb(n, t, e, i, a, s, r) {
  return typeof t == "number" ? tf.setScalar(t) : Array.isArray(t) ? tf.set(t[0], t[1], t[2]) : tf.copy(t), D3 = Kn(n, "x", tf.x, e, i, a, s, r), U3 = Kn(n, "y", tf.y, e, i, a, s, r), O3 = Kn(n, "z", tf.z, e, i, a, s, r), D3 || U3 || O3;
}
var uu = /* @__PURE__ */ new De(), N3, L3, z3, B3;
function EW(n, t, e, i, a, s, r) {
  return typeof t == "number" ? uu.setScalar(t) : Array.isArray(t) ? uu.set(t[0], t[1], t[2], t[3]) : uu.copy(t), N3 = Kn(n, "x", uu.x, e, i, a, s, r), L3 = Kn(n, "y", uu.y, e, i, a, s, r), z3 = Kn(n, "z", uu.z, e, i, a, s, r), B3 = Kn(n, "w", uu.w, e, i, a, s, r), N3 || L3 || z3 || B3;
}
var Ad = /* @__PURE__ */ new _a(), P3, I3, H3;
function TW(n, t, e, i, a, s, r) {
  return Array.isArray(t) ? Ad.set(t[0], t[1], t[2], t[3]) : Ad.copy(t), P3 = Hf(n, "x", Ad.x, e, i, a, s, r), I3 = Hf(n, "y", Ad.y, e, i, a, s, r), H3 = Hf(n, "z", Ad.z, e, i, a, s, r), P3 || I3 || H3;
}
var ef = /* @__PURE__ */ new Pt(), F3, V3, G3;
function AW(n, t, e, i, a, s, r) {
  return t instanceof Pt ? ef.copy(t) : Array.isArray(t) ? ef.setRGB(t[0], t[1], t[2]) : ef.set(t), F3 = Kn(n, "r", ef.r, e, i, a, s, r), V3 = Kn(n, "g", ef.g, e, i, a, s, r), G3 = Kn(n, "b", ef.b, e, i, a, s, r), F3 || V3 || G3;
}
var Ns = /* @__PURE__ */ new Jn(), Ir = /* @__PURE__ */ new De(), X3 = /* @__PURE__ */ new De(), Rd = /* @__PURE__ */ new De(), q3, Y3, k3, W3;
function y_(n, t, e, i, a, s, r) {
  var l = n;
  Array.isArray(t) ? Ns.set(t[0], t[1], t[2], t[3]) : Ns.copy(t);
  var c = n.dot(Ns) > 0 ? 1 : -1;
  return Ns.x *= c, Ns.y *= c, Ns.z *= c, Ns.w *= c, q3 = Kn(n, "x", Ns.x, e, i, a, s, r), Y3 = Kn(n, "y", Ns.y, e, i, a, s, r), k3 = Kn(n, "z", Ns.z, e, i, a, s, r), W3 = Kn(n, "w", Ns.w, e, i, a, s, r), Ir.set(n.x, n.y, n.z, n.w).normalize(), X3.set(l.__damp.velocity_x, l.__damp.velocity_y, l.__damp.velocity_z, l.__damp.velocity_w), Rd.copy(Ir).multiplyScalar(X3.dot(Ir) / Ir.dot(Ir)), l.__damp.velocity_x -= Rd.x, l.__damp.velocity_y -= Rd.y, l.__damp.velocity_z -= Rd.z, l.__damp.velocity_w -= Rd.w, n.set(Ir.x, Ir.y, Ir.z, Ir.w), q3 || Y3 || k3 || W3;
}
var Cd = /* @__PURE__ */ new $z(), Z3, j3, Q3;
function RW(n, t, e, i, a, s, r) {
  return Array.isArray(t) ? Cd.set(t[0], t[1], t[2]) : Cd.copy(t), Z3 = Kn(n, "radius", Cd.radius, e, i, a, s, r), j3 = Hf(n, "phi", Cd.phi, e, i, a, s, r), Q3 = Hf(n, "theta", Cd.theta, e, i, a, s, r), Z3 || j3 || Q3;
}
var M0 = /* @__PURE__ */ new ae(), K3 = /* @__PURE__ */ new H(), J3 = /* @__PURE__ */ new Jn(), $3 = /* @__PURE__ */ new H(), tD, eD, nD;
function CW(n, t, e, i, a, s, r) {
  var l = n;
  return l.__damp === void 0 && (l.__damp = {
    position: new H(),
    rotation: new Jn(),
    scale: new H()
  }, n.decompose(l.__damp.position, l.__damp.rotation, l.__damp.scale)), Array.isArray(t) ? M0.set.apply(M0, aW(t)) : M0.copy(t), M0.decompose(K3, J3, $3), tD = gb(l.__damp.position, K3, e, i, a, s, r), eD = y_(l.__damp.rotation, J3, e, i, a, s, r), nD = gb(l.__damp.scale, $3, e, i, a, s, r), n.compose(l.__damp.position, l.__damp.rotation, l.__damp.scale), tD || eD || nD;
}
var vb = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  rsqw: hW,
  exp: F4,
  linear: dW,
  sine: pW,
  cubic: mW,
  quint: gW,
  circ: vW,
  quart: _W,
  expo: yW,
  damp: Kn,
  dampLookAt: MW,
  dampAngle: Hf,
  damp2: bW,
  damp3: gb,
  damp4: EW,
  dampE: TW,
  dampC: AW,
  dampQ: y_,
  dampS: RW,
  dampM: CW
});
const V4 = /* @__PURE__ */ Tt.createContext(null);
function wW() {
  return Tt.useContext(V4);
}
function DW({
  eps: n = 1e-5,
  enabled: t = !0,
  infinite: e,
  horizontal: i,
  pages: a = 1,
  distance: s = 1,
  damping: r = 0.25,
  maxSpeed: l = 1 / 0,
  prepend: c = !1,
  style: f = {},
  children: d
}) {
  const {
    get: p,
    setEvents: m,
    gl: g,
    size: y,
    invalidate: x,
    events: M
  } = UT(), [v] = Tt.useState(() => document.createElement("div")), [S] = Tt.useState(() => document.createElement("div")), [E] = Tt.useState(() => document.createElement("div")), T = g.domElement.parentNode, w = Tt.useRef(0), D = Tt.useMemo(() => ({
    el: v,
    eps: n,
    fill: S,
    fixed: E,
    horizontal: i,
    damping: r,
    offset: 0,
    delta: 0,
    scroll: w,
    pages: a,
    // 0-1 for a range between from -> from + distance
    range(R, C, B = 0) {
      const Y = R - B, V = Y + C + B * 2;
      return this.offset < Y ? 0 : this.offset > V ? 1 : (this.offset - Y) / (V - Y);
    },
    // 0-1-0 for a range between from -> from + distance
    curve(R, C, B = 0) {
      return Math.sin(this.range(R, C, B) * Math.PI);
    },
    // true/false for a range between from -> from + distance
    visible(R, C, B = 0) {
      const Y = R - B, V = Y + C + B * 2;
      return this.offset >= Y && this.offset <= V;
    }
  }), [n, r, i, a]);
  Tt.useEffect(() => {
    v.style.position = "absolute", v.style.width = "100%", v.style.height = "100%", v.style[i ? "overflowX" : "overflowY"] = "auto", v.style[i ? "overflowY" : "overflowX"] = "hidden", v.style.top = "0px", v.style.left = "0px";
    for (const C in f)
      v.style[C] = f[C];
    E.style.position = "sticky", E.style.top = "0px", E.style.left = "0px", E.style.width = "100%", E.style.height = "100%", E.style.overflow = "hidden", v.appendChild(E), S.style.height = i ? "100%" : `${a * s * 100}%`, S.style.width = i ? `${a * s * 100}%` : "100%", S.style.pointerEvents = "none", v.appendChild(S), c ? T.prepend(v) : T.appendChild(v), v[i ? "scrollLeft" : "scrollTop"] = 1;
    const O = M.connected || g.domElement;
    requestAnimationFrame(() => M.connect == null ? void 0 : M.connect(v));
    const R = p().events.compute;
    return m({
      compute(C, B) {
        const {
          left: Y,
          top: V
        } = T.getBoundingClientRect(), Q = C.clientX - Y, J = C.clientY - V;
        B.pointer.set(Q / B.size.width * 2 - 1, -(J / B.size.height) * 2 + 1), B.raycaster.setFromCamera(B.pointer, B.camera);
      }
    }), () => {
      T.removeChild(v), m({
        compute: R
      }), M.connect == null || M.connect(O);
    };
  }, [a, s, i, v, S, E, T]), Tt.useEffect(() => {
    if (M.connected === v) {
      const O = y[i ? "width" : "height"], R = v[i ? "scrollWidth" : "scrollHeight"], C = R - O;
      let B = 0, Y = !0, V = !0;
      const Q = () => {
        if (!(!t || V) && (x(), B = v[i ? "scrollLeft" : "scrollTop"], w.current = B / C, e)) {
          if (!Y) {
            if (B >= C) {
              const P = 1 - D.offset;
              v[i ? "scrollLeft" : "scrollTop"] = 1, w.current = D.offset = -P, Y = !0;
            } else if (B <= 0) {
              const P = 1 + D.offset;
              v[i ? "scrollLeft" : "scrollTop"] = R, w.current = D.offset = P, Y = !0;
            }
          }
          Y && setTimeout(() => Y = !1, 40);
        }
      };
      v.addEventListener("scroll", Q, {
        passive: !0
      }), requestAnimationFrame(() => V = !1);
      const J = (P) => v.scrollLeft += P.deltaY / 2;
      return i && v.addEventListener("wheel", J, {
        passive: !0
      }), () => {
        v.removeEventListener("scroll", Q), i && v.removeEventListener("wheel", J);
      };
    }
  }, [v, M, y, e, D, x, i, t]);
  let U = 0;
  return OT((O, R) => {
    U = D.offset, vb.damp(D, "offset", w.current, r, R, l, void 0, n), vb.damp(D, "delta", Math.abs(U - D.offset), r, R, l, void 0, n), D.delta > n && x();
  }), /* @__PURE__ */ Tt.createElement(V4.Provider, {
    value: D
  }, d);
}
function UW(n, t, e, i) {
  const a = class extends Ms {
    constructor(r = {}) {
      const l = Object.entries(n);
      super({
        uniforms: l.reduce((c, [f, d]) => {
          const p = nT.clone({
            [f]: {
              value: d
            }
          });
          return {
            ...c,
            ...p
          };
        }, {}),
        vertexShader: t,
        fragmentShader: e
      }), this.key = "", l.forEach(([c]) => Object.defineProperty(this, c, {
        get: () => this.uniforms[c].value,
        set: (f) => this.uniforms[c].value = f
      })), Object.assign(this, r);
    }
  };
  return a.key = jL.generateUUID(), a;
}
const z1 = (n) => n === Object(n) && !Array.isArray(n) && typeof n != "function";
function LT(n, t) {
  const e = UT((s) => s.gl), i = Cm(yy, z1(n) ? Object.values(n) : n);
  return Tt.useLayoutEffect(() => {
    t == null || t(i);
  }, [t]), Tt.useEffect(() => {
    if ("initTexture" in e) {
      let s = [];
      Array.isArray(i) ? s = i : i instanceof Sn ? s = [i] : z1(i) && (s = Object.values(i)), s.forEach((r) => {
        r instanceof Sn && e.initTexture(r);
      });
    }
  }, [e, i]), Tt.useMemo(() => {
    if (z1(n)) {
      const s = {};
      let r = 0;
      for (const l in n) s[l] = i[r++];
      return s;
    } else
      return i;
  }, [n, i]);
}
LT.preload = (n) => Cm.preload(yy, n);
LT.clear = (n) => Cm.clear(yy, n);
const OW = () => parseInt(gm.replace(/\D+/g, "")), NW = /* @__PURE__ */ OW(), iD = /* @__PURE__ */ UW(
  {
    color: /* @__PURE__ */ new Pt("white"),
    scale: /* @__PURE__ */ new ft(1, 1),
    imageBounds: /* @__PURE__ */ new ft(1, 1),
    resolution: 1024,
    map: null,
    zoom: 1,
    radius: 0,
    grayscale: 0,
    opacity: 1
  },
  /* glsl */
  `
  varying vec2 vUv;
  varying vec2 vPos;
  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);
    vUv = uv;
    vPos = position.xy;
  }
`,
  /* glsl */
  `
  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44
  varying vec2 vUv;
  varying vec2 vPos;
  uniform vec2 scale;
  uniform vec2 imageBounds;
  uniform float resolution;
  uniform vec3 color;
  uniform sampler2D map;
  uniform float radius;
  uniform float zoom;
  uniform float grayscale;
  uniform float opacity;
  const vec3 luma = vec3(.299, 0.587, 0.114);
  vec4 toGrayscale(vec4 color, float intensity) {
    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);
  }
  vec2 aspect(vec2 size) {
    return size / min(size.x, size.y);
  }
  
  const float PI = 3.14159265;
    
  // from https://iquilezles.org/articles/distfunctions
  float udRoundBox( vec2 p, vec2 b, float r ) {
    return length(max(abs(p)-b+r,0.0))-r;
  }

  void main() {
    vec2 s = aspect(scale);
    vec2 i = aspect(imageBounds);
    float rs = s.x / s.y;
    float ri = i.x / i.y;
    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);
    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;
    vec2 uv = vUv * s / new + offset;
    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);

    vec2 res = vec2(scale * resolution);
    vec2 halfRes = 0.5 * res;
    float b = udRoundBox(vUv.xy * res - halfRes, halfRes, resolution * radius);    
	  vec3 a = mix(vec3(1.0,0.0,0.0), vec3(0.0,0.0,0.0), smoothstep(0.0, 1.0, b));
    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity * a), grayscale);
    
    #include <tonemapping_fragment>
    #include <${NW >= 154 ? "colorspace_fragment" : "encodings_fragment"}>
  }
`
), G4 = /* @__PURE__ */ Tt.forwardRef(({
  children: n,
  color: t,
  segments: e = 1,
  scale: i = 1,
  zoom: a = 1,
  grayscale: s = 0,
  opacity: r = 1,
  radius: l = 0,
  texture: c,
  toneMapped: f,
  transparent: d,
  side: p,
  ...m
}, g) => {
  O4({
    ImageMaterial: iD
  });
  const y = Tt.useRef(null), x = UT((E) => E.size), M = Array.isArray(i) ? [i[0], i[1]] : [i, i], v = [c.image.width, c.image.height], S = Math.max(x.width, x.height);
  return Tt.useImperativeHandle(g, () => y.current, []), Tt.useLayoutEffect(() => {
    y.current.geometry.parameters && y.current.material.scale.set(
      // @ts-ignore
      M[0] * y.current.geometry.parameters.width,
      // @ts-ignore
      M[1] * y.current.geometry.parameters.height
    );
  }, [M[0], M[1]]), /* @__PURE__ */ Tt.createElement("mesh", Wu({
    ref: y,
    scale: Array.isArray(i) ? [...i, 1] : i
  }, m), /* @__PURE__ */ Tt.createElement("planeGeometry", {
    args: [1, 1, e, e]
  }), /* @__PURE__ */ Tt.createElement("imageMaterial", {
    color: t,
    map: c,
    zoom: a,
    grayscale: s,
    opacity: r,
    scale: M,
    imageBounds: v,
    resolution: S,
    radius: l,
    toneMapped: f,
    transparent: d,
    side: p,
    key: iD.key
  }), n);
}), LW = /* @__PURE__ */ Tt.forwardRef(({
  url: n,
  ...t
}, e) => {
  const i = LT(n);
  return /* @__PURE__ */ Tt.createElement(G4, Wu({}, t, {
    texture: i,
    ref: e
  }));
}), zW = /* @__PURE__ */ Tt.forwardRef(({
  url: n,
  ...t
}, e) => /* @__PURE__ */ Tt.createElement(G4, Wu({}, t, {
  ref: e
}))), BW = /* @__PURE__ */ Tt.forwardRef((n, t) => {
  if (n.url) return /* @__PURE__ */ Tt.createElement(LW, Wu({}, n, {
    ref: t
  }));
  if (n.texture) return /* @__PURE__ */ Tt.createElement(zW, Wu({}, n, {
    ref: t
  }));
  throw new Error("<Image /> requires a url or texture");
});
/*!
 * @gsap/react 2.1.2
 * https://gsap.com
 *
 * Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license or for
 * Club GSAP members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/
let aD = typeof document < "u" ? Tt.useLayoutEffect : Tt.useEffect, sD = (n) => n && !Array.isArray(n) && typeof n == "object", b0 = [], PW = {}, X4 = FE;
const Ey = (n, t = b0) => {
  let e = PW;
  sD(n) ? (e = n, n = null, t = "dependencies" in e ? e.dependencies : b0) : sD(t) && (e = t, t = "dependencies" in e ? e.dependencies : b0), n && typeof n != "function" && console.warn("First parameter must be a function or config object");
  const { scope: i, revertOnUpdate: a } = e, s = Tt.useRef(!1), r = Tt.useRef(X4.context(() => {
  }, i)), l = Tt.useRef((f) => r.current.add(null, f)), c = t && t.length && !a;
  return c && aD(() => (s.current = !0, () => r.current.revert()), b0), aD(() => {
    if (n && r.current.add(n, i), !c || !s.current)
      return () => r.current.revert();
  }, t), { context: r.current, contextSafe: l.current };
};
Ey.register = (n) => {
  X4 = n;
};
Ey.headless = !0;
(function() {
  function n() {
    for (var i = arguments.length, a = 0; a < i; a++) {
      var s = a < 0 || arguments.length <= a ? void 0 : arguments[a];
      s.nodeType === 1 || s.nodeType === 11 ? this.appendChild(s) : this.appendChild(document.createTextNode(String(s)));
    }
  }
  function t() {
    for (; this.lastChild; )
      this.removeChild(this.lastChild);
    arguments.length && this.append.apply(this, arguments);
  }
  function e() {
    for (var i = this.parentNode, a = arguments.length, s = new Array(a), r = 0; r < a; r++)
      s[r] = arguments[r];
    var l = s.length;
    if (i)
      for (l || i.removeChild(this); l--; ) {
        var c = s[l];
        typeof c != "object" ? c = this.ownerDocument.createTextNode(c) : c.parentNode && c.parentNode.removeChild(c), l ? i.insertBefore(this.previousSibling, c) : i.replaceChild(c, this);
      }
  }
  typeof Element < "u" && (Element.prototype.append || (Element.prototype.append = n, DocumentFragment.prototype.append = n), Element.prototype.replaceChildren || (Element.prototype.replaceChildren = t, DocumentFragment.prototype.replaceChildren = t), Element.prototype.replaceWith || (Element.prototype.replaceWith = e, DocumentFragment.prototype.replaceWith = e));
})();
function IW(n, t) {
  if (!(n instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function rD(n, t) {
  for (var e = 0; e < t.length; e++) {
    var i = t[e];
    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(n, i.key, i);
  }
}
function oD(n, t, e) {
  return t && rD(n.prototype, t), e && rD(n, e), n;
}
function HW(n, t, e) {
  return t in n ? Object.defineProperty(n, t, {
    value: e,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : n[t] = e, n;
}
function lD(n, t) {
  var e = Object.keys(n);
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n);
    t && (i = i.filter(function(a) {
      return Object.getOwnPropertyDescriptor(n, a).enumerable;
    })), e.push.apply(e, i);
  }
  return e;
}
function uD(n) {
  for (var t = 1; t < arguments.length; t++) {
    var e = arguments[t] != null ? arguments[t] : {};
    t % 2 ? lD(Object(e), !0).forEach(function(i) {
      HW(n, i, e[i]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(e)) : lD(Object(e)).forEach(function(i) {
      Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(e, i));
    });
  }
  return n;
}
function q4(n, t) {
  return VW(n) || XW(n, t) || Y4(n, t) || YW();
}
function ki(n) {
  return FW(n) || GW(n) || Y4(n) || qW();
}
function FW(n) {
  if (Array.isArray(n)) return _b(n);
}
function VW(n) {
  if (Array.isArray(n)) return n;
}
function GW(n) {
  if (typeof Symbol < "u" && Symbol.iterator in Object(n)) return Array.from(n);
}
function XW(n, t) {
  if (!(typeof Symbol > "u" || !(Symbol.iterator in Object(n)))) {
    var e = [], i = !0, a = !1, s = void 0;
    try {
      for (var r = n[Symbol.iterator](), l; !(i = (l = r.next()).done) && (e.push(l.value), !(t && e.length === t)); i = !0)
        ;
    } catch (c) {
      a = !0, s = c;
    } finally {
      try {
        !i && r.return != null && r.return();
      } finally {
        if (a) throw s;
      }
    }
    return e;
  }
}
function Y4(n, t) {
  if (n) {
    if (typeof n == "string") return _b(n, t);
    var e = Object.prototype.toString.call(n).slice(8, -1);
    if (e === "Object" && n.constructor && (e = n.constructor.name), e === "Map" || e === "Set") return Array.from(n);
    if (e === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)) return _b(n, t);
  }
}
function _b(n, t) {
  (t == null || t > n.length) && (t = n.length);
  for (var e = 0, i = new Array(t); e < t; e++) i[e] = n[e];
  return i;
}
function qW() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function YW() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Mu(n, t) {
  return Object.getOwnPropertyNames(Object(n)).reduce(function(e, i) {
    var a = Object.getOwnPropertyDescriptor(Object(n), i), s = Object.getOwnPropertyDescriptor(Object(t), i);
    return Object.defineProperty(e, i, s || a);
  }, {});
}
function wm(n) {
  return typeof n == "string";
}
function zT(n) {
  return Array.isArray(n);
}
function E0() {
  var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = Mu(n), e;
  return t.types !== void 0 ? e = t.types : t.split !== void 0 && (e = t.split), e !== void 0 && (t.types = (wm(e) || zT(e) ? String(e) : "").split(",").map(function(i) {
    return String(i).trim();
  }).filter(function(i) {
    return /((line)|(word)|(char))/i.test(i);
  })), (t.absolute || t.position) && (t.absolute = t.absolute || /absolute/.test(n.position)), t;
}
function BT(n) {
  var t = wm(n) || zT(n) ? String(n) : "";
  return {
    none: !t,
    lines: /line/i.test(t),
    words: /word/i.test(t),
    chars: /char/i.test(t)
  };
}
function Ty(n) {
  return n !== null && typeof n == "object";
}
function kW(n) {
  return Ty(n) && /^(1|3|11)$/.test(n.nodeType);
}
function WW(n) {
  return typeof n == "number" && n > -1 && n % 1 === 0;
}
function ZW(n) {
  return Ty(n) && WW(n.length);
}
function Zu(n) {
  return zT(n) ? n : n == null ? [] : ZW(n) ? Array.prototype.slice.call(n) : [n];
}
function cD(n) {
  var t = n;
  return wm(n) && (/^(#[a-z]\w+)$/.test(n.trim()) ? t = document.getElementById(n.trim().slice(1)) : t = document.querySelectorAll(n)), Zu(t).reduce(function(e, i) {
    return [].concat(ki(e), ki(Zu(i).filter(kW)));
  }, []);
}
var jW = Object.entries, x_ = "_splittype", Fs = {}, QW = 0;
function sr(n, t, e) {
  if (!Ty(n))
    return console.warn("[data.set] owner is not an object"), null;
  var i = n[x_] || (n[x_] = ++QW), a = Fs[i] || (Fs[i] = {});
  return e === void 0 ? t && Object.getPrototypeOf(t) === Object.prototype && (Fs[i] = uD(uD({}, a), t)) : t !== void 0 && (a[t] = e), e;
}
function bu(n, t) {
  var e = Ty(n) ? n[x_] : null, i = e && Fs[e] || {};
  return i;
}
function k4(n) {
  var t = n && n[x_];
  t && (delete n[t], delete Fs[t]);
}
function KW() {
  Object.keys(Fs).forEach(function(n) {
    delete Fs[n];
  });
}
function JW() {
  jW(Fs).forEach(function(n) {
    var t = q4(n, 2), e = t[0], i = t[1], a = i.isRoot, s = i.isSplit;
    (!a || !s) && (Fs[e] = null, delete Fs[e]);
  });
}
function $W(n) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : " ", e = n ? String(n) : "";
  return e.trim().replace(/\s+/g, " ").split(t);
}
var PT = "\\ud800-\\udfff", W4 = "\\u0300-\\u036f\\ufe20-\\ufe23", Z4 = "\\u20d0-\\u20f0", j4 = "\\ufe0e\\ufe0f", tZ = "[".concat(PT, "]"), yb = "[".concat(W4).concat(Z4, "]"), xb = "\\ud83c[\\udffb-\\udfff]", eZ = "(?:".concat(yb, "|").concat(xb, ")"), Q4 = "[^".concat(PT, "]"), K4 = "(?:\\ud83c[\\udde6-\\uddff]){2}", J4 = "[\\ud800-\\udbff][\\udc00-\\udfff]", $4 = "\\u200d", tB = "".concat(eZ, "?"), eB = "[".concat(j4, "]?"), nZ = "(?:" + $4 + "(?:" + [Q4, K4, J4].join("|") + ")" + eB + tB + ")*", iZ = eB + tB + nZ, aZ = "(?:".concat(["".concat(Q4).concat(yb, "?"), yb, K4, J4, tZ].join("|"), `
)`), sZ = RegExp("".concat(xb, "(?=").concat(xb, ")|").concat(aZ).concat(iZ), "g"), rZ = [$4, PT, W4, Z4, j4], oZ = RegExp("[".concat(rZ.join(""), "]"));
function lZ(n) {
  return n.split("");
}
function nB(n) {
  return oZ.test(n);
}
function uZ(n) {
  return n.match(sZ) || [];
}
function cZ(n) {
  return nB(n) ? uZ(n) : lZ(n);
}
function fZ(n) {
  return n == null ? "" : String(n);
}
function hZ(n) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  return n = fZ(n), n && wm(n) && !t && nB(n) ? cZ(n) : n.split(t);
}
function Sb(n, t) {
  var e = document.createElement(n);
  return t && Object.keys(t).forEach(function(i) {
    var a = t[i], s = wm(a) ? a.trim() : a;
    s === null || s === "" || (i === "children" ? e.append.apply(e, ki(Zu(s))) : e.setAttribute(i, s));
  }), e;
}
var IT = {
  splitClass: "",
  lineClass: "line",
  wordClass: "word",
  charClass: "char",
  types: ["lines", "words", "chars"],
  absolute: !1,
  tagName: "div"
};
function dZ(n, t) {
  t = Mu(IT, t);
  var e = BT(t.types), i = t.tagName, a = n.nodeValue, s = document.createDocumentFragment(), r = [], l = [];
  return /^\s/.test(a) && s.append(" "), r = $W(a).reduce(function(c, f, d, p) {
    var m, g;
    return e.chars && (g = hZ(f).map(function(y) {
      var x = Sb(i, {
        class: "".concat(t.splitClass, " ").concat(t.charClass),
        style: "display: inline-block;",
        children: y
      });
      return sr(x, "isChar", !0), l = [].concat(ki(l), [x]), x;
    })), e.words || e.lines ? (m = Sb(i, {
      class: "".concat(t.wordClass, " ").concat(t.splitClass),
      style: "display: inline-block; ".concat(e.words && t.absolute ? "position: relative;" : ""),
      children: e.chars ? g : f
    }), sr(m, {
      isWord: !0,
      isWordStart: !0,
      isWordEnd: !0
    }), s.appendChild(m)) : g.forEach(function(y) {
      s.appendChild(y);
    }), d < p.length - 1 && s.append(" "), e.words ? c.concat(m) : c;
  }, []), /\s$/.test(a) && s.append(" "), n.replaceWith(s), {
    words: r,
    chars: l
  };
}
function iB(n, t) {
  var e = n.nodeType, i = {
    words: [],
    chars: []
  };
  if (!/(1|3|11)/.test(e))
    return i;
  if (e === 3 && /\S/.test(n.nodeValue))
    return dZ(n, t);
  var a = Zu(n.childNodes);
  if (a.length && (sr(n, "isSplit", !0), !bu(n).isRoot)) {
    n.style.display = "inline-block", n.style.position = "relative";
    var s = n.nextSibling, r = n.previousSibling, l = n.textContent || "", c = s ? s.textContent : " ", f = r ? r.textContent : " ";
    sr(n, {
      isWordEnd: /\s$/.test(l) || /^\s/.test(c),
      isWordStart: /^\s/.test(l) || /\s$/.test(f)
    });
  }
  return a.reduce(function(d, p) {
    var m = iB(p, t), g = m.words, y = m.chars;
    return {
      words: [].concat(ki(d.words), ki(g)),
      chars: [].concat(ki(d.chars), ki(y))
    };
  }, i);
}
function pZ(n, t, e, i) {
  if (!e.absolute)
    return {
      top: t ? n.offsetTop : null
    };
  var a = n.offsetParent, s = q4(i, 2), r = s[0], l = s[1], c = 0, f = 0;
  if (a && a !== document.body) {
    var d = a.getBoundingClientRect();
    c = d.x + r, f = d.y + l;
  }
  var p = n.getBoundingClientRect(), m = p.width, g = p.height, y = p.x, x = p.y, M = x + l - f, v = y + r - c;
  return {
    width: m,
    height: g,
    top: M,
    left: v
  };
}
function aB(n) {
  bu(n).isWord ? (k4(n), n.replaceWith.apply(n, ki(n.childNodes))) : Zu(n.children).forEach(function(t) {
    return aB(t);
  });
}
var mZ = function() {
  return document.createDocumentFragment();
};
function gZ(n, t, e) {
  var i = BT(t.types), a = t.tagName, s = n.getElementsByTagName("*"), r = [], l = [], c = null, f, d, p, m = [], g = n.parentElement, y = n.nextElementSibling, x = mZ(), M = window.getComputedStyle(n), v = M.textAlign, S = parseFloat(M.fontSize), E = S * 0.2;
  return t.absolute && (p = {
    left: n.offsetLeft,
    top: n.offsetTop,
    width: n.offsetWidth
  }, d = n.offsetWidth, f = n.offsetHeight, sr(n, {
    cssWidth: n.style.width,
    cssHeight: n.style.height
  })), Zu(s).forEach(function(T) {
    var w = T.parentElement === n, D = pZ(T, w, t, e), U = D.width, O = D.height, R = D.top, C = D.left;
    /^br$/i.test(T.nodeName) || (i.lines && w && ((c === null || R - c >= E) && (c = R, r.push(l = [])), l.push(T)), t.absolute && sr(T, {
      top: R,
      left: C,
      width: U,
      height: O
    }));
  }), g && g.removeChild(n), i.lines && (m = r.map(function(T) {
    var w = Sb(a, {
      class: "".concat(t.splitClass, " ").concat(t.lineClass),
      style: "display: block; text-align: ".concat(v, "; width: 100%;")
    });
    sr(w, "isLine", !0);
    var D = {
      height: 0,
      top: 1e4
    };
    return x.appendChild(w), T.forEach(function(U, O, R) {
      var C = bu(U), B = C.isWordEnd, Y = C.top, V = C.height, Q = R[O + 1];
      D.height = Math.max(D.height, V), D.top = Math.min(D.top, Y), w.appendChild(U), B && bu(Q).isWordStart && w.append(" ");
    }), t.absolute && sr(w, {
      height: D.height,
      top: D.top
    }), w;
  }), i.words || aB(x), n.replaceChildren(x)), t.absolute && (n.style.width = "".concat(n.style.width || d, "px"), n.style.height = "".concat(f, "px"), Zu(s).forEach(function(T) {
    var w = bu(T), D = w.isLine, U = w.top, O = w.left, R = w.width, C = w.height, B = bu(T.parentElement), Y = !D && B.isLine;
    T.style.top = "".concat(Y ? U - B.top : U, "px"), T.style.left = D ? "".concat(p.left, "px") : "".concat(O - (Y ? p.left : 0), "px"), T.style.height = "".concat(C, "px"), T.style.width = D ? "".concat(p.width, "px") : "".concat(R, "px"), T.style.position = "absolute";
  })), g && (y ? g.insertBefore(n, y) : g.appendChild(n)), m;
}
var nf = Mu(IT, {}), vZ = /* @__PURE__ */ function() {
  oD(n, null, [{
    key: "clearData",
    /**
     * CLears all data
     */
    value: function() {
      KW();
    }
    /**
     * The default settings for all splitType instances
     * @static
     */
  }, {
    key: "setDefaults",
    /**
     * Sets the default settings for all SplitType instances.
     * The provided object will be merged with the existing defaults objects.
     *
     * @param {Object} settings an object containing the settings to override
     * @returns {Object} the new default settings
     * @public
     * @static
     * @example
     * SplitType.setDefaults({ "position": "absolute" })
     */
    value: function(e) {
      return nf = Mu(nf, E0(e)), IT;
    }
    /**
     * Revert target elements to their original html content
     * Has no effect on that
     *
     * @param {any} elements The target elements to revert. One of:
     *  - {string} A css selector
     *  - {HTMLElement} A single element
     * -  {NodeList} A NodeList or collection
     *  - {HTMLElement[]} An array of Elements
     * -  {Array<HTMLElement|NodeList|HTMLElement[]>} A nested array of elements
     * @static
     */
  }, {
    key: "revert",
    value: function(e) {
      cD(e).forEach(function(i) {
        var a = bu(i), s = a.isSplit, r = a.html, l = a.cssWidth, c = a.cssHeight;
        s && (i.innerHTML = r, i.style.width = l || "", i.style.height = c || "", k4(i));
      });
    }
    /**
     * Creates a new SplitType instance
     * This static method provides a way to create a `SplitType` instance without
     * using the `new` keyword.
     *
     * @param {any} target The target elements to split. One of:
     *  - {string} A css selector
     *  - {HTMLElement} A single element
     * -  {NodeList} A NodeList or collection
     *  - {HTMLElement[]} An array of Elements
     * -  {Array<HTMLElement|NodeList|HTMLElement[]>} A nested array of elements
     * @param {Object} [options] Settings for the SplitType instance
     * @return {SplitType} the SplitType instance
     * @static
     */
  }, {
    key: "create",
    value: function(e, i) {
      return new n(e, i);
    }
    /**
     * Creates a new `SplitType` instance
     *
     * @param {any} elements The target elements to split. One of:
     *  - {string} A css selector
     *  - {HTMLElement} A single element
     * -  {NodeList} A NodeList or collection
     *  - {HTMLElement[]} An array of Elements
     * -  {Array<HTMLElement|NodeList|HTMLElement[]>} A nested array of elements
     * @param {Object} [options] Settings for the SplitType instance
     */
  }, {
    key: "data",
    /**
     * The internal data store
     */
    get: function() {
      return Fs;
    }
  }, {
    key: "defaults",
    get: function() {
      return nf;
    },
    set: function(e) {
      nf = Mu(nf, E0(e));
    }
  }]);
  function n(t, e) {
    IW(this, n), this.isSplit = !1, this.settings = Mu(nf, E0(e)), this.elements = cD(t), this.split();
  }
  return oD(n, [{
    key: "split",
    value: function(e) {
      var i = this;
      this.revert(), this.elements.forEach(function(r) {
        sr(r, "html", r.innerHTML);
      }), this.lines = [], this.words = [], this.chars = [];
      var a = [window.pageXOffset, window.pageYOffset];
      e !== void 0 && (this.settings = Mu(this.settings, E0(e)));
      var s = BT(this.settings.types);
      s.none || (this.elements.forEach(function(r) {
        sr(r, "isRoot", !0);
        var l = iB(r, i.settings), c = l.words, f = l.chars;
        i.words = [].concat(ki(i.words), ki(c)), i.chars = [].concat(ki(i.chars), ki(f));
      }), this.elements.forEach(function(r) {
        if (s.lines || i.settings.absolute) {
          var l = gZ(r, i.settings, a);
          i.lines = [].concat(ki(i.lines), ki(l));
        }
      }), this.isSplit = !0, window.scrollTo(a[0], a[1]), JW());
    }
    /**
     * Reverts target element(s) back to their original html content
     * Deletes all stored data associated with the target elements
     * Resets the properties on the splitType instance
     *
     * @public
     */
  }, {
    key: "revert",
    value: function() {
      this.isSplit && (this.lines = null, this.words = null, this.chars = null, this.isSplit = !1), n.revert(this.elements);
    }
  }]), n;
}();
function _Z({ url: n, image: t, target: e, fhover: i, setfHover: a, ...s }) {
  const r = Tt.useRef(null), [l, c] = Tt.useState(!1), f = (p) => (p.stopPropagation(), c(!0), a(!0)), d = () => {
    c(!1), a(!1);
  };
  return OT(({}, p) => {
    vb.damp(r.current.material, "zoom", l ? 1.2 : 1, 0.2, p);
  }), /* @__PURE__ */ en.jsx(
    BW,
    {
      onClick: () => {
        n && window.open(n, e);
      },
      radius: 0.04,
      scale: [4 / 3, 3 / 3],
      ref: r,
      url: t,
      transparent: !0,
      side: Ps,
      onPointerOver: f,
      onPointerOut: d,
      ...s
    }
  );
}
const yZ = ({
  videos: n,
  speed: t,
  position: e
}) => {
  const a = n.length, s = 2 * Math.PI / a, r = Tt.useRef(null), l = Tt.useRef(null), [c, f] = Tt.useState(!1), d = wW(), p = Tt.useRef(0), m = Tt.useRef(1), g = t;
  return OT(() => {
    if (!l.current) return;
    const y = d.offset - p.current, x = y > 0 ? 1 : y < 0 ? -1 : 0;
    x !== 0 && (m.current = x), p.current = d.offset, Math.abs(d.delta) > 1e-4 && (l.current.rotation.y += d.delta * 5 * x), l.current.rotation.y += c ? 2e-3 * m.current : g * m.current;
  }), Ey(() => {
    FE.timeline({}).from(".word", {
      yPercent: 100,
      duration: 0.3,
      ease: "power1.inOut",
      stagger: {
        each: 0.1,
        from: "random"
      }
    }).from("[data-canvas]", {
      opacity: 0,
      duration: 0.01
    }).to(
      r.current.rotation,
      {
        x: Math.PI / 8,
        z: Math.PI / 8,
        duration: 3,
        ease: "back.out"
      },
      "<"
    );
  }, []), /* @__PURE__ */ en.jsx(
    "group",
    {
      ref: r,
      position: [e[0], e[1], e[2]],
      rotation: [Math.PI / 2, 0, 0],
      children: /* @__PURE__ */ en.jsx("group", { ref: l, children: n.map((y, x) => {
        const M = x * s, v = 1 * Math.cos(M), S = 1 * Math.sin(M);
        return /* @__PURE__ */ en.jsx("group", { position: [v, 0, S], rotation: [0, -M, 0], children: /* @__PURE__ */ en.jsx(
          _Z,
          {
            fhover: c,
            setfHover: f,
            image: y.image,
            target: y.target,
            url: y.url
          }
        ) }, x);
      }) })
    }
  );
}, xZ = ({
  images: n,
  lines: t,
  speed: e,
  postion: i,
  zoom: a = 1.8
}) => (Ey(() => {
  new vZ("[data-text]", {
    split: "words"
  });
}, []), /* @__PURE__ */ en.jsxs("div", { className: "relative h-screen overflow-hidden", children: [
  /* @__PURE__ */ en.jsx("div", { className: "absolute custom-text top-0 left-0 flex flex-col items-center justify-center w-screen h-full space-y-10 text-6xl uppercase translate-x-1 md:space-y-0 sm:text-6xl md:text-7xl lg:text-8xl xl:text-9xl", children: t.map((s, r) => /* @__PURE__ */ en.jsx("div", { children: /* @__PURE__ */ en.jsx(
    "div",
    {
      className: "overflow-hidden  font-extrabold uppercase h-[60px] sm:h-[60px] md:h-[72px] lg:h-24 xl:h-32",
      "data-text": !0,
      children: s
    }
  ) }, r)) }),
  /* @__PURE__ */ en.jsx("div", { className: "absolute top-0 w-full h-full", children: /* @__PURE__ */ en.jsx(
    $k,
    {
      "data-canvas": !0,
      camera: {
        zoom: a
      },
      className: "absolute inset-0 top-0 left-0",
      children: /* @__PURE__ */ en.jsx(
        DW,
        {
          infinite: !0,
          pages: 2,
          horizontal: !0,
          style: {
            overflow: "hidden"
          },
          children: /* @__PURE__ */ en.jsx(yZ, { speed: e, position: i, videos: n })
        }
      )
    }
  ) })
] }));
window.addEventListener("DOMContentLoaded", () => {
  const n = window.APP_IMAGES ?? [], t = window.APP_LINES ?? [], e = window.APP_SPEED ?? 0.01, i = window.APP_POSITION ?? [0, 0, 0], a = window.APP_ZOOM ?? 1.8, s = window.APP_CONTAINER_ID || "my-app", r = document.getElementById(s);
  if (!r) {
    console.error(
      `[App] Container element with id "${s}" not found.`
    );
    return;
  }
  e6.createRoot(r).render(
    /* @__PURE__ */ en.jsx(Tt.StrictMode, { children: /* @__PURE__ */ en.jsx(
      xZ,
      {
        zoom: a,
        images: n,
        lines: t,
        speed: e,
        postion: i
      }
    ) })
  );
});
